{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"assert--index/","title":"Assert package","text":"<p>Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the <code>debug</code> flag, check out <code>Assert</code>. For assertions that are always enabled, check out <code>Fact</code>.</p>"},{"location":"assert--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Assert</li> <li>primitive Fact</li> </ul>"},{"location":"assert-Assert/","title":"Assert","text":"<p>[Source]</p> <p>This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error.</p> <pre><code>primitive val Assert\n</code></pre>"},{"location":"assert-Assert/#constructors","title":"Constructors","text":""},{"location":"assert-Assert/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Assert val^\n</code></pre>"},{"location":"assert-Assert/#returns","title":"Returns","text":"<ul> <li>Assert val^</li> </ul>"},{"location":"assert-Assert/#public-functions","title":"Public Functions","text":""},{"location":"assert-Assert/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ntest: Bool val,\nmsg: String val = \"\")\n: None val ?\n</code></pre>"},{"location":"assert-Assert/#parameters","title":"Parameters","text":"<ul> <li>test: Bool val</li> <li>msg: String val = \"\"</li> </ul>"},{"location":"assert-Assert/#returns_1","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"assert-Assert/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Assert val)\n: Bool val\n</code></pre>"},{"location":"assert-Assert/#parameters_1","title":"Parameters","text":"<ul> <li>that: Assert val</li> </ul>"},{"location":"assert-Assert/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"assert-Assert/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Assert val)\n: Bool val\n</code></pre>"},{"location":"assert-Assert/#parameters_2","title":"Parameters","text":"<ul> <li>that: Assert val</li> </ul>"},{"location":"assert-Assert/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"assert-Fact/","title":"Fact","text":"<p>[Source]</p> <p>This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error.</p> <pre><code>primitive val Fact\n</code></pre>"},{"location":"assert-Fact/#constructors","title":"Constructors","text":""},{"location":"assert-Fact/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Fact val^\n</code></pre>"},{"location":"assert-Fact/#returns","title":"Returns","text":"<ul> <li>Fact val^</li> </ul>"},{"location":"assert-Fact/#public-functions","title":"Public Functions","text":""},{"location":"assert-Fact/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ntest: Bool val,\nmsg: String val = \"\")\n: None val ?\n</code></pre>"},{"location":"assert-Fact/#parameters","title":"Parameters","text":"<ul> <li>test: Bool val</li> <li>msg: String val = \"\"</li> </ul>"},{"location":"assert-Fact/#returns_1","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"assert-Fact/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Fact val)\n: Bool val\n</code></pre>"},{"location":"assert-Fact/#parameters_1","title":"Parameters","text":"<ul> <li>that: Fact val</li> </ul>"},{"location":"assert-Fact/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"assert-Fact/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Fact val)\n: Bool val\n</code></pre>"},{"location":"assert-Fact/#parameters_2","title":"Parameters","text":"<ul> <li>that: Fact val</li> </ul>"},{"location":"assert-Fact/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"buffered--index/","title":"Buffered Package","text":"<p>The Buffered package provides two classes, <code>Writer</code> and <code>Reader</code>, for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats.</p>"},{"location":"buffered--index/#example-program","title":"Example program","text":"<pre><code>use \"buffered\"\nactor Main\nnew create(env: Env) =&gt;\nlet reader = Reader\nlet writer = Writer\nwriter.u32_be(42)\nwriter.f32_be(3.14)\nlet b = recover iso Array[U8] end\nfor chunk in writer.done().values() do\nb.append(chunk)\nend\nreader.append(consume b)\ntry\nenv.out.print(reader.u32_be()?.string()) // prints 42\nenv.out.print(reader.f32_be()?.string()) // prints 3.14\nend\n</code></pre>"},{"location":"buffered--index/#public-types","title":"Public Types","text":"<ul> <li>class Reader</li> <li>class Writer</li> </ul>"},{"location":"buffered-Reader/","title":"Reader","text":"<p>[Source]</p> <p>Store network data and provide a parsing interface.</p> <p><code>Reader</code> provides a way to extract typed data from a sequence of bytes. The <code>Reader</code> manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the <code>Reader</code> using the <code>append</code> method, and typed data is extracted using the getter methods.</p> <p>For example, suppose we have a UDP-based network data protocol where messages consist of the following:</p> <ul> <li><code>list_size</code> - the number of items in the following list of items   as a big-endian 32-bit integer</li> <li>zero or more items of the following data:</li> <li>a big-endian 64-bit floating point number</li> <li>a string that starts with a big-endian 32-bit integer that     specifies the length of the string, followed by a number of     bytes that represent the string</li> </ul> <p>A message would be something like this:</p> <pre><code>[message_length][list_size][float1][string1][float2][string2]...\n</code></pre> <p>The following program uses a <code>Reader</code> to decode a message of this type and print them:</p> <pre><code>use \"buffered\"\nuse \"collections\"\nclass Notify is InputNotify\nlet _env: Env\nnew create(env: Env) =&gt;\n_env = env\nfun ref apply(data: Array[U8] iso) =&gt;\nlet rb = Reader\nrb.append(consume data)\ntry\nwhile true do\nlet len = rb.i32_be()?\nlet items = rb.i32_be()?.usize()\nfor range in Range(0, items) do\nlet f = rb.f32_be()?\nlet str_len = rb.i32_be()?.usize()\nlet str = String.from_array(rb.block(str_len)?)\n_env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\")\nend\nend\nend\nactor Main\nnew create(env: Env) =&gt;\nenv.input(recover Notify(env) end, 1024)\n</code></pre> <pre><code>class ref Reader\n</code></pre>"},{"location":"buffered-Reader/#constructors","title":"Constructors","text":""},{"location":"buffered-Reader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: Reader iso^\n</code></pre>"},{"location":"buffered-Reader/#returns","title":"Returns","text":"<ul> <li>Reader iso^</li> </ul>"},{"location":"buffered-Reader/#public-functions","title":"Public Functions","text":""},{"location":"buffered-Reader/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of available bytes.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"buffered-Reader/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"buffered-Reader/#clear","title":"clear","text":"<p>[Source]</p> <p>Discard all pending data.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"buffered-Reader/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Reader/#append","title":"append","text":"<p>[Source]</p> <p>Add a chunk of data.</p> <pre><code>fun ref append(\ndata: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"buffered-Reader/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"buffered-Reader/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Reader/#skip","title":"skip","text":"<p>[Source]</p> <p>Skip n bytes.</p> <pre><code>fun ref skip(\nn: USize val)\n: None val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_1","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"buffered-Reader/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"buffered-Reader/#block","title":"block","text":"<p>[Source]</p> <p>Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the <code>Reader</code>.</p> <pre><code>fun ref block(\nlen: USize val)\n: Array[U8 val] iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_2","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"buffered-Reader/#returns_5","title":"Returns","text":"<ul> <li>Array[U8 val] iso^ ?</li> </ul>"},{"location":"buffered-Reader/#read_until","title":"read_until","text":"<p>[Source]</p> <p>Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n.</p> <pre><code>fun ref read_until(\nseparator: U8 val)\n: Array[U8 val] iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_3","title":"Parameters","text":"<ul> <li>separator: U8 val</li> </ul>"},{"location":"buffered-Reader/#returns_6","title":"Returns","text":"<ul> <li>Array[U8 val] iso^ ?</li> </ul>"},{"location":"buffered-Reader/#line","title":"line","text":"<p>[Source]</p> <p>Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set <code>keep_line_breaks</code> to <code>true</code> to keep the line breaks in the returned line.</p> <pre><code>fun ref line(\nkeep_line_breaks: Bool val = false)\n: String iso^ ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_4","title":"Parameters","text":"<ul> <li>keep_line_breaks: Bool val = false</li> </ul>"},{"location":"buffered-Reader/#returns_7","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"buffered-Reader/#u8","title":"u8","text":"<p>[Source]</p> <p>Get a U8. Raise an error if there isn't enough data.</p> <pre><code>fun ref u8()\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_8","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#i8","title":"i8","text":"<p>[Source]</p> <p>Get an I8.</p> <pre><code>fun ref i8()\n: I8 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_9","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"buffered-Reader/#u16_be","title":"u16_be","text":"<p>[Source]</p> <p>Get a big-endian U16.</p> <pre><code>fun ref u16_be()\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_10","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#u16_le","title":"u16_le","text":"<p>[Source]</p> <p>Get a little-endian U16.</p> <pre><code>fun ref u16_le()\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_11","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#i16_be","title":"i16_be","text":"<p>[Source]</p> <p>Get a big-endian I16.</p> <pre><code>fun ref i16_be()\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_12","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#i16_le","title":"i16_le","text":"<p>[Source]</p> <p>Get a little-endian I16.</p> <pre><code>fun ref i16_le()\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_13","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#u32_be","title":"u32_be","text":"<p>[Source]</p> <p>Get a big-endian U32.</p> <pre><code>fun ref u32_be()\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_14","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#u32_le","title":"u32_le","text":"<p>[Source]</p> <p>Get a little-endian U32.</p> <pre><code>fun ref u32_le()\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_15","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#i32_be","title":"i32_be","text":"<p>[Source]</p> <p>Get a big-endian I32.</p> <pre><code>fun ref i32_be()\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_16","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#i32_le","title":"i32_le","text":"<p>[Source]</p> <p>Get a little-endian I32.</p> <pre><code>fun ref i32_le()\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_17","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#u64_be","title":"u64_be","text":"<p>[Source]</p> <p>Get a big-endian U64.</p> <pre><code>fun ref u64_be()\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_18","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#u64_le","title":"u64_le","text":"<p>[Source]</p> <p>Get a little-endian U64.</p> <pre><code>fun ref u64_le()\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_19","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#i64_be","title":"i64_be","text":"<p>[Source]</p> <p>Get a big-endian I64.</p> <pre><code>fun ref i64_be()\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_20","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#i64_le","title":"i64_le","text":"<p>[Source]</p> <p>Get a little-endian I64.</p> <pre><code>fun ref i64_le()\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_21","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#u128_be","title":"u128_be","text":"<p>[Source]</p> <p>Get a big-endian U128.</p> <pre><code>fun ref u128_be()\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_22","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#u128_le","title":"u128_le","text":"<p>[Source]</p> <p>Get a little-endian U128.</p> <pre><code>fun ref u128_le()\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_23","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#i128_be","title":"i128_be","text":"<p>[Source]</p> <p>Get a big-endian I129.</p> <pre><code>fun ref i128_be()\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_24","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#i128_le","title":"i128_le","text":"<p>[Source]</p> <p>Get a little-endian I128.</p> <pre><code>fun ref i128_le()\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_25","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#f32_be","title":"f32_be","text":"<p>[Source]</p> <p>Get a big-endian F32.</p> <pre><code>fun ref f32_be()\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_26","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#f32_le","title":"f32_le","text":"<p>[Source]</p> <p>Get a little-endian F32.</p> <pre><code>fun ref f32_le()\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_27","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#f64_be","title":"f64_be","text":"<p>[Source]</p> <p>Get a big-endian F64.</p> <pre><code>fun ref f64_be()\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_28","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#f64_le","title":"f64_le","text":"<p>[Source]</p> <p>Get a little-endian F64.</p> <pre><code>fun ref f64_le()\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_29","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u8","title":"peek_u8","text":"<p>[Source]</p> <p>Peek at a U8 at the given offset. Raise an error if there isn't enough data.</p> <pre><code>fun box peek_u8(\noffset: USize val = 0)\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_5","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_30","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i8","title":"peek_i8","text":"<p>[Source]</p> <p>Peek at an I8.</p> <pre><code>fun box peek_i8(\noffset: USize val = 0)\n: I8 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_6","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_31","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u16_be","title":"peek_u16_be","text":"<p>[Source]</p> <p>Peek at a big-endian U16.</p> <pre><code>fun box peek_u16_be(\noffset: USize val = 0)\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_7","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_32","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u16_le","title":"peek_u16_le","text":"<p>[Source]</p> <p>Peek at a little-endian U16.</p> <pre><code>fun box peek_u16_le(\noffset: USize val = 0)\n: U16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_8","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_33","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i16_be","title":"peek_i16_be","text":"<p>[Source]</p> <p>Peek at a big-endian I16.</p> <pre><code>fun box peek_i16_be(\noffset: USize val = 0)\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_34","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i16_le","title":"peek_i16_le","text":"<p>[Source]</p> <p>Peek at a little-endian I16.</p> <pre><code>fun box peek_i16_le(\noffset: USize val = 0)\n: I16 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_35","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u32_be","title":"peek_u32_be","text":"<p>[Source]</p> <p>Peek at a big-endian U32.</p> <pre><code>fun box peek_u32_be(\noffset: USize val = 0)\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_11","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_36","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u32_le","title":"peek_u32_le","text":"<p>[Source]</p> <p>Peek at a little-endian U32.</p> <pre><code>fun box peek_u32_le(\noffset: USize val = 0)\n: U32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_37","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i32_be","title":"peek_i32_be","text":"<p>[Source]</p> <p>Peek at a big-endian I32.</p> <pre><code>fun box peek_i32_be(\noffset: USize val = 0)\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_13","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_38","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i32_le","title":"peek_i32_le","text":"<p>[Source]</p> <p>Peek at a little-endian I32.</p> <pre><code>fun box peek_i32_le(\noffset: USize val = 0)\n: I32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_14","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_39","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u64_be","title":"peek_u64_be","text":"<p>[Source]</p> <p>Peek at a big-endian U64.</p> <pre><code>fun box peek_u64_be(\noffset: USize val = 0)\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_15","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_40","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u64_le","title":"peek_u64_le","text":"<p>[Source]</p> <p>Peek at a little-endian U64.</p> <pre><code>fun box peek_u64_le(\noffset: USize val = 0)\n: U64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_16","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_41","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i64_be","title":"peek_i64_be","text":"<p>[Source]</p> <p>Peek at a big-endian I64.</p> <pre><code>fun box peek_i64_be(\noffset: USize val = 0)\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_17","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_42","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i64_le","title":"peek_i64_le","text":"<p>[Source]</p> <p>Peek at a little-endian I64.</p> <pre><code>fun box peek_i64_le(\noffset: USize val = 0)\n: I64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_18","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_43","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u128_be","title":"peek_u128_be","text":"<p>[Source]</p> <p>Peek at a big-endian U128.</p> <pre><code>fun box peek_u128_be(\noffset: USize val = 0)\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_19","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_44","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_u128_le","title":"peek_u128_le","text":"<p>[Source]</p> <p>Peek at a little-endian U128.</p> <pre><code>fun box peek_u128_le(\noffset: USize val = 0)\n: U128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_20","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_45","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i128_be","title":"peek_i128_be","text":"<p>[Source]</p> <p>Peek at a big-endian I129.</p> <pre><code>fun box peek_i128_be(\noffset: USize val = 0)\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_21","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_46","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_i128_le","title":"peek_i128_le","text":"<p>[Source]</p> <p>Peek at a little-endian I128.</p> <pre><code>fun box peek_i128_le(\noffset: USize val = 0)\n: I128 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_22","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_47","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f32_be","title":"peek_f32_be","text":"<p>[Source]</p> <p>Peek at a big-endian F32.</p> <pre><code>fun box peek_f32_be(\noffset: USize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_23","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_48","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f32_le","title":"peek_f32_le","text":"<p>[Source]</p> <p>Peek at a little-endian F32.</p> <pre><code>fun box peek_f32_le(\noffset: USize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_24","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_49","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f64_be","title":"peek_f64_be","text":"<p>[Source]</p> <p>Peek at a big-endian F64.</p> <pre><code>fun box peek_f64_be(\noffset: USize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_25","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_50","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#peek_f64_le","title":"peek_f64_le","text":"<p>[Source]</p> <p>Peek at a little-endian F64.</p> <pre><code>fun box peek_f64_le(\noffset: USize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_26","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_51","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"buffered-Reader/#private-functions","title":"Private Functions","text":""},{"location":"buffered-Reader/#_byte","title":"_byte","text":"<p>[Source]</p> <p>Get a single byte.</p> <pre><code>fun ref _byte()\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_52","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#_peek_byte","title":"_peek_byte","text":"<p>[Source]</p> <p>Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available.</p> <pre><code>fun box _peek_byte(\noffset: USize val = 0)\n: U8 val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_27","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"buffered-Reader/#returns_53","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"buffered-Reader/#_distance_of","title":"_distance_of","text":"<p>[Source]</p> <p>Get the distance to the first occurrence of the given byte</p> <pre><code>fun ref _distance_of(\nbyte: U8 val)\n: USize val ?\n</code></pre>"},{"location":"buffered-Reader/#parameters_28","title":"Parameters","text":"<ul> <li>byte: U8 val</li> </ul>"},{"location":"buffered-Reader/#returns_54","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"buffered-Reader/#_search_length","title":"_search_length","text":"<p>[Source]</p> <p>Get the length of a pending line. Raise an error if there is no pending line.</p> <pre><code>fun ref _search_length()\n: USize val ?\n</code></pre>"},{"location":"buffered-Reader/#returns_55","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"buffered-Writer/","title":"Writer","text":"<p>[Source]</p> <p>A buffer for building messages.</p> <p><code>Writer</code> provides an way to create byte sequences using common data encodings. The <code>Writer</code> manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call <code>done()</code> to get the message's <code>ByteSeq</code>s, and you can then reuse the <code>Writer</code> for creating a new message.</p> <p>For example, suppose we have a TCP-based network data protocol where messages consist of the following:</p> <ul> <li><code>message_length</code> - the number of bytes in the message as a   big-endian 32-bit integer</li> <li><code>list_size</code> - the number of items in the following list of items   as a big-endian 32-bit integer</li> <li>zero or more items of the following data:</li> <li>a big-endian 64-bit floating point number</li> <li>a string that starts with a big-endian 32-bit integer that     specifies the length of the string, followed by a number of     bytes that represent the string</li> </ul> <p>A message would be something like this:</p> <pre><code>[message_length][list_size][float1][string1][float2][string2]...\n</code></pre> <p>The following program uses a write buffer to encode an array of tuples as a message of this type:</p> <pre><code>use \"buffered\"\nactor Main\nnew create(env: Env) =&gt;\nlet wb = Writer\nlet messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")]\n[(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]]\nfor items in messages.values() do\nwb.i32_be((items.size() / 2).i32())\nfor (f, s) in items.values() do\nwb.f32_be(f)\nwb.i32_be(s.size().i32())\nwb.write(s.array())\nend\nlet wb_msg = Writer\nwb_msg.i32_be(wb.size().i32())\nwb_msg.writev(wb.done())\nenv.out.writev(wb_msg.done())\nend\n</code></pre> <pre><code>class ref Writer\n</code></pre>"},{"location":"buffered-Writer/#constructors","title":"Constructors","text":""},{"location":"buffered-Writer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: Writer iso^\n</code></pre>"},{"location":"buffered-Writer/#returns","title":"Returns","text":"<ul> <li>Writer iso^</li> </ul>"},{"location":"buffered-Writer/#public-functions","title":"Public Functions","text":""},{"location":"buffered-Writer/#reserve_chunks","title":"reserve_chunks","text":"<p>[Source]</p> <p>Reserve space for size' chunks.</p> <p>This needs to be recalled after every call to <code>done</code> as <code>done</code> resets the chunks.</p> <pre><code>fun ref reserve_chunks(\nsize': USize val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters","title":"Parameters","text":"<ul> <li>size': USize val</li> </ul>"},{"location":"buffered-Writer/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#reserve_current","title":"reserve_current","text":"<p>[Source]</p> <p>Reserve space for size bytes in <code>_current</code>.</p> <pre><code>fun ref reserve_current(\nsize': USize val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_1","title":"Parameters","text":"<ul> <li>size': USize val</li> </ul>"},{"location":"buffered-Writer/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"buffered-Writer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"buffered-Writer/#u8","title":"u8","text":"<p>[Source]</p> <p>Write a byte to the buffer.</p> <pre><code>fun ref u8(\ndata: U8 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_2","title":"Parameters","text":"<ul> <li>data: U8 val</li> </ul>"},{"location":"buffered-Writer/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u16_le","title":"u16_le","text":"<p>[Source]</p> <p>Write a U16 to the buffer in little-endian byte order.</p> <pre><code>fun ref u16_le(\ndata: U16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_3","title":"Parameters","text":"<ul> <li>data: U16 val</li> </ul>"},{"location":"buffered-Writer/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u16_be","title":"u16_be","text":"<p>[Source]</p> <p>Write a U16 to the buffer in big-endian byte order.</p> <pre><code>fun ref u16_be(\ndata: U16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_4","title":"Parameters","text":"<ul> <li>data: U16 val</li> </ul>"},{"location":"buffered-Writer/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i16_le","title":"i16_le","text":"<p>[Source]</p> <p>Write an I16 to the buffer in little-endian byte order.</p> <pre><code>fun ref i16_le(\ndata: I16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_5","title":"Parameters","text":"<ul> <li>data: I16 val</li> </ul>"},{"location":"buffered-Writer/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i16_be","title":"i16_be","text":"<p>[Source]</p> <p>Write an I16 to the buffer in big-endian byte order.</p> <pre><code>fun ref i16_be(\ndata: I16 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_6","title":"Parameters","text":"<ul> <li>data: I16 val</li> </ul>"},{"location":"buffered-Writer/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u32_le","title":"u32_le","text":"<p>[Source]</p> <p>Write a U32 to the buffer in little-endian byte order.</p> <pre><code>fun ref u32_le(\ndata: U32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_7","title":"Parameters","text":"<ul> <li>data: U32 val</li> </ul>"},{"location":"buffered-Writer/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u32_be","title":"u32_be","text":"<p>[Source]</p> <p>Write a U32 to the buffer in big-endian byte order.</p> <pre><code>fun ref u32_be(\ndata: U32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_8","title":"Parameters","text":"<ul> <li>data: U32 val</li> </ul>"},{"location":"buffered-Writer/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i32_le","title":"i32_le","text":"<p>[Source]</p> <p>Write an I32 to the buffer in little-endian byte order.</p> <pre><code>fun ref i32_le(\ndata: I32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_9","title":"Parameters","text":"<ul> <li>data: I32 val</li> </ul>"},{"location":"buffered-Writer/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i32_be","title":"i32_be","text":"<p>[Source]</p> <p>Write an I32 to the buffer in big-endian byte order.</p> <pre><code>fun ref i32_be(\ndata: I32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_10","title":"Parameters","text":"<ul> <li>data: I32 val</li> </ul>"},{"location":"buffered-Writer/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f32_le","title":"f32_le","text":"<p>[Source]</p> <p>Write an F32 to the buffer in little-endian byte order.</p> <pre><code>fun ref f32_le(\ndata: F32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_11","title":"Parameters","text":"<ul> <li>data: F32 val</li> </ul>"},{"location":"buffered-Writer/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f32_be","title":"f32_be","text":"<p>[Source]</p> <p>Write an F32 to the buffer in big-endian byte order.</p> <pre><code>fun ref f32_be(\ndata: F32 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_12","title":"Parameters","text":"<ul> <li>data: F32 val</li> </ul>"},{"location":"buffered-Writer/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u64_le","title":"u64_le","text":"<p>[Source]</p> <p>Write a U64 to the buffer in little-endian byte order.</p> <pre><code>fun ref u64_le(\ndata: U64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_13","title":"Parameters","text":"<ul> <li>data: U64 val</li> </ul>"},{"location":"buffered-Writer/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u64_be","title":"u64_be","text":"<p>[Source]</p> <p>Write a U64 to the buffer in big-endian byte order.</p> <pre><code>fun ref u64_be(\ndata: U64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_14","title":"Parameters","text":"<ul> <li>data: U64 val</li> </ul>"},{"location":"buffered-Writer/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i64_le","title":"i64_le","text":"<p>[Source]</p> <p>Write an I64 to the buffer in little-endian byte order.</p> <pre><code>fun ref i64_le(\ndata: I64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_15","title":"Parameters","text":"<ul> <li>data: I64 val</li> </ul>"},{"location":"buffered-Writer/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i64_be","title":"i64_be","text":"<p>[Source]</p> <p>Write an I64 to the buffer in big-endian byte order.</p> <pre><code>fun ref i64_be(\ndata: I64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_16","title":"Parameters","text":"<ul> <li>data: I64 val</li> </ul>"},{"location":"buffered-Writer/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f64_le","title":"f64_le","text":"<p>[Source]</p> <p>Write an F64 to the buffer in little-endian byte order.</p> <pre><code>fun ref f64_le(\ndata: F64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_17","title":"Parameters","text":"<ul> <li>data: F64 val</li> </ul>"},{"location":"buffered-Writer/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#f64_be","title":"f64_be","text":"<p>[Source]</p> <p>Write an F64 to the buffer in big-endian byte order.</p> <pre><code>fun ref f64_be(\ndata: F64 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_18","title":"Parameters","text":"<ul> <li>data: F64 val</li> </ul>"},{"location":"buffered-Writer/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u128_le","title":"u128_le","text":"<p>[Source]</p> <p>Write a U128 to the buffer in little-endian byte order.</p> <pre><code>fun ref u128_le(\ndata: U128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_19","title":"Parameters","text":"<ul> <li>data: U128 val</li> </ul>"},{"location":"buffered-Writer/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#u128_be","title":"u128_be","text":"<p>[Source]</p> <p>Write a U128 to the buffer in big-endian byte order.</p> <pre><code>fun ref u128_be(\ndata: U128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_20","title":"Parameters","text":"<ul> <li>data: U128 val</li> </ul>"},{"location":"buffered-Writer/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i128_le","title":"i128_le","text":"<p>[Source]</p> <p>Write an I128 to the buffer in little-endian byte order.</p> <pre><code>fun ref i128_le(\ndata: I128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_21","title":"Parameters","text":"<ul> <li>data: I128 val</li> </ul>"},{"location":"buffered-Writer/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#i128_be","title":"i128_be","text":"<p>[Source]</p> <p>Write an I128 to the buffer in big-endian byte order.</p> <pre><code>fun ref i128_be(\ndata: I128 val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_22","title":"Parameters","text":"<ul> <li>data: I128 val</li> </ul>"},{"location":"buffered-Writer/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#write","title":"write","text":"<p>[Source]</p> <p>Write a ByteSeq to the buffer.</p> <pre><code>fun ref write(\ndata: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_23","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"buffered-Writer/#returns_25","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#writev","title":"writev","text":"<p>[Source]</p> <p>Write ByteSeqs to the buffer.</p> <pre><code>fun ref writev(\ndata: ByteSeqIter val)\n: None val\n</code></pre>"},{"location":"buffered-Writer/#parameters_24","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"buffered-Writer/#returns_26","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"buffered-Writer/#done","title":"done","text":"<p>[Source]</p> <p>Return an array of buffered ByteSeqs and reset the Writer's buffer.</p> <pre><code>fun ref done()\n: Array[(String val | Array[U8 val] val)] iso^\n</code></pre>"},{"location":"buffered-Writer/#returns_27","title":"Returns","text":"<ul> <li>Array[(String val | Array[U8 val] val)] iso^</li> </ul>"},{"location":"buffered-Writer/#private-functions","title":"Private Functions","text":""},{"location":"buffered-Writer/#_append_current","title":"_append_current","text":"<p>[Source]</p> <pre><code>fun ref _append_current()\n: None val\n</code></pre>"},{"location":"buffered-Writer/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin--index/","title":"Builtin package","text":"<p>The builtin package is home to the following standard library members:</p> <ol> <li>Types the compiler needs to know exist, such as None.</li> <li>Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32.</li> <li>Any types needed by others in builtin.</li> </ol> <p>The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.</p>"},{"location":"builtin--index/#public-types","title":"Public Types","text":"<ul> <li>primitive AmbientAuth</li> <li>interface Any</li> <li>class Array</li> <li>class ArrayKeys</li> <li>class ArrayPairs</li> <li>class ArrayValues</li> <li>primitive AsioEvent</li> <li>type AsioEventID</li> <li>trait AsioEventNotify</li> <li>primitive Bool</li> <li>type ByteSeq</li> <li>interface ByteSeqIter</li> <li>interface Comparable</li> <li>type Compare</li> <li>interface DisposableActor</li> <li>primitive DoNotOptimise</li> <li>class Env</li> <li>primitive Equal</li> <li>interface Equatable</li> <li>primitive F32</li> <li>primitive F64</li> <li>type Float</li> <li>trait FloatingPoint</li> <li>primitive Greater</li> <li>interface HasEq</li> <li>primitive I128</li> <li>primitive I16</li> <li>primitive I32</li> <li>primitive I64</li> <li>primitive I8</li> <li>primitive ILong</li> <li>primitive ISize</li> <li>interface InputNotify</li> <li>interface InputStream</li> <li>type Int</li> <li>trait Integer</li> <li>interface Iterator</li> <li>primitive Less</li> <li>primitive None</li> <li>struct NullablePointer</li> <li>type Number</li> <li>interface OutStream</li> <li>primitive Platform</li> <li>struct Pointer</li> <li>interface ReadElement</li> <li>interface ReadSeq</li> <li>trait Real</li> <li>struct RuntimeOptions</li> <li>interface Seq</li> <li>type Signed</li> <li>trait SignedInteger</li> <li>interface SourceLoc</li> <li>actor StdStream</li> <li>actor Stdin</li> <li>class String</li> <li>class StringBytes</li> <li>class StringRunes</li> <li>interface Stringable</li> <li>primitive U128</li> <li>primitive U16</li> <li>primitive U32</li> <li>primitive U64</li> <li>primitive U8</li> <li>primitive ULong</li> <li>primitive USize</li> <li>type Unsigned</li> <li>trait UnsignedInteger</li> </ul>"},{"location":"builtin--index/#private-types","title":"Private Types","text":"<ul> <li>trait _ArithmeticConvertible</li> <li>trait _PartialArithmetic</li> <li>primitive _SignedArithmetic</li> <li>primitive _SignedCheckedArithmetic</li> <li>primitive _SignedPartialArithmetic</li> <li>primitive _SignedUnsafeArithmetic</li> <li>primitive _ToString</li> <li>primitive _UTF32Encoder</li> <li>primitive _UnsignedCheckedArithmetic</li> <li>primitive _UnsignedPartialArithmetic</li> </ul>"},{"location":"builtin-AmbientAuth/","title":"AmbientAuth","text":"<p>[Source]</p> <p>This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability.</p> <p>Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root.</p> <p>The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access.</p> <pre><code>primitive val AmbientAuth\n</code></pre>"},{"location":"builtin-AmbientAuth/#constructors","title":"Constructors","text":""},{"location":"builtin-AmbientAuth/#_create","title":"_create","text":"<p>[Source]</p> <pre><code>new val _create()\n: AmbientAuth val^\n</code></pre>"},{"location":"builtin-AmbientAuth/#returns","title":"Returns","text":"<ul> <li>AmbientAuth val^</li> </ul>"},{"location":"builtin-AmbientAuth/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AmbientAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AmbientAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: AmbientAuth val)\n: Bool val\n</code></pre>"},{"location":"builtin-AmbientAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: AmbientAuth val</li> </ul>"},{"location":"builtin-AmbientAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Any/","title":"Any","text":"<p>[Source] <pre><code>interface tag Any\n</code></pre></p>"},{"location":"builtin-Array/","title":"Array[A: A]","text":"<p>[Source]</p> <p>Contiguous, resizable memory to store elements of type A.</p>"},{"location":"builtin-Array/#usage","title":"Usage","text":"<p>Creating an Array of String: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n// array.size() == 3\n// array.space() &gt;= 3\n</code></pre></p> <p>Creating an empty Array of String, which may hold at least 10 elements before requesting more space: <pre><code>  let array = Array[String](10)\n// array.size() == 0\n// array.space() &gt;= 10\n</code></pre></p> <p>Accessing elements can be done via the <code>apply(i: USize): this-&gt;A ?</code> method. The provided index might be out of bounds so <code>apply</code> is partial and has to be called within a try-catch block or inside another partial method: <pre><code>  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\nlet is_second_element_wobat = try\n// indexes start from 0, so 1 is the second element\narray(1)? == \"wombat\"\nelse\nfalse\nend\n</code></pre></p> <p>Adding and removing elements to and from the end of the Array can be done via <code>push</code> and <code>pop</code> methods. You could treat the array as a LIFO stack using those methods: <pre><code>  while (array.size() &gt; 0) do\nlet elem = array.pop()?\n// do something with element\nend\n</code></pre></p> <p>Modifying the Array can be done via <code>update</code>, <code>insert</code> and <code>delete</code> methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary.</p> <p>Iterating over the elements of an Array can be done using the <code>values</code> method: <pre><code>  for element in array.values() do\n// do something with element\nend\n</code></pre></p>"},{"location":"builtin-Array/#memory-allocation","title":"Memory allocation","text":"<p>Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The <code>space()</code> method returns the number of elements an Array can hold. The <code>size()</code> method returns the number of elements the Array holds.</p> <p>Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size.</p> <p>When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements.</p> <p>Here's a few examples of the space allocated when initialising an Array with various number of elements:</p> size space 0 0 1 8 8 8 9 16 16 16 17 32 <p>Call the <code>compact()</code> method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space.</p> <pre><code>class ref Array[A: A] is\nSeq[A] ref\n</code></pre>"},{"location":"builtin-Array/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"builtin-Array/#constructors","title":"Constructors","text":""},{"location":"builtin-Array/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with zero elements, but space for len elements.</p> <pre><code>new ref create(\nlen: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#init","title":"init","text":"<p>[Source]</p> <p>Create an array of len elements, all initialised to the given value.</p> <pre><code>new ref init(\nfrom: A^,\nlen: USize val)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_1","title":"Parameters","text":"<ul> <li>from: A^</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_1","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Create an array from a C-style pointer and length. The contents are not copied. This must be done only with C-FFI functions that return pony_alloc'd memory. If a null pointer is given then an empty array is returned.</p> <pre><code>new ref from_cpointer(\nptr: Pointer[A] ref,\nlen: USize val,\nalloc: USize val = 0)\n: Array[A] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_2","title":"Parameters","text":"<ul> <li>ptr: Pointer[A] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_2","title":"Returns","text":"<ul> <li>Array[A] ref^</li> </ul>"},{"location":"builtin-Array/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Array/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Return the underlying C-style pointer.</p> <pre><code>fun box cpointer(\noffset: USize val = 0)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Array/#parameters_3","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_3","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Array/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements in the array.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the array.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Array/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically.</p> <pre><code>fun ref reserve(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_4","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#undefinedoptional-b-a-realb-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers.</p> <pre><code>fun ref undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val))](\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_5","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#read_u8optional-b-a-realb-val-u8-val","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U8 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_6","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_9","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#read_u16optional-b-a-realb-val-u8-val","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U16 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_7","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_10","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#read_u32optional-b-a-realb-val-u8-val","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U32 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_8","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_11","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#read_u64optional-b-a-realb-val-u8-val","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U64 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_12","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#read_u128optional-b-a-realb-val-u8-val","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Reads a U128 from offset. This is only allowed for an array of U8s.</p> <pre><code>fun box read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_10","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"builtin-Array/#returns_13","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun box apply(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Array/#parameters_11","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_14","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Array/#update_u8optional-b-a-realb-val-u8-val","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U8 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val,\nvalue: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_15","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-Array/#update_u16optional-b-a-realb-val-u8-val","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U16 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val,\nvalue: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_13","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_16","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-Array/#update_u32optional-b-a-realb-val-u8-val","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U32 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val,\nvalue: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_14","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_17","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Array/#update_u64optional-b-a-realb-val-u8-val","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U64 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val,\nvalue: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_15","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_18","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-Array/#update_u128optional-b-a-realb-val-u8-val","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Write a U128 at offset. This is only allowed for an array of U8s.</p> <pre><code>fun ref update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\noffset: USize val,\nvalue: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_16","title":"Parameters","text":"<ul> <li>offset: USize val</li> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_19","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-Array/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds.</p> <pre><code>fun ref update(\ni: USize val,\nvalue: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_17","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_20","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#insert","title":"insert","text":"<p>[Source]</p> <p>Insert an element into the array. Elements after this are moved up by one index, extending the array.</p> <p>When inserting right beyond the last element, at index <code>this.size()</code>, the element will be appended, similar to <code>push()</code>, an insert at index <code>0</code> prepends the value to the array. An insert into an index beyond <code>this.size()</code> raises an error.</p> <pre><code>let array = Array[U8](4)              // []\narray.insert(0, 0xDE)?                // prepend: [0xDE]\narray.insert(array.size(), 0xBE)?     // append:  [0xDE; 0xBE]\narray.insert(1, 0xAD)?                // insert:  [0xDE; 0xAD; 0xBE]\narray.insert(array.size() + 1, 0xEF)? // error\n</code></pre> <pre><code>fun ref insert(\ni: USize val,\nvalue: A)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_21","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned.</p> <pre><code>fun ref delete(\ni: USize val)\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Array/#returns_22","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_20","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the array to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new array nor copy elements.</p> <pre><code>fun ref trim_in_place(\nfrom: USize val = 0,\nto: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_21","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this array, covering <code>from</code> until <code>to</code>. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun val trim(\nfrom: USize val = 0,\nto: USize val = call)\n: Array[A] val\n</code></pre>"},{"location":"builtin-Array/#parameters_22","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_25","title":"Returns","text":"<ul> <li>Array[A] val</li> </ul>"},{"location":"builtin-Array/#chopoptional-b-a-any-send","title":"chop[optional B: (A &amp; Any #send)]","text":"<p>[Source]</p> <p>Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. The operation does not allocate a new array pointer nor copy elements.</p> <p>The entry type must be sendable so that the two halves can be isolated. Otherwise, two entries may have shared references to mutable data, or even to each other, such as in the code below:</p> <pre><code>  class Example\nvar other: (Example | None) = None\nlet arr: Array[Example] iso = recover\nlet obj1 = Example\nlet obj2 = Example\nobj1.other = obj2\nobj2.other = obj1\n[obj1; obj2]\nend\n</code></pre> <pre><code>fun iso chop[optional B: (A &amp; Any #send)](\nsplit_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_23","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-Array/#returns_26","title":"Returns","text":"<ul> <li>(Array[A] iso^ , Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements.</p> <pre><code>fun iso unchop(\nb: Array[A] iso)\n: ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)\n</code></pre>"},{"location":"builtin-Array/#parameters_24","title":"Parameters","text":"<ul> <li>b: Array[A] iso</li> </ul>"},{"location":"builtin-Array/#returns_27","title":"Returns","text":"<ul> <li>((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)</li> </ul>"},{"location":"builtin-Array/#copy_fromoptional-b-a-realb-val-u8-val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8].</p> <pre><code>fun ref copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)](\nsrc: Array[U8 val] box,\nsrc_idx: USize val,\ndst_idx: USize val,\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_25","title":"Parameters","text":"<ul> <li>src: Array[U8 val] box</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#copy_to","title":"copy_to","text":"<p>[Source]</p> <p>Copy len elements from this(src_idx) to dst(dst_idx).</p> <pre><code>fun box copy_to(\ndst: Array[this-&gt;A!] ref,\nsrc_idx: USize val,\ndst_idx: USize val,\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_26","title":"Parameters","text":"<ul> <li>dst: Array[this-&gt;A!] ref</li> <li>src_idx: USize val</li> <li>dst_idx: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Array/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove n elements from the array, beginning at index i.</p> <pre><code>fun ref remove(\ni: USize val,\nn: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_27","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>n: USize val</li> </ul>"},{"location":"builtin-Array/#returns_30","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the array.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_31","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u8optional-b-a-realb-val-u8-val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U8 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)](\nvalue: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_28","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-Array/#returns_32","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u16optional-b-a-realb-val-u8-val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U16 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)](\nvalue: U16 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_29","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-Array/#returns_33","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u32optional-b-a-realb-val-u8-val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U32 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)](\nvalue: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_30","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-Array/#returns_34","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u64optional-b-a-realb-val-u8-val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U64 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)](\nvalue: U64 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_31","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-Array/#returns_35","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push_u128optional-b-a-realb-val-u8-val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]","text":"<p>[Source]</p> <p>Add a U128 to the end of the array. This is only allowed for an array of U8s.</p> <pre><code>fun ref push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)](\nvalue: U128 val)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_32","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-Array/#returns_36","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the end of the array.</p> <pre><code>fun ref push(\nvalue: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_33","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_37","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove an element from the end of the array. The removed element is returned.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_38","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Add an element to the beginning of the array.</p> <pre><code>fun ref unshift(\nvalue: A)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_34","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Array/#returns_39","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#shift","title":"shift","text":"<p>[Source]</p> <p>Remove an element from the beginning of the array. The removed element is returned.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Array/#returns_40","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Array/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\nseq: (ReadSeq[A] box &amp; ReadElement[A^] box),\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_35","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the array, starting from the given offset.</p> <pre><code>fun ref concat(\niter: Iterator[A^] ref,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_36","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Array/#returns_42","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#find","title":"find","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the beginning of the array, starting at <code>offset</code> and examining higher indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the first element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box find(\nvalue: A!,\noffset: USize val = 0,\nnth: USize val = 0,\npredicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_37","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = 0</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_43","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if the array contains <code>value</code>, false otherwise.</p> <p>The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as <code>{(l, r) =&gt; l == r}</code>.</p> <pre><code>fun box contains(\nvalue: A!,\npredicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: Bool val\n</code></pre>"},{"location":"builtin-Array/#parameters_38","title":"Parameters","text":"<ul> <li>value: A!</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Array/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Find the <code>nth</code> appearance of <code>value</code> from the end of the array, starting at <code>offset</code> and examining lower indices, and using the supplied <code>predicate</code> for comparisons. Returns the index of the value, or raise an error if the value isn't present.</p> <p>By default, the search starts at the last element of the array, returns the first instance of <code>value</code> found, and uses object identity for comparison.</p> <pre><code>fun box rfind(\nvalue: A!,\noffset: USize val = call,\nnth: USize val = 0,\npredicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda)\n: USize val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_39","title":"Parameters","text":"<ul> <li>value: A!</li> <li>offset: USize val = call</li> <li>nth: USize val = 0</li> <li>predicate: {(box-&gt;A!, box-&gt;A!): Bool}[A] val = lambda</li> </ul>"},{"location":"builtin-Array/#returns_45","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-Array/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box clone()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_46","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#slice","title":"slice","text":"<p>[Source]</p> <p>Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned.</p> <pre><code>fun box slice(\nfrom: USize val = 0,\nto: USize val = call,\nstep: USize val = 1)\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#parameters_40","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> <li>step: USize val = 1</li> </ul>"},{"location":"builtin-Array/#returns_47","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#permute","title":"permute","text":"<p>[Source]</p> <p>Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box permute(\nindices: Iterator[USize val] ref)\n: Array[this-&gt;A!] ref^ ?\n</code></pre>"},{"location":"builtin-Array/#parameters_41","title":"Parameters","text":"<ul> <li>indices: Iterator[USize val] ref</li> </ul>"},{"location":"builtin-Array/#returns_48","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^ ?</li> </ul>"},{"location":"builtin-Array/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied.</p> <pre><code>fun box reverse()\n: Array[this-&gt;A!] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_49","title":"Returns","text":"<ul> <li>Array[this-&gt;A!] ref^</li> </ul>"},{"location":"builtin-Array/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverse the array in place.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-Array/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#swap_elements","title":"swap_elements","text":"<p>[Source]</p> <p>Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised.</p> <pre><code>fun ref swap_elements(\ni: USize val,\nj: USize val)\n: None val ?\n</code></pre>"},{"location":"builtin-Array/#parameters_42","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>j: USize val</li> </ul>"},{"location":"builtin-Array/#returns_51","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"builtin-Array/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the indices in the array.</p> <pre><code>fun box keys()\n: ArrayKeys[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_52","title":"Returns","text":"<ul> <li>ArrayKeys[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values in the array.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_53","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the (index, value) pairs in the array.</p> <pre><code>fun box pairs()\n: ArrayPairs[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"builtin-Array/#returns_54","title":"Returns","text":"<ul> <li>ArrayPairs[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"builtin-Array/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Array/#_copy_to","title":"_copy_to","text":"<p>[Source]</p> <p>Copy copy_len elements from this to that at specified offsets.</p> <pre><code>fun box _copy_to(\nptr: Pointer[this-&gt;A!] ref,\ncopy_len: USize val,\nfrom_offset: USize val = 0,\nto_offset: USize val = 0)\n: None val\n</code></pre>"},{"location":"builtin-Array/#parameters_43","title":"Parameters","text":"<ul> <li>ptr: Pointer[this-&gt;A!] ref</li> <li>copy_len: USize val</li> <li>from_offset: USize val = 0</li> <li>to_offset: USize val = 0</li> </ul>"},{"location":"builtin-Array/#returns_55","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Array/#_element_size","title":"_element_size","text":"<p>[Source]</p> <p>Element size in bytes for an element.</p> <pre><code>fun box _element_size()\n: USize val\n</code></pre>"},{"location":"builtin-Array/#returns_56","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ArrayKeys/","title":"ArrayKeys[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayKeys[A: A, B: Array[A] #read] is\nIterator[USize val] ref\n</code></pre></p>"},{"location":"builtin-ArrayKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[USize val] ref</li> </ul>"},{"location":"builtin-ArrayKeys/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayKeys/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\narray: B)\n: ArrayKeys[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayKeys/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayKeys/#returns","title":"Returns","text":"<ul> <li>ArrayKeys[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayKeys/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayKeys/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: USize val\n</code></pre>"},{"location":"builtin-ArrayKeys/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ArrayPairs/","title":"ArrayPairs[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayPairs[A: A, B: Array[A] #read] is\nIterator[(USize val , B-&gt;A)] ref\n</code></pre></p>"},{"location":"builtin-ArrayPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(USize val , B-&gt;A)] ref</li> </ul>"},{"location":"builtin-ArrayPairs/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayPairs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\narray: B)\n: ArrayPairs[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayPairs/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayPairs/#returns","title":"Returns","text":"<ul> <li>ArrayPairs[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayPairs/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayPairs/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: (USize val , B-&gt;A) ?\n</code></pre>"},{"location":"builtin-ArrayPairs/#returns_2","title":"Returns","text":"<ul> <li>(USize val , B-&gt;A) ?</li> </ul>"},{"location":"builtin-ArrayValues/","title":"ArrayValues[A: A, B: Array[A] #read]","text":"<p>[Source] <pre><code>class ref ArrayValues[A: A, B: Array[A] #read] is\nIterator[B-&gt;A] ref\n</code></pre></p>"},{"location":"builtin-ArrayValues/#implements","title":"Implements","text":"<ul> <li>Iterator[B-&gt;A] ref</li> </ul>"},{"location":"builtin-ArrayValues/#constructors","title":"Constructors","text":""},{"location":"builtin-ArrayValues/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\narray: B)\n: ArrayValues[A, B] ref^\n</code></pre>"},{"location":"builtin-ArrayValues/#parameters","title":"Parameters","text":"<ul> <li>array: B</li> </ul>"},{"location":"builtin-ArrayValues/#returns","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref^</li> </ul>"},{"location":"builtin-ArrayValues/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ArrayValues/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ArrayValues/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: B-&gt;A ?\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_2","title":"Returns","text":"<ul> <li>B-&gt;A ?</li> </ul>"},{"location":"builtin-ArrayValues/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: ArrayValues[A, B] ref\n</code></pre>"},{"location":"builtin-ArrayValues/#returns_3","title":"Returns","text":"<ul> <li>ArrayValues[A, B] ref</li> </ul>"},{"location":"builtin-AsioEvent/","title":"AsioEvent","text":"<p>[Source]</p> <p>Functions for asynchronous event notification.</p> <pre><code>primitive val AsioEvent\n</code></pre>"},{"location":"builtin-AsioEvent/#constructors","title":"Constructors","text":""},{"location":"builtin-AsioEvent/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AsioEvent val^\n</code></pre>"},{"location":"builtin-AsioEvent/#returns","title":"Returns","text":"<ul> <li>AsioEvent val^</li> </ul>"},{"location":"builtin-AsioEvent/#public-functions","title":"Public Functions","text":""},{"location":"builtin-AsioEvent/#none","title":"none","text":"<p>[Source]</p> <p>An empty event.</p> <pre><code>fun box none()\n: Pointer[AsioEvent val] tag\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_1","title":"Returns","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEvent/#readable","title":"readable","text":"<p>[Source]</p> <p>Returns true if the flags contain the readable flag.</p> <pre><code>fun box readable(\nflags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#writeable","title":"writeable","text":"<p>[Source]</p> <p>Returns true if the flags contain the writeable flag.</p> <pre><code>fun box writeable(\nflags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_1","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#disposable","title":"disposable","text":"<p>[Source]</p> <p>Returns true if the event should be disposed of.</p> <pre><code>fun box disposable(\nflags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_2","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshotable","title":"oneshotable","text":"<p>[Source]</p> <p>Returns true if the flags contain the oneshot flag.</p> <pre><code>fun box oneshotable(\nflags: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_3","title":"Parameters","text":"<ul> <li>flags: U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun box dispose()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun box write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#timer","title":"timer","text":"<p>[Source]</p> <pre><code>fun box timer()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#signal","title":"signal","text":"<p>[Source]</p> <pre><code>fun box signal()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write","title":"read_write","text":"<p>[Source]</p> <pre><code>fun box read_write()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#oneshot","title":"oneshot","text":"<p>[Source]</p> <pre><code>fun box oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#read_write_oneshot","title":"read_write_oneshot","text":"<p>[Source]</p> <pre><code>fun box read_write_oneshot()\n: U32 val\n</code></pre>"},{"location":"builtin-AsioEvent/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-AsioEvent/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_4","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEvent/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: AsioEvent val)\n: Bool val\n</code></pre>"},{"location":"builtin-AsioEvent/#parameters_5","title":"Parameters","text":"<ul> <li>that: AsioEvent val</li> </ul>"},{"location":"builtin-AsioEvent/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-AsioEventID/","title":"AsioEventID","text":"<p>[Source] <pre><code>type AsioEventID is\nPointer[AsioEvent val] tag\n</code></pre></p>"},{"location":"builtin-AsioEventID/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Pointer[AsioEvent val] tag</li> </ul>"},{"location":"builtin-AsioEventNotify/","title":"AsioEventNotify","text":"<p>[Source] <pre><code>trait tag AsioEventNotify\n</code></pre></p>"},{"location":"builtin-AsioEventNotify/#private-behaviours","title":"Private Behaviours","text":""},{"location":"builtin-AsioEventNotify/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"builtin-AsioEventNotify/#parameters","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"builtin-Bool/","title":"Bool","text":"<p>[Source] <pre><code>primitive val Bool is\nStringable box\n</code></pre></p>"},{"location":"builtin-Bool/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-Bool/#constructors","title":"Constructors","text":""},{"location":"builtin-Bool/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: Bool val)\n: Bool val^\n</code></pre>"},{"location":"builtin-Bool/#parameters","title":"Parameters","text":"<ul> <li>from: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns","title":"Returns","text":"<ul> <li>Bool val^</li> </ul>"},{"location":"builtin-Bool/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Bool/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_1","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_2","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_3","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_4","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: Bool val)\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#parameters_5","title":"Parameters","text":"<ul> <li>y: Bool val</li> </ul>"},{"location":"builtin-Bool/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: Bool val\n</code></pre>"},{"location":"builtin-Bool/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Bool/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Bool/#returns_7","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ByteSeq/","title":"ByteSeq","text":"<p>[Source] <pre><code>type ByteSeq is\n(String val | Array[U8 val] val)\n</code></pre></p>"},{"location":"builtin-ByteSeq/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-ByteSeqIter/","title":"ByteSeqIter","text":"<p>[Source]</p> <p>Accept an iterable collection of String or Array[U8] val.</p> <pre><code>interface val ByteSeqIter\n</code></pre>"},{"location":"builtin-ByteSeqIter/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ByteSeqIter/#values","title":"values","text":"<p>[Source]</p> <pre><code>fun box values()\n: Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref\n</code></pre>"},{"location":"builtin-ByteSeqIter/#returns","title":"Returns","text":"<ul> <li>Iterator[(this-&gt;String box | this-&gt;Array[U8 val] box)] ref</li> </ul>"},{"location":"builtin-Comparable/","title":"Comparable[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>interface ref Comparable[A: Comparable[A] #read] is\nEquatable[A] ref\n</code></pre></p>"},{"location":"builtin-Comparable/#implements","title":"Implements","text":"<ul> <li>Equatable[A] ref</li> </ul>"},{"location":"builtin-Comparable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Comparable/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_2","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_3","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Comparable/#parameters_4","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_4","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Comparable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_5","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Comparable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Comparable/#parameters_6","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Comparable/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Compare/","title":"Compare","text":"<p>[Source] <pre><code>type Compare is\n(Less val | Equal val | Greater val)\n</code></pre></p>"},{"location":"builtin-Compare/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-DisposableActor/","title":"DisposableActor","text":"<p>[Source]</p> <p>An interface used to asynchronously dispose of an actor.</p> <pre><code>interface tag DisposableActor\n</code></pre>"},{"location":"builtin-DisposableActor/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-DisposableActor/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-DoNotOptimise/","title":"DoNotOptimise","text":"<p>[Source]</p> <p>Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes.</p> <pre><code>primitive val DoNotOptimise\n</code></pre>"},{"location":"builtin-DoNotOptimise/#constructors","title":"Constructors","text":""},{"location":"builtin-DoNotOptimise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DoNotOptimise val^\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns","title":"Returns","text":"<ul> <li>DoNotOptimise val^</li> </ul>"},{"location":"builtin-DoNotOptimise/#public-functions","title":"Public Functions","text":""},{"location":"builtin-DoNotOptimise/#applya-a","title":"apply[A: A]","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation.</p> <pre><code>fun box apply[A: A](\nobj: A)\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters","title":"Parameters","text":"<ul> <li>obj: A</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#observe","title":"observe","text":"<p>[Source]</p> <p>Prevent the compiler from optimising out writes to an object marked by the apply function.</p> <pre><code>fun box observe()\n: None val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-DoNotOptimise/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_1","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-DoNotOptimise/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DoNotOptimise val)\n: Bool val\n</code></pre>"},{"location":"builtin-DoNotOptimise/#parameters_2","title":"Parameters","text":"<ul> <li>that: DoNotOptimise val</li> </ul>"},{"location":"builtin-DoNotOptimise/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Env/","title":"Env","text":"<p>[Source]</p> <p>An environment holds the command line and other values injected into the program by default by the runtime.</p> <pre><code>class val Env\n</code></pre>"},{"location":"builtin-Env/#constructors","title":"Constructors","text":""},{"location":"builtin-Env/#_create","title":"_create","text":"<p>[Source]</p> <p>Builds an environment from the command line. This is done before the Main actor is created.</p> <pre><code>new ref _create(\nargc: U32 val,\nargv: Pointer[Pointer[U8 val] ref] val,\nenvp: Pointer[Pointer[U8 val] ref] val)\n: Env ref^\n</code></pre>"},{"location":"builtin-Env/#parameters","title":"Parameters","text":"<ul> <li>argc: U32 val</li> <li>argv: Pointer[Pointer[U8 val] ref] val</li> <li>envp: Pointer[Pointer[U8 val] ref] val</li> </ul>"},{"location":"builtin-Env/#returns","title":"Returns","text":"<ul> <li>Env ref^</li> </ul>"},{"location":"builtin-Env/#create","title":"create","text":"<p>[Source]</p> <p>Build an artificial environment. A root capability must be supplied.</p> <pre><code>new val create(\nroot': AmbientAuth val,\ninput': InputStream tag,\nout': OutStream tag,\nerr': OutStream tag,\nargs': Array[String val] val,\nvars': Array[String val] val,\nexitcode': {(I32)} val)\n: Env val^\n</code></pre>"},{"location":"builtin-Env/#parameters_1","title":"Parameters","text":"<ul> <li>root': AmbientAuth val</li> <li>input': InputStream tag</li> <li>out': OutStream tag</li> <li>err': OutStream tag</li> <li>args': Array[String val] val</li> <li>vars': Array[String val] val</li> <li>exitcode': {(I32)} val</li> </ul>"},{"location":"builtin-Env/#returns_1","title":"Returns","text":"<ul> <li>Env val^</li> </ul>"},{"location":"builtin-Env/#public-fields","title":"Public fields","text":""},{"location":"builtin-Env/#let-root-ambientauth-val","title":"let root: AmbientAuth val","text":"<p>[Source]</p> <p>The root capability.</p>"},{"location":"builtin-Env/#let-input-inputstream-tag","title":"let input: InputStream tag","text":"<p>[Source]</p> <p>Stdin represented as an actor.</p>"},{"location":"builtin-Env/#let-out-outstream-tag","title":"let out: OutStream tag","text":"<p>[Source]</p> <p>Stdout</p>"},{"location":"builtin-Env/#let-err-outstream-tag","title":"let err: OutStream tag","text":"<p>[Source]</p> <p>Stderr</p>"},{"location":"builtin-Env/#let-args-arraystring-val-val","title":"let args: Array[String val] val","text":"<p>[Source]</p> <p>The command line used to start the program.</p>"},{"location":"builtin-Env/#let-vars-arraystring-val-val","title":"let vars: Array[String val] val","text":"<p>[Source]</p> <p>The program's environment variables.</p>"},{"location":"builtin-Env/#let-exitcode-i32-val","title":"let exitcode: {(I32)} val","text":"<p>[Source]</p> <p>Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.</p>"},{"location":"builtin-Env/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Env/#_count_strings","title":"_count_strings","text":"<p>[Source]</p> <pre><code>fun tag _count_strings(\ndata: Pointer[Pointer[U8 val] ref] val)\n: USize val\n</code></pre>"},{"location":"builtin-Env/#parameters_2","title":"Parameters","text":"<ul> <li>data: Pointer[Pointer[U8 val] ref] val</li> </ul>"},{"location":"builtin-Env/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Env/#_strings_from_pointers","title":"_strings_from_pointers","text":"<p>[Source]</p> <pre><code>fun tag _strings_from_pointers(\ndata: Pointer[Pointer[U8 val] ref] val,\nlen: USize val)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-Env/#parameters_3","title":"Parameters","text":"<ul> <li>data: Pointer[Pointer[U8 val] ref] val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Env/#returns_3","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-Equal/","title":"Equal","text":"<p>[Source] <pre><code>primitive val Equal is\nEquatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Equal/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Equal/#constructors","title":"Constructors","text":""},{"location":"builtin-Equal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Equal val^\n</code></pre>"},{"location":"builtin-Equal/#returns","title":"Returns","text":"<ul> <li>Equal val^</li> </ul>"},{"location":"builtin-Equal/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equal/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Equal/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Equal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Equal/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Equal/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/","title":"Equatable[A: Equatable[A] #read]","text":"<p>[Source] <pre><code>interface ref Equatable[A: Equatable[A] #read]\n</code></pre></p>"},{"location":"builtin-Equatable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Equatable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Equatable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Equatable/#parameters_1","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Equatable/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/","title":"F32","text":"<p>[Source] <pre><code>primitive val F32 is\nFloatingPoint[F32 val] val\n</code></pre></p>"},{"location":"builtin-F32/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F32 val] val</li> </ul>"},{"location":"builtin-F32/#constructors","title":"Constructors","text":""},{"location":"builtin-F32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: F32 val = 0)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters","title":"Parameters","text":"<ul> <li>value: F32 val = 0</li> </ul>"},{"location":"builtin-F32/#returns","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_1","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_2","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#_nan","title":"_nan","text":"<p>[Source]</p> <pre><code>new val _nan()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_3","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#_inf","title":"_inf","text":"<p>[Source]</p> <pre><code>new val _inf(\nnegative: Bool val)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_1","title":"Parameters","text":"<ul> <li>negative: Bool val</li> </ul>"},{"location":"builtin-F32/#returns_4","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\ni: U32 val)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_2","title":"Parameters","text":"<ul> <li>i: U32 val</li> </ul>"},{"location":"builtin-F32/#returns_5","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#parameters_3","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F32/#returns_6","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_7","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_8","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_9","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F32 val^\n</code></pre>"},{"location":"builtin-F32/#returns_10","title":"Returns","text":"<ul> <li>F32 val^</li> </ul>"},{"location":"builtin-F32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F32/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_13","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_14","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_18","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_19","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_20","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_21","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_22","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_23","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_4","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_24","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_5","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_25","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_6","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_26","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_7","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_27","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_8","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_28","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_9","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_29","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_31","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#returns_32","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\nx: F32 val,\nexponent: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_10","title":"Parameters","text":"<ul> <li>x: F32 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F32 val , U32 val)\n</code></pre>"},{"location":"builtin-F32/#returns_34","title":"Returns","text":"<ul> <li>(F32 val , U32 val)</li> </ul>"},{"location":"builtin-F32/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_35","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_36","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_37","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_11","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_39","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\ny: I32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_12","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F32/#returns_40","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_41","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_42","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_43","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_44","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_45","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_46","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_47","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_48","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_49","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_50","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_51","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_52","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_53","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_13","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_55","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_56","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_57","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_58","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\nsign: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_14","title":"Parameters","text":"<ul> <li>sign: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_59","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_60","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F32/#returns_64","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F32/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_15","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_66","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_16","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_67","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_17","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_68","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_18","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_69","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_19","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_70","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_20","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_71","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_72","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq_unsafe","title":"eq_unsafe","text":"<p>[Source]</p> <pre><code>fun box eq_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_21","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne_unsafe","title":"ne_unsafe","text":"<p>[Source]</p> <pre><code>fun box ne_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_22","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt_unsafe","title":"lt_unsafe","text":"<p>[Source]</p> <pre><code>fun box lt_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_23","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le_unsafe","title":"le_unsafe","text":"<p>[Source]</p> <pre><code>fun box le_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_24","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge_unsafe","title":"ge_unsafe","text":"<p>[Source]</p> <pre><code>fun box ge_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_25","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_77","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt_unsafe","title":"gt_unsafe","text":"<p>[Source]</p> <pre><code>fun box gt_unsafe(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_26","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_78","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F32/#returns_79","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_27","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_28","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_81","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_29","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_82","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_30","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: F32 val)\n: (F32 val , F32 val)\n</code></pre>"},{"location":"builtin-F32/#parameters_31","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_84","title":"Returns","text":"<ul> <li>(F32 val , F32 val)</li> </ul>"},{"location":"builtin-F32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: F32 val)\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#parameters_32","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_85","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_86","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_33","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_34","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_35","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_36","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_37","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_91","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: F32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F32/#parameters_38","title":"Parameters","text":"<ul> <li>y: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_92","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_93","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_94","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_95","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_96","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_97","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_98","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_99","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_100","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_101","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_102","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_103","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_104","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_1","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_105","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_106","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F32/#returns_107","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F32/#returns_108","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F32/#returns_109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F32/#returns_110","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F32/#returns_111","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F32/#returns_112","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F32/#returns_113","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F32/#returns_114","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F32/#returns_115","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F32/#returns_116","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F32/#returns_117","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F32/#returns_118","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_119","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F32/#returns_120","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: F32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F32/#parameters_39","title":"Parameters","text":"<ul> <li>that: F32 val</li> </ul>"},{"location":"builtin-F32/#returns_121","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-F32/#private-functions","title":"Private Functions","text":""},{"location":"builtin-F32/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: F32 val\n</code></pre>"},{"location":"builtin-F32/#returns_122","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/","title":"F64","text":"<p>[Source] <pre><code>primitive val F64 is\nFloatingPoint[F64 val] val\n</code></pre></p>"},{"location":"builtin-F64/#implements","title":"Implements","text":"<ul> <li>FloatingPoint[F64 val] val</li> </ul>"},{"location":"builtin-F64/#constructors","title":"Constructors","text":""},{"location":"builtin-F64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: F64 val = 0)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters","title":"Parameters","text":"<ul> <li>value: F64 val = 0</li> </ul>"},{"location":"builtin-F64/#returns","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#pi","title":"pi","text":"<p>[Source]</p> <pre><code>new val pi()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_1","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#e","title":"e","text":"<p>[Source]</p> <pre><code>new val e()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_2","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#_nan","title":"_nan","text":"<p>[Source]</p> <pre><code>new val _nan()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_3","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#_inf","title":"_inf","text":"<p>[Source]</p> <pre><code>new val _inf(\nnegative: Bool val)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_1","title":"Parameters","text":"<ul> <li>negative: Bool val</li> </ul>"},{"location":"builtin-F64/#returns_4","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#from_bits","title":"from_bits","text":"<p>[Source]</p> <pre><code>new val from_bits(\ni: U64 val)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_2","title":"Parameters","text":"<ul> <li>i: U64 val</li> </ul>"},{"location":"builtin-F64/#returns_5","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#parameters_3","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-F64/#returns_6","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_value","title":"min_value","text":"<p>[Source]</p> <p>Minimum negative value representable.</p> <pre><code>new val min_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_7","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#max_value","title":"max_value","text":"<p>[Source]</p> <p>Maximum positive value representable.</p> <pre><code>new val max_value()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_8","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <p>Minimum positive value representable at full precision (ie a normalised number).</p> <pre><code>new val min_normalised()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_9","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#epsilon","title":"epsilon","text":"<p>[Source]</p> <p>Minimum positive value such that (1 + epsilon) != 1.</p> <pre><code>new val epsilon()\n: F64 val^\n</code></pre>"},{"location":"builtin-F64/#returns_10","title":"Returns","text":"<ul> <li>F64 val^</li> </ul>"},{"location":"builtin-F64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-F64/#bits","title":"bits","text":"<p>[Source]</p> <pre><code>fun box bits()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#radix","title":"radix","text":"<p>[Source]</p> <p>Exponent radix.</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision2","title":"precision2","text":"<p>[Source]</p> <p>Mantissa precision in bits.</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_13","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#precision10","title":"precision10","text":"<p>[Source]</p> <p>Mantissa precision in decimal digits.</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_14","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <p>Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <p>Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number).</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <p>Maximum exponent value such that (2^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <p>Maximum exponent value such that (10^exponent) - 1 is representable.</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_18","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_19","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_22","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_23","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_4","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_24","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_5","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_25","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_6","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_26","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_7","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_27","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_8","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_28","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_9","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_29","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#finite","title":"finite","text":"<p>[Source]</p> <p>Check whether this number is finite, ie not +/-infinity and not NaN.</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_30","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#infinite","title":"infinite","text":"<p>[Source]</p> <p>Check whether this number is +/-infinity</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_31","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#nan","title":"nan","text":"<p>[Source]</p> <p>Check whether this number is NaN.</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#returns_32","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\nx: F64 val,\nexponent: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_10","title":"Parameters","text":"<ul> <li>x: F64 val</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_33","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (F64 val , U32 val)\n</code></pre>"},{"location":"builtin-F64/#returns_34","title":"Returns","text":"<ul> <li>(F64 val , U32 val)</li> </ul>"},{"location":"builtin-F64/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_35","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_36","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_37","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_38","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_11","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\ny: I32 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_12","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-F64/#returns_40","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_41","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_42","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_43","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_44","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_45","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_46","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_47","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_48","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_49","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_50","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_51","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_52","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_53","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_54","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_13","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_56","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_57","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_58","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\nsign: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_14","title":"Parameters","text":"<ul> <li>sign: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_59","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_60","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-F64/#returns_64","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-F64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-F64/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-F64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_15","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_66","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_16","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_67","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_17","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_68","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_18","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_19","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_70","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_20","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_71","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_72","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq_unsafe","title":"eq_unsafe","text":"<p>[Source]</p> <pre><code>fun box eq_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_21","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne_unsafe","title":"ne_unsafe","text":"<p>[Source]</p> <pre><code>fun box ne_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_22","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt_unsafe","title":"lt_unsafe","text":"<p>[Source]</p> <pre><code>fun box lt_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_23","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le_unsafe","title":"le_unsafe","text":"<p>[Source]</p> <pre><code>fun box le_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_24","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge_unsafe","title":"ge_unsafe","text":"<p>[Source]</p> <pre><code>fun box ge_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_25","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_77","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt_unsafe","title":"gt_unsafe","text":"<p>[Source]</p> <pre><code>fun box gt_unsafe(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_26","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_78","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-F64/#returns_79","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-F64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_27","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_80","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_28","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_29","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_82","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_30","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: F64 val)\n: (F64 val , F64 val)\n</code></pre>"},{"location":"builtin-F64/#parameters_31","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_84","title":"Returns","text":"<ul> <li>(F64 val , F64 val)</li> </ul>"},{"location":"builtin-F64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: F64 val)\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#parameters_32","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_85","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_86","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_33","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_87","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_34","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_88","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_35","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_89","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_36","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_90","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_37","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_91","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: F64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-F64/#parameters_38","title":"Parameters","text":"<ul> <li>y: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_92","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-F64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_93","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_94","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_95","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_96","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_97","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_98","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_99","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_100","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_101","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_102","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_103","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_104","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_105","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_1","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_106","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-F64/#returns_107","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-F64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-F64/#returns_108","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-F64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-F64/#returns_109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-F64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-F64/#returns_110","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-F64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-F64/#returns_111","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-F64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-F64/#returns_112","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-F64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-F64/#returns_113","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-F64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-F64/#returns_114","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-F64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-F64/#returns_115","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-F64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-F64/#returns_116","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-F64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-F64/#returns_117","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-F64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-F64/#returns_118","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-F64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-F64/#returns_119","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-F64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_120","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-F64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: F64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-F64/#parameters_39","title":"Parameters","text":"<ul> <li>that: F64 val</li> </ul>"},{"location":"builtin-F64/#returns_121","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-F64/#private-functions","title":"Private Functions","text":""},{"location":"builtin-F64/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: F64 val\n</code></pre>"},{"location":"builtin-F64/#returns_122","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Float/","title":"Float","text":"<p>[Source] <pre><code>type Float is\n(F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Float/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(F32 val | F64 val)</li> </ul>"},{"location":"builtin-FloatingPoint/","title":"FloatingPoint[A: FloatingPoint[A] val]","text":"<p>[Source] <pre><code>trait val FloatingPoint[A: FloatingPoint[A] val] is\nReal[A] val\n</code></pre></p>"},{"location":"builtin-FloatingPoint/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-FloatingPoint/#constructors","title":"Constructors","text":""},{"location":"builtin-FloatingPoint/#min_normalised","title":"min_normalised","text":"<p>[Source]</p> <pre><code>new val min_normalised()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#epsilon","title":"epsilon","text":"<p>[Source]</p> <pre><code>new val epsilon()\n: FloatingPoint[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_1","title":"Returns","text":"<ul> <li>FloatingPoint[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_4","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_5","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-FloatingPoint/#public-functions","title":"Public Functions","text":""},{"location":"builtin-FloatingPoint/#radix","title":"radix","text":"<p>[Source]</p> <pre><code>fun tag radix()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision2","title":"precision2","text":"<p>[Source]</p> <pre><code>fun tag precision2()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#precision10","title":"precision10","text":"<p>[Source]</p> <pre><code>fun tag precision10()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp2","title":"min_exp2","text":"<p>[Source]</p> <pre><code>fun tag min_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_9","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#min_exp10","title":"min_exp10","text":"<p>[Source]</p> <pre><code>fun tag min_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_10","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp2","title":"max_exp2","text":"<p>[Source]</p> <pre><code>fun tag max_exp2()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#max_exp10","title":"max_exp10","text":"<p>[Source]</p> <pre><code>fun tag max_exp10()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box add_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_13","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box sub_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mul_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box div_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box fld_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box divrem_unsafe(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_18","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box rem_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box mod_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq_unsafe","title":"eq_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box eq_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne_unsafe","title":"ne_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ne_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt_unsafe","title":"lt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box lt_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le_unsafe","title":"le_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box le_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge_unsafe","title":"ge_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box ge_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_26","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt_unsafe","title":"gt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics.</p> <pre><code>fun box gt_unsafe(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_27","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#ceil","title":"ceil","text":"<p>[Source]</p> <pre><code>fun box ceil()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#floor","title":"floor","text":"<p>[Source]</p> <pre><code>fun box floor()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#round","title":"round","text":"<p>[Source]</p> <pre><code>fun box round()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#trunc","title":"trunc","text":"<p>[Source]</p> <pre><code>fun box trunc()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#finite","title":"finite","text":"<p>[Source]</p> <pre><code>fun box finite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_33","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#infinite","title":"infinite","text":"<p>[Source]</p> <pre><code>fun box infinite()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_34","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#nan","title":"nan","text":"<p>[Source]</p> <pre><code>fun box nan()\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ldexp","title":"ldexp","text":"<p>[Source]</p> <pre><code>fun box ldexp(\nx: A,\nexponent: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_16","title":"Parameters","text":"<ul> <li>x: A</li> <li>exponent: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#frexp","title":"frexp","text":"<p>[Source]</p> <pre><code>fun box frexp()\n: (A , U32 val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_37","title":"Returns","text":"<ul> <li>(A , U32 val)</li> </ul>"},{"location":"builtin-FloatingPoint/#log","title":"log","text":"<p>[Source]</p> <pre><code>fun box log()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_38","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log2","title":"log2","text":"<p>[Source]</p> <pre><code>fun box log2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#log10","title":"log10","text":"<p>[Source]</p> <pre><code>fun box log10()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#logb","title":"logb","text":"<p>[Source]</p> <pre><code>fun box logb()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#pow","title":"pow","text":"<p>[Source]</p> <pre><code>fun box pow(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#powi","title":"powi","text":"<p>[Source]</p> <pre><code>fun box powi(\ny: I32 val)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt","title":"sqrt","text":"<p>[Source]</p> <pre><code>fun box sqrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","title":"sqrt_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is negative, the result is undefined.</p> <pre><code>fun box sqrt_unsafe()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cbrt","title":"cbrt","text":"<p>[Source]</p> <pre><code>fun box cbrt()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp","title":"exp","text":"<p>[Source]</p> <pre><code>fun box exp()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#exp2","title":"exp2","text":"<p>[Source]</p> <pre><code>fun box exp2()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cos","title":"cos","text":"<p>[Source]</p> <pre><code>fun box cos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sin","title":"sin","text":"<p>[Source]</p> <pre><code>fun box sin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tan","title":"tan","text":"<p>[Source]</p> <pre><code>fun box tan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#cosh","title":"cosh","text":"<p>[Source]</p> <pre><code>fun box cosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sinh","title":"sinh","text":"<p>[Source]</p> <pre><code>fun box sinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#tanh","title":"tanh","text":"<p>[Source]</p> <pre><code>fun box tanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acos","title":"acos","text":"<p>[Source]</p> <pre><code>fun box acos()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asin","title":"asin","text":"<p>[Source]</p> <pre><code>fun box asin()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan","title":"atan","text":"<p>[Source]</p> <pre><code>fun box atan()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atan2","title":"atan2","text":"<p>[Source]</p> <pre><code>fun box atan2(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_58","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#acosh","title":"acosh","text":"<p>[Source]</p> <pre><code>fun box acosh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_59","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#asinh","title":"asinh","text":"<p>[Source]</p> <pre><code>fun box asinh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_60","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#atanh","title":"atanh","text":"<p>[Source]</p> <pre><code>fun box atanh()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_61","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#copysign","title":"copysign","text":"<p>[Source]</p> <pre><code>fun box copysign(\nsign: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_20","title":"Parameters","text":"<ul> <li>sign: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_63","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-FloatingPoint/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_66","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_67","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_68","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-FloatingPoint/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_69","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_70","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_71","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_72","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_29","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_73","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_30","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_74","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_31","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_75","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_32","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_76","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_33","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_77","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_34","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_78","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-FloatingPoint/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_79","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_80","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-FloatingPoint/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_82","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_83","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_84","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_85","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_86","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_87","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_88","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_89","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_90","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_91","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_92","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_93","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_94","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_95","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_96","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_97","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_98","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_99","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_100","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_102","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_103","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_104","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-FloatingPoint/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_105","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-FloatingPoint/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_106","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_107","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_108","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_109","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_110","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-FloatingPoint/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_111","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-FloatingPoint/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_112","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-FloatingPoint/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_113","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-FloatingPoint/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_114","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-FloatingPoint/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-FloatingPoint/#parameters_37","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-FloatingPoint/#returns_115","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-FloatingPoint/#private-functions","title":"Private Functions","text":""},{"location":"builtin-FloatingPoint/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: A\n</code></pre>"},{"location":"builtin-FloatingPoint/#returns_116","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Greater/","title":"Greater","text":"<p>[Source] <pre><code>primitive val Greater is\nEquatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Greater/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Greater/#constructors","title":"Constructors","text":""},{"location":"builtin-Greater/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Greater val^\n</code></pre>"},{"location":"builtin-Greater/#returns","title":"Returns","text":"<ul> <li>Greater val^</li> </ul>"},{"location":"builtin-Greater/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Greater/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Greater/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Greater/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Greater/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Greater/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Greater/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-HasEq/","title":"HasEq[A: A]","text":"<p>[Source] <pre><code>interface ref HasEq[A: A]\n</code></pre></p>"},{"location":"builtin-HasEq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-HasEq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-HasEq/#parameters","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-HasEq/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/","title":"I128","text":"<p>[Source] <pre><code>primitive val I128 is\nSignedInteger[I128 val, U128 val] val\n</code></pre></p>"},{"location":"builtin-I128/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I128 val, U128 val] val</li> </ul>"},{"location":"builtin-I128/#constructors","title":"Constructors","text":""},{"location":"builtin-I128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: I128 val)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters","title":"Parameters","text":"<ul> <li>value: I128 val</li> </ul>"},{"location":"builtin-I128/#returns","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I128/#returns_1","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_2","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I128 val^\n</code></pre>"},{"location":"builtin-I128/#returns_3","title":"Returns","text":"<ul> <li>I128 val^</li> </ul>"},{"location":"builtin-I128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_5","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_6","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_2","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_3","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_4","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_16","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_5","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_17","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_6","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_18","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_7","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_19","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_21","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I128/#returns_22","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_8","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_23","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_9","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_24","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_10","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_25","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_11","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_26","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_12","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_27","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\ny: I128 val)\n: (I128 val , I128 val)\n</code></pre>"},{"location":"builtin-I128/#parameters_13","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_28","title":"Returns","text":"<ul> <li>(I128 val , I128 val)</li> </ul>"},{"location":"builtin-I128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_14","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_29","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_15","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_30","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_31","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_32","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I128/#returns_33","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I128/#returns_34","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_16","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_35","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_17","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_36","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_18","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_37","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_19","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_38","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_20","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_39","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_21","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_40","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: I128 val)\n: (I128 val , Bool val)\n</code></pre>"},{"location":"builtin-I128/#parameters_22","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_41","title":"Returns","text":"<ul> <li>(I128 val , Bool val)</li> </ul>"},{"location":"builtin-I128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_23","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_42","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_24","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_43","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_25","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_44","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_26","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_45","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_27","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_46","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: I128 val)\n: (I128 val , I128 val) ?\n</code></pre>"},{"location":"builtin-I128/#parameters_28","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_47","title":"Returns","text":"<ul> <li>(I128 val , I128 val) ?</li> </ul>"},{"location":"builtin-I128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_29","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_48","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: I128 val)\n: I128 val ?\n</code></pre>"},{"location":"builtin-I128/#parameters_30","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_49","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-I128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_50","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_51","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_52","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-I128/#returns_53","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_35","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_54","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_36","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_55","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_56","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_37","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_57","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_38","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_39","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_59","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_60","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_40","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_61","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: I128 val)\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#parameters_41","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_62","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_63","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_42","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_43","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_44","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_45","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_46","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: I128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I128/#parameters_47","title":"Parameters","text":"<ul> <li>y: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_1","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I128/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I128/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I128/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I128/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I128/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I128/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I128/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I128/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I128/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I128/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I128/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I128/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I128/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: I128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I128/#parameters_48","title":"Parameters","text":"<ul> <li>that: I128 val</li> </ul>"},{"location":"builtin-I128/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I128/#private-functions","title":"Private Functions","text":""},{"location":"builtin-I128/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: I128 val\n</code></pre>"},{"location":"builtin-I128/#returns_99","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/","title":"I16","text":"<p>[Source] <pre><code>primitive val I16 is\nSignedInteger[I16 val, U16 val] val\n</code></pre></p>"},{"location":"builtin-I16/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I16 val, U16 val] val</li> </ul>"},{"location":"builtin-I16/#constructors","title":"Constructors","text":""},{"location":"builtin-I16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: I16 val)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters","title":"Parameters","text":"<ul> <li>value: I16 val</li> </ul>"},{"location":"builtin-I16/#returns","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I16/#returns_1","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_2","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I16 val^\n</code></pre>"},{"location":"builtin-I16/#returns_3","title":"Returns","text":"<ul> <li>I16 val^</li> </ul>"},{"location":"builtin-I16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_5","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_6","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_2","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_14","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_3","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_15","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_4","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_16","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_5","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_6","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_18","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_7","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_19","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_8","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_20","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_9","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_21","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_10","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_22","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_11","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_23","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_12","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_24","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_13","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_25","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: I16 val)\n: (I16 val , Bool val)\n</code></pre>"},{"location":"builtin-I16/#parameters_14","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_26","title":"Returns","text":"<ul> <li>(I16 val , Bool val)</li> </ul>"},{"location":"builtin-I16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_15","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_27","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_16","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_28","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_17","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_29","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_18","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_30","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_19","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_31","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: I16 val)\n: (I16 val , I16 val) ?\n</code></pre>"},{"location":"builtin-I16/#parameters_20","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_32","title":"Returns","text":"<ul> <li>(I16 val , I16 val) ?</li> </ul>"},{"location":"builtin-I16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_21","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_33","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: I16 val)\n: I16 val ?\n</code></pre>"},{"location":"builtin-I16/#parameters_22","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_34","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-I16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_35","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_36","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_37","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-I16/#returns_38","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I16/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_27","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_40","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_28","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_29","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_42","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_30","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_43","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_31","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_44","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_32","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_45","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_46","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_33","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_47","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_34","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_48","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_35","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_49","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_50","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_36","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_51","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_37","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_52","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_38","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_53","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_39","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_54","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: I16 val)\n: (I16 val , I16 val)\n</code></pre>"},{"location":"builtin-I16/#parameters_40","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_55","title":"Returns","text":"<ul> <li>(I16 val , I16 val)</li> </ul>"},{"location":"builtin-I16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: I16 val)\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#parameters_41","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_56","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_57","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_42","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_43","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_44","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_45","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_46","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: I16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I16/#parameters_47","title":"Parameters","text":"<ul> <li>y: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_1","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I16/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I16/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I16/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I16/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I16/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I16/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I16/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I16/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I16/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I16/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I16/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I16/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I16/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I16/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I16/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: I16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I16/#parameters_48","title":"Parameters","text":"<ul> <li>that: I16 val</li> </ul>"},{"location":"builtin-I16/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I16/#private-functions","title":"Private Functions","text":""},{"location":"builtin-I16/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: I16 val\n</code></pre>"},{"location":"builtin-I16/#returns_99","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/","title":"I32","text":"<p>[Source] <pre><code>primitive val I32 is\nSignedInteger[I32 val, U32 val] val\n</code></pre></p>"},{"location":"builtin-I32/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I32 val, U32 val] val</li> </ul>"},{"location":"builtin-I32/#constructors","title":"Constructors","text":""},{"location":"builtin-I32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: I32 val)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters","title":"Parameters","text":"<ul> <li>value: I32 val</li> </ul>"},{"location":"builtin-I32/#returns","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I32/#returns_1","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_2","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I32 val^\n</code></pre>"},{"location":"builtin-I32/#returns_3","title":"Returns","text":"<ul> <li>I32 val^</li> </ul>"},{"location":"builtin-I32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_5","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_6","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_2","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_14","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_3","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_15","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_4","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_16","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_5","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_17","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_6","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_7","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_19","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_8","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_20","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_9","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_21","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_10","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_22","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_11","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_23","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_12","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_24","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_13","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_25","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: I32 val)\n: (I32 val , Bool val)\n</code></pre>"},{"location":"builtin-I32/#parameters_14","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_26","title":"Returns","text":"<ul> <li>(I32 val , Bool val)</li> </ul>"},{"location":"builtin-I32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_15","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_27","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_16","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_28","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_17","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_29","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_18","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_30","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_19","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_31","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: I32 val)\n: (I32 val , I32 val) ?\n</code></pre>"},{"location":"builtin-I32/#parameters_20","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_32","title":"Returns","text":"<ul> <li>(I32 val , I32 val) ?</li> </ul>"},{"location":"builtin-I32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_21","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_33","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: I32 val)\n: I32 val ?\n</code></pre>"},{"location":"builtin-I32/#parameters_22","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_34","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-I32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_35","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_36","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_37","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-I32/#returns_38","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I32/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_27","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_40","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_28","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_41","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_29","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_30","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_43","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_31","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_44","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_32","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_45","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_46","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_33","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_47","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_34","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_48","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_35","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_49","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_50","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_36","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_51","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_37","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_52","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_38","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_53","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_39","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_54","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: I32 val)\n: (I32 val , I32 val)\n</code></pre>"},{"location":"builtin-I32/#parameters_40","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_55","title":"Returns","text":"<ul> <li>(I32 val , I32 val)</li> </ul>"},{"location":"builtin-I32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: I32 val)\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#parameters_41","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_57","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_42","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_43","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_44","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_45","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_46","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: I32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I32/#parameters_47","title":"Parameters","text":"<ul> <li>y: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_1","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I32/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I32/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I32/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I32/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I32/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I32/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I32/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I32/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I32/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I32/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I32/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I32/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I32/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I32/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I32/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: I32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I32/#parameters_48","title":"Parameters","text":"<ul> <li>that: I32 val</li> </ul>"},{"location":"builtin-I32/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I32/#private-functions","title":"Private Functions","text":""},{"location":"builtin-I32/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: I32 val\n</code></pre>"},{"location":"builtin-I32/#returns_99","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/","title":"I64","text":"<p>[Source] <pre><code>primitive val I64 is\nSignedInteger[I64 val, U64 val] val\n</code></pre></p>"},{"location":"builtin-I64/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I64 val, U64 val] val</li> </ul>"},{"location":"builtin-I64/#constructors","title":"Constructors","text":""},{"location":"builtin-I64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: I64 val)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters","title":"Parameters","text":"<ul> <li>value: I64 val</li> </ul>"},{"location":"builtin-I64/#returns","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I64/#returns_1","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_2","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I64 val^\n</code></pre>"},{"location":"builtin-I64/#returns_3","title":"Returns","text":"<ul> <li>I64 val^</li> </ul>"},{"location":"builtin-I64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_5","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_6","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_2","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_3","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_15","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_4","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_16","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_5","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_17","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_6","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_18","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_7","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_19","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_8","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_21","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_9","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_22","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_10","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_23","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_11","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_24","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_12","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_25","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_13","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_26","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: I64 val)\n: (I64 val , Bool val)\n</code></pre>"},{"location":"builtin-I64/#parameters_14","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_27","title":"Returns","text":"<ul> <li>(I64 val , Bool val)</li> </ul>"},{"location":"builtin-I64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_15","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_28","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_16","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_29","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_17","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_30","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_18","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_31","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_19","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_32","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: I64 val)\n: (I64 val , I64 val) ?\n</code></pre>"},{"location":"builtin-I64/#parameters_20","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_33","title":"Returns","text":"<ul> <li>(I64 val , I64 val) ?</li> </ul>"},{"location":"builtin-I64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_21","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_34","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: I64 val)\n: I64 val ?\n</code></pre>"},{"location":"builtin-I64/#parameters_22","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_35","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-I64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_36","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_37","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_38","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-I64/#returns_39","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I64/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_27","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_41","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_28","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_42","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_29","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_30","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_44","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_31","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_45","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_32","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_46","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_47","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_33","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_48","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_34","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_49","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_35","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_50","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_51","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_36","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_52","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_37","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_53","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_38","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_54","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_39","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_55","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"builtin-I64/#parameters_40","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_56","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"builtin-I64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: I64 val)\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#parameters_41","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_58","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_42","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_43","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_44","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_45","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_46","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: I64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I64/#parameters_47","title":"Parameters","text":"<ul> <li>y: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_1","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I64/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I64/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I64/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I64/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I64/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I64/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I64/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I64/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I64/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I64/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I64/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I64/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I64/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I64/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I64/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: I64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I64/#parameters_48","title":"Parameters","text":"<ul> <li>that: I64 val</li> </ul>"},{"location":"builtin-I64/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I64/#private-functions","title":"Private Functions","text":""},{"location":"builtin-I64/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: I64 val\n</code></pre>"},{"location":"builtin-I64/#returns_99","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/","title":"I8","text":"<p>[Source] <pre><code>primitive val I8 is\nSignedInteger[I8 val, U8 val] val\n</code></pre></p>"},{"location":"builtin-I8/#implements","title":"Implements","text":"<ul> <li>SignedInteger[I8 val, U8 val] val</li> </ul>"},{"location":"builtin-I8/#constructors","title":"Constructors","text":""},{"location":"builtin-I8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: I8 val)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters","title":"Parameters","text":"<ul> <li>value: I8 val</li> </ul>"},{"location":"builtin-I8/#returns","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-I8/#returns_1","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_2","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: I8 val^\n</code></pre>"},{"location":"builtin-I8/#returns_3","title":"Returns","text":"<ul> <li>I8 val^</li> </ul>"},{"location":"builtin-I8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-I8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_5","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_6","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_2","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_14","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_3","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_15","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_4","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_16","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_5","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_17","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_6","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_18","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_7","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_19","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_8","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_20","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_9","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_21","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_10","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_22","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_11","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_23","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_12","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_24","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_13","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_25","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: I8 val)\n: (I8 val , Bool val)\n</code></pre>"},{"location":"builtin-I8/#parameters_14","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_26","title":"Returns","text":"<ul> <li>(I8 val , Bool val)</li> </ul>"},{"location":"builtin-I8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_15","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_27","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_16","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_28","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_17","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_29","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_18","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_30","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_19","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_31","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: I8 val)\n: (I8 val , I8 val) ?\n</code></pre>"},{"location":"builtin-I8/#parameters_20","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_32","title":"Returns","text":"<ul> <li>(I8 val , I8 val) ?</li> </ul>"},{"location":"builtin-I8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_21","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_33","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: I8 val)\n: I8 val ?\n</code></pre>"},{"location":"builtin-I8/#parameters_22","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_34","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-I8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_35","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_36","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_37","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-I8/#returns_38","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-I8/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-I8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_27","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_28","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_41","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_29","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_42","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_30","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_43","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_31","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_44","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_32","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_45","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_46","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_33","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_47","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_34","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_48","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_35","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_49","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_50","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_36","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_51","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_37","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_52","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_38","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_53","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_39","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: I8 val)\n: (I8 val , I8 val)\n</code></pre>"},{"location":"builtin-I8/#parameters_40","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_55","title":"Returns","text":"<ul> <li>(I8 val , I8 val)</li> </ul>"},{"location":"builtin-I8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: I8 val)\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#parameters_41","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_56","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_57","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_42","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_43","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_44","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_45","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_46","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: I8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-I8/#parameters_47","title":"Parameters","text":"<ul> <li>y: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-I8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#i8_1","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-I8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-I8/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-I8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-I8/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-I8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-I8/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-I8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-I8/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-I8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-I8/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-I8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-I8/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-I8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-I8/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-I8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-I8/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-I8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-I8/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-I8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-I8/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-I8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-I8/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-I8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-I8/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-I8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-I8/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-I8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-I8/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-I8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-I8/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-I8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: I8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-I8/#parameters_48","title":"Parameters","text":"<ul> <li>that: I8 val</li> </ul>"},{"location":"builtin-I8/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-I8/#private-functions","title":"Private Functions","text":""},{"location":"builtin-I8/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: I8 val\n</code></pre>"},{"location":"builtin-I8/#returns_99","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/","title":"ILong","text":"<p>[Source] <pre><code>primitive val ILong is\nSignedInteger[ILong val, ULong val] val\n</code></pre></p>"},{"location":"builtin-ILong/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ILong val, ULong val] val</li> </ul>"},{"location":"builtin-ILong/#constructors","title":"Constructors","text":""},{"location":"builtin-ILong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: ILong val)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters","title":"Parameters","text":"<ul> <li>value: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ILong/#returns_1","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_2","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ILong val^\n</code></pre>"},{"location":"builtin-ILong/#returns_3","title":"Returns","text":"<ul> <li>ILong val^</li> </ul>"},{"location":"builtin-ILong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ILong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_5","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_6","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_14","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_17","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_18","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_19","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_20","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_21","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_22","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_23","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_24","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_25","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_26","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: ILong val)\n: (ILong val , Bool val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_27","title":"Returns","text":"<ul> <li>(ILong val , Bool val)</li> </ul>"},{"location":"builtin-ILong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_28","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_29","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_30","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_31","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_32","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: ILong val)\n: (ILong val , ILong val) ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_33","title":"Returns","text":"<ul> <li>(ILong val , ILong val) ?</li> </ul>"},{"location":"builtin-ILong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_34","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: ILong val)\n: ILong val ?\n</code></pre>"},{"location":"builtin-ILong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_35","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-ILong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_36","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_37","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_38","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: ULong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ILong/#returns_39","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ILong/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ILong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_41","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_42","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_43","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_44","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_45","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_46","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_47","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_48","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_49","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_50","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_51","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_52","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_53","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_54","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_55","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: ILong val)\n: (ILong val , ILong val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_56","title":"Returns","text":"<ul> <li>(ILong val , ILong val)</li> </ul>"},{"location":"builtin-ILong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: ILong val)\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_57","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_58","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: ILong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ILong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ILong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_1","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ILong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ILong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ILong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ILong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ILong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ILong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ILong/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ILong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ILong/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ILong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ILong/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ILong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ILong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ILong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ILong/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ILong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ILong/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ILong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ILong/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ILong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ILong/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ILong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ILong/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ILong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: ILong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ILong/#parameters_48","title":"Parameters","text":"<ul> <li>that: ILong val</li> </ul>"},{"location":"builtin-ILong/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ILong/#private-functions","title":"Private Functions","text":""},{"location":"builtin-ILong/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: ILong val\n</code></pre>"},{"location":"builtin-ILong/#returns_99","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/","title":"ISize","text":"<p>[Source] <pre><code>primitive val ISize is\nSignedInteger[ISize val, USize val] val\n</code></pre></p>"},{"location":"builtin-ISize/#implements","title":"Implements","text":"<ul> <li>SignedInteger[ISize val, USize val] val</li> </ul>"},{"location":"builtin-ISize/#constructors","title":"Constructors","text":""},{"location":"builtin-ISize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: ISize val)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters","title":"Parameters","text":"<ul> <li>value: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ISize/#returns_1","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_2","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ISize val^\n</code></pre>"},{"location":"builtin-ISize/#returns_3","title":"Returns","text":"<ul> <li>ISize val^</li> </ul>"},{"location":"builtin-ISize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ISize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_5","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_6","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_2","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_14","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_3","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_15","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_4","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_5","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_6","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_18","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_7","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_19","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_8","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_20","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_9","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_21","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_10","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_22","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_11","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_23","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_12","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_24","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_13","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_25","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: ISize val)\n: (ISize val , Bool val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_14","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_26","title":"Returns","text":"<ul> <li>(ISize val , Bool val)</li> </ul>"},{"location":"builtin-ISize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_15","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_27","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_16","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_28","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_17","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_29","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_18","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_30","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_19","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_31","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: ISize val)\n: (ISize val , ISize val) ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_20","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_32","title":"Returns","text":"<ul> <li>(ISize val , ISize val) ?</li> </ul>"},{"location":"builtin-ISize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_21","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: ISize val)\n: ISize val ?\n</code></pre>"},{"location":"builtin-ISize/#parameters_22","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-ISize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_35","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_36","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_37","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: USize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-ISize/#returns_38","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ISize/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ISize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_27","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_40","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_28","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_41","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_29","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_42","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_30","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_43","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_31","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_44","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_32","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_45","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_33","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_47","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_34","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_48","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_35","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_49","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_50","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_36","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_51","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_37","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_52","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_38","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_53","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_39","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_54","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: ISize val)\n: (ISize val , ISize val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_40","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_55","title":"Returns","text":"<ul> <li>(ISize val , ISize val)</li> </ul>"},{"location":"builtin-ISize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: ISize val)\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#parameters_41","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_56","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_57","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_42","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_43","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_44","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_45","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_46","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: ISize val)\n: Bool val\n</code></pre>"},{"location":"builtin-ISize/#parameters_47","title":"Parameters","text":"<ul> <li>y: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ISize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_1","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ISize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ISize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ISize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ISize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ISize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ISize/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ISize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ISize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ISize/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ISize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ISize/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ISize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ISize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ISize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ISize/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ISize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ISize/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ISize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ISize/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ISize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ISize/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ISize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ISize/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ISize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: ISize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ISize/#parameters_48","title":"Parameters","text":"<ul> <li>that: ISize val</li> </ul>"},{"location":"builtin-ISize/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ISize/#private-functions","title":"Private Functions","text":""},{"location":"builtin-ISize/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: ISize val\n</code></pre>"},{"location":"builtin-ISize/#returns_99","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-InputNotify/","title":"InputNotify","text":"<p>[Source]</p> <p>Notification for data arriving via an input stream.</p> <pre><code>interface ref InputNotify\n</code></pre>"},{"location":"builtin-InputNotify/#public-functions","title":"Public Functions","text":""},{"location":"builtin-InputNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called when data is available on the stream.</p> <pre><code>fun ref apply(\ndata: Array[U8 val] iso)\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-InputNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Called when no more data will arrive on the stream.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"builtin-InputNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-InputStream/","title":"InputStream","text":"<p>[Source]</p> <p>Asynchronous access to some input stream.</p> <pre><code>interface tag InputStream\n</code></pre>"},{"location":"builtin-InputStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-InputStream/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\nnotify: (InputNotify iso | None val),\nchunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-InputStream/#parameters","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-InputStream/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-Int/","title":"Int","text":"<p>[Source] <pre><code>type Int is\n(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Int/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-Integer/","title":"Integer[A: Integer[A] val]","text":"<p>[Source] <pre><code>trait val Integer[A: Integer[A] val] is\nReal[A] val\n</code></pre></p>"},{"location":"builtin-Integer/#implements","title":"Implements","text":"<ul> <li>Real[A] val</li> </ul>"},{"location":"builtin-Integer/#constructors","title":"Constructors","text":""},{"location":"builtin-Integer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Integer/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Integer/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Integer/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Integer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Integer/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box add_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box sub_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Calculates the quotient of this number and <code>y</code> and the remainder.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by <code>y</code>.</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <p>Floored division, rounded towards negative infinity, as opposed to <code>div</code> which rounds towards zero.</p> <p>Unsafe Operation</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box fld_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <p>Calculates the modulo of this number after floored division by <code>y</code>.</p> <p>Unsafe Operation.</p> <p>If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box mod_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add_partial","title":"add_partial","text":"<p>[Source]</p> <p>Add y to this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box add_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_12","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <p>Subtract y from this number.</p> <p>If the operation overflows/underflows this function errors.</p> <pre><code>fun box sub_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <p>Multiply y with this number.</p> <p>If the operation overflows this function errors.</p> <pre><code>fun box mul_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_14","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#div_partial","title":"div_partial","text":"<p>[Source]</p> <p>Divides this number by <code>y</code>, rounds the result towards zero.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box div_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_15","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <p>Calculates the remainder of this number divided by y. The result has the sign of the dividend.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box rem_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_16","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <p>Divides this number by y and calculates the remainder of the operation.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box divrem_partial(\ny: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_17","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-Integer/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <p>If y is <code>0</code> or the operation overflows, this function errors</p> <pre><code>fun box fld_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_18","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <p>Calculates the modulo of this number and <code>y</code> after floored division (<code>fld</code>). The result has the sign of the divisor.</p> <p>If y is <code>0</code> or the operation overflows, this function errors.</p> <pre><code>fun box mod_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-Integer/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_19","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Integer/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#addc","title":"addc","text":"<p>[Source]</p> <p>Add <code>y</code> to this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box addc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_21","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#subc","title":"subc","text":"<p>[Source]</p> <p>Subtract <code>y</code> from this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box subc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_22","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#mulc","title":"mulc","text":"<p>[Source]</p> <p>Multiply <code>y</code> with this integer and return the result and a flag indicating overflow.</p> <pre><code>fun box mulc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_23","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#divc","title":"divc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result and a flag indicating overflow or division by zero.</p> <pre><code>fun box divc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_24","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#remc","title":"remc","text":"<p>[Source]</p> <p>Calculate the remainder of this number divided by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the dividend.</p> <pre><code>fun box remc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_25","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#fldc","title":"fldc","text":"<p>[Source]</p> <p>Divide this integer by <code>y</code> and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero.</p> <pre><code>fun box fldc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_26","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#modc","title":"modc","text":"<p>[Source]</p> <p>Calculate the modulo of this number after floored division by <code>y</code> and return the result and a flag indicating division by zero or overflow.</p> <p>The result will have the sign of the divisor.</p> <pre><code>fun box modc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_27","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-Integer/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_31","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <p>Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183).</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_34","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_35","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_36","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_37","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Integer/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_38","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Integer/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_40","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_36","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_43","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_37","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_38","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_39","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_46","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_47","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Integer/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_48","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Integer/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_42","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Integer/#parameters_43","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Integer/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Integer/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Integer/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Integer/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_54","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_55","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_57","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_58","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_59","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_60","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_61","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_62","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_63","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_64","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_66","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_68","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_69","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_70","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Integer/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_71","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Integer/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Integer/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_73","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Integer/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_74","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Integer/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Integer/#returns_75","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Integer/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Integer/#returns_76","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Integer/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Integer/#returns_77","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Integer/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Integer/#returns_78","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Integer/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_79","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Integer/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Integer/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Integer/#returns_81","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Integer/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Integer/#returns_82","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Integer/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Integer/#returns_83","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Integer/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Integer/#returns_84","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Integer/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Integer/#returns_85","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Integer/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Integer/#parameters_44","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Integer/#returns_86","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Integer/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Integer/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: A\n</code></pre>"},{"location":"builtin-Integer/#returns_87","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Iterator/","title":"Iterator[A: A]","text":"<p>[Source]</p> <p>Iterators generate a series of values, one value at a time on each call to <code>next()</code>.</p> <p>An Iterator is considered exhausted, once its <code>has_next()</code> method returns <code>false</code>. Thus every call to <code>next()</code> should be preceeded with a call to <code>has_next()</code> to check for exhaustiveness.</p>"},{"location":"builtin-Iterator/#usage","title":"Usage","text":"<p>Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this:</p> <pre><code>while iterator.has_next() do\nlet elem = iterator.next()?\n// do something with elem\nend\n</code></pre> <p>The <code>For</code>-loop provides a more concise way of iteration:</p> <pre><code>for elem in iterator do\n// do something with elem\nend\n</code></pre> <p>Iteration using <code>While</code> is more flexible as it allows to continue iterating if a call to <code>next()</code> errors. The <code>For</code>-loop does not allow this.</p>"},{"location":"builtin-Iterator/#implementing-iterators","title":"Implementing Iterators","text":"<p>Iterator implementations need to adhere to the following rules to be considered well-behaved:</p> <ul> <li>If the Iterator is exhausted, <code>has_next()</code> needs to return <code>false</code>.</li> <li>Once <code>has_next()</code> returned <code>false</code> it is not allowed to switch back to <code>true</code>   (Unless the Iterator supports rewinding)</li> <li><code>has_next()</code> does not change its returned value if <code>next()</code> has not been called.   That means, that between two calls to <code>next()</code> any number of calls to <code>has_next()</code>   need to return the same value. (Unless the Iterator supports rewinding)</li> <li>A call to <code>next()</code> erroring does not necessarily denote exhaustiveness.</li> </ul>"},{"location":"builtin-Iterator/#example","title":"Example","text":"<pre><code>// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\nvar _cur: USize\nvar _has_next: Bool = true\nnew ref create(from: USize) =&gt;\n_cur = from\nfun ref has_next(): Bool =&gt;\n_has_next\nfun ref next(): USize =&gt;\nlet elem = _cur = _cur - 1\nif elem == 0 then\n_has_next = false\nend\nelem\n</code></pre> <pre><code>interface ref Iterator[A: A]\n</code></pre>"},{"location":"builtin-Iterator/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Iterator/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Returns <code>true</code> if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to <code>next()</code> is a valid part of this iterator.</p> <p>Returns <code>false</code> if this Iterator is exhausted.</p> <p>The behavior of <code>next()</code> after this function returned <code>false</code> is undefined, it might throw an error or return values which are not part of this Iterator.</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-Iterator/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Iterator/#next","title":"next","text":"<p>[Source]</p> <p>Generate the next value.</p> <p>This might error, which does not necessarily mean that the Iterator is exhausted.</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"builtin-Iterator/#returns_1","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-Less/","title":"Less","text":"<p>[Source] <pre><code>primitive val Less is\nEquatable[(Less val | Equal val | Greater val)] ref\n</code></pre></p>"},{"location":"builtin-Less/#implements","title":"Implements","text":"<ul> <li>Equatable[(Less val | Equal val | Greater val)] ref</li> </ul>"},{"location":"builtin-Less/#constructors","title":"Constructors","text":""},{"location":"builtin-Less/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Less val^\n</code></pre>"},{"location":"builtin-Less/#returns","title":"Returns","text":"<ul> <li>Less val^</li> </ul>"},{"location":"builtin-Less/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Less/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Less/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Less/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Less/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: (Less val | Equal val | Greater val))\n: Bool val\n</code></pre>"},{"location":"builtin-Less/#parameters_1","title":"Parameters","text":"<ul> <li>that: (Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Less/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/","title":"None","text":"<p>[Source] <pre><code>primitive val None is\nStringable box\n</code></pre></p>"},{"location":"builtin-None/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> </ul>"},{"location":"builtin-None/#constructors","title":"Constructors","text":""},{"location":"builtin-None/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: None val^\n</code></pre>"},{"location":"builtin-None/#returns","title":"Returns","text":"<ul> <li>None val^</li> </ul>"},{"location":"builtin-None/#public-functions","title":"Public Functions","text":""},{"location":"builtin-None/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-None/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-None/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-None/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: None val)\n: Bool val\n</code></pre>"},{"location":"builtin-None/#parameters_1","title":"Parameters","text":"<ul> <li>that: None val</li> </ul>"},{"location":"builtin-None/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-NullablePointer/","title":"NullablePointer[A: A]","text":"<p>[Source]</p> <p>A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI.</p> <p>An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None).</p> <pre><code>struct ref NullablePointer[A: A]\n</code></pre>"},{"location":"builtin-NullablePointer/#constructors","title":"Constructors","text":""},{"location":"builtin-NullablePointer/#create","title":"create","text":"<p>[Source]</p> <p>This re-encodes the type of <code>that</code> from A to NullablePointer[A], allowing <code>that</code> to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for <code>that</code>.</p> <pre><code>new ref create(\nthat: A)\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#parameters","title":"Parameters","text":"<ul> <li>that: A</li> </ul>"},{"location":"builtin-NullablePointer/#returns","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#none","title":"none","text":"<p>[Source]</p> <p>This returns a null pointer typed as a NullablePointer[A].</p> <pre><code>new ref none()\n: NullablePointer[A] ref^\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_1","title":"Returns","text":"<ul> <li>NullablePointer[A] ref^</li> </ul>"},{"location":"builtin-NullablePointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-NullablePointer/#apply","title":"apply","text":"<p>[Source]</p> <p>This re-encodes the type of <code>this</code> from NullablePointer[A] to A, allowing <code>this</code> to be assigned to a field of variable of type A. If <code>this</code> is a null pointer, an error is raised.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_2","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-NullablePointer/#is_none","title":"is_none","text":"<p>[Source]</p> <p>Returns true if <code>this</code> is null (ie apply would raise an error).</p> <pre><code>fun box is_none()\n: Bool val\n</code></pre>"},{"location":"builtin-NullablePointer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Number/","title":"Number","text":"<p>[Source] <pre><code>type Number is\n(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n</code></pre></p>"},{"location":"builtin-Number/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)</li> </ul>"},{"location":"builtin-OutStream/","title":"OutStream","text":"<p>[Source]</p> <p>Asnychronous access to some output stream.</p> <pre><code>interface tag OutStream\n</code></pre>"},{"location":"builtin-OutStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-OutStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-OutStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-OutStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-OutStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-OutStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush the stream.</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-Platform/","title":"Platform","text":"<p>[Source] <pre><code>primitive val Platform\n</code></pre></p>"},{"location":"builtin-Platform/#constructors","title":"Constructors","text":""},{"location":"builtin-Platform/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Platform val^\n</code></pre>"},{"location":"builtin-Platform/#returns","title":"Returns","text":"<ul> <li>Platform val^</li> </ul>"},{"location":"builtin-Platform/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Platform/#bsd","title":"bsd","text":"<p>[Source]</p> <pre><code>fun box bsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#freebsd","title":"freebsd","text":"<p>[Source]</p> <pre><code>fun box freebsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#dragonfly","title":"dragonfly","text":"<p>[Source]</p> <pre><code>fun box dragonfly()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#openbsd","title":"openbsd","text":"<p>[Source]</p> <pre><code>fun box openbsd()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#linux","title":"linux","text":"<p>[Source]</p> <pre><code>fun box linux()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#osx","title":"osx","text":"<p>[Source]</p> <pre><code>fun box osx()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#posix","title":"posix","text":"<p>[Source]</p> <pre><code>fun box posix()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#windows","title":"windows","text":"<p>[Source]</p> <pre><code>fun box windows()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#x86","title":"x86","text":"<p>[Source]</p> <pre><code>fun box x86()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#arm","title":"arm","text":"<p>[Source]</p> <pre><code>fun box arm()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#riscv","title":"riscv","text":"<p>[Source]</p> <pre><code>fun box riscv()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#lp64","title":"lp64","text":"<p>[Source]</p> <pre><code>fun box lp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#llp64","title":"llp64","text":"<p>[Source]</p> <pre><code>fun box llp64()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ilp32","title":"ilp32","text":"<p>[Source]</p> <pre><code>fun box ilp32()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#bigendian","title":"bigendian","text":"<p>[Source]</p> <pre><code>fun box bigendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#littleendian","title":"littleendian","text":"<p>[Source]</p> <pre><code>fun box littleendian()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#native128","title":"native128","text":"<p>[Source]</p> <pre><code>fun box native128()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#debug","title":"debug","text":"<p>[Source]</p> <pre><code>fun box debug()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestats","title":"runtimestats","text":"<p>[Source]</p> <pre><code>fun box runtimestats()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#runtimestatsmessages","title":"runtimestatsmessages","text":"<p>[Source]</p> <pre><code>fun box runtimestatsmessages()\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Platform/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Platform val)\n: Bool val\n</code></pre>"},{"location":"builtin-Platform/#parameters_1","title":"Parameters","text":"<ul> <li>that: Platform val</li> </ul>"},{"location":"builtin-Platform/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/","title":"Pointer[A: A]","text":"<p>[Source]</p> <p>A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety.</p> <pre><code>struct ref Pointer[A: A]\n</code></pre>"},{"location":"builtin-Pointer/#constructors","title":"Constructors","text":""},{"location":"builtin-Pointer/#create","title":"create","text":"<p>[Source]</p> <p>A null pointer.</p> <pre><code>new ref create()\n: Pointer[A] ref^\n</code></pre>"},{"location":"builtin-Pointer/#returns","title":"Returns","text":"<ul> <li>Pointer[A] ref^</li> </ul>"},{"location":"builtin-Pointer/#_alloc","title":"_alloc","text":"<p>[Source]</p> <p>Space for len instances of A.</p> <pre><code>new ref _alloc(\nlen: USize val)\n: Pointer[A] ref^\n</code></pre>"},{"location":"builtin-Pointer/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_1","title":"Returns","text":"<ul> <li>Pointer[A] ref^</li> </ul>"},{"location":"builtin-Pointer/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Pointer/#offset","title":"offset","text":"<p>[Source]</p> <p>Return a tag pointer to the n-th element.</p> <pre><code>fun tag offset(\nn: USize val)\n: Pointer[A] tag\n</code></pre>"},{"location":"builtin-Pointer/#parameters_1","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_2","title":"Returns","text":"<ul> <li>Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#usize","title":"usize","text":"<p>[Source]</p> <p>Convert the pointer into an integer.</p> <pre><code>fun tag usize()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#is_null","title":"is_null","text":"<p>[Source]</p> <p>Return true for a null pointer, false for anything else.</p> <pre><code>fun tag is_null()\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#eq","title":"eq","text":"<p>[Source]</p> <p>Return true if this address is that address.</p> <pre><code>fun tag eq(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_2","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#lt","title":"lt","text":"<p>[Source]</p> <p>Return true if this address is less than that address.</p> <pre><code>fun tag lt(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_3","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun tag ne(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_4","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun tag le(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_5","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun tag ge(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_6","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun tag gt(\nthat: Pointer[A] tag)\n: Bool val\n</code></pre>"},{"location":"builtin-Pointer/#parameters_7","title":"Parameters","text":"<ul> <li>that: Pointer[A] tag</li> </ul>"},{"location":"builtin-Pointer/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Pointer/#hash","title":"hash","text":"<p>[Source]</p> <p>Returns a hash of the address.</p> <pre><code>fun tag hash()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Returns a 64-bit hash of the address.</p> <pre><code>fun tag hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Pointer/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Pointer/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Pointer/#_realloc","title":"_realloc","text":"<p>[Source]</p> <p>Keep the contents, but reserve space for len instances of A.</p> <pre><code>fun ref _realloc(\nlen: USize val,\ncopy: USize val)\n: Pointer[A] ref\n</code></pre>"},{"location":"builtin-Pointer/#parameters_8","title":"Parameters","text":"<ul> <li>len: USize val</li> <li>copy: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_13","title":"Returns","text":"<ul> <li>Pointer[A] ref</li> </ul>"},{"location":"builtin-Pointer/#_unsafe","title":"_unsafe","text":"<p>[Source]</p> <p>Unsafe change in reference capability.</p> <pre><code>fun tag _unsafe()\n: Pointer[A] ref\n</code></pre>"},{"location":"builtin-Pointer/#returns_14","title":"Returns","text":"<ul> <li>Pointer[A] ref</li> </ul>"},{"location":"builtin-Pointer/#_convertb-b","title":"_convert[B: B]","text":"<p>[Source]</p> <p>Convert from Pointer[A] to Pointer[B].</p> <pre><code>fun box _convert[B: B]()\n: this-&gt;Pointer[B] ref\n</code></pre>"},{"location":"builtin-Pointer/#returns_15","title":"Returns","text":"<ul> <li>this-&gt;Pointer[B] ref</li> </ul>"},{"location":"builtin-Pointer/#_apply","title":"_apply","text":"<p>[Source]</p> <p>Retrieve index i.</p> <pre><code>fun box _apply(\ni: USize val)\n: this-&gt;A\n</code></pre>"},{"location":"builtin-Pointer/#parameters_9","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_16","title":"Returns","text":"<ul> <li>this-&gt;A</li> </ul>"},{"location":"builtin-Pointer/#_update","title":"_update","text":"<p>[Source]</p> <p>Set index i and return the previous value.</p> <pre><code>fun ref _update(\ni: USize val,\nvalue: A!)\n: A^\n</code></pre>"},{"location":"builtin-Pointer/#parameters_10","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A!</li> </ul>"},{"location":"builtin-Pointer/#returns_17","title":"Returns","text":"<ul> <li>A^</li> </ul>"},{"location":"builtin-Pointer/#_offset","title":"_offset","text":"<p>[Source]</p> <p>Return a pointer to the n-th element.</p> <pre><code>fun box _offset(\nn: USize val)\n: this-&gt;Pointer[A] ref\n</code></pre>"},{"location":"builtin-Pointer/#parameters_11","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_18","title":"Returns","text":"<ul> <li>this-&gt;Pointer[A] ref</li> </ul>"},{"location":"builtin-Pointer/#_element_size","title":"_element_size","text":"<p>[Source]</p> <p>Return the size of a single element in an array of type A.</p> <pre><code>fun tag _element_size()\n: USize val\n</code></pre>"},{"location":"builtin-Pointer/#returns_19","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Pointer/#_insert","title":"_insert","text":"<p>[Source]</p> <p>Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len.</p> <pre><code>fun ref _insert(\nn: USize val,\nlen: USize val)\n: Pointer[A] ref\n</code></pre>"},{"location":"builtin-Pointer/#parameters_12","title":"Parameters","text":"<ul> <li>n: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_20","title":"Returns","text":"<ul> <li>Pointer[A] ref</li> </ul>"},{"location":"builtin-Pointer/#_delete","title":"_delete","text":"<p>[Source]</p> <p>Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element.</p> <pre><code>fun ref _delete(\nn: USize val,\nlen: USize val)\n: A^\n</code></pre>"},{"location":"builtin-Pointer/#parameters_13","title":"Parameters","text":"<ul> <li>n: USize val</li> <li>len: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_21","title":"Returns","text":"<ul> <li>A^</li> </ul>"},{"location":"builtin-Pointer/#_copy_to","title":"_copy_to","text":"<p>[Source]</p> <p>Copy n elements from this to that.</p> <pre><code>fun box _copy_to(\nthat: Pointer[this-&gt;A!] ref,\nn: USize val)\n: this-&gt;Pointer[A] ref\n</code></pre>"},{"location":"builtin-Pointer/#parameters_14","title":"Parameters","text":"<ul> <li>that: Pointer[this-&gt;A!] ref</li> <li>n: USize val</li> </ul>"},{"location":"builtin-Pointer/#returns_22","title":"Returns","text":"<ul> <li>this-&gt;Pointer[A] ref</li> </ul>"},{"location":"builtin-ReadElement/","title":"ReadElement[A: A]","text":"<p>[Source]</p> <p>Used to show that a ReadSeq can return an element of a specific unmodified type.</p> <pre><code>interface box ReadElement[A: A]\n</code></pre>"},{"location":"builtin-ReadElement/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadElement/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ni: USize val)\n: A ?\n</code></pre>"},{"location":"builtin-ReadElement/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadElement/#returns","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-ReadSeq/","title":"ReadSeq[A: A]","text":"<p>[Source]</p> <p>The readable interface of a sequence.</p> <pre><code>interface box ReadSeq[A: A]\n</code></pre>"},{"location":"builtin-ReadSeq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ReadSeq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-ReadSeq/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ReadSeq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this-&gt;A, not A.</p> <pre><code>fun box apply(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-ReadSeq/#parameters","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-ReadSeq/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-ReadSeq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence. Note that this iterates over this-&gt;A, not A.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-ReadSeq/#returns_2","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Real/","title":"Real[A: Real[A] val]","text":"<p>[Source] <pre><code>trait val Real[A: Real[A] val] is\nStringable box,\n_ArithmeticConvertible val,\nComparable[A] ref\n</code></pre></p>"},{"location":"builtin-Real/#implements","title":"Implements","text":"<ul> <li>Stringable box</li> <li>_ArithmeticConvertible val</li> <li>Comparable[A] ref</li> </ul>"},{"location":"builtin-Real/#constructors","title":"Constructors","text":""},{"location":"builtin-Real/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Real/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-Real/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-Real/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-Real/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Real/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#div","title":"div","text":"<p>[Source]</p> <p>Integer division, rounded towards zero.</p> <pre><code>fun box div(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-Real/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_8","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-Real/#rem","title":"rem","text":"<p>[Source]</p> <p>Calculate the remainder after integer division, rounded towards zero (<code>div</code>).</p> <p>The result has the sign of the dividend.</p> <pre><code>fun box rem(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_9","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-Real/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#fld","title":"fld","text":"<p>[Source]</p> <p>Floored integer division, rounded towards negative infinity.</p> <pre><code>fun box fld(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#mod","title":"mod","text":"<p>[Source]</p> <p>Calculate the modulo after floored integer division, rounded towards negative infinity (<code>fld</code>).</p> <p>The result has the sign of the divisor.</p> <pre><code>fun box mod(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_12","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_10","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_11","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_12","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_13","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_14","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-Real/#parameters_15","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Real/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-Real/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-Real/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-Real/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_21","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#string","title":"string","text":"<pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Real/#returns_23","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-Real/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_24","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_25","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_26","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_27","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_28","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_29","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_30","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_31","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_32","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_35","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_36","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_38","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_39","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-Real/#returns_40","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-Real/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-Real/#returns_41","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-Real/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-Real/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-Real/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-Real/#returns_43","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-Real/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-Real/#returns_44","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-Real/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-Real/#returns_45","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-Real/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-Real/#returns_46","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-Real/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-Real/#returns_47","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-Real/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-Real/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-Real/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-Real/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-Real/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-Real/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-Real/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-Real/#returns_51","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-Real/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-Real/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-Real/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-Real/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Real/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-Real/#returns_54","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-Real/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-Real/#returns_55","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-Real/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-Real/#parameters_18","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-Real/#returns_56","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-Real/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Real/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: A\n</code></pre>"},{"location":"builtin-Real/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-RuntimeOptions/","title":"RuntimeOptions","text":"<p>[Source]</p> <p>Pony struct for the Pony runtime options C struct that can be used to override the Pony runtime defaults via code compiled into the program.</p> <p>The way this is done is by adding the following function to your <code>Main</code> actor:</p> <pre><code>  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n</code></pre> <p>and then overriding the fields of <code>rto</code> (the <code>RuntimeOptions</code> instance) as needed.</p> <p>NOTE: Command line arguments still any values set via       <code>@runtime_override_defaults</code>.</p> <p>The following example overrides the <code>--ponyhelp</code> argument to default it to <code>true</code> instead of <code>false</code> causing the compiled program to always display the Pony runtime help:</p> <pre><code>actor Main\n  new create(env: Env) =&gt;\n    env.out.print(\"Hello, world.\")\n\n  fun @runtime_override_defaults(rto: RuntimeOptions) =&gt;\n    rto.ponyhelp = true\n</code></pre> <pre><code>struct ref RuntimeOptions\n</code></pre>"},{"location":"builtin-RuntimeOptions/#constructors","title":"Constructors","text":""},{"location":"builtin-RuntimeOptions/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: RuntimeOptions iso^\n</code></pre>"},{"location":"builtin-RuntimeOptions/#returns","title":"Returns","text":"<ul> <li>RuntimeOptions iso^</li> </ul>"},{"location":"builtin-RuntimeOptions/#public-fields","title":"Public fields","text":""},{"location":"builtin-RuntimeOptions/#var-ponymaxthreads-u32-val","title":"var ponymaxthreads: U32 val","text":"<p>[Source]</p> <p>Use N scheduler threads. Defaults to the number of cores (not hyperthreads) available. This can't be larger than the number of cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyminthreads-u32-val","title":"var ponyminthreads: U32 val","text":"<p>[Source]</p> <p>Minimum number of active scheduler threads allowed. Defaults to 0, meaning that all scheduler threads are allowed to be suspended when no work is available. This can't be larger than --ponymaxthreads if provided, or the physical cores available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoscale-bool-val","title":"var ponynoscale: Bool val","text":"<p>[Source]</p> <p>Don't scale down the scheduler threads. See --ponymaxthreads on how to specify the number of threads explicitly. Can't be used with --ponyminthreads.</p>"},{"location":"builtin-RuntimeOptions/#var-ponysuspendthreshold-u32-val","title":"var ponysuspendthreshold: U32 val","text":"<p>[Source]</p> <p>Amount of idle time before a scheduler thread suspends itself to minimize resource consumption (max 1000 ms, min 1 ms). Defaults to 1 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponycdinterval-u32-val","title":"var ponycdinterval: U32 val","text":"<p>[Source]</p> <p>Run cycle detection every N ms (max 1000 ms, min 10 ms). Defaults to 100 ms.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcinitial-usize-val","title":"var ponygcinitial: USize val","text":"<p>[Source]</p> <p>Defer garbage collection until an actor is using at least 2^N bytes. Defaults to 2^14.</p>"},{"location":"builtin-RuntimeOptions/#var-ponygcfactor-f64-val","title":"var ponygcfactor: F64 val","text":"<p>[Source]</p> <p>After GC, an actor will next be GC'd at a heap memory usage N times its current value. This is a floating point value. Defaults to 2.0.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoyield-bool-val","title":"var ponynoyield: Bool val","text":"<p>[Source]</p> <p>Do not yield the CPU when no work is available.</p>"},{"location":"builtin-RuntimeOptions/#var-ponynoblock-bool-val","title":"var ponynoblock: Bool val","text":"<p>[Source]</p> <p>Do not send block messages to the cycle detector.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypin-bool-val","title":"var ponypin: Bool val","text":"<p>[Source]</p> <p>Pin scheduler threads to CPU cores. The ASIO thread can also be pinned if <code>--ponypinasio</code> is set.</p>"},{"location":"builtin-RuntimeOptions/#var-ponypinasio-bool-val","title":"var ponypinasio: Bool val","text":"<p>[Source]</p> <p>Pin the ASIO thread to a CPU the way scheduler threads are pinned to CPUs. Requires <code>--ponypin</code> to be set to have any effect.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyprintstatsinterval-u32-val","title":"var ponyprintstatsinterval: U32 val","text":"<p>[Source]</p> <p>Print actor stats before an actor is destroyed and print scheduler stats every X seconds. Defaults to -1 (never).</p>"},{"location":"builtin-RuntimeOptions/#var-ponyversion-bool-val","title":"var ponyversion: Bool val","text":"<p>[Source]</p> <p>Print the version of the compiler and exit.</p>"},{"location":"builtin-RuntimeOptions/#var-ponyhelp-bool-val","title":"var ponyhelp: Bool val","text":"<p>[Source]</p> <p>Print the runtime usage options and exit.</p>"},{"location":"builtin-Seq/","title":"Seq[A: A]","text":"<p>[Source]</p> <p>A sequence of elements.</p> <pre><code>interface ref Seq[A: A]\n</code></pre>"},{"location":"builtin-Seq/#constructors","title":"Constructors","text":""},{"location":"builtin-Seq/#create","title":"create","text":"<p>[Source]</p> <p>Create a sequence, reserving space for len elements.</p> <pre><code>new ref create(\nlen: USize val = 0)\n: Seq[A] ref^\n</code></pre>"},{"location":"builtin-Seq/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-Seq/#returns","title":"Returns","text":"<ul> <li>Seq[A] ref^</li> </ul>"},{"location":"builtin-Seq/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Seq/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len elements.</p> <pre><code>fun ref reserve(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_1","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of elements in the sequence.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-Seq/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Seq/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th element of the sequence. Raises an error if the index is out of bounds.</p> <pre><code>fun box apply(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_2","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"builtin-Seq/#update","title":"update","text":"<p>[Source]</p> <p>Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds.</p> <pre><code>fun ref update(\ni: USize val,\nvalue: A)\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#parameters_3","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_4","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#clear","title":"clear","text":"<p>[Source]</p> <p>Removes all elements from the sequence.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-Seq/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#push","title":"push","text":"<p>[Source]</p> <p>Adds an element to the end of the sequence.</p> <pre><code>fun ref push(\nvalue: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_4","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes an element from the end of the sequence.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_7","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds an element to the beginning of the sequence.</p> <pre><code>fun ref unshift(\nvalue: A)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_5","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-Seq/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes an element from the beginning of the sequence.</p> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"builtin-Seq/#returns_9","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"builtin-Seq/#append","title":"append","text":"<p>[Source]</p> <p>Add len elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref append(\nseq: (ReadSeq[A] box &amp; ReadElement[A^] box),\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_6","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the end of the list, starting from the given offset.</p> <pre><code>fun ref concat(\niter: Iterator[A^] ref,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_7","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-Seq/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing.</p> <pre><code>fun ref truncate(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-Seq/#parameters_8","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-Seq/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Seq/#values","title":"values","text":"<p>[Source]</p> <p>Returns an iterator over the elements of the sequence.</p> <pre><code>fun box values()\n: Iterator[this-&gt;A] ref^\n</code></pre>"},{"location":"builtin-Seq/#returns_13","title":"Returns","text":"<ul> <li>Iterator[this-&gt;A] ref^</li> </ul>"},{"location":"builtin-Signed/","title":"Signed","text":"<p>[Source] <pre><code>type Signed is\n(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n</code></pre></p>"},{"location":"builtin-Signed/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)</li> </ul>"},{"location":"builtin-SignedInteger/","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]","text":"<p>[Source] <pre><code>trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is\nInteger[A] val\n</code></pre></p>"},{"location":"builtin-SignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-SignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-SignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-SignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_4","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\ny: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\ny: B)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: B</li> </ul>"},{"location":"builtin-SignedInteger/#returns_8","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_9","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_10","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_11","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_12","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_13","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: B\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_14","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"builtin-SignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_16","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-SignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_21","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_25","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_26","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_30","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-SignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_31","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-SignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_34","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_35","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_36","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_37","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_39","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-SignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_41","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_42","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_43","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_44","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_51","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-SignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_55","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_56","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_57","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-SignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_62","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_63","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_64","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_66","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_67","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_71","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_72","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_73","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_74","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_78","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_79","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_80","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_81","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_82","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-SignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_83","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-SignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-SignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-SignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_87","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-SignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_88","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-SignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_89","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-SignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_90","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-SignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-SignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-SignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-SignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_94","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-SignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_95","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_96","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-SignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_97","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-SignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-SignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-SignedInteger/#returns_98","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-SignedInteger/#private-functions","title":"Private Functions","text":""},{"location":"builtin-SignedInteger/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: A\n</code></pre>"},{"location":"builtin-SignedInteger/#returns_99","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-SourceLoc/","title":"SourceLoc","text":"<p>[Source]</p> <p>Represents a location in a Pony source file, as reported by <code>__loc</code>.</p> <pre><code>interface val SourceLoc\n</code></pre>"},{"location":"builtin-SourceLoc/#public-functions","title":"Public Functions","text":""},{"location":"builtin-SourceLoc/#file","title":"file","text":"<p>[Source]</p> <p>Name and path of source file.</p> <pre><code>fun box file()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#type_name","title":"type_name","text":"<p>[Source]</p> <p>Name of nearest class, actor, primitive, struct, interface, or trait.</p> <pre><code>fun box type_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#method_name","title":"method_name","text":"<p>[Source]</p> <p>Name of containing method.</p> <pre><code>fun box method_name()\n: String val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-SourceLoc/#line","title":"line","text":"<p>[Source]</p> <p>Line number within file. Line numbers start at 1.</p> <pre><code>fun box line()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-SourceLoc/#pos","title":"pos","text":"<p>[Source]</p> <p>Character position on line. Character positions start at 1.</p> <pre><code>fun box pos()\n: USize val\n</code></pre>"},{"location":"builtin-SourceLoc/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-StdStream/","title":"StdStream","text":"<p>[Source]</p> <p>Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment.</p> <pre><code>actor tag StdStream\n</code></pre>"},{"location":"builtin-StdStream/#constructors","title":"Constructors","text":""},{"location":"builtin-StdStream/#_out","title":"_out","text":"<p>[Source]</p> <p>Create an async stream for stdout.</p> <pre><code>new tag _out()\n: StdStream tag^\n</code></pre>"},{"location":"builtin-StdStream/#returns","title":"Returns","text":"<ul> <li>StdStream tag^</li> </ul>"},{"location":"builtin-StdStream/#_err","title":"_err","text":"<p>[Source]</p> <p>Create an async stream for stderr.</p> <pre><code>new tag _err()\n: StdStream tag^\n</code></pre>"},{"location":"builtin-StdStream/#returns_1","title":"Returns","text":"<ul> <li>StdStream tag^</li> </ul>"},{"location":"builtin-StdStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-StdStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"builtin-StdStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"builtin-StdStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"builtin-StdStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush any data out to the os (ignoring failures).</p> <pre><code>be flush()\n</code></pre>"},{"location":"builtin-StdStream/#private-functions","title":"Private Functions","text":""},{"location":"builtin-StdStream/#_write","title":"_write","text":"<p>[Source]</p> <p>Write the bytes without explicitly flushing.</p> <pre><code>fun ref _write(\ndata: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"builtin-StdStream/#parameters_4","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-StdStream/#_print","title":"_print","text":"<p>[Source]</p> <p>Write the bytes and a newline without explicitly flushing.</p> <pre><code>fun ref _print(\ndata: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"builtin-StdStream/#parameters_5","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"builtin-StdStream/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Stdin/","title":"Stdin","text":"<p>[Source]</p> <p>Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment.</p> <p>Reading from stdin is done by registering an <code>InputNotify</code>:</p> <pre><code>actor Main\nnew create(env: Env) =&gt;\n// do not forget to call `env.input.dispose` at some point\nenv.input(\nobject iso is InputNotify\nfun ref apply(data: Array[U8] iso) =&gt;\nenv.out.write(String.from_iso_array(consume data))\nfun ref dispose() =&gt;\nenv.out.print(\"Done.\")\nend,\n512)\n</code></pre> <p>Note: For reading user input from a terminal, use the term package.</p> <pre><code>actor tag Stdin is\nAsioEventNotify tag\n</code></pre>"},{"location":"builtin-Stdin/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"builtin-Stdin/#constructors","title":"Constructors","text":""},{"location":"builtin-Stdin/#_create","title":"_create","text":"<p>[Source]</p> <p>Create an asynchronous stdin provider.</p> <pre><code>new tag _create(\nuse_event: Bool val)\n: Stdin tag^\n</code></pre>"},{"location":"builtin-Stdin/#parameters","title":"Parameters","text":"<ul> <li>use_event: Bool val</li> </ul>"},{"location":"builtin-Stdin/#returns","title":"Returns","text":"<ul> <li>Stdin tag^</li> </ul>"},{"location":"builtin-Stdin/#public-behaviours","title":"Public Behaviours","text":""},{"location":"builtin-Stdin/#apply","title":"apply","text":"<p>[Source]</p> <p>Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier.</p> <pre><code>be apply(\nnotify: (InputNotify iso | None val),\nchunk_size: USize val = 32)\n</code></pre>"},{"location":"builtin-Stdin/#parameters_1","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> <li>chunk_size: USize val = 32</li> </ul>"},{"location":"builtin-Stdin/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Clear the notifier in order to shut down input.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"builtin-Stdin/#private-behaviours","title":"Private Behaviours","text":""},{"location":"builtin-Stdin/#_loop_read","title":"_loop_read","text":"<p>[Source]</p> <p>If we are able to read from stdin, schedule another read.</p> <pre><code>be _loop_read()\n</code></pre>"},{"location":"builtin-Stdin/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>When the event fires, read from stdin.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"builtin-Stdin/#parameters_2","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"builtin-Stdin/#_read_again","title":"_read_again","text":"<p>[Source]</p> <p>Resume reading.</p> <pre><code>be _read_again()\n</code></pre>"},{"location":"builtin-Stdin/#private-functions","title":"Private Functions","text":""},{"location":"builtin-Stdin/#_set_notify","title":"_set_notify","text":"<p>[Source]</p> <p>Set the notifier.</p> <pre><code>fun ref _set_notify(\nnotify: (InputNotify iso | None val))\n: None val\n</code></pre>"},{"location":"builtin-Stdin/#parameters_3","title":"Parameters","text":"<ul> <li>notify: (InputNotify iso | None val)</li> </ul>"},{"location":"builtin-Stdin/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-Stdin/#_read","title":"_read","text":"<p>[Source]</p> <p>Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors.</p> <pre><code>fun ref _read()\n: Bool val\n</code></pre>"},{"location":"builtin-Stdin/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-Stdin/#_close_event","title":"_close_event","text":"<p>[Source]</p> <p>Close the event.</p> <pre><code>fun ref _close_event()\n: None val\n</code></pre>"},{"location":"builtin-Stdin/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/","title":"String","text":"<p>[Source]</p> <p>A String is an ordered collection of bytes.</p> <p>Strings don't specify an encoding.</p> <p>Example usage of some common String methods:</p> <pre><code>actor Main\nnew create(env: Env) =&gt;\ntry\n// construct a new string\nlet str = \"Hello\"\n// make an uppercased version\nlet str_upper = str.upper()\n// make a reversed version\nlet str_reversed = str.reverse()\n// add \" world\" to the end of our original string\nlet str_new = str.add(\" world\")\n// count occurrences of letter \"l\"\nlet count = str_new.count(\"l\")\n// find first occurrence of letter \"w\"\nlet first_w = str_new.find(\"w\") ?\n// find first occurrence of letter \"d\"\nlet first_d = str_new.find(\"d\") ?\n// get substring capturing \"world\"\nlet substr = str_new.substring(first_w, first_d+1)\n// clone substring\nlet substr_clone = substr.clone()\n// print our substr\nenv.out.print(consume substr)\nend\n</code></pre> <pre><code>class val String is\nSeq[U8 val] ref,\nComparable[String box] ref,\nStringable box\n</code></pre>"},{"location":"builtin-String/#implements","title":"Implements","text":"<ul> <li>Seq[U8 val] ref</li> <li>Comparable[String box] ref</li> <li>Stringable box</li> </ul>"},{"location":"builtin-String/#constructors","title":"Constructors","text":""},{"location":"builtin-String/#create","title":"create","text":"<p>[Source]</p> <p>An empty string. Enough space for len bytes is reserved.</p> <pre><code>new ref create(\nlen: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_array","title":"from_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer.</p> <pre><code>new val from_array(\ndata: Array[U8 val] val)\n: String val^\n</code></pre>"},{"location":"builtin-String/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#returns_1","title":"Returns","text":"<ul> <li>String val^</li> </ul>"},{"location":"builtin-String/#from_iso_array","title":"from_iso_array","text":"<p>[Source]</p> <p>Create a string from an array, reusing the underlying data pointer</p> <pre><code>new iso from_iso_array(\ndata: Array[U8 val] iso)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_2","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"builtin-String/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#from_cpointer","title":"from_cpointer","text":"<p>[Source]</p> <p>Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cpointer(\nstr: Pointer[U8 val] ref,\nlen: USize val,\nalloc: USize val = 0)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_3","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> <li>len: USize val</li> <li>alloc: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_3","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_cstring","title":"from_cstring","text":"<p>[Source]</p> <p>Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref from_cstring(\nstr: Pointer[U8 val] ref)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_4","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] ref</li> </ul>"},{"location":"builtin-String/#returns_4","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cpointer","title":"copy_cpointer","text":"<p>[Source]</p> <p>Create a string by copying a fixed number of bytes from a pointer.</p> <pre><code>new ref copy_cpointer(\nstr: Pointer[U8 val] box,\nlen: USize val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_5","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_5","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#copy_cstring","title":"copy_cstring","text":"<p>[Source]</p> <p>Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned.</p> <pre><code>new ref copy_cstring(\nstr: Pointer[U8 val] box)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_6","title":"Parameters","text":"<ul> <li>str: Pointer[U8 val] box</li> </ul>"},{"location":"builtin-String/#returns_6","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#from_utf32","title":"from_utf32","text":"<p>[Source]</p> <p>Create a UTF-8 string from a single UTF-32 code point.</p> <pre><code>new ref from_utf32(\nvalue: U32 val)\n: String ref^\n</code></pre>"},{"location":"builtin-String/#parameters_7","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_7","title":"Returns","text":"<ul> <li>String ref^</li> </ul>"},{"location":"builtin-String/#public-functions","title":"Public Functions","text":""},{"location":"builtin-String/#push_utf32","title":"push_utf32","text":"<p>[Source]</p> <p>Push a UTF-32 code point.</p> <pre><code>fun ref push_utf32(\nvalue: U32 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_8","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-String/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cpointer","title":"cpointer","text":"<p>[Source]</p> <p>Returns a C compatible pointer to the underlying string allocation.</p> <pre><code>fun box cpointer(\noffset: USize val = 0)\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#parameters_9","title":"Parameters","text":"<ul> <li>offset: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_9","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#cstring","title":"cstring","text":"<p>[Source]</p> <p>Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation.</p> <pre><code>fun box cstring()\n: Pointer[U8 val] tag\n</code></pre>"},{"location":"builtin-String/#returns_10","title":"Returns","text":"<ul> <li>Pointer[U8 val] tag</li> </ul>"},{"location":"builtin-String/#array","title":"array","text":"<p>[Source]</p> <p>Returns an Array[U8] that reuses the underlying data pointer.</p> <pre><code>fun val array()\n: Array[U8 val] val\n</code></pre>"},{"location":"builtin-String/#returns_11","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"builtin-String/#iso_array","title":"iso_array","text":"<p>[Source]</p> <p>Returns an Array[U8] iso that reuses the underlying data pointer.</p> <pre><code>fun iso iso_array()\n: Array[U8 val] iso^\n</code></pre>"},{"location":"builtin-String/#returns_12","title":"Returns","text":"<ul> <li>Array[U8 val] iso^</li> </ul>"},{"location":"builtin-String/#size","title":"size","text":"<p>[Source]</p> <p>Returns the length of the string data in bytes.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#codepoints","title":"codepoints","text":"<p>[Source]</p> <p>Returns the number of unicode code points in the string between the two offsets. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box codepoints(\nfrom: ISize val = 0,\nto: ISize val = call)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_10","title":"Parameters","text":"<ul> <li>from: ISize val = 0</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#space","title":"space","text":"<p>[Source]</p> <p>Returns the space available for data, not including the null terminator.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Reserve space for len bytes. An additional byte will be reserved for the null terminator.</p> <pre><code>fun ref reserve(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_11","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#compact","title":"compact","text":"<p>[Source]</p> <p>Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#recalc","title":"recalc","text":"<p>[Source]</p> <p>Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed.</p> <pre><code>fun ref recalc()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string.</p> <p>Note that memory is not freed by this operation.</p> <pre><code>fun ref truncate(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_12","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"builtin-String/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim_in_place","title":"trim_in_place","text":"<p>[Source]</p> <p>Trim the string to a portion of itself, covering <code>from</code> until <code>to</code>. Unlike slice, the operation does not allocate a new string nor copy elements.</p> <pre><code>fun ref trim_in_place(\nfrom: USize val = 0,\nto: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_13","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#trim","title":"trim","text":"<p>[Source]</p> <p>Return a shared portion of this string, covering <code>from</code> until <code>to</code>. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun val trim(\nfrom: USize val = 0,\nto: USize val = call)\n: String val\n</code></pre>"},{"location":"builtin-String/#parameters_14","title":"Parameters","text":"<ul> <li>from: USize val = 0</li> <li>to: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"builtin-String/#chop","title":"chop","text":"<p>[Source]</p> <p>Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso chop(\nsplit_point: USize val)\n: (String iso^ , String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_15","title":"Parameters","text":"<ul> <li>split_point: USize val</li> </ul>"},{"location":"builtin-String/#returns_22","title":"Returns","text":"<ul> <li>(String iso^ , String iso^)</li> </ul>"},{"location":"builtin-String/#unchop","title":"unchop","text":"<p>[Source]</p> <p>Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements.</p> <pre><code>fun iso unchop(\nb: String iso)\n: ((String iso^ , String iso^) | String iso^)\n</code></pre>"},{"location":"builtin-String/#parameters_16","title":"Parameters","text":"<ul> <li>b: String iso</li> </ul>"},{"location":"builtin-String/#returns_23","title":"Returns","text":"<ul> <li>((String iso^ , String iso^) | String iso^)</li> </ul>"},{"location":"builtin-String/#is_null_terminated","title":"is_null_terminated","text":"<p>[Source]</p> <p>Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method.</p> <pre><code>fun box is_null_terminated()\n: Bool val\n</code></pre>"},{"location":"builtin-String/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#utf32","title":"utf32","text":"<p>[Source]</p> <p>Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds.</p> <pre><code>fun box utf32(\noffset: ISize val)\n: (U32 val , U8 val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_17","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_25","title":"Returns","text":"<ul> <li>(U32 val , U8 val) ?</li> </ul>"},{"location":"builtin-String/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun box apply(\ni: USize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_18","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"builtin-String/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th byte. Raise an error if the index is out of bounds.</p> <pre><code>fun ref update(\ni: USize val,\nvalue: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_19","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_27","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#at_offset","title":"at_offset","text":"<p>[Source]</p> <p>Returns the byte at the given offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun box at_offset(\noffset: ISize val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_20","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"builtin-String/#returns_28","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#update_offset","title":"update_offset","text":"<p>[Source]</p> <p>Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds.</p> <pre><code>fun ref update_offset(\noffset: ISize val,\nvalue: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_21","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_29","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#clone","title":"clone","text":"<p>[Source]</p> <p>Returns a copy of the string. The resulting string is null-terminated even if the original is not.</p> <pre><code>fun box clone()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_30","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#repeat_str","title":"repeat_str","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times with an optional separator added inbetween repeats.</p> <pre><code>fun box repeat_str(\nnum: USize val = 1,\nsep: String val = \"\")\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_22","title":"Parameters","text":"<ul> <li>num: USize val = 1</li> <li>sep: String val = \"\"</li> </ul>"},{"location":"builtin-String/#returns_31","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#mul","title":"mul","text":"<p>[Source]</p> <p>Returns a copy of the string repeated <code>num</code> times.</p> <pre><code>fun box mul(\nnum: USize val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_23","title":"Parameters","text":"<ul> <li>num: USize val</li> </ul>"},{"location":"builtin-String/#returns_32","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#find","title":"find","text":"<p>[Source]</p> <p>Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty.</p> <pre><code>fun box find(\ns: String box,\noffset: ISize val = 0,\nnth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_24","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_33","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#rfind","title":"rfind","text":"<p>[Source]</p> <p>Return the index of n-th instance of <code>s</code> in the string starting from the end. The <code>offset</code> represents the highest index to included in the search. Raise an error if there is no n-th occurrence of <code>s</code> or <code>s</code> is empty.</p> <pre><code>fun box rfind(\ns: String box,\noffset: ISize val = call,\nnth: USize val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_25","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = call</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_34","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#contains","title":"contains","text":"<p>[Source]</p> <p>Returns true if contains s as a substring, false otherwise.</p> <pre><code>fun box contains(\ns: String box,\noffset: ISize val = 0,\nnth: USize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_26","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> <li>nth: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#count","title":"count","text":"<p>[Source]</p> <p>Counts the non-overlapping occurrences of s in the string.</p> <pre><code>fun box count(\ns: String box,\noffset: ISize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_27","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_36","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#at","title":"at","text":"<p>[Source]</p> <p>Returns true if the substring s is present at the given offset.</p> <pre><code>fun box at(\ns: String box,\noffset: ISize val = 0)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_28","title":"Parameters","text":"<ul> <li>s: String box</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_37","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#delete","title":"delete","text":"<p>[Source]</p> <p>Delete len bytes at the supplied offset, compacting the string in place.</p> <pre><code>fun ref delete(\noffset: ISize val,\nlen: USize val = 1)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_29","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>len: USize val = 1</li> </ul>"},{"location":"builtin-String/#returns_38","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#substring","title":"substring","text":"<p>[Source]</p> <p>Returns a substring. Index range [<code>from</code> .. <code>to</code>) is half-open. Returns an empty string if nothing is in the range.</p> <p>Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see <code>trim</code> and <code>trim_in_place</code>.</p> <pre><code>fun box substring(\nfrom: ISize val,\nto: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_30","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_39","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower","title":"lower","text":"<p>[Source]</p> <p>Returns a lower case version of the string.</p> <pre><code>fun box lower()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_40","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#lower_in_place","title":"lower_in_place","text":"<p>[Source]</p> <p>Transforms the string to lower case. Currently only knows ASCII case.</p> <pre><code>fun ref lower_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_41","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#upper","title":"upper","text":"<p>[Source]</p> <p>Returns an upper case version of the string. Currently only knows ASCII case.</p> <pre><code>fun box upper()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#upper_in_place","title":"upper_in_place","text":"<p>[Source]</p> <p>Transforms the string to upper case.</p> <pre><code>fun ref upper_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_43","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Returns a reversed version of the string.</p> <pre><code>fun box reverse()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_44","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#reverse_in_place","title":"reverse_in_place","text":"<p>[Source]</p> <p>Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly.</p> <pre><code>fun ref reverse_in_place()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_45","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#push","title":"push","text":"<p>[Source]</p> <p>Add a byte to the end of the string.</p> <pre><code>fun ref push(\nvalue: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_31","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_46","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove a byte from the end of the string.</p> <pre><code>fun ref pop()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_47","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a byte to the beginning of the string.</p> <pre><code>fun ref unshift(\nvalue: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_32","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_48","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes a byte from the beginning of the string.</p> <pre><code>fun ref shift()\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#returns_49","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#append","title":"append","text":"<p>[Source]</p> <p>Append the elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\nseq: ReadSeq[U8 val] box,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_33","title":"Parameters","text":"<ul> <li>seq: ReadSeq[U8 val] box</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated bytes to the end of the string, starting from the given offset.</p> <pre><code>fun ref concat(\niter: Iterator[U8 val] ref,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_34","title":"Parameters","text":"<ul> <li>iter: Iterator[U8 val] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_51","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#clear","title":"clear","text":"<p>[Source]</p> <p>Truncate the string to zero length.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"builtin-String/#returns_52","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert","title":"insert","text":"<p>[Source]</p> <p>Returns a version of the string with the given string inserted at the given offset.</p> <pre><code>fun box insert(\noffset: ISize val,\nthat: String val)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_35","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String val</li> </ul>"},{"location":"builtin-String/#returns_53","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#insert_in_place","title":"insert_in_place","text":"<p>[Source]</p> <p>Inserts the given string at the given offset. Appends the string if the offset is out of bounds.</p> <pre><code>fun ref insert_in_place(\noffset: ISize val,\nthat: String box)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_36","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_54","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#insert_byte","title":"insert_byte","text":"<p>[Source]</p> <p>Inserts a byte at the given offset. Appends if the offset is out of bounds.</p> <pre><code>fun ref insert_byte(\noffset: ISize val,\nvalue: U8 val)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_37","title":"Parameters","text":"<ul> <li>offset: ISize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_55","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#cut","title":"cut","text":"<p>[Source]</p> <p>Returns a version of the string with the given range deleted. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun box cut(\nfrom: ISize val,\nto: ISize val = call)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_38","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_56","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#cut_in_place","title":"cut_in_place","text":"<p>[Source]</p> <p>Cuts the given range out of the string. Index range [<code>from</code> .. <code>to</code>) is half-open.</p> <pre><code>fun ref cut_in_place(\nfrom: ISize val,\nto: ISize val = call)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_39","title":"Parameters","text":"<ul> <li>from: ISize val</li> <li>to: ISize val = call</li> </ul>"},{"location":"builtin-String/#returns_57","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove all instances of s from the string. Returns the count of removed instances.</p> <pre><code>fun ref remove(\ns: String box)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_40","title":"Parameters","text":"<ul> <li>s: String box</li> </ul>"},{"location":"builtin-String/#returns_58","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#replace","title":"replace","text":"<p>[Source]</p> <p>Replace up to n occurrences of <code>from</code> in <code>this</code> with <code>to</code>. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences.</p> <pre><code>fun ref replace(\nfrom: String box,\nto: String box,\nn: USize val = 0)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_41","title":"Parameters","text":"<ul> <li>from: String box</li> <li>to: String box</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#split_by","title":"split_by","text":"<p>[Source]</p> <p>Split the string into an array of strings that are delimited by <code>delim</code> in the original string. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"&lt;b&gt;&lt;span&gt;Hello!&lt;/span&gt;&lt;/b&gt;\"\nlet delimiter: String = \"&gt;&lt;\"\nlet split_array: Array[String] = original.split_by(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\nenv.out.print(value)\nend\n// OUTPUT:\n// &lt;b\n// span&gt;Hello!&lt;/span\n// b&gt;\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1CutCut2\".split_by(\"Cut\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>An empty delimiter results in an array that contains a single element equal to the whole string.</p> <p>If you want to split the string with each individual character of <code>delim</code>, use <code>split</code>.</p> <pre><code>fun box split_by(\ndelim: String val,\nn: USize val = call)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_42","title":"Parameters","text":"<ul> <li>delim: String val</li> <li>n: USize val = call</li> </ul>"},{"location":"builtin-String/#returns_60","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#split","title":"split","text":"<p>[Source]</p> <p>Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If <code>n &gt; 0</code>, then the split count is limited to n.</p> <p>Example:</p> <pre><code>let original: String = \"name,job;department\"\nlet delimiter: String = \".,;\"\nlet split_array: Array[String] = original.split(delimiter)\nenv.out.print(\"OUTPUT:\")\nfor value in split_array.values() do\nenv.out.print(value)\nend\n// OUTPUT:\n// name\n// job\n// department\n</code></pre> <p>Adjacent delimiters result in a zero length entry in the array. For example, <code>\"1,,2\".split(\",\") =&gt; [\"1\", \"\", \"2\"]</code>.</p> <p>If you want to split the string with the entire delimiter string <code>delim</code>, use <code>split_by</code>.</p> <pre><code>fun box split(\ndelim: String val = \"     \u000b\f\n\",\nn: USize val = 0)\n: Array[String val] iso^\n</code></pre>"},{"location":"builtin-String/#parameters_43","title":"Parameters","text":"<ul> <li>delim: String val = \"  \u000b\f \"</li> <li>n: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_61","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"builtin-String/#strip","title":"strip","text":"<p>[Source]</p> <p>Remove all leading and trailing characters from the string that are in s.</p> <pre><code>fun ref strip(\ns: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_44","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_62","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#rstrip","title":"rstrip","text":"<p>[Source]</p> <p>Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed.</p> <pre><code>fun ref rstrip(\ns: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_45","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_63","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#lstrip","title":"lstrip","text":"<p>[Source]</p> <p>Remove all leading characters within the string that are in s. By default, leading whitespace is removed.</p> <pre><code>fun ref lstrip(\ns: String box = \"     \u000b\f\n\")\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_46","title":"Parameters","text":"<ul> <li>s: String box = \"  \u000b\f \"</li> </ul>"},{"location":"builtin-String/#returns_64","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#add","title":"add","text":"<p>[Source]</p> <p>Return a string that is a concatenation of this and that.</p> <pre><code>fun box add(\nthat: String box)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_47","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_65","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#join","title":"join","text":"<p>[Source]</p> <p>Return a string that is a concatenation of the strings in data, using this as a separator.</p> <pre><code>fun box join(\ndata: Iterator[Stringable box] ref)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_48","title":"Parameters","text":"<ul> <li>data: Iterator[Stringable box] ref</li> </ul>"},{"location":"builtin-String/#returns_66","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#compare","title":"compare","text":"<p>[Source]</p> <p>Lexically compare two strings.</p> <pre><code>fun box compare(\nthat: String box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_49","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_67","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#compare_sub","title":"compare_sub","text":"<p>[Source]</p> <p>Lexically compare at most <code>n</code> bytes of the substring of <code>this</code> starting at <code>offset</code> with the substring of <code>that</code> starting at <code>that_offset</code>. The comparison is case sensitive unless <code>ignore_case</code> is <code>true</code>.</p> <p>If the substring of <code>this</code> is a proper prefix of the substring of <code>that</code>, then <code>this</code> is <code>Less</code> than <code>that</code>. Likewise, if <code>that</code> is a proper prefix of <code>this</code>, then <code>this</code> is <code>Greater</code> than <code>that</code>.</p> <p>Both <code>offset</code> and <code>that_offset</code> can be negative, in which case the offsets are computed from the end of the string.</p> <p>If <code>n + offset</code> is greater than the length of <code>this</code>, or <code>n + that_offset</code> is greater than the length of <code>that</code>, then the number of positions compared will be reduced to the length of the longest substring.</p> <p>Needs to be made UTF-8 safe.</p> <pre><code>fun box compare_sub(\nthat: String box,\nn: USize val,\noffset: ISize val = 0,\nthat_offset: ISize val = 0,\nignore_case: Bool val = false)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-String/#parameters_50","title":"Parameters","text":"<ul> <li>that: String box</li> <li>n: USize val</li> <li>offset: ISize val = 0</li> <li>that_offset: ISize val = 0</li> <li>ignore_case: Bool val = false</li> </ul>"},{"location":"builtin-String/#returns_68","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-String/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the two strings have the same contents.</p> <pre><code>fun box eq(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_51","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if this is lexically less than that. Needs to be made UTF-8 safe.</p> <pre><code>fun box lt(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_52","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe.</p> <pre><code>fun box le(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_53","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#offset_to_index","title":"offset_to_index","text":"<p>[Source]</p> <pre><code>fun box offset_to_index(\ni: ISize val)\n: USize val\n</code></pre>"},{"location":"builtin-String/#parameters_54","title":"Parameters","text":"<ul> <li>i: ISize val</li> </ul>"},{"location":"builtin-String/#returns_72","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#bool","title":"bool","text":"<p>[Source]</p> <pre><code>fun box bool()\n: Bool val ?\n</code></pre>"},{"location":"builtin-String/#returns_73","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"builtin-String/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8(\nbase: U8 val = 0)\n: I8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_55","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_74","title":"Returns","text":"<ul> <li>I8 val ?</li> </ul>"},{"location":"builtin-String/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16(\nbase: U8 val = 0)\n: I16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_56","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_75","title":"Returns","text":"<ul> <li>I16 val ?</li> </ul>"},{"location":"builtin-String/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32(\nbase: U8 val = 0)\n: I32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_57","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_76","title":"Returns","text":"<ul> <li>I32 val ?</li> </ul>"},{"location":"builtin-String/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64(\nbase: U8 val = 0)\n: I64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_58","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_77","title":"Returns","text":"<ul> <li>I64 val ?</li> </ul>"},{"location":"builtin-String/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128(\nbase: U8 val = 0)\n: I128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_59","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_78","title":"Returns","text":"<ul> <li>I128 val ?</li> </ul>"},{"location":"builtin-String/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong(\nbase: U8 val = 0)\n: ILong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_60","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_79","title":"Returns","text":"<ul> <li>ILong val ?</li> </ul>"},{"location":"builtin-String/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize(\nbase: U8 val = 0)\n: ISize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_61","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_80","title":"Returns","text":"<ul> <li>ISize val ?</li> </ul>"},{"location":"builtin-String/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8(\nbase: U8 val = 0)\n: U8 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_62","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_81","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-String/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16(\nbase: U8 val = 0)\n: U16 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_63","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_82","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-String/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32(\nbase: U8 val = 0)\n: U32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_64","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_83","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-String/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64(\nbase: U8 val = 0)\n: U64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_65","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_84","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-String/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128(\nbase: U8 val = 0)\n: U128 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_66","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_85","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-String/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong(\nbase: U8 val = 0)\n: ULong val ?\n</code></pre>"},{"location":"builtin-String/#parameters_67","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_86","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-String/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize(\nbase: U8 val = 0)\n: USize val ?\n</code></pre>"},{"location":"builtin-String/#parameters_68","title":"Parameters","text":"<ul> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_87","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-String/#read_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>Read an integer from the specified location in this string. The integer value read and the number of bytes consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored.</p> <pre><code>fun box read_int[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val) &amp; Integer[A] val)](\noffset: ISize val = 0,\nbase: U8 val = 0)\n: (A , USize val) ?\n</code></pre>"},{"location":"builtin-String/#parameters_69","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> <li>base: U8 val = 0</li> </ul>"},{"location":"builtin-String/#returns_88","title":"Returns","text":"<ul> <li>(A , USize val) ?</li> </ul>"},{"location":"builtin-String/#f32","title":"f32","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 32-bit floating point number (F32).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f32()? == F32(1.5)\n\"1.19208e-07\".f32()? == F32(1.19208e-07)\n\"NaN\".f32()?.nan() == true\n</code></pre> <pre><code>fun box f32(\noffset: ISize val = 0)\n: F32 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_70","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_89","title":"Returns","text":"<ul> <li>F32 val ?</li> </ul>"},{"location":"builtin-String/#f64","title":"f64","text":"<p>[Source]</p> <p>Convert this string starting at the given offset to a 64-bit floating point number (F64).</p> <p>This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion.</p> <p>Examples:</p> <pre><code>\"1.5\".f64()? == F64(1.5)\n\"1.19208e-07\".f64()? == F64(1.19208e-07)\n\"Inf\".f64()?.infinite() == true\n</code></pre> <pre><code>fun box f64(\noffset: ISize val = 0)\n: F64 val ?\n</code></pre>"},{"location":"builtin-String/#parameters_71","title":"Parameters","text":"<ul> <li>offset: ISize val = 0</li> </ul>"},{"location":"builtin-String/#returns_90","title":"Returns","text":"<ul> <li>F64 val ?</li> </ul>"},{"location":"builtin-String/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-String/#returns_91","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-String/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-String/#returns_92","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-String/#string_1","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-String/#returns_93","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the bytes in the string.</p> <pre><code>fun box values()\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-String/#returns_94","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-String/#runes","title":"runes","text":"<p>[Source]</p> <p>Return an iterator over the codepoints in the string.</p> <pre><code>fun box runes()\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-String/#returns_95","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-String/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_72","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_96","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_73","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_97","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: String box)\n: Bool val\n</code></pre>"},{"location":"builtin-String/#parameters_74","title":"Parameters","text":"<ul> <li>that: String box</li> </ul>"},{"location":"builtin-String/#returns_98","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-String/#private-functions","title":"Private Functions","text":""},{"location":"builtin-String/#_copy_to","title":"_copy_to","text":"<p>[Source]</p> <p>Copy <code>copy_len</code> bytes from this to that at specified offsets.</p> <pre><code>fun box _copy_to(\nptr: Pointer[U8 val] ref,\ncopy_len: USize val,\nfrom_offset: USize val = 0,\nto_offset: USize val = 0)\n: None val\n</code></pre>"},{"location":"builtin-String/#parameters_75","title":"Parameters","text":"<ul> <li>ptr: Pointer[U8 val] ref</li> <li>copy_len: USize val</li> <li>from_offset: USize val = 0</li> <li>to_offset: USize val = 0</li> </ul>"},{"location":"builtin-String/#returns_99","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"builtin-String/#_append","title":"_append","text":"<p>[Source]</p> <pre><code>fun iso _append(\ns: String box)\n: String iso^\n</code></pre>"},{"location":"builtin-String/#parameters_76","title":"Parameters","text":"<ul> <li>s: String box</li> </ul>"},{"location":"builtin-String/#returns_100","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-String/#_to_inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","title":"_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown.</p> <pre><code>fun box _to_int[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val) &amp; Integer[A] val)](\nbase: U8 val)\n: A ?\n</code></pre>"},{"location":"builtin-String/#parameters_77","title":"Parameters","text":"<ul> <li>base: U8 val</li> </ul>"},{"location":"builtin-String/#returns_101","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-String/#_read_int_basea-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera-val","title":"_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of single-byte characters in the prefix.</p> <pre><code>fun box _read_int_base[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val) &amp; Integer[A] val)](\nbase: U8 val,\nindex: USize val)\n: (A , USize val)\n</code></pre>"},{"location":"builtin-String/#parameters_78","title":"Parameters","text":"<ul> <li>base: U8 val</li> <li>index: USize val</li> </ul>"},{"location":"builtin-String/#returns_102","title":"Returns","text":"<ul> <li>(A , USize val)</li> </ul>"},{"location":"builtin-String/#_set","title":"_set","text":"<p>[Source]</p> <p>Unsafe update, used internally.</p> <pre><code>fun ref _set(\ni: USize val,\nvalue: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-String/#parameters_79","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: U8 val</li> </ul>"},{"location":"builtin-String/#returns_103","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-StringBytes/","title":"StringBytes","text":"<p>[Source] <pre><code>class ref StringBytes is\nIterator[U8 val] ref\n</code></pre></p>"},{"location":"builtin-StringBytes/#implements","title":"Implements","text":"<ul> <li>Iterator[U8 val] ref</li> </ul>"},{"location":"builtin-StringBytes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nstring: String box)\n: StringBytes ref^\n</code></pre>"},{"location":"builtin-StringBytes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringBytes/#returns","title":"Returns","text":"<ul> <li>StringBytes ref^</li> </ul>"},{"location":"builtin-StringBytes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringBytes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringBytes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringBytes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U8 val ?\n</code></pre>"},{"location":"builtin-StringBytes/#returns_2","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-StringRunes/","title":"StringRunes","text":"<p>[Source] <pre><code>class ref StringRunes is\nIterator[U32 val] ref\n</code></pre></p>"},{"location":"builtin-StringRunes/#implements","title":"Implements","text":"<ul> <li>Iterator[U32 val] ref</li> </ul>"},{"location":"builtin-StringRunes/#constructors","title":"Constructors","text":""},{"location":"builtin-StringRunes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nstring: String box)\n: StringRunes ref^\n</code></pre>"},{"location":"builtin-StringRunes/#parameters","title":"Parameters","text":"<ul> <li>string: String box</li> </ul>"},{"location":"builtin-StringRunes/#returns","title":"Returns","text":"<ul> <li>StringRunes ref^</li> </ul>"},{"location":"builtin-StringRunes/#public-functions","title":"Public Functions","text":""},{"location":"builtin-StringRunes/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"builtin-StringRunes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-StringRunes/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U32 val ?\n</code></pre>"},{"location":"builtin-StringRunes/#returns_2","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-Stringable/","title":"Stringable","text":"<p>[Source]</p> <p>Things that can be turned into a String.</p> <pre><code>interface box Stringable\n</code></pre>"},{"location":"builtin-Stringable/#public-functions","title":"Public Functions","text":""},{"location":"builtin-Stringable/#string","title":"string","text":"<p>[Source]</p> <p>Generate a string representation of this object.</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-Stringable/#returns","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/","title":"U128","text":"<p>[Source] <pre><code>primitive val U128 is\nUnsignedInteger[U128 val] val\n</code></pre></p>"},{"location":"builtin-U128/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U128 val] val</li> </ul>"},{"location":"builtin-U128/#constructors","title":"Constructors","text":""},{"location":"builtin-U128/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: U128 val)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters","title":"Parameters","text":"<ul> <li>value: U128 val</li> </ul>"},{"location":"builtin-U128/#returns","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U128/#returns_1","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_2","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U128 val^\n</code></pre>"},{"location":"builtin-U128/#returns_3","title":"Returns","text":"<ul> <li>U128 val^</li> </ul>"},{"location":"builtin-U128/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U128/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_4","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_5","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_6","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_9","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_10","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_12","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_13","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_2","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_15","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_3","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_16","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_18","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U128/#returns_19","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U128/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_4","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_20","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_5","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_21","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_6","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_22","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_7","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_23","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the operation overflows, the result is undefined.</p> <pre><code>fun box mul_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_8","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_24","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box divrem_unsafe(\ny: U128 val)\n: (U128 val , U128 val)\n</code></pre>"},{"location":"builtin-U128/#parameters_9","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_25","title":"Returns","text":"<ul> <li>(U128 val , U128 val)</li> </ul>"},{"location":"builtin-U128/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box div_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_10","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_26","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined.</p> <pre><code>fun box rem_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_11","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_27","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_28","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_29","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U128/#returns_30","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U128/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U128/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U128/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_12","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_32","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_13","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_33","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_14","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_34","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_15","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_35","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_16","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_36","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_17","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_37","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_18","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_38","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_19","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_39","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_20","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_40","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_21","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_41","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: U128 val)\n: (U128 val , U128 val) ?\n</code></pre>"},{"location":"builtin-U128/#parameters_22","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_42","title":"Returns","text":"<ul> <li>(U128 val , U128 val) ?</li> </ul>"},{"location":"builtin-U128/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_23","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_43","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_24","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_44","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_25","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_45","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_26","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_46","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_27","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_47","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_28","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_48","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_29","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_49","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: U128 val)\n: (U128 val , Bool val)\n</code></pre>"},{"location":"builtin-U128/#parameters_30","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_50","title":"Returns","text":"<ul> <li>(U128 val , Bool val)</li> </ul>"},{"location":"builtin-U128/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: U128 val)\n: U128 val ?\n</code></pre>"},{"location":"builtin-U128/#parameters_31","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_51","title":"Returns","text":"<ul> <li>U128 val ?</li> </ul>"},{"location":"builtin-U128/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_32","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_52","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_33","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_53","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_34","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_54","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_35","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_55","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_36","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_56","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_37","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_57","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_38","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_58","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_59","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_39","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_60","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_40","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_61","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_41","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_62","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_63","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_42","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_64","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: U128 val)\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#parameters_43","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_65","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_66","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_44","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_45","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_68","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_46","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_69","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_47","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_70","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_48","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_71","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: U128 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U128/#parameters_49","title":"Parameters","text":"<ul> <li>y: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_72","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U128/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_73","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_74","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_75","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_76","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_77","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_78","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_79","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_80","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_81","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_82","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_83","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_1","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_84","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_85","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_86","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U128/#returns_87","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U128/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U128/#returns_88","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U128/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U128/#returns_89","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U128/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U128/#returns_90","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U128/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U128/#returns_91","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U128/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U128/#returns_92","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U128/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U128/#returns_93","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U128/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U128/#returns_94","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U128/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U128/#returns_95","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U128/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U128/#returns_96","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U128/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U128/#returns_97","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U128/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_98","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U128/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U128/#returns_99","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U128/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U128/#returns_100","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U128/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: U128 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U128/#parameters_50","title":"Parameters","text":"<ul> <li>that: U128 val</li> </ul>"},{"location":"builtin-U128/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U128/#private-functions","title":"Private Functions","text":""},{"location":"builtin-U128/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: U128 val\n</code></pre>"},{"location":"builtin-U128/#returns_102","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/","title":"U16","text":"<p>[Source] <pre><code>primitive val U16 is\nUnsignedInteger[U16 val] val\n</code></pre></p>"},{"location":"builtin-U16/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U16 val] val</li> </ul>"},{"location":"builtin-U16/#constructors","title":"Constructors","text":""},{"location":"builtin-U16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: U16 val)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"builtin-U16/#returns","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U16/#returns_1","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_2","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U16 val^\n</code></pre>"},{"location":"builtin-U16/#returns_3","title":"Returns","text":"<ul> <li>U16 val^</li> </ul>"},{"location":"builtin-U16/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U16/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_6","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_7","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_9","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_10","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_11","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_12","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_13","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_2","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_15","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_3","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_16","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_4","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_17","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_5","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_18","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_6","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_19","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_7","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_20","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_8","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_21","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_9","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_22","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_10","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_23","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_11","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_24","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_12","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_25","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_13","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_26","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: U16 val)\n: (U16 val , U16 val) ?\n</code></pre>"},{"location":"builtin-U16/#parameters_14","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_27","title":"Returns","text":"<ul> <li>(U16 val , U16 val) ?</li> </ul>"},{"location":"builtin-U16/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_15","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_28","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_16","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_29","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_17","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_30","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_18","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_31","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_19","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_32","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_20","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_33","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_21","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_34","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: U16 val)\n: (U16 val , Bool val)\n</code></pre>"},{"location":"builtin-U16/#parameters_22","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_35","title":"Returns","text":"<ul> <li>(U16 val , Bool val)</li> </ul>"},{"location":"builtin-U16/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: U16 val)\n: U16 val ?\n</code></pre>"},{"location":"builtin-U16/#parameters_23","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_36","title":"Returns","text":"<ul> <li>U16 val ?</li> </ul>"},{"location":"builtin-U16/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_24","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_37","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_25","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_38","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_26","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_39","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_27","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_40","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_28","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_41","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U16/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U16/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_29","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_43","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_30","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_44","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_31","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_45","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_32","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_46","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_33","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_47","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_34","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_48","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_49","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_35","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_50","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_36","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_51","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_37","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_52","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_53","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_38","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_54","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_39","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_55","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_40","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_56","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_41","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_57","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: U16 val)\n: (U16 val , U16 val)\n</code></pre>"},{"location":"builtin-U16/#parameters_42","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_58","title":"Returns","text":"<ul> <li>(U16 val , U16 val)</li> </ul>"},{"location":"builtin-U16/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: U16 val)\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#parameters_43","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_59","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_60","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_44","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_45","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_46","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_47","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_48","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: U16 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U16/#parameters_49","title":"Parameters","text":"<ul> <li>y: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U16/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_1","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U16/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U16/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U16/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U16/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U16/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U16/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U16/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U16/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U16/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U16/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U16/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U16/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U16/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U16/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U16/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U16/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U16/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U16/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U16/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U16/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U16/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U16/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U16/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U16/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U16/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U16/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U16/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U16/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U16/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U16/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U16/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: U16 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U16/#parameters_50","title":"Parameters","text":"<ul> <li>that: U16 val</li> </ul>"},{"location":"builtin-U16/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U16/#private-functions","title":"Private Functions","text":""},{"location":"builtin-U16/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: U16 val\n</code></pre>"},{"location":"builtin-U16/#returns_102","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/","title":"U32","text":"<p>[Source] <pre><code>primitive val U32 is\nUnsignedInteger[U32 val] val\n</code></pre></p>"},{"location":"builtin-U32/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U32 val] val</li> </ul>"},{"location":"builtin-U32/#constructors","title":"Constructors","text":""},{"location":"builtin-U32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: U32 val)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-U32/#returns","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U32/#returns_1","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_2","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U32 val^\n</code></pre>"},{"location":"builtin-U32/#returns_3","title":"Returns","text":"<ul> <li>U32 val^</li> </ul>"},{"location":"builtin-U32/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U32/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_2","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_3","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_16","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_4","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_17","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_5","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_18","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_6","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_19","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_7","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_20","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_8","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_21","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_9","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_22","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_10","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_23","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_11","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_24","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_12","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_25","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_13","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_26","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: U32 val)\n: (U32 val , U32 val) ?\n</code></pre>"},{"location":"builtin-U32/#parameters_14","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_27","title":"Returns","text":"<ul> <li>(U32 val , U32 val) ?</li> </ul>"},{"location":"builtin-U32/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_15","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_28","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_16","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_29","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_17","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_30","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_18","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_31","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_19","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_32","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_20","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_21","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_34","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: U32 val)\n: (U32 val , Bool val)\n</code></pre>"},{"location":"builtin-U32/#parameters_22","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_35","title":"Returns","text":"<ul> <li>(U32 val , Bool val)</li> </ul>"},{"location":"builtin-U32/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"builtin-U32/#parameters_23","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_36","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"builtin-U32/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_24","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_37","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_25","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_38","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_26","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_39","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_27","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_40","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_28","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_41","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U32/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U32/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_29","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_43","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_30","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_44","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_31","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_45","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_32","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_46","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_33","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_47","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_34","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_48","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_49","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_35","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_50","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_36","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_51","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_37","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_52","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_53","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_38","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_54","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_39","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_55","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_40","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_56","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_41","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_57","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"builtin-U32/#parameters_42","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_58","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"builtin-U32/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: U32 val)\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#parameters_43","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_59","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_60","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_44","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_45","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_46","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_47","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_48","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: U32 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U32/#parameters_49","title":"Parameters","text":"<ul> <li>y: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U32/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_1","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U32/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U32/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U32/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U32/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U32/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U32/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U32/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U32/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U32/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U32/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U32/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U32/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U32/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U32/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U32/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U32/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U32/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U32/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U32/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U32/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U32/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U32/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U32/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U32/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U32/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U32/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U32/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U32/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U32/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U32/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U32/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: U32 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U32/#parameters_50","title":"Parameters","text":"<ul> <li>that: U32 val</li> </ul>"},{"location":"builtin-U32/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U32/#private-functions","title":"Private Functions","text":""},{"location":"builtin-U32/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: U32 val\n</code></pre>"},{"location":"builtin-U32/#returns_102","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/","title":"U64","text":"<p>[Source] <pre><code>primitive val U64 is\nUnsignedInteger[U64 val] val\n</code></pre></p>"},{"location":"builtin-U64/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U64 val] val</li> </ul>"},{"location":"builtin-U64/#constructors","title":"Constructors","text":""},{"location":"builtin-U64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: U64 val)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters","title":"Parameters","text":"<ul> <li>value: U64 val</li> </ul>"},{"location":"builtin-U64/#returns","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-U64/#returns_1","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_2","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U64 val^\n</code></pre>"},{"location":"builtin-U64/#returns_3","title":"Returns","text":"<ul> <li>U64 val^</li> </ul>"},{"location":"builtin-U64/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U64/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_13","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_2","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_15","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_3","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_16","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_4","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_18","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_5","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_19","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_6","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_20","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_7","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_21","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_8","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_22","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_9","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_23","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_10","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_24","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_11","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_25","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_12","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_26","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_13","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_27","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: U64 val)\n: (U64 val , U64 val) ?\n</code></pre>"},{"location":"builtin-U64/#parameters_14","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_28","title":"Returns","text":"<ul> <li>(U64 val , U64 val) ?</li> </ul>"},{"location":"builtin-U64/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_15","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_29","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_16","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_30","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_17","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_31","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_18","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_32","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_19","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_33","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_20","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_21","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_35","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: U64 val)\n: (U64 val , Bool val)\n</code></pre>"},{"location":"builtin-U64/#parameters_22","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_36","title":"Returns","text":"<ul> <li>(U64 val , Bool val)</li> </ul>"},{"location":"builtin-U64/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"builtin-U64/#parameters_23","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_37","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"builtin-U64/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_24","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_38","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_25","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_39","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_26","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_40","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_27","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_41","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_28","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_42","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U64/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U64/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_29","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_44","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_30","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_45","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_31","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_46","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_32","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_47","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_33","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_48","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_34","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_49","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_35","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_51","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_36","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_37","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_53","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_54","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_38","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_55","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_39","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_56","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_40","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_57","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_41","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_58","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: U64 val)\n: (U64 val , U64 val)\n</code></pre>"},{"location":"builtin-U64/#parameters_42","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_59","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"builtin-U64/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#parameters_43","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_60","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_44","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_45","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_46","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_47","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_48","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: U64 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U64/#parameters_49","title":"Parameters","text":"<ul> <li>y: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_1","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U64/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U64/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U64/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U64/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U64/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U64/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U64/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U64/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U64/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U64/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U64/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U64/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U64/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U64/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U64/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U64/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U64/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U64/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U64/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U64/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U64/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U64/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U64/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U64/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U64/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U64/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U64/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U64/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U64/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U64/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U64/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: U64 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U64/#parameters_50","title":"Parameters","text":"<ul> <li>that: U64 val</li> </ul>"},{"location":"builtin-U64/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U64/#private-functions","title":"Private Functions","text":""},{"location":"builtin-U64/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: U64 val\n</code></pre>"},{"location":"builtin-U64/#returns_102","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/","title":"U8","text":"<p>[Source] <pre><code>primitive val U8 is\nUnsignedInteger[U8 val] val\n</code></pre></p>"},{"location":"builtin-U8/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[U8 val] val</li> </ul>"},{"location":"builtin-U8/#constructors","title":"Constructors","text":""},{"location":"builtin-U8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: U8 val)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"builtin-U8/#returns","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-U8/#returns_1","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_2","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: U8 val^\n</code></pre>"},{"location":"builtin-U8/#returns_3","title":"Returns","text":"<ul> <li>U8 val^</li> </ul>"},{"location":"builtin-U8/#public-functions","title":"Public Functions","text":""},{"location":"builtin-U8/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_5","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_8","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_9","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_10","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_11","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_12","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_13","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_2","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_15","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_3","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_16","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_4","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_17","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_5","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_18","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_6","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_19","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_7","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_20","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_8","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_21","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_9","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_22","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_10","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_23","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_11","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_24","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_12","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_25","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_13","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_26","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: U8 val)\n: (U8 val , U8 val) ?\n</code></pre>"},{"location":"builtin-U8/#parameters_14","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_27","title":"Returns","text":"<ul> <li>(U8 val , U8 val) ?</li> </ul>"},{"location":"builtin-U8/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_15","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_28","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_16","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_29","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_17","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_30","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_18","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_31","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_19","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_32","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_20","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_33","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_21","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_34","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: U8 val)\n: (U8 val , Bool val)\n</code></pre>"},{"location":"builtin-U8/#parameters_22","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_35","title":"Returns","text":"<ul> <li>(U8 val , Bool val)</li> </ul>"},{"location":"builtin-U8/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: U8 val)\n: U8 val ?\n</code></pre>"},{"location":"builtin-U8/#parameters_23","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_36","title":"Returns","text":"<ul> <li>U8 val ?</li> </ul>"},{"location":"builtin-U8/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_24","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_37","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_25","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_38","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_26","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_39","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_27","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_40","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_28","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_41","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-U8/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-U8/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_29","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_43","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_30","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_44","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_31","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_45","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_32","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_46","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_33","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_47","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_34","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_48","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_49","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_35","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_50","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_36","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_51","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_37","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_52","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_53","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_38","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_54","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_39","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_55","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_40","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_56","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_41","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_57","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: U8 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"builtin-U8/#parameters_42","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_58","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"builtin-U8/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: U8 val)\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#parameters_43","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_59","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_60","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_44","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_45","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_46","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_47","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_48","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: U8 val)\n: Bool val\n</code></pre>"},{"location":"builtin-U8/#parameters_49","title":"Parameters","text":"<ul> <li>y: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-U8/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_1","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-U8/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-U8/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-U8/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-U8/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-U8/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-U8/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-U8/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-U8/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-U8/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-U8/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-U8/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-U8/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-U8/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-U8/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-U8/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-U8/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-U8/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-U8/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-U8/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-U8/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-U8/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-U8/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-U8/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-U8/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-U8/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-U8/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-U8/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-U8/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-U8/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-U8/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-U8/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: U8 val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-U8/#parameters_50","title":"Parameters","text":"<ul> <li>that: U8 val</li> </ul>"},{"location":"builtin-U8/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-U8/#private-functions","title":"Private Functions","text":""},{"location":"builtin-U8/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: U8 val\n</code></pre>"},{"location":"builtin-U8/#returns_102","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/","title":"ULong","text":"<p>[Source] <pre><code>primitive val ULong is\nUnsignedInteger[ULong val] val\n</code></pre></p>"},{"location":"builtin-ULong/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[ULong val] val</li> </ul>"},{"location":"builtin-ULong/#constructors","title":"Constructors","text":""},{"location":"builtin-ULong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: ULong val)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters","title":"Parameters","text":"<ul> <li>value: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-ULong/#returns_1","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_2","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: ULong val^\n</code></pre>"},{"location":"builtin-ULong/#returns_3","title":"Returns","text":"<ul> <li>ULong val^</li> </ul>"},{"location":"builtin-ULong/#public-functions","title":"Public Functions","text":""},{"location":"builtin-ULong/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_4","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_5","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_6","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_7","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_10","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_11","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_13","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_2","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_15","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_3","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_16","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_17","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_4","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_18","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_5","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_19","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_6","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_20","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_7","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_21","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_8","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_22","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_9","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_23","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_10","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_24","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_11","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_25","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_12","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_26","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_13","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_27","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: ULong val)\n: (ULong val , ULong val) ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_14","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_28","title":"Returns","text":"<ul> <li>(ULong val , ULong val) ?</li> </ul>"},{"location":"builtin-ULong/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_15","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_29","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_16","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_30","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_17","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_31","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_18","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_32","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_19","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_33","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_20","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_34","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_21","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_35","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: ULong val)\n: (ULong val , Bool val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_22","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_36","title":"Returns","text":"<ul> <li>(ULong val , Bool val)</li> </ul>"},{"location":"builtin-ULong/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: ULong val)\n: ULong val ?\n</code></pre>"},{"location":"builtin-ULong/#parameters_23","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_37","title":"Returns","text":"<ul> <li>ULong val ?</li> </ul>"},{"location":"builtin-ULong/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_24","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_38","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_25","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_39","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_26","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_40","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_27","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_41","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_28","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_42","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-ULong/#returns_43","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-ULong/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_29","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_44","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_30","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_45","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_31","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_46","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_32","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_47","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_33","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_48","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_34","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_49","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_50","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_35","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_51","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_36","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_52","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_37","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_53","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_54","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_38","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_55","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_39","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_56","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_40","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_57","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_41","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_58","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: ULong val)\n: (ULong val , ULong val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_42","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_59","title":"Returns","text":"<ul> <li>(ULong val , ULong val)</li> </ul>"},{"location":"builtin-ULong/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: ULong val)\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#parameters_43","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_60","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_61","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_44","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_45","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_46","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_47","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_48","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: ULong val)\n: Bool val\n</code></pre>"},{"location":"builtin-ULong/#parameters_49","title":"Parameters","text":"<ul> <li>y: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_67","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-ULong/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_1","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-ULong/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-ULong/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-ULong/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-ULong/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-ULong/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-ULong/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-ULong/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-ULong/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-ULong/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-ULong/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-ULong/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-ULong/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-ULong/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-ULong/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-ULong/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-ULong/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-ULong/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-ULong/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-ULong/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-ULong/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-ULong/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-ULong/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-ULong/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-ULong/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: ULong val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-ULong/#parameters_50","title":"Parameters","text":"<ul> <li>that: ULong val</li> </ul>"},{"location":"builtin-ULong/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-ULong/#private-functions","title":"Private Functions","text":""},{"location":"builtin-ULong/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: ULong val\n</code></pre>"},{"location":"builtin-ULong/#returns_102","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/","title":"USize","text":"<p>[Source] <pre><code>primitive val USize is\nUnsignedInteger[USize val] val\n</code></pre></p>"},{"location":"builtin-USize/#implements","title":"Implements","text":"<ul> <li>UnsignedInteger[USize val] val</li> </ul>"},{"location":"builtin-USize/#constructors","title":"Constructors","text":""},{"location":"builtin-USize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: USize val)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters","title":"Parameters","text":"<ul> <li>value: USize val</li> </ul>"},{"location":"builtin-USize/#returns","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#froma-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-reala-val","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]","text":"<p>[Source]</p> <pre><code>new val from[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[A] val)](\na: A)\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"builtin-USize/#returns_1","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_2","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: USize val^\n</code></pre>"},{"location":"builtin-USize/#returns_3","title":"Returns","text":"<ul> <li>USize val^</li> </ul>"},{"location":"builtin-USize/#public-functions","title":"Public Functions","text":""},{"location":"builtin-USize/#next_pow2","title":"next_pow2","text":"<p>[Source]</p> <pre><code>fun box next_pow2()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_6","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_12","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_14","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_2","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_3","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_16","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_4","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_17","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_5","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_18","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_6","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_19","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_7","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_20","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_8","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_21","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_9","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_22","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_10","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_23","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_11","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_24","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_12","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_25","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_13","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: USize val)\n: (USize val , USize val) ?\n</code></pre>"},{"location":"builtin-USize/#parameters_14","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_27","title":"Returns","text":"<ul> <li>(USize val , USize val) ?</li> </ul>"},{"location":"builtin-USize/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_15","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_28","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_16","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_29","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_17","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_30","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_18","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_31","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_19","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_32","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_20","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_33","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_21","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_34","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: USize val)\n: (USize val , Bool val)\n</code></pre>"},{"location":"builtin-USize/#parameters_22","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_35","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"builtin-USize/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: USize val)\n: USize val ?\n</code></pre>"},{"location":"builtin-USize/#parameters_23","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_36","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"builtin-USize/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_24","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_37","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <pre><code>fun box shl_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_25","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_38","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <pre><code>fun box shr_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_26","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_39","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_27","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_40","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_28","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_41","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-USize/#returns_42","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-USize/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_29","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_43","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_30","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_44","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_31","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_45","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_32","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_46","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_33","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_47","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_34","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_48","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_49","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_35","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_50","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_36","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_51","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_37","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_52","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_53","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_38","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_54","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_39","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_55","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_40","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_56","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_41","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_57","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: USize val)\n: (USize val , USize val)\n</code></pre>"},{"location":"builtin-USize/#parameters_42","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_58","title":"Returns","text":"<ul> <li>(USize val , USize val)</li> </ul>"},{"location":"builtin-USize/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: USize val)\n: USize val\n</code></pre>"},{"location":"builtin-USize/#parameters_43","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_59","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_60","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_44","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_45","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_46","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_47","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_64","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_48","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_65","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: USize val)\n: Bool val\n</code></pre>"},{"location":"builtin-USize/#parameters_49","title":"Parameters","text":"<ul> <li>y: USize val</li> </ul>"},{"location":"builtin-USize/#returns_66","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-USize/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_67","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_69","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_70","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_72","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_73","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_74","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_75","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_76","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_77","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_78","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_80","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_81","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_1","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_82","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_83","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_84","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-USize/#returns_85","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-USize/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-USize/#returns_86","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-USize/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-USize/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-USize/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-USize/#returns_88","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-USize/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-USize/#returns_89","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-USize/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-USize/#returns_90","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-USize/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-USize/#returns_91","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-USize/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-USize/#returns_92","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-USize/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-USize/#returns_93","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-USize/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-USize/#returns_94","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-USize/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-USize/#returns_95","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-USize/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-USize/#returns_96","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-USize/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-USize/#returns_97","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-USize/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_98","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-USize/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-USize/#returns_99","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-USize/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-USize/#returns_100","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-USize/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: USize val)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-USize/#parameters_50","title":"Parameters","text":"<ul> <li>that: USize val</li> </ul>"},{"location":"builtin-USize/#returns_101","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-USize/#private-functions","title":"Private Functions","text":""},{"location":"builtin-USize/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: USize val\n</code></pre>"},{"location":"builtin-USize/#returns_102","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-Unsigned/","title":"Unsigned","text":"<p>[Source] <pre><code>type Unsigned is\n(U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n</code></pre></p>"},{"location":"builtin-Unsigned/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)</li> </ul>"},{"location":"builtin-UnsignedInteger/","title":"UnsignedInteger[A: UnsignedInteger[A] val]","text":"<p>[Source] <pre><code>trait val UnsignedInteger[A: UnsignedInteger[A] val] is\nInteger[A] val\n</code></pre></p>"},{"location":"builtin-UnsignedInteger/#implements","title":"Implements","text":"<ul> <li>Integer[A] val</li> </ul>"},{"location":"builtin-UnsignedInteger/#constructors","title":"Constructors","text":""},{"location":"builtin-UnsignedInteger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nvalue: A)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#fromb-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-realb-val","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]","text":"<p>[Source]</p> <pre><code>new val from[B: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val) &amp; Real[B] val)](\na: B)\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_1","title":"Parameters","text":"<ul> <li>a: B</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_1","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#min_value","title":"min_value","text":"<p>[Source]</p> <pre><code>new val min_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_2","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#max_value","title":"max_value","text":"<p>[Source]</p> <pre><code>new val max_value()\n: Real[A] val^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_3","title":"Returns","text":"<ul> <li>Real[A] val^</li> </ul>"},{"location":"builtin-UnsignedInteger/#public-functions","title":"Public Functions","text":""},{"location":"builtin-UnsignedInteger/#abs","title":"abs","text":"<p>[Source]</p> <pre><code>fun box abs()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_4","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl","title":"shl","text":"<p>[Source]</p> <pre><code>fun box shl(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_2","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_5","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr","title":"shr","text":"<p>[Source]</p> <pre><code>fun box shr(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_3","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_6","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld","title":"fld","text":"<p>[Source]</p> <pre><code>fun box fld(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_4","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_7","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#fldc","title":"fldc","text":"<p>[Source]</p> <pre><code>fun box fldc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_5","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_8","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_partial","title":"fld_partial","text":"<p>[Source]</p> <pre><code>fun box fld_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_6","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_9","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#fld_unsafe","title":"fld_unsafe","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_7","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_10","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod","title":"mod","text":"<p>[Source]</p> <pre><code>fun box mod(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_8","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_11","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#modc","title":"modc","text":"<p>[Source]</p> <pre><code>fun box modc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_9","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_12","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_partial","title":"mod_partial","text":"<p>[Source]</p> <pre><code>fun box mod_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_10","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_13","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mod_unsafe","title":"mod_unsafe","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_11","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_14","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shl_unsafe","title":"shl_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shl_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_12","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_15","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#shr_unsafe","title":"shr_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If non-zero bits are shifted-out, the result is undefined.</p> <pre><code>fun box shr_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_13","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_16","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotl","title":"rotl","text":"<p>[Source]</p> <pre><code>fun box rotl(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_14","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_17","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#rotr","title":"rotr","text":"<p>[Source]</p> <pre><code>fun box rotr(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_15","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_18","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#popcount","title":"popcount","text":"<p>[Source]</p> <pre><code>fun box popcount()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_19","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz","title":"clz","text":"<p>[Source]</p> <pre><code>fun box clz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_20","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz","title":"ctz","text":"<p>[Source]</p> <pre><code>fun box ctz()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_21","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#clz_unsafe","title":"clz_unsafe","text":"<p>[Source]</p> <p>Count leading zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box clz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_22","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","title":"ctz_unsafe","text":"<p>[Source]</p> <p>Count trailing zeroes.</p> <p>Unsafe operation. If this is 0, the result is undefined.</p> <pre><code>fun box ctz_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_23","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bitwidth","title":"bitwidth","text":"<p>[Source]</p> <pre><code>fun box bitwidth()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_24","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bytewidth","title":"bytewidth","text":"<p>[Source]</p> <pre><code>fun box bytewidth()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_25","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String iso^\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_26","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_unsafe","title":"add_unsafe","text":"<p>[Source]</p> <pre><code>fun box add_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_16","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_27","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_unsafe","title":"sub_unsafe","text":"<p>[Source]</p> <pre><code>fun box sub_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_17","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_28","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_unsafe","title":"mul_unsafe","text":"<p>[Source]</p> <pre><code>fun box mul_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_18","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_29","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_unsafe","title":"div_unsafe","text":"<p>[Source]</p> <pre><code>fun box div_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_19","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_30","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","title":"divrem_unsafe","text":"<p>[Source]</p> <pre><code>fun box divrem_unsafe(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_20","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_31","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_unsafe","title":"rem_unsafe","text":"<p>[Source]</p> <pre><code>fun box rem_unsafe(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_21","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_32","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add_partial","title":"add_partial","text":"<p>[Source]</p> <pre><code>fun box add_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_22","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_33","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub_partial","title":"sub_partial","text":"<p>[Source]</p> <pre><code>fun box sub_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_23","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_34","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul_partial","title":"mul_partial","text":"<p>[Source]</p> <pre><code>fun box mul_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_24","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_35","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#div_partial","title":"div_partial","text":"<p>[Source]</p> <pre><code>fun box div_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_25","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_36","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem_partial","title":"rem_partial","text":"<p>[Source]</p> <pre><code>fun box rem_partial(\ny: A)\n: A ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_26","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_37","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem_partial","title":"divrem_partial","text":"<p>[Source]</p> <pre><code>fun box divrem_partial(\ny: A)\n: (A , A) ?\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_27","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_38","title":"Returns","text":"<ul> <li>(A , A) ?</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg_unsafe","title":"neg_unsafe","text":"<p>[Source]</p> <pre><code>fun box neg_unsafe()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_39","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#addc","title":"addc","text":"<p>[Source]</p> <pre><code>fun box addc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_28","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_40","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#subc","title":"subc","text":"<p>[Source]</p> <pre><code>fun box subc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_29","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_41","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#mulc","title":"mulc","text":"<p>[Source]</p> <pre><code>fun box mulc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_30","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_42","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#divc","title":"divc","text":"<p>[Source]</p> <pre><code>fun box divc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_31","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_43","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#remc","title":"remc","text":"<p>[Source]</p> <pre><code>fun box remc(\ny: A)\n: (A , Bool val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_32","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_44","title":"Returns","text":"<ul> <li>(A , Bool val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_and","title":"op_and","text":"<p>[Source]</p> <pre><code>fun box op_and(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_33","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_45","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_or","title":"op_or","text":"<p>[Source]</p> <pre><code>fun box op_or(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_34","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_46","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_xor","title":"op_xor","text":"<p>[Source]</p> <pre><code>fun box op_xor(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_35","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_47","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#op_not","title":"op_not","text":"<p>[Source]</p> <pre><code>fun box op_not()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_48","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bit_reverse","title":"bit_reverse","text":"<p>[Source]</p> <pre><code>fun box bit_reverse()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_49","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#bswap","title":"bswap","text":"<p>[Source]</p> <pre><code>fun box bswap()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_50","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#add","title":"add","text":"<p>[Source]</p> <pre><code>fun box add(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_36","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_51","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#sub","title":"sub","text":"<p>[Source]</p> <pre><code>fun box sub(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_37","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_52","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#mul","title":"mul","text":"<p>[Source]</p> <pre><code>fun box mul(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_38","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_53","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#div","title":"div","text":"<p>[Source]</p> <pre><code>fun box div(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_39","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_54","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#divrem","title":"divrem","text":"<p>[Source]</p> <pre><code>fun box divrem(\ny: A)\n: (A , A)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_40","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_55","title":"Returns","text":"<ul> <li>(A , A)</li> </ul>"},{"location":"builtin-UnsignedInteger/#rem","title":"rem","text":"<p>[Source]</p> <pre><code>fun box rem(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_41","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_56","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#neg","title":"neg","text":"<p>[Source]</p> <pre><code>fun box neg()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_57","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_42","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_58","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_43","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_59","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#lt","title":"lt","text":"<p>[Source]</p> <pre><code>fun box lt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_44","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_60","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#le","title":"le","text":"<p>[Source]</p> <pre><code>fun box le(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_45","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_61","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ge","title":"ge","text":"<p>[Source]</p> <pre><code>fun box ge(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_46","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_62","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#gt","title":"gt","text":"<p>[Source]</p> <pre><code>fun box gt(\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_47","title":"Parameters","text":"<ul> <li>y: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_63","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-UnsignedInteger/#min","title":"min","text":"<p>[Source]</p> <pre><code>fun box min(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_48","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_64","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#max","title":"max","text":"<p>[Source]</p> <pre><code>fun box max(\ny: A)\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_49","title":"Parameters","text":"<ul> <li>y: A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_65","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_66","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_67","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_68","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_69","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_70","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_71","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_72","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_73","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_74","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_75","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_76","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_77","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_78","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_79","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_80","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_81","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_82","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_83","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_84","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_85","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_87","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_88","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_89","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_90","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_91","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_92","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_93","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_94","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_95","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_96","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-UnsignedInteger/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_97","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_98","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_99","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-UnsignedInteger/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: box-&gt;A)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"builtin-UnsignedInteger/#parameters_50","title":"Parameters","text":"<ul> <li>that: box-&gt;A</li> </ul>"},{"location":"builtin-UnsignedInteger/#returns_100","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"builtin-UnsignedInteger/#private-functions","title":"Private Functions","text":""},{"location":"builtin-UnsignedInteger/#_value","title":"_value","text":"<p>[Source]</p> <pre><code>fun box _value()\n: A\n</code></pre>"},{"location":"builtin-UnsignedInteger/#returns_101","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/","title":"_ArithmeticConvertible","text":"<p>[Source] <pre><code>trait val _ArithmeticConvertible\n</code></pre></p>"},{"location":"builtin-_ArithmeticConvertible/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_ArithmeticConvertible/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun box i8()\n: I8 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun box i16()\n: I16 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_1","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun box i32()\n: I32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_2","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun box i64()\n: I64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_3","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun box i128()\n: I128 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_4","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun box ilong()\n: ILong val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_5","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun box isize()\n: ISize val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_6","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8()\n: U8 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16()\n: U16 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64()\n: U64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128()\n: U128 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_11","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun box ulong()\n: ULong val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_12","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun box usize()\n: USize val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_13","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#f32","title":"f32","text":"<p>[Source]</p> <pre><code>fun box f32()\n: F32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_14","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64()\n: F64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_15","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i8_unsafe","title":"i8_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i8_unsafe()\n: I8 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_16","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i16_unsafe","title":"i16_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i16_unsafe()\n: I16 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_17","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i32_unsafe","title":"i32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i32_unsafe()\n: I32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i64_unsafe","title":"i64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i64_unsafe()\n: I64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_19","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#i128_unsafe","title":"i128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box i128_unsafe()\n: I128 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_20","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#ilong_unsafe","title":"ilong_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box ilong_unsafe()\n: ILong val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_21","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#isize_unsafe","title":"isize_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box isize_unsafe()\n: ISize val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_22","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u8_unsafe","title":"u8_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u8_unsafe()\n: U8 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_23","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u16_unsafe","title":"u16_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u16_unsafe()\n: U16 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_24","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u32_unsafe","title":"u32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u32_unsafe()\n: U32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_25","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u64_unsafe","title":"u64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u64_unsafe()\n: U64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_26","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#u128_unsafe","title":"u128_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box u128_unsafe()\n: U128 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_27","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#ulong_unsafe","title":"ulong_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box ulong_unsafe()\n: ULong val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_28","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#usize_unsafe","title":"usize_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box usize_unsafe()\n: USize val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_29","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#f32_unsafe","title":"f32_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f32_unsafe()\n: F32 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_30","title":"Returns","text":"<ul> <li>F32 val</li> </ul>"},{"location":"builtin-_ArithmeticConvertible/#f64_unsafe","title":"f64_unsafe","text":"<p>[Source]</p> <p>Unsafe operation. If the value doesn't fit in the destination type, the result is undefined.</p> <pre><code>fun box f64_unsafe()\n: F64 val\n</code></pre>"},{"location":"builtin-_ArithmeticConvertible/#returns_31","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"builtin-_PartialArithmetic/","title":"_PartialArithmetic","text":"<p>[Source] <pre><code>trait ref _PartialArithmetic\n</code></pre></p>"},{"location":"builtin-_PartialArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_PartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_PartialArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_PartialArithmetic/#returns","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_PartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_PartialArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_PartialArithmetic/#returns_1","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_PartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_PartialArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_PartialArithmetic/#returns_2","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedArithmetic/","title":"_SignedArithmetic","text":"<p>[Source] <pre><code>primitive val _SignedArithmetic\n</code></pre></p>"},{"location":"builtin-_SignedArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_SignedArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _SignedArithmetic val^\n</code></pre>"},{"location":"builtin-_SignedArithmetic/#returns","title":"Returns","text":"<ul> <li>_SignedArithmetic val^</li> </ul>"},{"location":"builtin-_SignedArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_SignedArithmetic/#fldt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"fld[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box fld[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T\n</code></pre>"},{"location":"builtin-_SignedArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedArithmetic/#returns_1","title":"Returns","text":"<ul> <li>T</li> </ul>"},{"location":"builtin-_SignedArithmetic/#modt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"mod[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box mod[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T\n</code></pre>"},{"location":"builtin-_SignedArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedArithmetic/#returns_2","title":"Returns","text":"<ul> <li>T</li> </ul>"},{"location":"builtin-_SignedArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _SignedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>that: _SignedArithmetic val</li> </ul>"},{"location":"builtin-_SignedArithmetic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _SignedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>that: _SignedArithmetic val</li> </ul>"},{"location":"builtin-_SignedArithmetic/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/","title":"_SignedCheckedArithmetic","text":"<p>[Source] <pre><code>primitive val _SignedCheckedArithmetic\n</code></pre></p>"},{"location":"builtin-_SignedCheckedArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_SignedCheckedArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _SignedCheckedArithmetic val^\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#returns","title":"Returns","text":"<ul> <li>_SignedCheckedArithmetic val^</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_SignedCheckedArithmetic/#div_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"div_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box div_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_1","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#rem_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"rem_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box rem_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_2","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#fld_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"fld_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box fld_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_3","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#mod_checkedt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"mod_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box mod_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_4","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _SignedCheckedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_4","title":"Parameters","text":"<ul> <li>that: _SignedCheckedArithmetic val</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _SignedCheckedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_5","title":"Parameters","text":"<ul> <li>that: _SignedCheckedArithmetic val</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#private-functions","title":"Private Functions","text":""},{"location":"builtin-_SignedCheckedArithmetic/#_mul_checkedu-unsignedintegeru-val-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-signedintegert-u-val","title":"_mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) &amp; SignedInteger[T, U] val)]","text":"<p>[Source]</p> <p>basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these.</p> <p>Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: <code>@\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y)</code></p> <p>Also see https://bugs.llvm.org/show_bug.cgi?id=14469</p> <p>That's basically why we rolled our own.</p> <pre><code>fun box _mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val) &amp; SignedInteger[T, U] val)](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_6","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedCheckedArithmetic/#returns_7","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/","title":"_SignedPartialArithmetic","text":"<p>[Source] <pre><code>primitive val _SignedPartialArithmetic is\n_PartialArithmetic ref\n</code></pre></p>"},{"location":"builtin-_SignedPartialArithmetic/#implements","title":"Implements","text":"<ul> <li>_PartialArithmetic ref</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_SignedPartialArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _SignedPartialArithmetic val^\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#returns","title":"Returns","text":"<ul> <li>_SignedPartialArithmetic val^</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_SignedPartialArithmetic/#div_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"div_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box div_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_1","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#rem_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"rem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box rem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_2","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#divrem_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"divrem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box divrem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: (T , T) ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_3","title":"Returns","text":"<ul> <li>(T , T) ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#fld_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"fld_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box fld_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_4","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#mod_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"mod_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box mod_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_4","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_5","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#neg_partialt-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"neg_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box neg_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_5","title":"Parameters","text":"<ul> <li>x: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_6","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_6","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_7","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_7","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_8","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_8","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_9","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _SignedPartialArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_9","title":"Parameters","text":"<ul> <li>that: _SignedPartialArithmetic val</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _SignedPartialArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedPartialArithmetic/#parameters_10","title":"Parameters","text":"<ul> <li>that: _SignedPartialArithmetic val</li> </ul>"},{"location":"builtin-_SignedPartialArithmetic/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/","title":"_SignedUnsafeArithmetic","text":"<p>[Source] <pre><code>primitive val _SignedUnsafeArithmetic\n</code></pre></p>"},{"location":"builtin-_SignedUnsafeArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_SignedUnsafeArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _SignedUnsafeArithmetic val^\n</code></pre>"},{"location":"builtin-_SignedUnsafeArithmetic/#returns","title":"Returns","text":"<ul> <li>_SignedUnsafeArithmetic val^</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_SignedUnsafeArithmetic/#fld_unsafet-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"fld_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box fld_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T\n</code></pre>"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_1","title":"Returns","text":"<ul> <li>T</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#mod_unsafet-signedintegert-u-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedintegeru-val","title":"mod_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]","text":"<p>[Source]</p> <pre><code>fun box mod_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val)), U: UnsignedInteger[U] val](\nx: T,\ny: T)\n: T\n</code></pre>"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_2","title":"Returns","text":"<ul> <li>T</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _SignedUnsafeArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>that: _SignedUnsafeArithmetic val</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _SignedUnsafeArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>that: _SignedUnsafeArithmetic val</li> </ul>"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_ToString/","title":"_ToString","text":"<p>[Source]</p> <p>Worker type providing simple to string conversions for numbers.</p> <pre><code>primitive val _ToString\n</code></pre>"},{"location":"builtin-_ToString/#constructors","title":"Constructors","text":""},{"location":"builtin-_ToString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _ToString val^\n</code></pre>"},{"location":"builtin-_ToString/#returns","title":"Returns","text":"<ul> <li>_ToString val^</li> </ul>"},{"location":"builtin-_ToString/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_ToString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _ToString val)\n: Bool val\n</code></pre>"},{"location":"builtin-_ToString/#parameters","title":"Parameters","text":"<ul> <li>that: _ToString val</li> </ul>"},{"location":"builtin-_ToString/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_ToString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _ToString val)\n: Bool val\n</code></pre>"},{"location":"builtin-_ToString/#parameters_1","title":"Parameters","text":"<ul> <li>that: _ToString val</li> </ul>"},{"location":"builtin-_ToString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_ToString/#private-functions","title":"Private Functions","text":""},{"location":"builtin-_ToString/#_u64","title":"_u64","text":"<p>[Source]</p> <pre><code>fun box _u64(\nx: U64 val,\nneg: Bool val)\n: String iso^\n</code></pre>"},{"location":"builtin-_ToString/#parameters_2","title":"Parameters","text":"<ul> <li>x: U64 val</li> <li>neg: Bool val</li> </ul>"},{"location":"builtin-_ToString/#returns_3","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-_ToString/#_u128","title":"_u128","text":"<p>[Source]</p> <pre><code>fun box _u128(\nx: U128 val,\nneg: Bool val)\n: String iso^\n</code></pre>"},{"location":"builtin-_ToString/#parameters_3","title":"Parameters","text":"<ul> <li>x: U128 val</li> <li>neg: Bool val</li> </ul>"},{"location":"builtin-_ToString/#returns_4","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-_ToString/#_f64","title":"_f64","text":"<p>[Source]</p> <pre><code>fun box _f64(\nx: F64 val)\n: String iso^\n</code></pre>"},{"location":"builtin-_ToString/#parameters_4","title":"Parameters","text":"<ul> <li>x: F64 val</li> </ul>"},{"location":"builtin-_ToString/#returns_5","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"builtin-_UTF32Encoder/","title":"_UTF32Encoder","text":"<p>[Source] <pre><code>primitive val _UTF32Encoder\n</code></pre></p>"},{"location":"builtin-_UTF32Encoder/#constructors","title":"Constructors","text":""},{"location":"builtin-_UTF32Encoder/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _UTF32Encoder val^\n</code></pre>"},{"location":"builtin-_UTF32Encoder/#returns","title":"Returns","text":"<ul> <li>_UTF32Encoder val^</li> </ul>"},{"location":"builtin-_UTF32Encoder/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_UTF32Encoder/#encode","title":"encode","text":"<p>[Source]</p> <p>Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data.</p> <pre><code>fun box encode(\nvalue: U32 val)\n: (USize val , U8 val , U8 val , \nU8 val , U8 val)\n</code></pre>"},{"location":"builtin-_UTF32Encoder/#parameters","title":"Parameters","text":"<ul> <li>value: U32 val</li> </ul>"},{"location":"builtin-_UTF32Encoder/#returns_1","title":"Returns","text":"<ul> <li>(USize val , U8 val , U8 val ,      U8 val , U8 val)</li> </ul>"},{"location":"builtin-_UTF32Encoder/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _UTF32Encoder val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UTF32Encoder/#parameters_1","title":"Parameters","text":"<ul> <li>that: _UTF32Encoder val</li> </ul>"},{"location":"builtin-_UTF32Encoder/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_UTF32Encoder/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _UTF32Encoder val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UTF32Encoder/#parameters_2","title":"Parameters","text":"<ul> <li>that: _UTF32Encoder val</li> </ul>"},{"location":"builtin-_UTF32Encoder/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/","title":"_UnsignedCheckedArithmetic","text":"<p>[Source] <pre><code>primitive val _UnsignedCheckedArithmetic\n</code></pre></p>"},{"location":"builtin-_UnsignedCheckedArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_UnsignedCheckedArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _UnsignedCheckedArithmetic val^\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns","title":"Returns","text":"<ul> <li>_UnsignedCheckedArithmetic val^</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_UnsignedCheckedArithmetic/#div_checkedt-unsignedintegert-val","title":"div_checked[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box div_checked[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_1","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#rem_checkedt-unsignedintegert-val","title":"rem_checked[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box rem_checked[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_2","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#fld_checkedt-unsignedintegert-val","title":"fld_checked[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box fld_checked[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_3","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#mod_checkedt-unsignedintegert-val","title":"mod_checked[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box mod_checked[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: (T , Bool val)\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_4","title":"Returns","text":"<ul> <li>(T , Bool val)</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _UnsignedCheckedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_4","title":"Parameters","text":"<ul> <li>that: _UnsignedCheckedArithmetic val</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _UnsignedCheckedArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_5","title":"Parameters","text":"<ul> <li>that: _UnsignedCheckedArithmetic val</li> </ul>"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/","title":"_UnsignedPartialArithmetic","text":"<p>[Source] <pre><code>primitive val _UnsignedPartialArithmetic is\n_PartialArithmetic ref\n</code></pre></p>"},{"location":"builtin-_UnsignedPartialArithmetic/#implements","title":"Implements","text":"<ul> <li>_PartialArithmetic ref</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#constructors","title":"Constructors","text":""},{"location":"builtin-_UnsignedPartialArithmetic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _UnsignedPartialArithmetic val^\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns","title":"Returns","text":"<ul> <li>_UnsignedPartialArithmetic val^</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#public-functions","title":"Public Functions","text":""},{"location":"builtin-_UnsignedPartialArithmetic/#div_partialt-unsignedintegert-val","title":"div_partial[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box div_partial[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_1","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_partialt-unsignedintegert-val","title":"rem_partial[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box rem_partial[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_1","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_2","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#divrem_partialt-unsignedintegert-val","title":"divrem_partial[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box divrem_partial[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: (T , T) ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_2","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_3","title":"Returns","text":"<ul> <li>(T , T) ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#fld_partialt-unsignedintegert-val","title":"fld_partial[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box fld_partial[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_3","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_4","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#mod_partialt-unsignedintegert-val","title":"mod_partial[T: UnsignedInteger[T] val]","text":"<p>[Source]</p> <pre><code>fun box mod_partial[T: UnsignedInteger[T] val](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_4","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_5","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#add_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_5","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_6","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#sub_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_6","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_7","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#mul_partialt-integert-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]","text":"<p>[Source]</p> <pre><code>fun box mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val))](\nx: T,\ny: T)\n: T ?\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_7","title":"Parameters","text":"<ul> <li>x: T</li> <li>y: T</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_8","title":"Returns","text":"<ul> <li>T ?</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _UnsignedPartialArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_8","title":"Parameters","text":"<ul> <li>that: _UnsignedPartialArithmetic val</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _UnsignedPartialArithmetic val)\n: Bool val\n</code></pre>"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_9","title":"Parameters","text":"<ul> <li>that: _UnsignedPartialArithmetic val</li> </ul>"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"bureaucracy--index/","title":"Bureaucracy package","text":"<p>It happens to almost every program. It starts small, tiny if you will, like a village where every actor knows every other actor and shutdown is easy. One day you realize your program is no longer a cute seaside hamlet, its a bustling metropolis and you are doing way too much work to keep track of everything. What do you do? Call for a little bureaucracy.</p> <p>The bureaucracy contains objects designed to ease your bookkeeping burdens. Need to shutdown a number of actors together? Check out <code>Custodian</code>. Need to keep track of a lot of stuff and be able to look it up by name? Check out <code>Registrar</code>.</p> <p>Put bureaucracy to use today and before long, your sprawling metropolis of a code base will be manageable again in no time.</p>"},{"location":"bureaucracy--index/#public-types","title":"Public Types","text":"<ul> <li>actor Custodian</li> <li>actor Registrar</li> </ul>"},{"location":"bureaucracy-Custodian/","title":"Custodian","text":"<p>[Source]</p> <p>A Custodian keeps a set of actors to dispose. When the Custodian is disposed, it disposes of the actors in its set and then clears the set.</p>"},{"location":"bureaucracy-Custodian/#example-program","title":"Example program","text":"<p>Imagine you have a program with 3 actors that you need to shutdown when it receives a TERM signal. We can set up a Custodian that knows about each of our actors and when a TERM signal is received, is disposed of.</p> <pre><code>use \"bureaucracy\"\nuse \"signals\"\nactor Actor1\nbe dispose() =&gt; None // dispose of resources here.\nactor Actor2\nbe dispose() =&gt; None // dispose of resources here.\nactor Actor3\nbe dispose() =&gt; None // dispose of resources here.\nactor Main\nnew create(env: Env) =&gt;\nlet actor1 = Actor1\nlet actor2 = Actor2\nlet actor3 = Actor3\nlet custodian = Custodian\ncustodian(actor1)\ncustodian(actor2)\ncustodian(actor3)\nSignalHandler(TermHandler(custodian), Sig.term())\nclass TermHandler is SignalNotify\nlet _custodian: Custodian\nnew iso create(custodian: Custodian) =&gt;\n_custodian = custodian\nfun ref apply(count: U32): Bool =&gt;\n_custodian.dispose()\ntrue\n</code></pre> <pre><code>actor tag Custodian\n</code></pre>"},{"location":"bureaucracy-Custodian/#constructors","title":"Constructors","text":""},{"location":"bureaucracy-Custodian/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: Custodian tag^\n</code></pre>"},{"location":"bureaucracy-Custodian/#returns","title":"Returns","text":"<ul> <li>Custodian tag^</li> </ul>"},{"location":"bureaucracy-Custodian/#public-behaviours","title":"Public Behaviours","text":""},{"location":"bureaucracy-Custodian/#apply","title":"apply","text":"<p>[Source]</p> <p>Add an actor to be disposed of.</p> <pre><code>be apply(\nworker: DisposableActor tag)\n</code></pre>"},{"location":"bureaucracy-Custodian/#parameters","title":"Parameters","text":"<ul> <li>worker: DisposableActor tag</li> </ul>"},{"location":"bureaucracy-Custodian/#remove","title":"remove","text":"<p>[Source]</p> <p>Removes an actor from the set of things to be disposed.</p> <pre><code>be remove(\nworker: DisposableActor tag)\n</code></pre>"},{"location":"bureaucracy-Custodian/#parameters_1","title":"Parameters","text":"<ul> <li>worker: DisposableActor tag</li> </ul>"},{"location":"bureaucracy-Custodian/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of the actors in the set and then clear the set.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"bureaucracy-Registrar/","title":"Registrar","text":"<p>[Source]</p> <p>A Registrar keeps a map of lookup string to anything. Generally, this is used to keep a directory of long-lived service-providing actors that can be looked up name.</p> <pre><code>actor tag Registrar\n</code></pre>"},{"location":"bureaucracy-Registrar/#constructors","title":"Constructors","text":""},{"location":"bureaucracy-Registrar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: Registrar tag^\n</code></pre>"},{"location":"bureaucracy-Registrar/#returns","title":"Returns","text":"<ul> <li>Registrar tag^</li> </ul>"},{"location":"bureaucracy-Registrar/#public-behaviours","title":"Public Behaviours","text":""},{"location":"bureaucracy-Registrar/#update","title":"update","text":"<p>[Source]</p> <p>Add, or change, a lookup mapping.</p> <pre><code>be update(\nkey: String val,\nvalue: Any tag)\n</code></pre>"},{"location":"bureaucracy-Registrar/#parameters","title":"Parameters","text":"<ul> <li>key: String val</li> <li>value: Any tag</li> </ul>"},{"location":"bureaucracy-Registrar/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove a mapping. This only takes effect if provided key currently maps to the provided value. If the key maps to some other value (perhaps after updating), the mapping won't be removed.</p> <pre><code>be remove(\nkey: String val,\nvalue: Any tag)\n</code></pre>"},{"location":"bureaucracy-Registrar/#parameters_1","title":"Parameters","text":"<ul> <li>key: String val</li> <li>value: Any tag</li> </ul>"},{"location":"bureaucracy-Registrar/#public-functions","title":"Public Functions","text":""},{"location":"bureaucracy-Registrar/#applyoptional-a-any-tag","title":"apply[optional A: Any tag]","text":"<p>[Source]</p> <p>Lookup by name. Returns a promise that will be fulfilled with the mapped value if it exists and is a subtype of A. Otherwise, the promise will be rejected.</p> <pre><code>fun tag apply[optional A: Any tag](\nkey: String val)\n: Promise[A] tag\n</code></pre>"},{"location":"bureaucracy-Registrar/#parameters_2","title":"Parameters","text":"<ul> <li>key: String val</li> </ul>"},{"location":"bureaucracy-Registrar/#returns_1","title":"Returns","text":"<ul> <li>Promise[A] tag</li> </ul>"},{"location":"bureaucracy-Registrar/#private-behaviours","title":"Private Behaviours","text":""},{"location":"bureaucracy-Registrar/#_fetcha-any-tag","title":"_fetch[A: Any tag]","text":"<p>[Source]</p> <p>Fulfills or rejects the promise.</p> <pre><code>be _fetch[A: Any tag](\nkey: String val,\npromise: Promise[A] tag)\n</code></pre>"},{"location":"bureaucracy-Registrar/#parameters_3","title":"Parameters","text":"<ul> <li>key: String val</li> <li>promise: Promise[A] tag</li> </ul>"},{"location":"capsicum--index/","title":"Capsicum package","text":"<p>Access to Capsicum capabilities for UNIX systems -- primarily in use by BSD-based systems.</p>"},{"location":"capsicum--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Cap</li> <li>type CapRights</li> <li>class CapRights0</li> </ul>"},{"location":"capsicum-Cap/","title":"Cap","text":"<p>[Source]</p> <p>The Capsicum rights.</p> <pre><code>primitive val Cap\n</code></pre>"},{"location":"capsicum-Cap/#constructors","title":"Constructors","text":""},{"location":"capsicum-Cap/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Cap val^\n</code></pre>"},{"location":"capsicum-Cap/#returns","title":"Returns","text":"<ul> <li>Cap val^</li> </ul>"},{"location":"capsicum-Cap/#public-functions","title":"Public Functions","text":""},{"location":"capsicum-Cap/#enter","title":"enter","text":"<p>[Source]</p> <p>This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented.</p> <pre><code>fun box enter()\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-Cap/#read","title":"read","text":"<p>[Source]</p> <pre><code>fun box read()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#write","title":"write","text":"<p>[Source]</p> <pre><code>fun box write()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#seek_tell","title":"seek_tell","text":"<p>[Source]</p> <pre><code>fun box seek_tell()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#seek","title":"seek","text":"<p>[Source]</p> <pre><code>fun box seek()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pread","title":"pread","text":"<p>[Source]</p> <pre><code>fun box pread()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pwrite","title":"pwrite","text":"<p>[Source]</p> <pre><code>fun box pwrite()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap","title":"mmap","text":"<p>[Source]</p> <pre><code>fun box mmap()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_r","title":"mmap_r","text":"<p>[Source]</p> <pre><code>fun box mmap_r()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_9","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_w","title":"mmap_w","text":"<p>[Source]</p> <pre><code>fun box mmap_w()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_10","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_x","title":"mmap_x","text":"<p>[Source]</p> <pre><code>fun box mmap_x()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_11","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rw","title":"mmap_rw","text":"<p>[Source]</p> <pre><code>fun box mmap_rw()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rx","title":"mmap_rx","text":"<p>[Source]</p> <pre><code>fun box mmap_rx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_13","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_wx","title":"mmap_wx","text":"<p>[Source]</p> <pre><code>fun box mmap_wx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_14","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mmap_rwx","title":"mmap_rwx","text":"<p>[Source]</p> <pre><code>fun box mmap_rwx()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_15","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#creat","title":"creat","text":"<p>[Source]</p> <pre><code>fun box creat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_16","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fexecve","title":"fexecve","text":"<p>[Source]</p> <pre><code>fun box fexecve()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_17","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fsync","title":"fsync","text":"<p>[Source]</p> <pre><code>fun box fsync()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_18","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ftruncate","title":"ftruncate","text":"<p>[Source]</p> <pre><code>fun box ftruncate()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_19","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#lookup","title":"lookup","text":"<p>[Source]</p> <pre><code>fun box lookup()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_20","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchdir","title":"fchdir","text":"<p>[Source]</p> <pre><code>fun box fchdir()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_21","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchflags","title":"fchflags","text":"<p>[Source]</p> <pre><code>fun box fchflags()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#chflagsat","title":"chflagsat","text":"<p>[Source]</p> <pre><code>fun box chflagsat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchmod","title":"fchmod","text":"<p>[Source]</p> <pre><code>fun box fchmod()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_24","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchmodat","title":"fchmodat","text":"<p>[Source]</p> <pre><code>fun box fchmodat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_25","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchown","title":"fchown","text":"<p>[Source]</p> <pre><code>fun box fchown()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_26","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fchownat","title":"fchownat","text":"<p>[Source]</p> <pre><code>fun box fchownat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_27","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fcntl","title":"fcntl","text":"<p>[Source]</p> <pre><code>fun box fcntl()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_28","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#flock","title":"flock","text":"<p>[Source]</p> <pre><code>fun box flock()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_29","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fpathconf","title":"fpathconf","text":"<p>[Source]</p> <pre><code>fun box fpathconf()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_30","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fsck","title":"fsck","text":"<p>[Source]</p> <pre><code>fun box fsck()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_31","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstat","title":"fstat","text":"<p>[Source]</p> <pre><code>fun box fstat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_32","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstatat","title":"fstatat","text":"<p>[Source]</p> <pre><code>fun box fstatat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_33","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#fstatfs","title":"fstatfs","text":"<p>[Source]</p> <pre><code>fun box fstatfs()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_34","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#futimes","title":"futimes","text":"<p>[Source]</p> <pre><code>fun box futimes()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_35","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#futimesat","title":"futimesat","text":"<p>[Source]</p> <pre><code>fun box futimesat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_36","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#linkat","title":"linkat","text":"<p>[Source]</p> <pre><code>fun box linkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_37","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mkdirat","title":"mkdirat","text":"<p>[Source]</p> <pre><code>fun box mkdirat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_38","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mkfifoat","title":"mkfifoat","text":"<p>[Source]</p> <pre><code>fun box mkfifoat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_39","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mknodat","title":"mknodat","text":"<p>[Source]</p> <pre><code>fun box mknodat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_40","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#renameat","title":"renameat","text":"<p>[Source]</p> <pre><code>fun box renameat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_41","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#symlinkat","title":"symlinkat","text":"<p>[Source]</p> <pre><code>fun box symlinkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_42","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#unlinkat","title":"unlinkat","text":"<p>[Source]</p> <pre><code>fun box unlinkat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_43","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#accept","title":"accept","text":"<p>[Source]</p> <pre><code>fun box accept()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_44","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#bind","title":"bind","text":"<p>[Source]</p> <pre><code>fun box bind()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_45","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>fun box connect()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_46","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getpeername","title":"getpeername","text":"<p>[Source]</p> <pre><code>fun box getpeername()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_47","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getsockname","title":"getsockname","text":"<p>[Source]</p> <pre><code>fun box getsockname()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_48","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <pre><code>fun box getsockopt()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_49","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#listen","title":"listen","text":"<p>[Source]</p> <pre><code>fun box listen()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_50","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#peeloff","title":"peeloff","text":"<p>[Source]</p> <pre><code>fun box peeloff()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_51","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#recv","title":"recv","text":"<p>[Source]</p> <pre><code>fun box recv()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_52","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#send","title":"send","text":"<p>[Source]</p> <pre><code>fun box send()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_53","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <pre><code>fun box setsockopt()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_54","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#shutdown","title":"shutdown","text":"<p>[Source]</p> <pre><code>fun box shutdown()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_55","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#bindat","title":"bindat","text":"<p>[Source]</p> <pre><code>fun box bindat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_56","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#connectat","title":"connectat","text":"<p>[Source]</p> <pre><code>fun box connectat()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_57","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sock_client","title":"sock_client","text":"<p>[Source]</p> <pre><code>fun box sock_client()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_58","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sock_server","title":"sock_server","text":"<p>[Source]</p> <pre><code>fun box sock_server()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_59","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mac_get","title":"mac_get","text":"<p>[Source]</p> <pre><code>fun box mac_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_60","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#mac_set","title":"mac_set","text":"<p>[Source]</p> <pre><code>fun box mac_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_61","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_getvalue","title":"sem_getvalue","text":"<p>[Source]</p> <pre><code>fun box sem_getvalue()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_62","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_post","title":"sem_post","text":"<p>[Source]</p> <pre><code>fun box sem_post()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_63","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#sem_wait","title":"sem_wait","text":"<p>[Source]</p> <pre><code>fun box sem_wait()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_64","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#event","title":"event","text":"<p>[Source]</p> <pre><code>fun box event()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_65","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue_event","title":"kqueue_event","text":"<p>[Source]</p> <pre><code>fun box kqueue_event()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_66","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ioctl","title":"ioctl","text":"<p>[Source]</p> <pre><code>fun box ioctl()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_67","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#ttyhook","title":"ttyhook","text":"<p>[Source]</p> <pre><code>fun box ttyhook()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_68","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdgetpid","title":"pdgetpid","text":"<p>[Source]</p> <pre><code>fun box pdgetpid()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_69","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdwait","title":"pdwait","text":"<p>[Source]</p> <pre><code>fun box pdwait()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_70","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#pdkill","title":"pdkill","text":"<p>[Source]</p> <pre><code>fun box pdkill()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_71","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_delete","title":"exattr_delete","text":"<p>[Source]</p> <pre><code>fun box exattr_delete()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_72","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_get","title":"exattr_get","text":"<p>[Source]</p> <pre><code>fun box exattr_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_73","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_list","title":"exattr_list","text":"<p>[Source]</p> <pre><code>fun box exattr_list()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_74","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#exattr_set","title":"exattr_set","text":"<p>[Source]</p> <pre><code>fun box exattr_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_75","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_check","title":"acl_check","text":"<p>[Source]</p> <pre><code>fun box acl_check()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_76","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_delete","title":"acl_delete","text":"<p>[Source]</p> <pre><code>fun box acl_delete()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_77","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_get","title":"acl_get","text":"<p>[Source]</p> <pre><code>fun box acl_get()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_78","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#acl_set","title":"acl_set","text":"<p>[Source]</p> <pre><code>fun box acl_set()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_79","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue_change","title":"kqueue_change","text":"<p>[Source]</p> <pre><code>fun box kqueue_change()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_80","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#kqueue","title":"kqueue","text":"<p>[Source]</p> <pre><code>fun box kqueue()\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#returns_81","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-Cap/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Cap val)\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#parameters","title":"Parameters","text":"<ul> <li>that: Cap val</li> </ul>"},{"location":"capsicum-Cap/#returns_82","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-Cap/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Cap val)\n: Bool val\n</code></pre>"},{"location":"capsicum-Cap/#parameters_1","title":"Parameters","text":"<ul> <li>that: Cap val</li> </ul>"},{"location":"capsicum-Cap/#returns_83","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-Cap/#private-functions","title":"Private Functions","text":""},{"location":"capsicum-Cap/#_id","title":"_id","text":"<p>[Source]</p> <p>Build a Capsicum ID from an index and a bit position.</p> <pre><code>fun box _id(\nidx: U64 val,\nbit: U64 val)\n: U64 val\n</code></pre>"},{"location":"capsicum-Cap/#parameters_2","title":"Parameters","text":"<ul> <li>idx: U64 val</li> <li>bit: U64 val</li> </ul>"},{"location":"capsicum-Cap/#returns_84","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"capsicum-CapRights/","title":"CapRights","text":"<p>[Source] <pre><code>type CapRights is\nCapRights0 ref\n</code></pre></p>"},{"location":"capsicum-CapRights/#type-alias-for","title":"Type Alias For","text":"<ul> <li>CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/","title":"CapRights0","text":"<p>[Source]</p> <p>Version 0 of the capsicum cap_rights_t structure.</p> <pre><code>class ref CapRights0\n</code></pre>"},{"location":"capsicum-CapRights0/#constructors","title":"Constructors","text":""},{"location":"capsicum-CapRights0/#create","title":"create","text":"<p>[Source]</p> <p>Initialises with no rights.</p> <pre><code>new ref create()\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#returns","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#from","title":"from","text":"<p>[Source]</p> <p>Initialises with the rights from a FileCaps.</p> <pre><code>new ref from(\ncaps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters","title":"Parameters","text":"<ul> <li>caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box</li> </ul>"},{"location":"capsicum-CapRights0/#returns_1","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#descriptor","title":"descriptor","text":"<p>[Source]</p> <p>Initialises with the rights on the given file descriptor.</p> <pre><code>new ref descriptor(\nfd: I32 val)\n: CapRights0 ref^\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_1","title":"Parameters","text":"<ul> <li>fd: I32 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_2","title":"Returns","text":"<ul> <li>CapRights0 ref^</li> </ul>"},{"location":"capsicum-CapRights0/#public-functions","title":"Public Functions","text":""},{"location":"capsicum-CapRights0/#set","title":"set","text":"<p>[Source]</p> <pre><code>fun ref set(\ncap: U64 val)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_2","title":"Parameters","text":"<ul> <li>cap: U64 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#unset","title":"unset","text":"<p>[Source]</p> <pre><code>fun ref unset(\ncap: U64 val)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_3","title":"Parameters","text":"<ul> <li>cap: U64 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#limit","title":"limit","text":"<p>[Source]</p> <p>Limits the fd to the encoded rights.</p> <pre><code>fun box limit(\nfd: I32 val)\n: Bool val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_4","title":"Parameters","text":"<ul> <li>fd: I32 val</li> </ul>"},{"location":"capsicum-CapRights0/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-CapRights0/#merge","title":"merge","text":"<p>[Source]</p> <p>Merge the rights in that into this.</p> <pre><code>fun ref merge(\nthat: CapRights0 ref)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_5","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the rights in that from this.</p> <pre><code>fun ref remove(\nthat: CapRights0 ref)\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_6","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear all rights.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"capsicum-CapRights0/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"capsicum-CapRights0/#contains","title":"contains","text":"<p>[Source]</p> <p>Check that this is a superset of the rights in that.</p> <pre><code>fun box contains(\nthat: CapRights0 ref)\n: Bool val\n</code></pre>"},{"location":"capsicum-CapRights0/#parameters_7","title":"Parameters","text":"<ul> <li>that: CapRights0 ref</li> </ul>"},{"location":"capsicum-CapRights0/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"capsicum-CapRights0/#private-functions","title":"Private Functions","text":""},{"location":"capsicum-CapRights0/#_version","title":"_version","text":"<p>[Source]</p> <pre><code>fun box _version()\n: I32 val\n</code></pre>"},{"location":"capsicum-CapRights0/#returns_10","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"collections--index/","title":"Collections package","text":"<p>The Collections package provides a variety of collection classes,  including map, set, range, heap, ring buffer, list, and flags.</p> <p><code>Map</code> - Hashmap by strutural equality (use <code>MapIs</code> for identity equality).</p> <p><code>Set</code> - A set built on top of <code>Map</code> using structural equility (use <code>SetIs</code> for identity equality).</p> <p><code>Range</code> - Iterate over a range of numbers with optional step size.</p> <p><code>BinaryHeap</code> - A priority queue implemented as a binary heap -- use a <code>BinaryHeapPriority</code> parameter to determine priority.</p> <p><code>RingBuffer</code> - A ring buffer with fixed size.</p> <p><code>List</code> - A doubly linked list.</p> <p><code>Flags</code> - A set of single bit flags (size determined upon creation).</p>"},{"location":"collections--index/#public-types","title":"Public Types","text":"<ul> <li>class BinaryHeap</li> <li>type BinaryHeapPriority</li> <li>interface Flag</li> <li>class Flags</li> <li>primitive HashByteSeq</li> <li>primitive HashEq</li> <li>primitive HashEq64</li> <li>interface HashFunction</li> <li>interface HashFunction64</li> <li>primitive HashIs</li> <li>class HashMap</li> <li>class HashSet</li> <li>interface Hashable</li> <li>interface Hashable64</li> <li>class List</li> <li>class ListNode</li> <li>class ListNodes</li> <li>class ListValues</li> <li>type Map</li> <li>type MapIs</li> <li>class MapKeys</li> <li>class MapPairs</li> <li>class MapValues</li> <li>type MaxHeap</li> <li>primitive MaxHeapPriority</li> <li>type MinHeap</li> <li>primitive MinHeapPriority</li> <li>class Range</li> <li>class Reverse</li> <li>class RingBuffer</li> <li>type Set</li> <li>type SetIs</li> <li>class SetValues</li> <li>primitive Sort</li> </ul>"},{"location":"collections--index/#private-types","title":"Private Types","text":"<ul> <li>interface _BinaryHeapPriority</li> <li>primitive _MapDeleted</li> <li>primitive _MapEmpty</li> <li>type _TestFlagsFlags</li> </ul>"},{"location":"collections-BinaryHeap/","title":"BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]","text":"<p>[Source]</p> <p>A priority queue implemented as a binary heap. The <code>BinaryHeapPriority</code> type parameter determines whether this is max-heap or a min-heap.</p> <pre><code>class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]\n</code></pre>"},{"location":"collections-BinaryHeap/#constructors","title":"Constructors","text":""},{"location":"collections-BinaryHeap/#create","title":"create","text":"<p>[Source]</p> <p>Create an empty heap with space for <code>len</code> elements.</p> <pre><code>new ref create(\nlen: USize val)\n: BinaryHeap[A, P] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns","title":"Returns","text":"<ul> <li>BinaryHeap[A, P] ref^</li> </ul>"},{"location":"collections-BinaryHeap/#public-functions","title":"Public Functions","text":""},{"location":"collections-BinaryHeap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the heap.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#size","title":"size","text":"<p>[Source]</p> <p>Return the number of elements in the heap.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-BinaryHeap/#peek","title":"peek","text":"<p>[Source]</p> <p>Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <pre><code>fun box peek()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-BinaryHeap/#push","title":"push","text":"<p>[Source]</p> <p>Push an item into the heap.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref push(\nvalue: A)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_1","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-BinaryHeap/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned.</p> <p>The time complexity of this operation is O(log(n)) with respect to the size of the heap.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_5","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-BinaryHeap/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <pre><code>fun ref append(\nseq: (ReadSeq[A] box &amp; ReadElement[A^] box),\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_2","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements, starting from the given offset.</p> <pre><code>fun ref concat(\niter: Iterator[A^] ref,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_3","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-BinaryHeap/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator for the elements in the heap. The order of elements is arbitrary.</p> <pre><code>fun box values()\n: ArrayValues[A, this-&gt;Array[A] ref] ref^\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_8","title":"Returns","text":"<ul> <li>ArrayValues[A, this-&gt;Array[A] ref] ref^</li> </ul>"},{"location":"collections-BinaryHeap/#private-functions","title":"Private Functions","text":""},{"location":"collections-BinaryHeap/#_make_heap","title":"_make_heap","text":"<p>[Source]</p> <pre><code>fun ref _make_heap()\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#_sift_up","title":"_sift_up","text":"<p>[Source]</p> <pre><code>fun ref _sift_up(\nn: USize val)\n: None val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_4","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-BinaryHeap/#_sift_down","title":"_sift_down","text":"<p>[Source]</p> <pre><code>fun ref _sift_down(\nstart: USize val,\nn: USize val)\n: Bool val\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_5","title":"Parameters","text":"<ul> <li>start: USize val</li> <li>n: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-BinaryHeap/#_apply","title":"_apply","text":"<p>[Source]</p> <pre><code>fun box _apply(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-BinaryHeap/#parameters_6","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-BinaryHeap/#returns_12","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-BinaryHeapPriority/","title":"BinaryHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type BinaryHeapPriority[A: Comparable[A] #read] is\n(_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))\n</code></pre></p>"},{"location":"collections-BinaryHeapPriority/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))</li> </ul>"},{"location":"collections-Flag/","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]","text":"<p>[Source]</p> <p>A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits.</p> <pre><code>interface val Flag[A: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Integer[A] val)]\n</code></pre>"},{"location":"collections-Flag/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flag/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: A\n</code></pre>"},{"location":"collections-Flag/#returns","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Flags/","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]","text":"<p>[Source]</p> <p>Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example:</p> <p>primitive SSE   fun value(): U64 =&gt; 1</p> <p>primitive AVX   fun value(): U64 =&gt; 2</p> <p>primitive RDTSCP   fun value(): U64 =&gt; 4</p> <p>type Features is Flags[(SSE | AVX | RDTSCP)]</p> <p>Type parameter B is the underlying field used to store the flags.</p> <pre><code>class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Integer[B] val)] is\nComparable[Flags[A, B] box] ref\n</code></pre>"},{"location":"collections-Flags/#implements","title":"Implements","text":"<ul> <li>Comparable[Flags[A, B] box] ref</li> </ul>"},{"location":"collections-Flags/#constructors","title":"Constructors","text":""},{"location":"collections-Flags/#create","title":"create","text":"<p>[Source]</p> <p>Create a Flags instance with an optional initial value. Default is 0 (no flags set).</p> <pre><code>new iso create(\nvalue': B = 0)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters","title":"Parameters","text":"<ul> <li>value': B = 0</li> </ul>"},{"location":"collections-Flags/#returns","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#public-functions","title":"Public Functions","text":""},{"location":"collections-Flags/#value","title":"value","text":"<p>[Source]</p> <p>Returns the bit encoding of the set flags.</p> <pre><code>fun box value()\n: B\n</code></pre>"},{"location":"collections-Flags/#returns_1","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-Flags/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the flag is set.</p> <pre><code>fun box apply(\nflag: A)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_1","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#all","title":"all","text":"<p>[Source]</p> <p>Sets all bits, including undefined flags.</p> <pre><code>fun ref all()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#clear","title":"clear","text":"<p>[Source]</p> <p>Unsets all flags.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-Flags/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#set","title":"set","text":"<p>[Source]</p> <p>Sets the flag.</p> <pre><code>fun ref set(\nflag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_2","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#unset","title":"unset","text":"<p>[Source]</p> <p>Unsets the flag.</p> <pre><code>fun ref unset(\nflag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_3","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#flip","title":"flip","text":"<p>[Source]</p> <p>Sets the flag if it is unset, unsets the flag if it is set.</p> <pre><code>fun ref flip(\nflag: A)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_4","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#union","title":"union","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun ref union(\nthat: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_5","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#intersect","title":"intersect","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun ref intersect(\nthat: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_6","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#difference","title":"difference","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun ref difference(\nthat: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_7","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#remove","title":"remove","text":"<p>[Source]</p> <p>Unset flags that are set in that.</p> <pre><code>fun ref remove(\nthat: Flags[A, B] box)\n: None val\n</code></pre>"},{"location":"collections-Flags/#parameters_8","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Flags/#add","title":"add","text":"<p>[Source]</p> <p>This with the flag set.</p> <pre><code>fun box add(\nflag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_9","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_12","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#sub","title":"sub","text":"<p>[Source]</p> <p>This with the flag unset.</p> <pre><code>fun box sub(\nflag: A)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_10","title":"Parameters","text":"<ul> <li>flag: A</li> </ul>"},{"location":"collections-Flags/#returns_13","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_or","title":"op_or","text":"<p>[Source]</p> <p>The union of this and that.</p> <pre><code>fun box op_or(\nthat: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_11","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_14","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_and","title":"op_and","text":"<p>[Source]</p> <p>The intersection of this and that.</p> <pre><code>fun box op_and(\nthat: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_12","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_15","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#op_xor","title":"op_xor","text":"<p>[Source]</p> <p>The symmetric difference of this and that.</p> <pre><code>fun box op_xor(\nthat: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_13","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_16","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#without","title":"without","text":"<p>[Source]</p> <p>The flags in this that are not in that.</p> <pre><code>fun box without(\nthat: Flags[A, B] box)\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#parameters_14","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_17","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#clone","title":"clone","text":"<p>[Source]</p> <p>Create a clone.</p> <pre><code>fun box clone()\n: Flags[A, B] iso^\n</code></pre>"},{"location":"collections-Flags/#returns_18","title":"Returns","text":"<ul> <li>Flags[A, B] iso^</li> </ul>"},{"location":"collections-Flags/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if this has the same flags set as that.</p> <pre><code>fun box eq(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_15","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge.</p> <pre><code>fun box lt(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_16","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te.</p> <pre><code>fun box le(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_17","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le.</p> <pre><code>fun box gt(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_18","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt.</p> <pre><code>fun box ge(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_19","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Flags/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-Flags/#parameters_20","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_24","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Flags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Flags[A, B] box)\n: Bool val\n</code></pre>"},{"location":"collections-Flags/#parameters_21","title":"Parameters","text":"<ul> <li>that: Flags[A, B] box</li> </ul>"},{"location":"collections-Flags/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/","title":"HashByteSeq","text":"<p>[Source]</p> <p>Hash and equality functions for arbitrary ByteSeq.</p> <pre><code>primitive val HashByteSeq is\nHashFunction[(String box | Array[U8 val] box)] val,\nHashFunction64[(String box | Array[U8 val] box)] val\n</code></pre>"},{"location":"collections-HashByteSeq/#implements","title":"Implements","text":"<ul> <li>HashFunction[(String box | Array[U8 val] box)] val</li> <li>HashFunction64[(String box | Array[U8 val] box)] val</li> </ul>"},{"location":"collections-HashByteSeq/#constructors","title":"Constructors","text":""},{"location":"collections-HashByteSeq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashByteSeq val^\n</code></pre>"},{"location":"collections-HashByteSeq/#returns","title":"Returns","text":"<ul> <li>HashByteSeq val^</li> </ul>"},{"location":"collections-HashByteSeq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashByteSeq/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash(\nx: (String box | Array[U8 val] box))\n: USize val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashByteSeq/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64(\nx: (String box | Array[U8 val] box))\n: U64 val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_1","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashByteSeq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nx: (String box | Array[U8 val] box),\ny: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_2","title":"Parameters","text":"<ul> <li>x: (String box | Array[U8 val] box)</li> <li>y: (String box | Array[U8 val] box)</li> </ul>"},{"location":"collections-HashByteSeq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashByteSeq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HashByteSeq val)\n: Bool val\n</code></pre>"},{"location":"collections-HashByteSeq/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashByteSeq val</li> </ul>"},{"location":"collections-HashByteSeq/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq[A: (Hashable #read &amp; Equatable[A] #read)] is\nHashFunction[A] val\n</code></pre></p>"},{"location":"collections-HashEq/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> </ul>"},{"location":"collections-HashEq/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq[A] val^\n</code></pre>"},{"location":"collections-HashEq/#returns","title":"Returns","text":"<ul> <li>HashEq[A] val^</li> </ul>"},{"location":"collections-HashEq/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq/#hash","title":"hash","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash(\nx: box-&gt;A)\n: USize val\n</code></pre>"},{"location":"collections-HashEq/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashEq/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\nx: box-&gt;A,\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HashEq[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq[A] val</li> </ul>"},{"location":"collections-HashEq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>primitive val HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)] is\nHashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashEq64/#implements","title":"Implements","text":"<ul> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashEq64/#constructors","title":"Constructors","text":""},{"location":"collections-HashEq64/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashEq64[A] val^\n</code></pre>"},{"location":"collections-HashEq64/#returns","title":"Returns","text":"<ul> <li>HashEq64[A] val^</li> </ul>"},{"location":"collections-HashEq64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashEq64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Use the hash function from the type parameter.</p> <pre><code>fun box hash64(\nx: box-&gt;A)\n: U64 val\n</code></pre>"},{"location":"collections-HashEq64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashEq64/#eq","title":"eq","text":"<p>[Source]</p> <p>Use the structural equality function from the type parameter.</p> <pre><code>fun box eq(\nx: box-&gt;A,\ny: box-&gt;A)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A</li> <li>y: box-&gt;A</li> </ul>"},{"location":"collections-HashEq64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashEq64/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HashEq64[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashEq64/#parameters_2","title":"Parameters","text":"<ul> <li>that: HashEq64[A] val</li> </ul>"},{"location":"collections-HashEq64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction/","title":"HashFunction[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function.</p> <pre><code>interface val HashFunction[A: A]\n</code></pre>"},{"location":"collections-HashFunction/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction[A] val^\n</code></pre>"},{"location":"collections-HashFunction/#returns","title":"Returns","text":"<ul> <li>HashFunction[A] val^</li> </ul>"},{"location":"collections-HashFunction/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction/#hash","title":"hash","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash(\nx: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashFunction/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashFunction/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\nx: box-&gt;A!,\ny: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashFunction64/","title":"HashFunction64[A: A]","text":"<p>[Source]</p> <p>A pluggable hash function with 64-bit hashes.</p> <pre><code>interface val HashFunction64[A: A]\n</code></pre>"},{"location":"collections-HashFunction64/#constructors","title":"Constructors","text":""},{"location":"collections-HashFunction64/#create","title":"create","text":"<p>[Source]</p> <p>Data structures create instances internally. Use a primitive if possible.</p> <pre><code>new val create()\n: HashFunction64[A] val^\n</code></pre>"},{"location":"collections-HashFunction64/#returns","title":"Returns","text":"<ul> <li>HashFunction64[A] val^</li> </ul>"},{"location":"collections-HashFunction64/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashFunction64/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them.</p> <pre><code>fun box hash64(\nx: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashFunction64/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys.</p> <pre><code>fun box eq(\nx: box-&gt;A!,\ny: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashFunction64/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashFunction64/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/","title":"HashIs[A: A]","text":"<p>[Source] <pre><code>primitive val HashIs[A: A] is\nHashFunction[A] val,\nHashFunction64[A] val\n</code></pre></p>"},{"location":"collections-HashIs/#implements","title":"Implements","text":"<ul> <li>HashFunction[A] val</li> <li>HashFunction64[A] val</li> </ul>"},{"location":"collections-HashIs/#constructors","title":"Constructors","text":""},{"location":"collections-HashIs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HashIs[A] val^\n</code></pre>"},{"location":"collections-HashIs/#returns","title":"Returns","text":"<ul> <li>HashIs[A] val^</li> </ul>"},{"location":"collections-HashIs/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashIs/#hash","title":"hash","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash(\nx: box-&gt;A!)\n: USize val\n</code></pre>"},{"location":"collections-HashIs/#parameters","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashIs/#hash64","title":"hash64","text":"<p>[Source]</p> <p>Hash the identity rather than the contents.</p> <pre><code>fun box hash64(\nx: box-&gt;A!)\n: U64 val\n</code></pre>"},{"location":"collections-HashIs/#parameters_1","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-HashIs/#eq","title":"eq","text":"<p>[Source]</p> <p>Determine equality by identity rather than structurally.</p> <pre><code>fun box eq(\nx: box-&gt;A!,\ny: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_2","title":"Parameters","text":"<ul> <li>x: box-&gt;A!</li> <li>y: box-&gt;A!</li> </ul>"},{"location":"collections-HashIs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashIs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HashIs[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-HashIs/#parameters_3","title":"Parameters","text":"<ul> <li>that: HashIs[A] val</li> </ul>"},{"location":"collections-HashIs/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/","title":"HashMap[K: K, V: V, H: HashFunction[K] val]","text":"<p>[Source]</p> <p>A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps.</p> <pre><code>class ref HashMap[K: K, V: V, H: HashFunction[K] val]\n</code></pre>"},{"location":"collections-HashMap/#constructors","title":"Constructors","text":""},{"location":"collections-HashMap/#create","title":"create","text":"<p>[Source]</p> <p>Create an array with space for prealloc elements without triggering a resize. Defaults to 6.</p> <pre><code>new ref create(\nprealloc: USize val = 6)\n: HashMap[K, V, H] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 6</li> </ul>"},{"location":"collections-HashMap/#returns","title":"Returns","text":"<ul> <li>HashMap[K, V, H] ref^</li> </ul>"},{"location":"collections-HashMap/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashMap/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the map.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the map. Resize will happen when size / space &gt;= 0.75.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashMap/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashMap/#apply","title":"apply","text":"<p>[Source]</p> <p>Gets a value from the map. Raises an error if no such item exists.</p> <pre><code>fun box apply(\nkey: box-&gt;K!)\n: this-&gt;V ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_1","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;V ?</li> </ul>"},{"location":"collections-HashMap/#update","title":"update","text":"<p>[Source]</p> <p>Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize.</p> <pre><code>fun ref update(\nkey: K,\nvalue: V)\n: (V^ | None val)\n</code></pre>"},{"location":"collections-HashMap/#parameters_2","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_4","title":"Returns","text":"<ul> <li>(V^ | None val)</li> </ul>"},{"location":"collections-HashMap/#upsert","title":"upsert","text":"<p>[Source]</p> <p>Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function.</p> <p>As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call</p> <p>m.upsert(\"test\", 4, {(current, provided) =&gt; current + provided })</p> <p>This changes the value associated with \"test\" to 6.</p> <p>If we have not yet added the key \"new-key\" to the map and we call</p> <p>m.upsert(\"new-key\", 4, {(current, provided) =&gt; current + provided })</p> <p>then \"new-key\" is added to the map with a value of 4.</p> <p>Returns the value that we set the key to</p> <pre><code>fun ref upsert(\nkey: K,\nvalue: V,\nf: {(V, V): V^}[K, V, H] box)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_3","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> <li>f: {(V, V): V^}[K, V, H] box</li> </ul>"},{"location":"collections-HashMap/#returns_5","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert","title":"insert","text":"<p>[Source]</p> <p>Set a value in the map. Returns the new value, allowing reuse.</p> <pre><code>fun ref insert(\nkey: K,\nvalue: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_4","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_6","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#insert_if_absent","title":"insert_if_absent","text":"<p>[Source]</p> <p>Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like:</p> <pre><code>if not my_map.contains(my_key) then\nmy_map(my_key) = my_value\nend\n</code></pre> <p>Returns the value, the same as <code>insert</code>, allowing 'insert_if_absent' to be used as a drop-in replacement for <code>insert</code>.</p> <pre><code>fun ref insert_if_absent(\nkey: K,\nvalue: V)\n: V!\n</code></pre>"},{"location":"collections-HashMap/#parameters_5","title":"Parameters","text":"<ul> <li>key: K</li> <li>value: V</li> </ul>"},{"location":"collections-HashMap/#returns_7","title":"Returns","text":"<ul> <li>V!</li> </ul>"},{"location":"collections-HashMap/#remove","title":"remove","text":"<p>[Source]</p> <p>Delete a value from the map and return it. Raises an error if there was no value for the given key.</p> <pre><code>fun ref remove(\nkey: box-&gt;K!)\n: (K^ , V^) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_6","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_8","title":"Returns","text":"<ul> <li>(K^ , V^) ?</li> </ul>"},{"location":"collections-HashMap/#get_or_else","title":"get_or_else","text":"<p>[Source]</p> <p>Get the value associated with provided key if present. Otherwise, return the provided alternate value.</p> <pre><code>fun box get_or_else(\nkey: box-&gt;K!,\nalt: this-&gt;V)\n: this-&gt;V\n</code></pre>"},{"location":"collections-HashMap/#parameters_7","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> <li>alt: this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#returns_9","title":"Returns","text":"<ul> <li>this-&gt;V</li> </ul>"},{"location":"collections-HashMap/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the map contains the key k</p> <pre><code>fun box contains(\nk: box-&gt;K!)\n: Bool val\n</code></pre>"},{"location":"collections-HashMap/#parameters_8","title":"Parameters","text":"<ul> <li>k: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashMap/#concat","title":"concat","text":"<p>[Source]</p> <p>Add K, V pairs from the iterator to the map.</p> <pre><code>fun ref concat(\niter: Iterator[(K^ , V^)] ref)\n: None val\n</code></pre>"},{"location":"collections-HashMap/#parameters_9","title":"Parameters","text":"<ul> <li>iter: Iterator[(K^ , V^)] ref</li> </ul>"},{"location":"collections-HashMap/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#addoptional-h2-hashfunctionthis-k-val","title":"add[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This with the new (key, value) mapping.</p> <pre><code>fun box add[optional H2: HashFunction[this-&gt;K!] val](\nkey: this-&gt;K!,\nvalue: this-&gt;V!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_10","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> <li>value: this-&gt;V!</li> </ul>"},{"location":"collections-HashMap/#returns_12","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#suboptional-h2-hashfunctionthis-k-val","title":"sub[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>This without the given key.</p> <pre><code>fun box sub[optional H2: HashFunction[this-&gt;K!] val](\nkey: this-&gt;K!)\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#parameters_11","title":"Parameters","text":"<ul> <li>key: this-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_13","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\nprev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_12","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashMap/#returns_14","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashMap/#index","title":"index","text":"<p>[Source]</p> <p>Returns the key and value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\ni: USize val)\n: (this-&gt;K , this-&gt;V) ?\n</code></pre>"},{"location":"collections-HashMap/#parameters_13","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashMap/#returns_15","title":"Returns","text":"<ul> <li>(this-&gt;K , this-&gt;V) ?</li> </ul>"},{"location":"collections-HashMap/#compact","title":"compact","text":"<p>[Source]</p> <p>Minimise the memory used for the map.</p> <pre><code>fun ref compact()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#cloneoptional-h2-hashfunctionthis-k-val","title":"clone[optional H2: HashFunction[this-&gt;K!] val]","text":"<p>[Source]</p> <p>Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional H2: HashFunction[this-&gt;K!] val]()\n: HashMap[this-&gt;K!, this-&gt;V!, H2] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_17","title":"Returns","text":"<ul> <li>HashMap[this-&gt;K!, this-&gt;V!, H2] ref^</li> </ul>"},{"location":"collections-HashMap/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all entries.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashMap/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashMap/#keys","title":"keys","text":"<p>[Source]</p> <p>Return an iterator over the keys.</p> <pre><code>fun box keys()\n: MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_19","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_20","title":"Returns","text":"<ul> <li>MapValues[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#pairs","title":"pairs","text":"<p>[Source]</p> <p>Return an iterator over the keys and values.</p> <pre><code>fun box pairs()\n: MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^\n</code></pre>"},{"location":"collections-HashMap/#returns_21","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, this-&gt;HashMap[K, V, H] ref] ref^</li> </ul>"},{"location":"collections-HashMap/#private-functions","title":"Private Functions","text":""},{"location":"collections-HashMap/#_search","title":"_search","text":"<p>[Source]</p> <p>Return a slot number and whether or not it's currently occupied.</p> <pre><code>fun box _search(\nkey: box-&gt;K!)\n: (USize val , Bool val)\n</code></pre>"},{"location":"collections-HashMap/#parameters_14","title":"Parameters","text":"<ul> <li>key: box-&gt;K!</li> </ul>"},{"location":"collections-HashMap/#returns_22","title":"Returns","text":"<ul> <li>(USize val , Bool val)</li> </ul>"},{"location":"collections-HashMap/#_resize","title":"_resize","text":"<p>[Source]</p> <p>Change the available space.</p> <pre><code>fun ref _resize(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"collections-HashMap/#parameters_15","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-HashMap/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/","title":"HashSet[A: A, H: HashFunction[A!] val]","text":"<p>[Source]</p> <p>A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself</p> <pre><code>class ref HashSet[A: A, H: HashFunction[A!] val] is\nComparable[HashSet[A, H] box] ref\n</code></pre>"},{"location":"collections-HashSet/#implements","title":"Implements","text":"<ul> <li>Comparable[HashSet[A, H] box] ref</li> </ul>"},{"location":"collections-HashSet/#constructors","title":"Constructors","text":""},{"location":"collections-HashSet/#create","title":"create","text":"<p>[Source]</p> <p>Defaults to a prealloc of 8.</p> <pre><code>new ref create(\nprealloc: USize val = 8)\n: HashSet[A, H] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters","title":"Parameters","text":"<ul> <li>prealloc: USize val = 8</li> </ul>"},{"location":"collections-HashSet/#returns","title":"Returns","text":"<ul> <li>HashSet[A, H] ref^</li> </ul>"},{"location":"collections-HashSet/#public-functions","title":"Public Functions","text":""},{"location":"collections-HashSet/#size","title":"size","text":"<p>[Source]</p> <p>The number of items in the set.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the set.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-HashSet/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-HashSet/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the value if its in the set, otherwise raise an error.</p> <pre><code>fun box apply(\nvalue: box-&gt;A!)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_1","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_3","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#contains","title":"contains","text":"<p>[Source]</p> <p>Checks whether the set contains the value.</p> <pre><code>fun box contains(\nvalue: box-&gt;A!)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_2","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#clear","title":"clear","text":"<p>[Source]</p> <p>Remove all elements from the set.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-HashSet/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#set","title":"set","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun ref set(\nvalue: A)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_3","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-HashSet/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#unset","title":"unset","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun ref unset(\nvalue: box-&gt;A!)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_4","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#extract","title":"extract","text":"<p>[Source]</p> <p>Remove a value from the set and return it. Raises an error if the value wasn't in the set.</p> <pre><code>fun ref extract(\nvalue: box-&gt;A!)\n: A^ ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_5","title":"Parameters","text":"<ul> <li>value: box-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_8","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-HashSet/#union","title":"union","text":"<p>[Source]</p> <p>Add everything in that to the set.</p> <pre><code>fun ref union(\nthat: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_6","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#intersectoptional-k-hashfunctionbox-a-val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove everything that isn't in that.</p> <pre><code>fun ref intersect[optional K: HashFunction[box-&gt;A!] val](\nthat: HashSet[box-&gt;A!, K] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_7","title":"Parameters","text":"<ul> <li>that: HashSet[box-&gt;A!, K] ref</li> </ul>"},{"location":"collections-HashSet/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#difference","title":"difference","text":"<p>[Source]</p> <p>Remove elements in this which are also in that. Add elements in that which are not in this.</p> <pre><code>fun ref difference(\nthat: Iterator[A^] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_8","title":"Parameters","text":"<ul> <li>that: Iterator[A^] ref</li> </ul>"},{"location":"collections-HashSet/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove everything that is in that.</p> <pre><code>fun ref remove(\nthat: Iterator[box-&gt;A!] ref)\n: None val\n</code></pre>"},{"location":"collections-HashSet/#parameters_9","title":"Parameters","text":"<ul> <li>that: Iterator[box-&gt;A!] ref</li> </ul>"},{"location":"collections-HashSet/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-HashSet/#addoptional-k-hashfunctionthis-a-val","title":"add[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Add a value to the set.</p> <pre><code>fun box add[optional K: HashFunction[this-&gt;A!] val](\nvalue: this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_10","title":"Parameters","text":"<ul> <li>value: this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_13","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#suboptional-k-hashfunctionthis-a-val","title":"sub[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Remove a value from the set.</p> <pre><code>fun box sub[optional K: HashFunction[this-&gt;A!] val](\nvalue: box-&gt;this-&gt;A!)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_11","title":"Parameters","text":"<ul> <li>value: box-&gt;this-&gt;A!</li> </ul>"},{"location":"collections-HashSet/#returns_14","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_oroptional-k-hashfunctionthis-a-val","title":"op_or[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of both this and that.</p> <pre><code>fun box op_or[optional K: HashFunction[this-&gt;A!] val](\nthat: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_12","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_15","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_andoptional-k-hashfunctionthis-a-val","title":"op_and[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in both this and that.</p> <pre><code>fun box op_and[optional K: HashFunction[this-&gt;A!] val](\nthat: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_13","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_16","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#op_xoroptional-k-hashfunctionthis-a-val","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements that are in either set but not both.</p> <pre><code>fun box op_xor[optional K: HashFunction[this-&gt;A!] val](\nthat: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_14","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_17","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#withoutoptional-k-hashfunctionthis-a-val","title":"without[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a set with the elements of this that are not in that.</p> <pre><code>fun box without[optional K: HashFunction[this-&gt;A!] val](\nthat: this-&gt;HashSet[A, H] ref)\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#parameters_15","title":"Parameters","text":"<ul> <li>that: this-&gt;HashSet[A, H] ref</li> </ul>"},{"location":"collections-HashSet/#returns_18","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#cloneoptional-k-hashfunctionthis-a-val","title":"clone[optional K: HashFunction[this-&gt;A!] val]","text":"<p>[Source]</p> <p>Create a clone. The element type may be different due to aliasing and viewpoint adaptation.</p> <pre><code>fun box clone[optional K: HashFunction[this-&gt;A!] val]()\n: HashSet[this-&gt;A!, K] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_19","title":"Returns","text":"<ul> <li>HashSet[this-&gt;A!, K] ref^</li> </ul>"},{"location":"collections-HashSet/#eq","title":"eq","text":"<p>[Source]</p> <p>Returns true if the sets contain the same elements.</p> <pre><code>fun box eq(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_16","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ne","title":"ne","text":"<p>[Source]</p> <p>Returns false if the sets contain the same elements.</p> <pre><code>fun box ne(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_17","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#lt","title":"lt","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that, and this has fewer elements than that.</p> <pre><code>fun box lt(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_18","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#le","title":"le","text":"<p>[Source]</p> <p>Returns true if every element in this is also in that.</p> <pre><code>fun box le(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_19","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#gt","title":"gt","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this, and this has more elements than that.</p> <pre><code>fun box gt(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_20","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#ge","title":"ge","text":"<p>[Source]</p> <p>Returns true if every element in that is also in this.</p> <pre><code>fun box ge(\nthat: HashSet[A, H] box)\n: Bool val\n</code></pre>"},{"location":"collections-HashSet/#parameters_21","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-HashSet/#next_index","title":"next_index","text":"<p>[Source]</p> <p>Given an index, return the next index that has a populated value. Raise an error if there is no next populated index.</p> <pre><code>fun box next_index(\nprev: USize val = call)\n: USize val ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_22","title":"Parameters","text":"<ul> <li>prev: USize val = call</li> </ul>"},{"location":"collections-HashSet/#returns_26","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-HashSet/#index","title":"index","text":"<p>[Source]</p> <p>Returns the value at a given index. Raise an error if the index is not populated.</p> <pre><code>fun box index(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-HashSet/#parameters_23","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-HashSet/#returns_27","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-HashSet/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator over the values.</p> <pre><code>fun box values()\n: SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^\n</code></pre>"},{"location":"collections-HashSet/#returns_28","title":"Returns","text":"<ul> <li>SetValues[A, H, this-&gt;HashSet[A, H] ref] ref^</li> </ul>"},{"location":"collections-HashSet/#compare","title":"compare","text":"<p>[Source]</p> <pre><code>fun box compare(\nthat: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n</code></pre>"},{"location":"collections-HashSet/#parameters_24","title":"Parameters","text":"<ul> <li>that: HashSet[A, H] box</li> </ul>"},{"location":"collections-HashSet/#returns_29","title":"Returns","text":"<ul> <li>(Less val | Equal val | Greater val)</li> </ul>"},{"location":"collections-Hashable/","title":"Hashable","text":"<p>[Source]</p> <p>Anything with a hash method is hashable.</p> <pre><code>interface ref Hashable\n</code></pre>"},{"location":"collections-Hashable/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable/#hash","title":"hash","text":"<p>[Source]</p> <pre><code>fun box hash()\n: USize val\n</code></pre>"},{"location":"collections-Hashable/#returns","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-Hashable64/","title":"Hashable64","text":"<p>[Source]</p> <p>A version of Hashable that returns 64-bit hashes on every platform.</p> <pre><code>interface ref Hashable64\n</code></pre>"},{"location":"collections-Hashable64/#public-functions","title":"Public Functions","text":""},{"location":"collections-Hashable64/#hash64","title":"hash64","text":"<p>[Source]</p> <pre><code>fun box hash64()\n: U64 val\n</code></pre>"},{"location":"collections-Hashable64/#returns","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"collections-List/","title":"List[A: A]","text":"<p>[Source]</p> <p>A doubly linked list.</p> <p>The following is paraphrased from Wikipedia.</p> <p>A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes (implemented in Pony via the collections.ListNode class). Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders.</p> <p>As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc.</p>"},{"location":"collections-List/#example-program","title":"Example program","text":"<p>There are a lot of functions in List. The following code picks out a few common examples.</p> <p>It outputs:</p> <pre><code>A new empty list has 0 nodes.\nAdding one node to our empty list means it now has a size of 1.\nThe first (index 0) node has the value: A single String\nA list created by appending our second single-node list onto our first has size: 2\nThe List nodes of our first list are now:\n  A single String\n  Another String\nAppend *moves* the nodes from the second list so that now has 0 nodes.\nA list created from an array of three strings has size: 3\n  First\n  Second\n  Third\nMapping over our three-node list produces a new list of size: 3\nEach node-value in the resulting list is now far more exciting:\n  First BOOM!\n  Second BOOM!\n  Third BOOM!\nFiltering our three-node list produces a new list of size: 2\n  Second BOOM!\n  Third BOOM!\nThe size of our first partitioned list (matches predicate): 1\nThe size of our second partitioned list (doesn't match predicate): 1\nOur matching partition elements are:\n  Second BOOM!\n</code></pre> <pre><code>  use \"collections\"\nactor Main\nnew create(env:Env) =&gt;\n// Create a new empty List of type String\nlet my_list = List[String]()\nenv.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0\n// Push a String literal onto our empty List\nmy_list.push(\"A single String\")\nenv.out.print(\"Adding one node to our empty list means it now has a size of \"\n+ my_list.size().string() + \".\") // 1\n// Get the first element of our List\ntry env.out.print(\"The first (index 0) node has the value: \"\n+ my_list.index(0)?()?.string()) end // A single String\n// Create a second List from a single String literal\nlet my_second_list = List[String].unit(\"Another String\")\n// Append the second List to the first\nmy_list.append_list(my_second_list)\nenv.out.print(\"A list created by appending our second single-node list onto our first has size: \"\n+ my_list.size().string()) // 2\nenv.out.print(\"The List nodes of our first list are now:\")\nfor n in my_list.values() do\nenv.out.print(\"\\t\" + n.string())\nend\n// NOTE: this _moves_ the elements so second_list consequently ends up empty\nenv.out.print(\"Append *moves* the nodes from the second list so that now has \"\n+ my_second_list.size().string() + \" nodes.\") // 0\n// Create a third List from a Seq(ence)\n// (In this case a literal array of Strings)\nlet my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"])\nenv.out.print(\"A list created from an array of three strings has size: \"\n+ my_third_list.size().string()) // 3\nfor n in my_third_list.values() do\nenv.out.print(\"\\t\" + n.string())\nend\n// Map over the third List, concatenating some \"BOOM!'s\" into a new List\nlet new_list = my_third_list.map[String]({ (n) =&gt; n + \" BOOM!\" })\nenv.out.print(\"Mapping over our three-node list produces a new list of size: \"\n+ new_list.size().string()) // 3\nenv.out.print(\"Each node-value in the resulting list is now far more exciting:\")\nfor n in new_list.values() do\nenv.out.print(\"\\t\" + n.string())\nend\n// Filter the new list to extract 2 elements\nlet filtered_list = new_list.filter({ (n) =&gt; n.string().contains(\"d BOOM!\") })\nenv.out.print(\"Filtering our three-node list produces a new list of size: \"\n+ filtered_list.size().string()) // 2\nfor n in filtered_list.values() do\nenv.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM!\nend\n// Partition the filtered list\nlet partitioned_lists = filtered_list.partition({ (n) =&gt; n.string().contains(\"Second\") })\nenv.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string())        // 1\nenv.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string())  // 1\nenv.out.print(\"Our matching partition elements are:\")\nfor n in partitioned_lists._1.values() do\nenv.out.print(\"\\t\" + n.string()) // Second BOOM!\nend\n</code></pre> <pre><code>class ref List[A: A] is\nSeq[A] ref\n</code></pre>"},{"location":"collections-List/#implements","title":"Implements","text":"<ul> <li>Seq[A] ref</li> </ul>"},{"location":"collections-List/#constructors","title":"Constructors","text":""},{"location":"collections-List/#create","title":"create","text":"<p>[Source]</p> <p>Always creates an empty list with 0 nodes, <code>len</code> is ignored.</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface. <pre><code>let my_list = List[String]\n</code></pre></p> <pre><code>new ref create(\nlen: USize val = 0)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters","title":"Parameters","text":"<ul> <li>len: USize val = 0</li> </ul>"},{"location":"collections-List/#returns","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#unit","title":"unit","text":"<p>[Source]</p> <p>Creates a list with 1 node of element.</p> <pre><code>let my_list = List[String].unit(\"element\")\n</code></pre> <pre><code>new ref unit(\na: A)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_1","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#from","title":"from","text":"<p>[Source]</p> <p>Creates a list equivalent to the provided Array (both node number and order are preserved).</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n</code></pre> <pre><code>new ref from(\nseq: Array[A^] ref)\n: List[A] ref^\n</code></pre>"},{"location":"collections-List/#parameters_2","title":"Parameters","text":"<ul> <li>seq: Array[A^] ref</li> </ul>"},{"location":"collections-List/#returns_2","title":"Returns","text":"<ul> <li>List[A] ref^</li> </ul>"},{"location":"collections-List/#public-functions","title":"Public Functions","text":""},{"location":"collections-List/#reserve","title":"reserve","text":"<p>[Source]</p> <p>Do nothing</p> <p>Required method for <code>List</code> to satisfy the <code>Seq</code> interface.</p> <pre><code>fun ref reserve(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_3","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#size","title":"size","text":"<p>[Source]</p> <p>Returns the number of items in the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.size() // 3\n</code></pre> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-List/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-List/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.apply(1)? end // \"b\"\n</code></pre> <pre><code>fun box apply(\ni: USize val = 0)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-List/#parameters_4","title":"Parameters","text":"<ul> <li>i: USize val = 0</li> </ul>"},{"location":"collections-List/#returns_5","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-List/#update","title":"update","text":"<p>[Source]</p> <p>Change the i-th element, raising an error if the index is out of bounds, and returning the previous value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.update(1, \"z\")? end // Returns \"b\" and List now contains [\"a\"; \"z\"; \"c\"]\n</code></pre> <pre><code>fun ref update(\ni: USize val,\nvalue: A)\n: A^ ?\n</code></pre>"},{"location":"collections-List/#parameters_5","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>value: A</li> </ul>"},{"location":"collections-List/#returns_6","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#index","title":"index","text":"<p>[Source]</p> <p>Gets the i-th node, raising an error if the index is out of bounds.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.index(0)? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box index(\ni: USize val)\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_6","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_7","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the i-th node, raising an error if the index is out of bounds, and returning the removed node.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.remove(0)? end // Returns a ListNode[String] containing \"a\" and List now contains [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref remove(\ni: USize val)\n: ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#parameters_7","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-List/#returns_8","title":"Returns","text":"<ul> <li>ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#clear","title":"clear","text":"<p>[Source]</p> <p>Empties the list.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-List/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#head","title":"head","text":"<p>[Source]</p> <p>Show the head of the list, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.head()? end // Returns a ListNode[String] containing \"a\"\n</code></pre> <pre><code>fun box head()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_10","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#tail","title":"tail","text":"<p>[Source]</p> <p>Show the tail of the list, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.tail()? end // Returns a ListNode[String] containing \"c\"\n</code></pre> <pre><code>fun box tail()\n: this-&gt;ListNode[A] ref ?\n</code></pre>"},{"location":"collections-List/#returns_11","title":"Returns","text":"<ul> <li>this-&gt;ListNode[A] ref ?</li> </ul>"},{"location":"collections-List/#prepend_node","title":"prepend_node","text":"<p>[Source]</p> <p>Adds a node to the head of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_head = ListNode[String](\"0\")\nmy_list.prepend_node(new_head) // [\"0\", \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref prepend_node(\nnode: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_8","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_node","title":"append_node","text":"<p>[Source]</p> <p>Adds a node to the tail of the list.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet new_tail = ListNode[String](\"0\")\nmy_list.append_node(new_head) // [\"a\"; \"b\"; \"c\", \"0\"]\n</code></pre> <pre><code>fun ref append_node(\nnode: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_9","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#append_list","title":"append_list","text":"<p>[Source]</p> <p>Empties the provided List by appending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append_list(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is empty\n</code></pre> <pre><code>fun ref append_list(\nthat: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_10","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#prepend_list","title":"prepend_list","text":"<p>[Source]</p> <p>Empties the provided List by prepending all elements onto the receiving List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.prepend_list(other_list)  // my_list is [\"d\"; \"e\"; \"f\"; \"a\"; \"b\"; \"c\"], other_list is empty\n</code></pre> <pre><code>fun ref prepend_list(\nthat: List[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_11","title":"Parameters","text":"<ul> <li>that: List[A] ref</li> </ul>"},{"location":"collections-List/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#push","title":"push","text":"<p>[Source]</p> <p>Adds a new tail value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.push(\"d\")  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"]\n</code></pre> <pre><code>fun ref push(\na: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_12","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#pop","title":"pop","text":"<p>[Source]</p> <p>Removes the tail value, raising an error if the tail is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.pop() end  // Returns \"c\" and my_list is [\"a\"; \"b\"]\n</code></pre> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_17","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#unshift","title":"unshift","text":"<p>[Source]</p> <p>Adds a new head value.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.unshift(\"d\")  // my_list is [\"d\"; \"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun ref unshift(\na: A)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_13","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-List/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#shift","title":"shift","text":"<p>[Source]</p> <p>Removes the head value, raising an error if the head is empty.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\ntry my_list.shift() end  // Returns \"a\" and my_list is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun ref shift()\n: A^ ?\n</code></pre>"},{"location":"collections-List/#returns_19","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-List/#append","title":"append","text":"<p>[Source]</p> <p>Append len elements from a sequence, starting from the given offset.</p> <p>When len is -1, all elements of sequence are pushed.</p> <p>Does not remove elements from sequence.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.append(other_list)  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref append(\nseq: (ReadSeq[A] box &amp; ReadElement[A^] box),\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_14","title":"Parameters","text":"<ul> <li>seq: (ReadSeq[A] box &amp; ReadElement[A^] box)</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#concat","title":"concat","text":"<p>[Source]</p> <p>Add len iterated elements to the tail of the list, starting from the given offset.</p> <p>When len is -1, all elements of iterator are pushed.</p> <p>Does not remove elements from iterator.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = List[String].from([\"d\"; \"e\"; \"f\"])\nmy_list.concat(other_list.values())  // my_list is [\"a\"; \"b\"; \"c\"; \"d\"; \"e\"; \"f\"], other_list is unchanged\n</code></pre> <pre><code>fun ref concat(\niter: Iterator[A^] ref,\noffset: USize val = 0,\nlen: USize val = call)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_15","title":"Parameters","text":"<ul> <li>iter: Iterator[A^] ref</li> <li>offset: USize val = 0</li> <li>len: USize val = call</li> </ul>"},{"location":"collections-List/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#truncate","title":"truncate","text":"<p>[Source]</p> <p>Pop tail elements until the list is len size. If the list is already smaller than len, do nothing.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nmy_list.truncate(1)  // my_list is [\"a\"]\n</code></pre> <pre><code>fun ref truncate(\nlen: USize val)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_16","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-List/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#clone","title":"clone","text":"<p>[Source]</p> <p>Clone all elements into a new List.</p> <p>Note: elements are not copied, an additional reference to each element is created in the new List.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.clone()  // my_list is [\"a\"; \"b\"; \"c\"], other_list is [\"a\"; \"b\"; \"c\"]\n</code></pre> <pre><code>fun box clone()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_23","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#mapb-b","title":"map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.map[String]( {(s: String): String =&gt; \"m: \" + s } )  // other_list is [\"m: a\"; \"m: b\"; \"m: c\"]\n</code></pre> <pre><code>fun box map[B: B](\nf: {(this-&gt;A!): B^}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_17","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): B^}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_24","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#flat_mapb-b","title":"flat_map[B: B]","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by applying a function to every element of the <code>List</code>,  producing a new <code>List</code> for each element, then flattened into a single <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.flat_map[String]( {(s: String): List[String] =&gt; List[String].from( [\"m\"; s] )} )  // other_list is [\"m\"; \"a\"; \"m\"; \"b\"; \"m\"; c\"]\n</code></pre> <pre><code>fun box flat_map[B: B](\nf: {(this-&gt;A!): List[B]}[A, B] box)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_18","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): List[B]}[A, B] box</li> </ul>"},{"location":"collections-List/#returns_25","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#filter","title":"filter","text":"<p>[Source]</p> <p>Builds a new <code>List</code> with those elements that satisfy the predicate.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.filter( {(s: String): Bool =&gt; s == \"b\" } )  // other_list is [\"b\"]\n</code></pre> <pre><code>fun box filter(\nf: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_19","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_26","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#foldb-b","title":"fold[B: B]","text":"<p>[Source]</p> <p>Folds the elements of the <code>List</code> using the supplied function.</p> <p>On the first iteration, the <code>B</code> argument in <code>f</code> is the value <code>acc</code>,  on the second iteration <code>B</code> is the result of the first iteration, on the third iteration <code>B</code> is the result of the second iteration, and so on.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet folded = my_list.fold[String]( {(str: String, s: String): String =&gt; str + s }, \"z\")  // \"zabc\"\n</code></pre> <pre><code>fun box fold[B: B](\nf: {(B!, this-&gt;A!): B^}[A, B] box,\nacc: B)\n: B\n</code></pre>"},{"location":"collections-List/#parameters_20","title":"Parameters","text":"<ul> <li>f: {(B!, this-&gt;A!): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-List/#returns_27","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-List/#every","title":"every","text":"<p>[Source]</p> <p>Returns <code>true</code> if every element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet all_z = my_list.every( {(s: String): Bool =&gt; s == \"z\"} ) // false\n</code></pre> <pre><code>fun box every(\nf: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_21","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_28","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns <code>true</code> if at least one element satisfies the predicate, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet b_exists = my_list.exists( {(s: String): Bool =&gt; s == \"b\"} ) // true\n</code></pre> <pre><code>fun box exists(\nf: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_22","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_29","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#partition","title":"partition","text":"<p>[Source]</p> <p>Builds a pair of <code>List</code>s, the first of which is made up of the elements satisfying the predicate and the second of which is made up of those that do not.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\n(let lt_b, let gt_b) = my_list.partition( {(s: String): Bool =&gt; s &lt; \"b\"} )  // lt_b is [\"a\"], while gt_b is [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box partition(\nf: {(this-&gt;A!): Bool}[A] box)\n: (List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)\n</code></pre>"},{"location":"collections-List/#parameters_23","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_30","title":"Returns","text":"<ul> <li>(List[this-&gt;A!] ref^ , List[this-&gt;A!] ref^)</li> </ul>"},{"location":"collections-List/#drop","title":"drop","text":"<p>[Source]</p> <p>Builds a <code>List</code> by dropping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"b\"; \"c\"]\n</code></pre> <pre><code>fun box drop(\nn: USize val)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_24","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_31","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#take","title":"take","text":"<p>[Source]</p> <p>Builds a <code>List</code> by keeping the first <code>n</code> elements.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.drop(1)  // [\"a\"]\n</code></pre> <pre><code>fun box take(\nn: USize val)\n: List[this-&gt;A!] ref\n</code></pre>"},{"location":"collections-List/#parameters_25","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"collections-List/#returns_32","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#take_while","title":"take_while","text":"<p>[Source]</p> <p>Builds a <code>List</code> of elements satisfying the predicate, stopping at the first <code>false</code> return.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.take_while( {(s: String): Bool =&gt; s &lt; \"b\"} )  // [\"a\"]\n</code></pre> <pre><code>fun box take_while(\nf: {(this-&gt;A!): Bool}[A] box)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_26","title":"Parameters","text":"<ul> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_33","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Builds a new <code>List</code> by reversing the elements in the <code>List</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet other_list = my_list.reverse() // [\"c\"; \"b\"; \"a\"]\n</code></pre> <pre><code>fun box reverse()\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#returns_34","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#containsoptional-b-a-haseqa-read","title":"contains[optional B: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <p>Returns <code>true</code> if the <code>List</code> contains the provided element, otherwise returns <code>false</code>.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet contains_b = my_list.contains[String](\"b\") // true\n</code></pre> <pre><code>fun box contains[optional B: (A &amp; HasEq[A!] #read)](\na: box-&gt;B)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_27","title":"Parameters","text":"<ul> <li>a: box-&gt;B</li> </ul>"},{"location":"collections-List/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#nodes","title":"nodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet nodes = my_list.nodes()  // node with \"a\" is before node with \"c\"\n</code></pre> <pre><code>fun box nodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_36","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rnodes","title":"rnodes","text":"<p>[Source]</p> <p>Return an iterator on the nodes in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rnodes = my_list.rnodes()  // node with \"c\" is before node with \"a\"\n</code></pre> <pre><code>fun box rnodes()\n: ListNodes[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_37","title":"Returns","text":"<ul> <li>ListNodes[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#values","title":"values","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in forward order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet values = my_list.values()  // value \"a\" is before value \"c\"\n</code></pre> <pre><code>fun box values()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_38","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#rvalues","title":"rvalues","text":"<p>[Source]</p> <p>Return an iterator on the values in the <code>List</code> in reverse order.</p> <pre><code>let my_list = List[String].from([\"a\"; \"b\"; \"c\"])\nlet rvalues = my_list.rvalues()  // value \"c\" is before value \"a\"\n</code></pre> <pre><code>fun box rvalues()\n: ListValues[A, this-&gt;ListNode[A] ref] ref^\n</code></pre>"},{"location":"collections-List/#returns_39","title":"Returns","text":"<ul> <li>ListValues[A, this-&gt;ListNode[A] ref] ref^</li> </ul>"},{"location":"collections-List/#private-functions","title":"Private Functions","text":""},{"location":"collections-List/#_mapb-b","title":"_map[B: B]","text":"<p>[Source]</p> <p>Private helper for <code>map</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _map[B: B](\nln: this-&gt;ListNode[A] ref,\nf: {(this-&gt;A!): B^}[A, B] box,\nacc: List[B] ref)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_28","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(this-&gt;A!): B^}[A, B] box</li> <li>acc: List[B] ref</li> </ul>"},{"location":"collections-List/#returns_40","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#_flat_mapb-b","title":"_flat_map[B: B]","text":"<p>[Source]</p> <p>Private helper for <code>flat_map</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _flat_map[B: B](\nln: this-&gt;ListNode[A] ref,\nf: {(this-&gt;A!): List[B]}[A, B] box,\nacc: List[B] ref)\n: List[B] ref^\n</code></pre>"},{"location":"collections-List/#parameters_29","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(this-&gt;A!): List[B]}[A, B] box</li> <li>acc: List[B] ref</li> </ul>"},{"location":"collections-List/#returns_41","title":"Returns","text":"<ul> <li>List[B] ref^</li> </ul>"},{"location":"collections-List/#_filter","title":"_filter","text":"<p>[Source]</p> <p>Private helper for <code>filter</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _filter(\nln: this-&gt;ListNode[A] ref,\nf: {(this-&gt;A!): Bool}[A] box,\nacc: List[this-&gt;A!] ref)\n: List[this-&gt;A!] ref\n</code></pre>"},{"location":"collections-List/#parameters_30","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(this-&gt;A!): Bool}[A] box</li> <li>acc: List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#returns_42","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#_foldb-b","title":"_fold[B: B]","text":"<p>[Source]</p> <p>Private helper for <code>fold</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _fold[B: B](\nln: this-&gt;ListNode[A] ref,\nf: {(B!, this-&gt;A!): B^}[A, B] box,\nacc: B)\n: B\n</code></pre>"},{"location":"collections-List/#parameters_31","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(B!, this-&gt;A!): B^}[A, B] box</li> <li>acc: B</li> </ul>"},{"location":"collections-List/#returns_43","title":"Returns","text":"<ul> <li>B</li> </ul>"},{"location":"collections-List/#_every","title":"_every","text":"<p>[Source]</p> <p>Private helper for <code>every</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _every(\nln: this-&gt;ListNode[A] ref,\nf: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_32","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_44","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#_exists","title":"_exists","text":"<p>[Source]</p> <p>Private helper for <code>exists</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _exists(\nln: this-&gt;ListNode[A] ref,\nf: {(this-&gt;A!): Bool}[A] box)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_33","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>f: {(this-&gt;A!): Bool}[A] box</li> </ul>"},{"location":"collections-List/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#_reverse","title":"_reverse","text":"<p>[Source]</p> <p>Private helper for <code>reverse</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _reverse(\nln: this-&gt;ListNode[A] ref,\nacc: List[this-&gt;A!] ref)\n: List[this-&gt;A!] ref^\n</code></pre>"},{"location":"collections-List/#parameters_34","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>acc: List[this-&gt;A!] ref</li> </ul>"},{"location":"collections-List/#returns_46","title":"Returns","text":"<ul> <li>List[this-&gt;A!] ref^</li> </ul>"},{"location":"collections-List/#_containsoptional-b-a-haseqa-read","title":"_contains[optional B: (A &amp; HasEq[A!] #read)]","text":"<p>[Source]</p> <p>Private helper for <code>contains</code>, recursively working with <code>ListNode</code>s.</p> <pre><code>fun box _contains[optional B: (A &amp; HasEq[A!] #read)](\nln: this-&gt;ListNode[A] ref,\na: box-&gt;B)\n: Bool val\n</code></pre>"},{"location":"collections-List/#parameters_35","title":"Parameters","text":"<ul> <li>ln: this-&gt;ListNode[A] ref</li> <li>a: box-&gt;B</li> </ul>"},{"location":"collections-List/#returns_47","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-List/#_increment","title":"_increment","text":"<p>[Source]</p> <p>Private method to control mutating <code>_size</code> field.</p> <pre><code>fun ref _increment()\n: None val\n</code></pre>"},{"location":"collections-List/#returns_48","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#_decrement","title":"_decrement","text":"<p>[Source]</p> <p>Private method to control mutating <code>_size</code> field.</p> <pre><code>fun ref _decrement()\n: None val\n</code></pre>"},{"location":"collections-List/#returns_49","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#_set_head","title":"_set_head","text":"<p>[Source]</p> <p>Private method to control mutating <code>_head</code> field.</p> <pre><code>fun ref _set_head(\nhead': (ListNode[A] ref | None val))\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_36","title":"Parameters","text":"<ul> <li>head': (ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-List/#returns_50","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#_set_tail","title":"_set_tail","text":"<p>[Source]</p> <p>Private method to control mutating <code>_tail</code> field.</p> <pre><code>fun ref _set_tail(\ntail': (ListNode[A] ref | None val))\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_37","title":"Parameters","text":"<ul> <li>tail': (ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-List/#returns_51","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-List/#_set_both","title":"_set_both","text":"<p>[Source]</p> <p>Private method to set both <code>_head</code> and <code>_tail</code> to the same node, creating a <code>List</code> with a <code>_size</code> of 1.</p> <pre><code>fun ref _set_both(\nnode: ListNode[A] ref)\n: None val\n</code></pre>"},{"location":"collections-List/#parameters_38","title":"Parameters","text":"<ul> <li>node: ListNode[A] ref</li> </ul>"},{"location":"collections-List/#returns_52","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-ListNode/","title":"ListNode[A: A]","text":"<p>[Source]</p> <p>A node in a doubly linked list.</p> <p>See Pony collections.List class for usage examples.</p> <p>Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the List in which it resides.</p> <p>As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode.</p> <p>Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions.  The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes.</p>"},{"location":"collections-ListNode/#example-program","title":"Example program","text":"<p>The functions which are illustrated below are only those which operate on an individual ListNode.</p> <p>It outputs:</p> <p>My node has the item value: My Node item   My node has the updated item value: My updated Node item   Popped the item from the ListNode   The ListNode has no (None) item.</p> <pre><code>  use \"collections\"\nactor Main\nnew create(env:Env) =&gt;\n// Create a new ListNode of type String\nlet my_list_node = ListNode[String](\"My Node item\")\ntry \nenv.out.print(\"My node has the item value: \"\n+ my_list_node.apply()?) // My Node item\nend\n// Update the item contained in the ListNode\ntry\nmy_list_node.update(\"My updated Node item\")?\nenv.out.print(\"My node has the updated item value: \"\n+ my_list_node.apply()?) // My updated Node item\nend\n// Pop the item from the ListNode\ntry\nmy_list_node.pop()?\nenv.out.print(\"Popped the item from the ListNode\")\nmy_list_node.apply()? // This will error as the item is now None\nelse\nenv.out.print(\"The ListNode has no (None) item.\")\nend\n</code></pre> <pre><code>class ref ListNode[A: A]\n</code></pre>"},{"location":"collections-ListNode/#constructors","title":"Constructors","text":""},{"location":"collections-ListNode/#create","title":"create","text":"<p>[Source]</p> <p>Create a node. Initially, it is not in any list.</p> <pre><code>new ref create(\nitem: (A | None val) = reference)\n: ListNode[A] ref^\n</code></pre>"},{"location":"collections-ListNode/#parameters","title":"Parameters","text":"<ul> <li>item: (A | None val) = reference</li> </ul>"},{"location":"collections-ListNode/#returns","title":"Returns","text":"<ul> <li>ListNode[A] ref^</li> </ul>"},{"location":"collections-ListNode/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNode/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the item, if we have one, otherwise raise an error.</p> <pre><code>fun box apply()\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-ListNode/#returns_1","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-ListNode/#update","title":"update","text":"<p>[Source]</p> <p>Replace the item and return the previous one. Raise an error if we have no previous value.</p> <pre><code>fun ref update(\nvalue: (A | None val))\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#parameters_1","title":"Parameters","text":"<ul> <li>value: (A | None val)</li> </ul>"},{"location":"collections-ListNode/#returns_2","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#pop","title":"pop","text":"<p>[Source]</p> <p>Remove the item from the node, if we have one, otherwise raise an error.</p> <pre><code>fun ref pop()\n: A^ ?\n</code></pre>"},{"location":"collections-ListNode/#returns_3","title":"Returns","text":"<ul> <li>A^ ?</li> </ul>"},{"location":"collections-ListNode/#prepend","title":"prepend","text":"<p>[Source]</p> <p>Prepend a node to this one. If <code>that</code> is already in a list, it is removed before it is prepended. Returns true if <code>that</code> was removed from another list. If the ListNode is not contained within a List the prepend will fail.</p> <pre><code>fun ref prepend(\nthat: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_2","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#append","title":"append","text":"<p>[Source]</p> <p>Append a node to this one. If <code>that</code> is already in a list, it is removed before it is appended. Returns true if <code>that</code> was removed from another list.</p> <p>If the ListNode is not contained within a List the append will fail.</p> <pre><code>fun ref append(\nthat: ListNode[A] ref)\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#parameters_3","title":"Parameters","text":"<ul> <li>that: ListNode[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove a node from a list.</p> <p>The ListNode must be contained within a List for this to succeed.</p> <pre><code>fun ref remove()\n: None val\n</code></pre>"},{"location":"collections-ListNode/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-ListNode/#has_prev","title":"has_prev","text":"<p>[Source]</p> <p>Return true if there is a previous node.</p> <pre><code>fun box has_prev()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Return true if there is a next node.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNode/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNode/#prev","title":"prev","text":"<p>[Source]</p> <p>Return the previous node.</p> <pre><code>fun box prev()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_9","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNode/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node.</p> <pre><code>fun box next()\n: (this-&gt;ListNode[A] ref | None val)\n</code></pre>"},{"location":"collections-ListNode/#returns_10","title":"Returns","text":"<ul> <li>(this-&gt;ListNode[A] ref | None val)</li> </ul>"},{"location":"collections-ListNode/#private-functions","title":"Private Functions","text":""},{"location":"collections-ListNode/#_set_list","title":"_set_list","text":"<p>[Source]</p> <p>Make this node the only node on the given list.</p> <pre><code>fun ref _set_list(\nlist: List[A] ref)\n: ListNode[A] ref^\n</code></pre>"},{"location":"collections-ListNode/#parameters_4","title":"Parameters","text":"<ul> <li>list: List[A] ref</li> </ul>"},{"location":"collections-ListNode/#returns_11","title":"Returns","text":"<ul> <li>ListNode[A] ref^</li> </ul>"},{"location":"collections-ListNodes/","title":"ListNodes[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the nodes in a <code>List</code>.</p> <pre><code>class ref ListNodes[A: A, N: ListNode[A] #read] is\nIterator[N] ref\n</code></pre>"},{"location":"collections-ListNodes/#implements","title":"Implements","text":"<ul> <li>Iterator[N] ref</li> </ul>"},{"location":"collections-ListNodes/#constructors","title":"Constructors","text":""},{"location":"collections-ListNodes/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over nodes.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\nhead: (N | None val),\nreverse: Bool val = false)\n: ListNodes[A, N] ref^\n</code></pre>"},{"location":"collections-ListNodes/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListNodes/#returns","title":"Returns","text":"<ul> <li>ListNodes[A, N] ref^</li> </ul>"},{"location":"collections-ListNodes/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListNodes/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any nodes remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListNodes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListNodes/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N ?\n</code></pre>"},{"location":"collections-ListNodes/#returns_2","title":"Returns","text":"<ul> <li>N ?</li> </ul>"},{"location":"collections-ListValues/","title":"ListValues[A: A, N: ListNode[A] #read]","text":"<p>[Source]</p> <p>Iterate over the values in a <code>List</code>.</p> <pre><code>class ref ListValues[A: A, N: ListNode[A] #read] is\nIterator[N-&gt;A] ref\n</code></pre>"},{"location":"collections-ListValues/#implements","title":"Implements","text":"<ul> <li>Iterator[N-&gt;A] ref</li> </ul>"},{"location":"collections-ListValues/#constructors","title":"Constructors","text":""},{"location":"collections-ListValues/#create","title":"create","text":"<p>[Source]</p> <p>Build the iterator over values.</p> <p><code>reverse</code> of <code>false</code> iterates forward, while <code>reverse</code> of <code>true</code> iterates in reverse.</p> <pre><code>new ref create(\nhead: (N | None val),\nreverse: Bool val = false)\n: ListValues[A, N] ref^\n</code></pre>"},{"location":"collections-ListValues/#parameters","title":"Parameters","text":"<ul> <li>head: (N | None val)</li> <li>reverse: Bool val = false</li> </ul>"},{"location":"collections-ListValues/#returns","title":"Returns","text":"<ul> <li>ListValues[A, N] ref^</li> </ul>"},{"location":"collections-ListValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-ListValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>Indicates whether there are any values remaining in the iterator.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-ListValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-ListValues/#next","title":"next","text":"<p>[Source]</p> <p>Return the next node in the iterator, advancing the iterator by one element.</p> <p>Order of return is determined by <code>reverse</code> argument during creation.</p> <pre><code>fun ref next()\n: N-&gt;A ?\n</code></pre>"},{"location":"collections-ListValues/#returns_2","title":"Returns","text":"<ul> <li>N-&gt;A ?</li> </ul>"},{"location":"collections-Map/","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]","text":"<p>[Source]</p> <p>This is a map that uses structural equality on the key.</p> <pre><code>type Map[K: (Hashable #read &amp; Equatable[K] #read), V: V] is\nHashMap[K, V, HashEq[K] val] ref\n</code></pre>"},{"location":"collections-Map/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashEq[K] val] ref</li> </ul>"},{"location":"collections-MapIs/","title":"MapIs[K: K, V: V]","text":"<p>[Source]</p> <p>This is a map that uses identity comparison on the key.</p> <pre><code>type MapIs[K: K, V: V] is\nHashMap[K, V, HashIs[K] val] ref\n</code></pre>"},{"location":"collections-MapIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[K, V, HashIs[K] val] ref</li> </ul>"},{"location":"collections-MapKeys/","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys in a map.</p> <pre><code>class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\nIterator[M-&gt;K] ref\n</code></pre>"},{"location":"collections-MapKeys/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;K] ref</li> </ul>"},{"location":"collections-MapKeys/#constructors","title":"Constructors","text":""},{"location":"collections-MapKeys/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\nmap: M)\n: MapKeys[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapKeys/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapKeys/#returns","title":"Returns","text":"<ul> <li>MapKeys[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapKeys/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapKeys/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapKeys/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapKeys/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys.</p> <pre><code>fun ref next()\n: M-&gt;K ?\n</code></pre>"},{"location":"collections-MapKeys/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;K ?</li> </ul>"},{"location":"collections-MapPairs/","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the keys and values in a map.</p> <pre><code>class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\nIterator[(M-&gt;K , M-&gt;V)] ref\n</code></pre>"},{"location":"collections-MapPairs/#implements","title":"Implements","text":"<ul> <li>Iterator[(M-&gt;K , M-&gt;V)] ref</li> </ul>"},{"location":"collections-MapPairs/#constructors","title":"Constructors","text":""},{"location":"collections-MapPairs/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\nmap: M)\n: MapPairs[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapPairs/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapPairs/#returns","title":"Returns","text":"<ul> <li>MapPairs[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapPairs/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapPairs/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapPairs/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapPairs/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries.</p> <pre><code>fun ref next()\n: (M-&gt;K , M-&gt;V) ?\n</code></pre>"},{"location":"collections-MapPairs/#returns_2","title":"Returns","text":"<ul> <li>(M-&gt;K , M-&gt;V) ?</li> </ul>"},{"location":"collections-MapValues/","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a map.</p> <pre><code>class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\nIterator[M-&gt;V] ref\n</code></pre>"},{"location":"collections-MapValues/#implements","title":"Implements","text":"<ul> <li>Iterator[M-&gt;V] ref</li> </ul>"},{"location":"collections-MapValues/#constructors","title":"Constructors","text":""},{"location":"collections-MapValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given map.</p> <pre><code>new ref create(\nmap: M)\n: MapValues[K, V, H, M] ref^\n</code></pre>"},{"location":"collections-MapValues/#parameters","title":"Parameters","text":"<ul> <li>map: M</li> </ul>"},{"location":"collections-MapValues/#returns","title":"Returns","text":"<ul> <li>MapValues[K, V, H, M] ref^</li> </ul>"},{"location":"collections-MapValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-MapValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the map.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-MapValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MapValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: M-&gt;V ?\n</code></pre>"},{"location":"collections-MapValues/#returns_2","title":"Returns","text":"<ul> <li>M-&gt;V ?</li> </ul>"},{"location":"collections-MaxHeap/","title":"MaxHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MaxHeap[A: Comparable[A] #read] is\nBinaryHeap[A, MaxHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MaxHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MaxHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MaxHeapPriority/","title":"MaxHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MaxHeapPriority[A: Comparable[A] #read] is\n_BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MaxHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MaxHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MaxHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MaxHeapPriority/#returns","title":"Returns","text":"<ul> <li>MaxHeapPriority[A] val^</li> </ul>"},{"location":"collections-MaxHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MaxHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nx: A,\ny: A)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MaxHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MaxHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MaxHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MaxHeapPriority[A] val</li> </ul>"},{"location":"collections-MaxHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeap/","title":"MinHeap[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>type MinHeap[A: Comparable[A] #read] is\nBinaryHeap[A, MinHeapPriority[A] val] ref\n</code></pre></p>"},{"location":"collections-MinHeap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>BinaryHeap[A, MinHeapPriority[A] val] ref</li> </ul>"},{"location":"collections-MinHeapPriority/","title":"MinHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>primitive val MinHeapPriority[A: Comparable[A] #read] is\n_BinaryHeapPriority[A] val\n</code></pre></p>"},{"location":"collections-MinHeapPriority/#implements","title":"Implements","text":"<ul> <li>_BinaryHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-MinHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinHeapPriority[A] val^\n</code></pre>"},{"location":"collections-MinHeapPriority/#returns","title":"Returns","text":"<ul> <li>MinHeapPriority[A] val^</li> </ul>"},{"location":"collections-MinHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-MinHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nx: A,\ny: A)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-MinHeapPriority/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MinHeapPriority[A] val)\n: Bool val\n</code></pre>"},{"location":"collections-MinHeapPriority/#parameters_2","title":"Parameters","text":"<ul> <li>that: MinHeapPriority[A] val</li> </ul>"},{"location":"collections-MinHeapPriority/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces <code>[min, max)</code> with a step of <code>inc</code> for any <code>Number</code> type.</p> <pre><code>// iterating with for-loop\nfor i in Range(0, 10) do\nenv.out.print(i.string())\nend\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\ntry\nhandle_u8(range.next()?)\nend\nend\n</code></pre> <p>Supports <code>min</code> being smaller than <code>max</code> with negative <code>inc</code> but only for signed integer types and floats:</p> <pre><code>var previous = 11\nfor left in Range[I64](10, -5, -1) do\nif not (left &lt; previous) then\nerror\nend\nprevious = left\nend\n</code></pre> <p>If <code>inc</code> is nonzero, but cannot produce progress towards <code>max</code> because of its sign, the <code>Range</code> is considered empty and will not produce any iterations. The <code>Range</code> is also empty if either <code>min</code> equals <code>max</code>, independent of the value of <code>inc</code>, or if <code>inc</code> is zero.</p> <pre><code>let empty_range1 = Range(0, 10, -1)\nlet empty_range2 = Range(0, 10, 0)\nlet empty_range3 = Range(10, 10)\nempty_range1.is_empty() == true\nempty_range2.is_empty() == true\nempty_range3.is_empty() == true\n</code></pre> <p>Note that when using unsigned integers, a negative literal wraps around so while <code>Range[ISize](0, 10, -1)</code> is empty as above, <code>Range[USize](0, 10, -1)</code> produces a single value of <code>min</code> or <code>[0]</code> here.</p> <p>When using <code>Range</code> with floating point types (<code>F32</code> and <code>F64</code>) <code>inc</code> steps &lt; 1.0 are possible. If any arguments contains NaN, the <code>Range</code> is considered empty. It is also empty if the lower bound <code>min</code> or the step <code>inc</code> are +Inf or -Inf. However, if only the upper bound <code>max</code> is +Inf or -Inf and the step parameter <code>inc</code> has the same sign, then the <code>Range</code> is considered infinite and will iterate indefinitely.</p> <pre><code>let p_inf: F64 = F64.max_value() + F64.max_value()\nlet n_inf: F64 = -p_inf\nlet nan: F64 = F64(0) / F64(0)\nlet infinite_range1 = Range[F64](0, p_inf, 1)\nlet infinite_range2 = Range[F64](0, n_inf, -1_000_000)\ninfinite_range1.is_infinite() == true\ninfinite_range2.is_infinite() == true\nfor i in Range[F64](0.5, 100, nan) do\n// will not be executed as `inc` is nan\nend\nfor i in Range[F64](0.5, 100, p_inf) do\n// will not be executed as `inc` is +Inf\nend\n</code></pre> <pre><code>class ref Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val))] is\nIterator[A] ref\n</code></pre>"},{"location":"collections-Range/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Range/#constructors","title":"Constructors","text":""},{"location":"collections-Range/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nmin: A,\nmax: A,\ninc: A = 1)\n: Range[A] ref^\n</code></pre>"},{"location":"collections-Range/#parameters","title":"Parameters","text":"<ul> <li>min: A</li> <li>max: A</li> <li>inc: A = 1</li> </ul>"},{"location":"collections-Range/#returns","title":"Returns","text":"<ul> <li>Range[A] ref^</li> </ul>"},{"location":"collections-Range/#public-functions","title":"Public Functions","text":""},{"location":"collections-Range/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A ?\n</code></pre>"},{"location":"collections-Range/#returns_2","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"collections-Range/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Range/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Range/#is_infinite","title":"is_infinite","text":"<p>[Source]</p> <pre><code>fun box is_infinite()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Range/#is_empty","title":"is_empty","text":"<p>[Source]</p> <pre><code>fun box is_empty()\n: Bool val\n</code></pre>"},{"location":"collections-Range/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]","text":"<p>[Source]</p> <p>Produces a decreasing range [max, min] with step <code>dec</code>, for any <code>Number</code> type. (i.e. the reverse of <code>Range</code>)</p> <p>Example program: </p> <p><pre><code>use \"collections\"\nactor Main\nnew create(env: Env) =&gt;\nfor e in Reverse(10, 2, 2) do\nenv.out.print(e.string())\nend \n</code></pre> Which outputs:  <pre><code>10\n8\n6\n4\n2\n</code></pre></p> <p>If <code>dec</code> is 0, produces an infinite series of <code>max</code>.</p> <p>If <code>dec</code> is negative, produces a range with <code>max</code> as the only value.</p> <pre><code>class ref Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val | F32 val | \nF64 val))] is\nIterator[A] ref\n</code></pre>"},{"location":"collections-Reverse/#implements","title":"Implements","text":"<ul> <li>Iterator[A] ref</li> </ul>"},{"location":"collections-Reverse/#constructors","title":"Constructors","text":""},{"location":"collections-Reverse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nmax: A,\nmin: A,\ndec: A = 1)\n: Reverse[A] ref^\n</code></pre>"},{"location":"collections-Reverse/#parameters","title":"Parameters","text":"<ul> <li>max: A</li> <li>min: A</li> <li>dec: A = 1</li> </ul>"},{"location":"collections-Reverse/#returns","title":"Returns","text":"<ul> <li>Reverse[A] ref^</li> </ul>"},{"location":"collections-Reverse/#public-functions","title":"Public Functions","text":""},{"location":"collections-Reverse/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-Reverse/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Reverse/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: A\n</code></pre>"},{"location":"collections-Reverse/#returns_2","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"collections-Reverse/#rewind","title":"rewind","text":"<p>[Source]</p> <pre><code>fun ref rewind()\n: None val\n</code></pre>"},{"location":"collections-Reverse/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-RingBuffer/","title":"RingBuffer[A: A]","text":"<p>[Source]</p> <p>A ring buffer.</p> <pre><code>class ref RingBuffer[A: A]\n</code></pre>"},{"location":"collections-RingBuffer/#constructors","title":"Constructors","text":""},{"location":"collections-RingBuffer/#create","title":"create","text":"<p>[Source]</p> <p>Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2.</p> <pre><code>new ref create(\nlen: USize val)\n: RingBuffer[A] ref^\n</code></pre>"},{"location":"collections-RingBuffer/#parameters","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns","title":"Returns","text":"<ul> <li>RingBuffer[A] ref^</li> </ul>"},{"location":"collections-RingBuffer/#public-functions","title":"Public Functions","text":""},{"location":"collections-RingBuffer/#head","title":"head","text":"<p>[Source]</p> <p>The first read that will succeed. If nothing has been written to the ring, this will raise an error.</p> <pre><code>fun box head()\n: USize val ?\n</code></pre>"},{"location":"collections-RingBuffer/#returns_1","title":"Returns","text":"<ul> <li>USize val ?</li> </ul>"},{"location":"collections-RingBuffer/#size","title":"size","text":"<p>[Source]</p> <p>The number of elements that have been added to the ring.</p> <pre><code>fun box size()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_2","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#space","title":"space","text":"<p>[Source]</p> <p>The available space in the ring.</p> <pre><code>fun box space()\n: USize val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_3","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"collections-RingBuffer/#apply","title":"apply","text":"<p>[Source]</p> <p>Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error.</p> <pre><code>fun box apply(\ni: USize val)\n: this-&gt;A ?\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_1","title":"Parameters","text":"<ul> <li>i: USize val</li> </ul>"},{"location":"collections-RingBuffer/#returns_4","title":"Returns","text":"<ul> <li>this-&gt;A ?</li> </ul>"},{"location":"collections-RingBuffer/#push","title":"push","text":"<p>[Source]</p> <p>Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped.</p> <pre><code>fun ref push(\nvalue: A)\n: Bool val\n</code></pre>"},{"location":"collections-RingBuffer/#parameters_2","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"collections-RingBuffer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-RingBuffer/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear the queue.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"collections-RingBuffer/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"collections-Set/","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]","text":"<p>[Source] <pre><code>type Set[A: (Hashable #read &amp; Equatable[A] #read)] is\nHashSet[A, HashEq[A] val] ref\n</code></pre></p>"},{"location":"collections-Set/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashEq[A] val] ref</li> </ul>"},{"location":"collections-SetIs/","title":"SetIs[A: A]","text":"<p>[Source] <pre><code>type SetIs[A: A] is\nHashSet[A, HashIs[A!] val] ref\n</code></pre></p>"},{"location":"collections-SetIs/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashSet[A, HashIs[A!] val] ref</li> </ul>"},{"location":"collections-SetValues/","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]","text":"<p>[Source]</p> <p>An iterator over the values in a set.</p> <pre><code>class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\nIterator[S-&gt;A] ref\n</code></pre>"},{"location":"collections-SetValues/#implements","title":"Implements","text":"<ul> <li>Iterator[S-&gt;A] ref</li> </ul>"},{"location":"collections-SetValues/#constructors","title":"Constructors","text":""},{"location":"collections-SetValues/#create","title":"create","text":"<p>[Source]</p> <p>Creates an iterator for the given set.</p> <pre><code>new ref create(\nset: S)\n: SetValues[A, H, S] ref^\n</code></pre>"},{"location":"collections-SetValues/#parameters","title":"Parameters","text":"<ul> <li>set: S</li> </ul>"},{"location":"collections-SetValues/#returns","title":"Returns","text":"<ul> <li>SetValues[A, H, S] ref^</li> </ul>"},{"location":"collections-SetValues/#public-functions","title":"Public Functions","text":""},{"location":"collections-SetValues/#has_next","title":"has_next","text":"<p>[Source]</p> <p>True if it believes there are remaining entries. May not be right if values were added or removed from the set.</p> <pre><code>fun box has_next()\n: Bool val\n</code></pre>"},{"location":"collections-SetValues/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-SetValues/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values.</p> <pre><code>fun ref next()\n: S-&gt;A ?\n</code></pre>"},{"location":"collections-SetValues/#returns_2","title":"Returns","text":"<ul> <li>S-&gt;A ?</li> </ul>"},{"location":"collections-Sort/","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]","text":"<p>[Source]</p> <p>Implementation of dual-pivot quicksort.  It operates in-place on the provided Seq, using  a small amount of additional memory. The nature of the element-realation is expressed via  the supplied comparator.</p> <p>(The following is paraphrased from Wikipedia.)</p> <p>Quicksort is a common implementation of a sort algorithm which can sort items of any type  for which a \"less-than\" relation (formally, a total order) is defined. </p> <p>On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case,  it makes O(n2) comparisons, though this behavior is rare.  Multi-pivot implementations  (of which dual-pivot is one) make efficient use of modern processor caches.</p>"},{"location":"collections-Sort/#example-program","title":"Example program","text":"<p>The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"),  and sorts it in place alphabetically using the default String Comparator.</p> <p>It outputs:</p> <p>first second third</p> <pre><code>use \"collections\"\nactor Main \nnew create(env:Env) =&gt; \nlet array = [ \"third\"; \"second\"; \"first\" ]\nlet sorted_array = Sort[Array[String], String](array)\nfor e in sorted_array.values() do\nenv.out.print(e) // prints \"first \\n second \\n third\"\nend\n</code></pre> <pre><code>primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n</code></pre>"},{"location":"collections-Sort/#constructors","title":"Constructors","text":""},{"location":"collections-Sort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sort[A, B] val^\n</code></pre>"},{"location":"collections-Sort/#returns","title":"Returns","text":"<ul> <li>Sort[A, B] val^</li> </ul>"},{"location":"collections-Sort/#public-functions","title":"Public Functions","text":""},{"location":"collections-Sort/#apply","title":"apply","text":"<p>[Source]</p> <p>Sort the given seq.</p> <pre><code>fun box apply(\na: A)\n: A^\n</code></pre>"},{"location":"collections-Sort/#parameters","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"collections-Sort/#returns_1","title":"Returns","text":"<ul> <li>A^</li> </ul>"},{"location":"collections-Sort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Sort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Sort[A, B] val)\n: Bool val\n</code></pre>"},{"location":"collections-Sort/#parameters_2","title":"Parameters","text":"<ul> <li>that: Sort[A, B] val</li> </ul>"},{"location":"collections-Sort/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-Sort/#private-functions","title":"Private Functions","text":""},{"location":"collections-Sort/#_sort","title":"_sort","text":"<p>[Source]</p> <pre><code>fun box _sort(\na: A,\nlo: ISize val,\nhi: ISize val)\n: None val ?\n</code></pre>"},{"location":"collections-Sort/#parameters_3","title":"Parameters","text":"<ul> <li>a: A</li> <li>lo: ISize val</li> <li>hi: ISize val</li> </ul>"},{"location":"collections-Sort/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"collections-Sort/#_swap","title":"_swap","text":"<p>[Source]</p> <pre><code>fun box _swap(\na: A,\ni: ISize val,\nj: ISize val)\n: None val ?\n</code></pre>"},{"location":"collections-Sort/#parameters_4","title":"Parameters","text":"<ul> <li>a: A</li> <li>i: ISize val</li> <li>j: ISize val</li> </ul>"},{"location":"collections-Sort/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"collections-_BinaryHeapPriority/","title":"_BinaryHeapPriority[A: Comparable[A] #read]","text":"<p>[Source] <pre><code>interface val _BinaryHeapPriority[A: Comparable[A] #read]\n</code></pre></p>"},{"location":"collections-_BinaryHeapPriority/#constructors","title":"Constructors","text":""},{"location":"collections-_BinaryHeapPriority/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _BinaryHeapPriority[A] val^\n</code></pre>"},{"location":"collections-_BinaryHeapPriority/#returns","title":"Returns","text":"<ul> <li>_BinaryHeapPriority[A] val^</li> </ul>"},{"location":"collections-_BinaryHeapPriority/#public-functions","title":"Public Functions","text":""},{"location":"collections-_BinaryHeapPriority/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nx: A,\ny: A)\n: Bool val\n</code></pre>"},{"location":"collections-_BinaryHeapPriority/#parameters","title":"Parameters","text":"<ul> <li>x: A</li> <li>y: A</li> </ul>"},{"location":"collections-_BinaryHeapPriority/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-_MapDeleted/","title":"_MapDeleted","text":"<p>[Source] <pre><code>primitive val _MapDeleted\n</code></pre></p>"},{"location":"collections-_MapDeleted/#constructors","title":"Constructors","text":""},{"location":"collections-_MapDeleted/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _MapDeleted val^\n</code></pre>"},{"location":"collections-_MapDeleted/#returns","title":"Returns","text":"<ul> <li>_MapDeleted val^</li> </ul>"},{"location":"collections-_MapDeleted/#public-functions","title":"Public Functions","text":""},{"location":"collections-_MapDeleted/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _MapDeleted val)\n: Bool val\n</code></pre>"},{"location":"collections-_MapDeleted/#parameters","title":"Parameters","text":"<ul> <li>that: _MapDeleted val</li> </ul>"},{"location":"collections-_MapDeleted/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-_MapDeleted/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _MapDeleted val)\n: Bool val\n</code></pre>"},{"location":"collections-_MapDeleted/#parameters_1","title":"Parameters","text":"<ul> <li>that: _MapDeleted val</li> </ul>"},{"location":"collections-_MapDeleted/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-_MapEmpty/","title":"_MapEmpty","text":"<p>[Source] <pre><code>primitive val _MapEmpty\n</code></pre></p>"},{"location":"collections-_MapEmpty/#constructors","title":"Constructors","text":""},{"location":"collections-_MapEmpty/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _MapEmpty val^\n</code></pre>"},{"location":"collections-_MapEmpty/#returns","title":"Returns","text":"<ul> <li>_MapEmpty val^</li> </ul>"},{"location":"collections-_MapEmpty/#public-functions","title":"Public Functions","text":""},{"location":"collections-_MapEmpty/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _MapEmpty val)\n: Bool val\n</code></pre>"},{"location":"collections-_MapEmpty/#parameters","title":"Parameters","text":"<ul> <li>that: _MapEmpty val</li> </ul>"},{"location":"collections-_MapEmpty/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-_MapEmpty/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _MapEmpty val)\n: Bool val\n</code></pre>"},{"location":"collections-_MapEmpty/#parameters_1","title":"Parameters","text":"<ul> <li>that: _MapEmpty val</li> </ul>"},{"location":"collections-_MapEmpty/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"collections-_TestFlagsFlags/","title":"_TestFlagsFlags","text":"<p>[Source] <pre><code>type _TestFlagsFlags is\nFlags[(_TestFlagA val | _TestFlagB val | _TestFlagC val | _TestFlagD val), U8 val] ref\n</code></pre></p>"},{"location":"collections-_TestFlagsFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Flags[(_TestFlagA val | _TestFlagB val | _TestFlagC val | _TestFlagD val), U8 val] ref</li> </ul>"},{"location":"debug--index/","title":"Debug package","text":"<p>Provides facilities to create output to either <code>STDOUT</code> or <code>STDERR</code> that will only appear when the platform is debug configured. To create a binary with debug configured, pass the <code>-d</code> flag to <code>ponyc</code> when compiling e.g.:</p> <p><code>ponyc -d</code></p>"},{"location":"debug--index/#example-code","title":"Example code","text":"<pre><code>use \"debug\"\nactor Main\nnew create(env: Env) =&gt;\nDebug.out(\"This will only be seen when configured for debug info\")\nenv.out.print(\"This will always be seen\")\n</code></pre>"},{"location":"debug--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Debug</li> <li>primitive DebugErr</li> <li>primitive DebugOut</li> <li>type DebugStream</li> </ul>"},{"location":"debug-Debug/","title":"Debug","text":"<p>[Source]</p> <p>This is a debug only print utility.</p> <pre><code>primitive val Debug\n</code></pre>"},{"location":"debug-Debug/#constructors","title":"Constructors","text":""},{"location":"debug-Debug/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Debug val^\n</code></pre>"},{"location":"debug-Debug/#returns","title":"Returns","text":"<ul> <li>Debug val^</li> </ul>"},{"location":"debug-Debug/#public-functions","title":"Public Functions","text":""},{"location":"debug-Debug/#apply","title":"apply","text":"<p>[Source]</p> <p>If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout.</p> <pre><code>fun box apply(\nmsg: (Stringable box | ReadSeq[Stringable box] box),\nsep: String val = \", \",\nstream: (DebugOut val | DebugErr val) = reference)\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters","title":"Parameters","text":"<ul> <li>msg: (Stringable box | ReadSeq[Stringable box] box)</li> <li>sep: String val = \", \"</li> <li>stream: (DebugOut val | DebugErr val) = reference</li> </ul>"},{"location":"debug-Debug/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#out","title":"out","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard output</p> <pre><code>fun box out(\nmsg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_1","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#err","title":"err","text":"<p>[Source]</p> <p>If platform is debug configured, print message to standard error</p> <pre><code>fun box err(\nmsg: Stringable box = \"\")\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_2","title":"Parameters","text":"<ul> <li>msg: Stringable box = \"\"</li> </ul>"},{"location":"debug-Debug/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_3","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-Debug/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Debug val)\n: Bool val\n</code></pre>"},{"location":"debug-Debug/#parameters_4","title":"Parameters","text":"<ul> <li>that: Debug val</li> </ul>"},{"location":"debug-Debug/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-Debug/#private-functions","title":"Private Functions","text":""},{"location":"debug-Debug/#_print","title":"_print","text":"<p>[Source]</p> <pre><code>fun box _print(\nmsg: String val,\nstream: (DebugOut val | DebugErr val))\n: None val\n</code></pre>"},{"location":"debug-Debug/#parameters_5","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>stream: (DebugOut val | DebugErr val)</li> </ul>"},{"location":"debug-Debug/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"debug-Debug/#_stream","title":"_stream","text":"<p>[Source]</p> <pre><code>fun box _stream(\nstream: (DebugOut val | DebugErr val))\n: Pointer[U8 val] ref\n</code></pre>"},{"location":"debug-Debug/#parameters_6","title":"Parameters","text":"<ul> <li>stream: (DebugOut val | DebugErr val)</li> </ul>"},{"location":"debug-Debug/#returns_7","title":"Returns","text":"<ul> <li>Pointer[U8 val] ref</li> </ul>"},{"location":"debug-DebugErr/","title":"DebugErr","text":"<p>[Source] <pre><code>primitive val DebugErr\n</code></pre></p>"},{"location":"debug-DebugErr/#constructors","title":"Constructors","text":""},{"location":"debug-DebugErr/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugErr val^\n</code></pre>"},{"location":"debug-DebugErr/#returns","title":"Returns","text":"<ul> <li>DebugErr val^</li> </ul>"},{"location":"debug-DebugErr/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugErr/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugErr/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DebugErr val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugErr/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugErr val</li> </ul>"},{"location":"debug-DebugErr/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/","title":"DebugOut","text":"<p>[Source] <pre><code>primitive val DebugOut\n</code></pre></p>"},{"location":"debug-DebugOut/#constructors","title":"Constructors","text":""},{"location":"debug-DebugOut/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DebugOut val^\n</code></pre>"},{"location":"debug-DebugOut/#returns","title":"Returns","text":"<ul> <li>DebugOut val^</li> </ul>"},{"location":"debug-DebugOut/#public-functions","title":"Public Functions","text":""},{"location":"debug-DebugOut/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugOut/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DebugOut val)\n: Bool val\n</code></pre>"},{"location":"debug-DebugOut/#parameters_1","title":"Parameters","text":"<ul> <li>that: DebugOut val</li> </ul>"},{"location":"debug-DebugOut/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"debug-DebugStream/","title":"DebugStream","text":"<p>[Source] <pre><code>type DebugStream is\n(DebugOut val | DebugErr val)\n</code></pre></p>"},{"location":"debug-DebugStream/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(DebugOut val | DebugErr val)</li> </ul>"},{"location":"files--index/","title":"Files package","text":"<p>The Files package provides classes for working with files and directories.</p> <p>Files are identified by <code>FilePath</code> objects, which represent both the path to the file and the capabilites for accessing the file at that path. <code>FilePath</code> objects can be used with the <code>CreateFile</code> and <code>OpenFile</code> primitives and the <code>File</code> class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the <code>Directory</code> object to get a reference to a directory object that can be used for directory operations.</p> <p>The <code>FileLines</code> class allows a file to be accessed one line at a time.</p> <p>The <code>FileStream</code> actor provides the ability to asynchronously write to a file.</p> <p>The <code>Path</code> primitive can be used to do path-related operations on strings and characters.</p>"},{"location":"files--index/#example-program","title":"Example program","text":"<p>This program opens the files that are given as command line arguments and prints their contents.</p> <pre><code>use \"files\"\nactor Main\nnew create(env: Env) =&gt;\nfor file_name in env.args.slice(1).values() do\nlet path = FilePath(FileAuth(env.root), file_name)\nmatch OpenFile(path)\n| let file: File =&gt;\nwhile file.errno() is FileOK do\nenv.out.write(file.read(1024))\nend\nelse\nenv.err.print(\"Error opening file '\" + file_name + \"'\")\nend\nend\n</code></pre>"},{"location":"files--index/#public-types","title":"Public Types","text":"<ul> <li>primitive CreateFile</li> <li>class Directory</li> <li>class File</li> <li>primitive FileAuth</li> <li>primitive FileBadFileNumber</li> <li>type FileCaps</li> <li>primitive FileChmod</li> <li>primitive FileChown</li> <li>primitive FileCreate</li> <li>primitive FileEOF</li> <li>type FileErrNo</li> <li>primitive FileError</li> <li>primitive FileExec</li> <li>primitive FileExists</li> <li>class FileInfo</li> <li>class FileLines</li> <li>primitive FileLink</li> <li>primitive FileLookup</li> <li>primitive FileMkdir</li> <li>class FileMode</li> <li>primitive FileOK</li> <li>class FilePath</li> <li>primitive FilePermissionDenied</li> <li>primitive FileRead</li> <li>primitive FileRemove</li> <li>primitive FileRename</li> <li>primitive FileSeek</li> <li>primitive FileStat</li> <li>actor FileStream</li> <li>primitive FileSync</li> <li>primitive FileTime</li> <li>primitive FileTruncate</li> <li>primitive FileWrite</li> <li>primitive OpenFile</li> <li>primitive Path</li> <li>interface WalkHandler</li> </ul>"},{"location":"files--index/#private-types","title":"Private Types","text":"<ul> <li>primitive _DirectoryEntry</li> <li>primitive _DirectoryHandle</li> <li>primitive _EACCES</li> <li>primitive _EBADF</li> <li>primitive _EEXIST</li> <li>primitive _FileDes</li> <li>struct _LuidAndAttributes</li> <li>primitive _PathDot</li> <li>primitive _PathDot2</li> <li>primitive _PathOther</li> <li>primitive _PathSep</li> <li>type _PathState</li> <li>class _TestFileOpenWrite</li> <li>struct _TokenPrivileges</li> </ul>"},{"location":"files-CreateFile/","title":"CreateFile","text":"<p>[Source]</p> <p>Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist.</p> <pre><code>primitive val CreateFile\n</code></pre>"},{"location":"files-CreateFile/#constructors","title":"Constructors","text":""},{"location":"files-CreateFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CreateFile val^\n</code></pre>"},{"location":"files-CreateFile/#returns","title":"Returns","text":"<ul> <li>CreateFile val^</li> </ul>"},{"location":"files-CreateFile/#public-functions","title":"Public Functions","text":""},{"location":"files-CreateFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nfrom: FilePath val)\n: (File ref | FileOK val | FileError val | \nFileEOF val | FileBadFileNumber val | FileExists val | \nFilePermissionDenied val)\n</code></pre>"},{"location":"files-CreateFile/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-CreateFile/#returns_1","title":"Returns","text":"<ul> <li>(File ref | FileOK val | FileError val |      FileEOF val | FileBadFileNumber val | FileExists val |      FilePermissionDenied val)</li> </ul>"},{"location":"files-CreateFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CreateFile val)\n: Bool val\n</code></pre>"},{"location":"files-CreateFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: CreateFile val</li> </ul>"},{"location":"files-CreateFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-CreateFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CreateFile val)\n: Bool val\n</code></pre>"},{"location":"files-CreateFile/#parameters_2","title":"Parameters","text":"<ul> <li>that: CreateFile val</li> </ul>"},{"location":"files-CreateFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/","title":"Directory","text":"<p>[Source]</p> <p>Operations on a directory.</p> <p>The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum.</p> <pre><code>class ref Directory\n</code></pre>"},{"location":"files-Directory/#constructors","title":"Constructors","text":""},{"location":"files-Directory/#create","title":"create","text":"<p>[Source]</p> <p>This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available.</p> <pre><code>new ref create(\nfrom: FilePath val)\n: Directory ref^ ?\n</code></pre>"},{"location":"files-Directory/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-Directory/#returns","title":"Returns","text":"<ul> <li>Directory ref^ ?</li> </ul>"},{"location":"files-Directory/#_relative","title":"_relative","text":"<p>[Source]</p> <p>Internal constructor. Capsicum rights are already set by inheritence.</p> <pre><code>new iso _relative(\npath': FilePath val,\nfd': I32 val)\n: Directory iso^\n</code></pre>"},{"location":"files-Directory/#parameters_1","title":"Parameters","text":"<ul> <li>path': FilePath val</li> <li>fd': I32 val</li> </ul>"},{"location":"files-Directory/#returns_1","title":"Returns","text":"<ul> <li>Directory iso^</li> </ul>"},{"location":"files-Directory/#public-fields","title":"Public fields","text":""},{"location":"files-Directory/#let-path-filepath-val","title":"let path: FilePath val","text":"<p>[Source]</p> <p>This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory.</p>"},{"location":"files-Directory/#public-functions","title":"Public Functions","text":""},{"location":"files-Directory/#entries","title":"entries","text":"<p>[Source]</p> <p>The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\".</p> <pre><code>fun box entries()\n: Array[String val] iso^ ?\n</code></pre>"},{"location":"files-Directory/#returns_2","title":"Returns","text":"<ul> <li>Array[String val] iso^ ?</li> </ul>"},{"location":"files-Directory/#open","title":"open","text":"<p>[Source]</p> <p>Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy.</p> <pre><code>fun box open(\ntarget: String val)\n: Directory iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_2","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_3","title":"Returns","text":"<ul> <li>Directory iso^ ?</li> </ul>"},{"location":"files-Directory/#mkdir","title":"mkdir","text":"<p>[Source]</p> <p>Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing.</p> <pre><code>fun box mkdir(\ntarget: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_3","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#create_file","title":"create_file","text":"<p>[Source]</p> <p>Open for read/write, creating if it doesn't exist, preserving the contents if it does exist.</p> <pre><code>fun box create_file(\ntarget: String val)\n: File iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_4","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_5","title":"Returns","text":"<ul> <li>File iso^ ?</li> </ul>"},{"location":"files-Directory/#open_file","title":"open_file","text":"<p>[Source]</p> <p>Open for read only, failing if it doesn't exist.</p> <pre><code>fun box open_file(\ntarget: String val)\n: File iso^ ?\n</code></pre>"},{"location":"files-Directory/#parameters_5","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_6","title":"Returns","text":"<ul> <li>File iso^ ?</li> </ul>"},{"location":"files-Directory/#info","title":"info","text":"<p>[Source]</p> <p>Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission.</p> <pre><code>fun box info()\n: FileInfo val ?\n</code></pre>"},{"location":"files-Directory/#returns_7","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-Directory/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for this directory.</p> <pre><code>fun box chmod(\nmode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_6","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-Directory/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for this directory. Does nothing on Windows.</p> <pre><code>fun box chown(\nuid: U32 val,\ngid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_7","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-Directory/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-Directory/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time(\natime: (I64 val , I64 val),\nmtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_8","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-Directory/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#infoat","title":"infoat","text":"<p>[Source]</p> <p>Return a FileInfo for some path relative to this directory.</p> <pre><code>fun box infoat(\ntarget: String val)\n: FileInfo val ?\n</code></pre>"},{"location":"files-Directory/#parameters_9","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_12","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-Directory/#chmodat","title":"chmodat","text":"<p>[Source]</p> <p>Set the FileMode for some path relative to this directory.</p> <pre><code>fun box chmodat(\ntarget: String val,\nmode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_10","title":"Parameters","text":"<ul> <li>target: String val</li> <li>mode: FileMode box</li> </ul>"},{"location":"files-Directory/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#chownat","title":"chownat","text":"<p>[Source]</p> <p>Set the FileMode for some path relative to this directory.</p> <pre><code>fun box chownat(\ntarget: String val,\nuid: U32 val,\ngid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_11","title":"Parameters","text":"<ul> <li>target: String val</li> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-Directory/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#touchat","title":"touchat","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touchat(\ntarget: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_12","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#set_time_at","title":"set_time_at","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time_at(\ntarget: String val,\natime: (I64 val , I64 val),\nmtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_13","title":"Parameters","text":"<ul> <li>target: String val</li> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-Directory/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#symlink","title":"symlink","text":"<p>[Source]</p> <p>Link the source path to the link_name, where the link_name is relative to this directory.</p> <pre><code>fun box symlink(\nsource: FilePath val,\nlink_name: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_14","title":"Parameters","text":"<ul> <li>source: FilePath val</li> <li>link_name: String val</li> </ul>"},{"location":"files-Directory/#returns_17","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed.</p> <pre><code>fun box remove(\ntarget: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_15","title":"Parameters","text":"<ul> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#rename","title":"rename","text":"<p>[Source]</p> <p>Rename source (which is relative to this directory) to target (which is relative to the <code>to</code> directory).</p> <pre><code>fun box rename(\nsource: String val,\nto: Directory box,\ntarget: String val)\n: Bool val\n</code></pre>"},{"location":"files-Directory/#parameters_16","title":"Parameters","text":"<ul> <li>source: String val</li> <li>to: Directory box</li> <li>target: String val</li> </ul>"},{"location":"files-Directory/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Directory/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the directory.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"files-Directory/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-Directory/#private-functions","title":"Private Functions","text":""},{"location":"files-Directory/#_final","title":"_final","text":"<p>[Source]</p> <p>Close the file descriptor.</p> <pre><code>fun box _final()\n: None val\n</code></pre>"},{"location":"files-Directory/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/","title":"File","text":"<p>[Source]</p> <p>Operations on a file.</p> <pre><code>class ref File\n</code></pre>"},{"location":"files-File/#constructors","title":"Constructors","text":""},{"location":"files-File/#create","title":"create","text":"<p>[Source]</p> <p>Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result.</p> <pre><code>new ref create(\nfrom: FilePath val)\n: File ref^\n</code></pre>"},{"location":"files-File/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-File/#returns","title":"Returns","text":"<ul> <li>File ref^</li> </ul>"},{"location":"files-File/#open","title":"open","text":"<p>[Source]</p> <p>Open for read only. Set _errno according to result.</p> <pre><code>new ref open(\nfrom: FilePath val)\n: File ref^\n</code></pre>"},{"location":"files-File/#parameters_1","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-File/#returns_1","title":"Returns","text":"<ul> <li>File ref^</li> </ul>"},{"location":"files-File/#_descriptor","title":"_descriptor","text":"<p>[Source]</p> <p>Internal constructor from a file descriptor and a path.</p> <pre><code>new ref _descriptor(\nfd: I32 val,\nfrom: FilePath val)\n: File ref^ ?\n</code></pre>"},{"location":"files-File/#parameters_2","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>from: FilePath val</li> </ul>"},{"location":"files-File/#returns_2","title":"Returns","text":"<ul> <li>File ref^ ?</li> </ul>"},{"location":"files-File/#public-fields","title":"Public fields","text":""},{"location":"files-File/#let-path-filepath-val","title":"let path: FilePath val","text":"<p>[Source]</p> <p>This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file.</p>"},{"location":"files-File/#let-writeable-bool-val","title":"let writeable: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the underlying file descriptor has been opened as writeable.</p>"},{"location":"files-File/#public-functions","title":"Public Functions","text":""},{"location":"files-File/#errno","title":"errno","text":"<p>[Source]</p> <p>Returns the last error code set for this File</p> <pre><code>fun box errno()\n: (FileOK val | FileError val | FileEOF val | \nFileBadFileNumber val | FileExists val | FilePermissionDenied val)\n</code></pre>"},{"location":"files-File/#returns_3","title":"Returns","text":"<ul> <li>(FileOK val | FileError val | FileEOF val |      FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"files-File/#clear_errno","title":"clear_errno","text":"<p>[Source]</p> <p>Clears the last error code set for this File. Clears the error indicator for the stream.</p> <pre><code>fun ref clear_errno()\n: None val\n</code></pre>"},{"location":"files-File/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#valid","title":"valid","text":"<p>[Source]</p> <p>Returns true if the file is currently open.</p> <pre><code>fun box valid()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#read","title":"read","text":"<p>[Source]</p> <p>Returns up to len bytes.</p> <pre><code>fun ref read(\nlen: USize val)\n: Array[U8 val] iso^\n</code></pre>"},{"location":"files-File/#parameters_3","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_6","title":"Returns","text":"<ul> <li>Array[U8 val] iso^</li> </ul>"},{"location":"files-File/#read_string","title":"read_string","text":"<p>[Source]</p> <p>Returns up to len bytes. The resulting string may have internal null characters.</p> <pre><code>fun ref read_string(\nlen: USize val)\n: String iso^\n</code></pre>"},{"location":"files-File/#parameters_4","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_7","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"files-File/#print","title":"print","text":"<p>[Source]</p> <p>Same as write, buts adds a newline.</p> <pre><code>fun ref print(\ndata: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_5","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>fun ref printv(\ndata: ByteSeqIter box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_6","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#write","title":"write","text":"<p>[Source]</p> <p>Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written.</p> <pre><code>fun ref write(\ndata: (String box | Array[U8 val] box))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_7","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>fun ref writev(\ndata: ByteSeqIter box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_8","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#queue","title":"queue","text":"<p>[Source]</p> <p>Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data</p> <pre><code>fun ref queue(\ndata: (String box | Array[U8 val] box))\n: None val\n</code></pre>"},{"location":"files-File/#parameters_9","title":"Parameters","text":"<ul> <li>data: (String box | Array[U8 val] box)</li> </ul>"},{"location":"files-File/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#queuev","title":"queuev","text":"<p>[Source]</p> <p>Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data</p> <pre><code>fun ref queuev(\ndata: ByteSeqIter box)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_10","title":"Parameters","text":"<ul> <li>data: ByteSeqIter box</li> </ul>"},{"location":"files-File/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush any queued data</p> <pre><code>fun ref flush()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#position","title":"position","text":"<p>[Source]</p> <p>Return the current cursor position in the file.</p> <pre><code>fun ref position()\n: USize val\n</code></pre>"},{"location":"files-File/#returns_15","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"files-File/#size","title":"size","text":"<p>[Source]</p> <p>Return the total length of the file.</p> <pre><code>fun ref size()\n: USize val\n</code></pre>"},{"location":"files-File/#returns_16","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"files-File/#seek_start","title":"seek_start","text":"<p>[Source]</p> <p>Set the cursor position relative to the start of the file.</p> <pre><code>fun ref seek_start(\noffset: USize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_11","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"files-File/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#seek_end","title":"seek_end","text":"<p>[Source]</p> <p>Set the cursor position relative to the end of the file.</p> <pre><code>fun ref seek_end(\noffset: USize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_12","title":"Parameters","text":"<ul> <li>offset: USize val</li> </ul>"},{"location":"files-File/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#seek","title":"seek","text":"<p>[Source]</p> <p>Move the cursor position.</p> <pre><code>fun ref seek(\noffset: ISize val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_13","title":"Parameters","text":"<ul> <li>offset: ISize val</li> </ul>"},{"location":"files-File/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#sync","title":"sync","text":"<p>[Source]</p> <p>Sync the file contents to physical storage.</p> <pre><code>fun ref sync()\n: None val\n</code></pre>"},{"location":"files-File/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#datasync","title":"datasync","text":"<p>[Source]</p> <p>Sync the file contents to physical storage.</p> <pre><code>fun ref datasync()\n: None val\n</code></pre>"},{"location":"files-File/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#set_length","title":"set_length","text":"<p>[Source]</p> <p>Change the file size. If it is made larger, the new contents are undefined.</p> <pre><code>fun ref set_length(\nlen: USize val)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_14","title":"Parameters","text":"<ul> <li>len: USize val</li> </ul>"},{"location":"files-File/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#info","title":"info","text":"<p>[Source]</p> <p>Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission.</p> <pre><code>fun box info()\n: FileInfo val ?\n</code></pre>"},{"location":"files-File/#returns_23","title":"Returns","text":"<ul> <li>FileInfo val ?</li> </ul>"},{"location":"files-File/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for this directory.</p> <pre><code>fun box chmod(\nmode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_15","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-File/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for this directory. Does nothing on Windows.</p> <pre><code>fun box chown(\nuid: U32 val,\ngid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_16","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-File/#returns_25","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_26","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of the directory to the given values.</p> <pre><code>fun box set_time(\natime: (I64 val , I64 val),\nmtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-File/#parameters_17","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-File/#returns_27","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#lines","title":"lines","text":"<p>[Source]</p> <p>Returns an iterator for reading lines from the file.</p> <pre><code>fun ref lines()\n: FileLines ref\n</code></pre>"},{"location":"files-File/#returns_28","title":"Returns","text":"<ul> <li>FileLines ref</li> </ul>"},{"location":"files-File/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the file. Future operations will do nothing.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"files-File/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#private-functions","title":"Private Functions","text":""},{"location":"files-File/#_get_error","title":"_get_error","text":"<p>[Source]</p> <p>Fetch errno from the OS.</p> <pre><code>fun box _get_error()\n: (FileOK val | FileError val | FileEOF val | \nFileBadFileNumber val | FileExists val | FilePermissionDenied val)\n</code></pre>"},{"location":"files-File/#returns_30","title":"Returns","text":"<ul> <li>(FileOK val | FileError val | FileEOF val |      FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"files-File/#_pending_writes","title":"_pending_writes","text":"<p>[Source]</p> <p>Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data.</p> <pre><code>fun ref _pending_writes()\n: Bool val\n</code></pre>"},{"location":"files-File/#returns_31","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-File/#_write_to_disk","title":"_write_to_disk","text":"<p>[Source]</p> <p>Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also.</p> <pre><code>fun box _write_to_disk()\n: (Bool val , USize val , USize val) ?\n</code></pre>"},{"location":"files-File/#returns_32","title":"Returns","text":"<ul> <li>(Bool val , USize val , USize val) ?</li> </ul>"},{"location":"files-File/#_seek","title":"_seek","text":"<p>[Source]</p> <p>Move the cursor position.</p> <pre><code>fun ref _seek(\noffset: I64 val,\nbase: I32 val)\n: None val\n</code></pre>"},{"location":"files-File/#parameters_18","title":"Parameters","text":"<ul> <li>offset: I64 val</li> <li>base: I32 val</li> </ul>"},{"location":"files-File/#returns_33","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-File/#_final","title":"_final","text":"<p>[Source]</p> <p>Close the file.</p> <pre><code>fun box _final()\n: None val\n</code></pre>"},{"location":"files-File/#returns_34","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileAuth/","title":"FileAuth","text":"<p>[Source] <pre><code>primitive val FileAuth\n</code></pre></p>"},{"location":"files-FileAuth/#constructors","title":"Constructors","text":""},{"location":"files-FileAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: AmbientAuth val)\n: FileAuth val^\n</code></pre>"},{"location":"files-FileAuth/#parameters","title":"Parameters","text":"<ul> <li>from: AmbientAuth val</li> </ul>"},{"location":"files-FileAuth/#returns","title":"Returns","text":"<ul> <li>FileAuth val^</li> </ul>"},{"location":"files-FileAuth/#public-functions","title":"Public Functions","text":""},{"location":"files-FileAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileAuth val)\n: Bool val\n</code></pre>"},{"location":"files-FileAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileAuth val</li> </ul>"},{"location":"files-FileAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileAuth val)\n: Bool val\n</code></pre>"},{"location":"files-FileAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: FileAuth val</li> </ul>"},{"location":"files-FileAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileBadFileNumber/","title":"FileBadFileNumber","text":"<p>[Source] <pre><code>primitive val FileBadFileNumber\n</code></pre></p>"},{"location":"files-FileBadFileNumber/#constructors","title":"Constructors","text":""},{"location":"files-FileBadFileNumber/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileBadFileNumber val^\n</code></pre>"},{"location":"files-FileBadFileNumber/#returns","title":"Returns","text":"<ul> <li>FileBadFileNumber val^</li> </ul>"},{"location":"files-FileBadFileNumber/#public-functions","title":"Public Functions","text":""},{"location":"files-FileBadFileNumber/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileBadFileNumber val)\n: Bool val\n</code></pre>"},{"location":"files-FileBadFileNumber/#parameters","title":"Parameters","text":"<ul> <li>that: FileBadFileNumber val</li> </ul>"},{"location":"files-FileBadFileNumber/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileBadFileNumber/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileBadFileNumber val)\n: Bool val\n</code></pre>"},{"location":"files-FileBadFileNumber/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileBadFileNumber val</li> </ul>"},{"location":"files-FileBadFileNumber/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCaps/","title":"FileCaps","text":"<p>[Source] <pre><code>type FileCaps is\nFlags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref\n</code></pre></p>"},{"location":"files-FileCaps/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref</li> </ul>"},{"location":"files-FileChmod/","title":"FileChmod","text":"<p>[Source] <pre><code>primitive val FileChmod\n</code></pre></p>"},{"location":"files-FileChmod/#constructors","title":"Constructors","text":""},{"location":"files-FileChmod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileChmod val^\n</code></pre>"},{"location":"files-FileChmod/#returns","title":"Returns","text":"<ul> <li>FileChmod val^</li> </ul>"},{"location":"files-FileChmod/#public-functions","title":"Public Functions","text":""},{"location":"files-FileChmod/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileChmod/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileChmod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileChmod val)\n: Bool val\n</code></pre>"},{"location":"files-FileChmod/#parameters","title":"Parameters","text":"<ul> <li>that: FileChmod val</li> </ul>"},{"location":"files-FileChmod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChmod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileChmod val)\n: Bool val\n</code></pre>"},{"location":"files-FileChmod/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileChmod val</li> </ul>"},{"location":"files-FileChmod/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChown/","title":"FileChown","text":"<p>[Source] <pre><code>primitive val FileChown\n</code></pre></p>"},{"location":"files-FileChown/#constructors","title":"Constructors","text":""},{"location":"files-FileChown/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileChown val^\n</code></pre>"},{"location":"files-FileChown/#returns","title":"Returns","text":"<ul> <li>FileChown val^</li> </ul>"},{"location":"files-FileChown/#public-functions","title":"Public Functions","text":""},{"location":"files-FileChown/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileChown/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileChown/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileChown val)\n: Bool val\n</code></pre>"},{"location":"files-FileChown/#parameters","title":"Parameters","text":"<ul> <li>that: FileChown val</li> </ul>"},{"location":"files-FileChown/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileChown/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileChown val)\n: Bool val\n</code></pre>"},{"location":"files-FileChown/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileChown val</li> </ul>"},{"location":"files-FileChown/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCreate/","title":"FileCreate","text":"<p>[Source] <pre><code>primitive val FileCreate\n</code></pre></p>"},{"location":"files-FileCreate/#constructors","title":"Constructors","text":""},{"location":"files-FileCreate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileCreate val^\n</code></pre>"},{"location":"files-FileCreate/#returns","title":"Returns","text":"<ul> <li>FileCreate val^</li> </ul>"},{"location":"files-FileCreate/#public-functions","title":"Public Functions","text":""},{"location":"files-FileCreate/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileCreate/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileCreate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileCreate val)\n: Bool val\n</code></pre>"},{"location":"files-FileCreate/#parameters","title":"Parameters","text":"<ul> <li>that: FileCreate val</li> </ul>"},{"location":"files-FileCreate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileCreate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileCreate val)\n: Bool val\n</code></pre>"},{"location":"files-FileCreate/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileCreate val</li> </ul>"},{"location":"files-FileCreate/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileEOF/","title":"FileEOF","text":"<p>[Source] <pre><code>primitive val FileEOF\n</code></pre></p>"},{"location":"files-FileEOF/#constructors","title":"Constructors","text":""},{"location":"files-FileEOF/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileEOF val^\n</code></pre>"},{"location":"files-FileEOF/#returns","title":"Returns","text":"<ul> <li>FileEOF val^</li> </ul>"},{"location":"files-FileEOF/#public-functions","title":"Public Functions","text":""},{"location":"files-FileEOF/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileEOF val)\n: Bool val\n</code></pre>"},{"location":"files-FileEOF/#parameters","title":"Parameters","text":"<ul> <li>that: FileEOF val</li> </ul>"},{"location":"files-FileEOF/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileEOF/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileEOF val)\n: Bool val\n</code></pre>"},{"location":"files-FileEOF/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileEOF val</li> </ul>"},{"location":"files-FileEOF/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileErrNo/","title":"FileErrNo","text":"<p>[Source] <pre><code>type FileErrNo is\n(FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n</code></pre></p>"},{"location":"files-FileErrNo/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"files-FileError/","title":"FileError","text":"<p>[Source] <pre><code>primitive val FileError\n</code></pre></p>"},{"location":"files-FileError/#constructors","title":"Constructors","text":""},{"location":"files-FileError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileError val^\n</code></pre>"},{"location":"files-FileError/#returns","title":"Returns","text":"<ul> <li>FileError val^</li> </ul>"},{"location":"files-FileError/#public-functions","title":"Public Functions","text":""},{"location":"files-FileError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileError val)\n: Bool val\n</code></pre>"},{"location":"files-FileError/#parameters","title":"Parameters","text":"<ul> <li>that: FileError val</li> </ul>"},{"location":"files-FileError/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileError val)\n: Bool val\n</code></pre>"},{"location":"files-FileError/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileError val</li> </ul>"},{"location":"files-FileError/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExec/","title":"FileExec","text":"<p>[Source] <pre><code>primitive val FileExec\n</code></pre></p>"},{"location":"files-FileExec/#constructors","title":"Constructors","text":""},{"location":"files-FileExec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileExec val^\n</code></pre>"},{"location":"files-FileExec/#returns","title":"Returns","text":"<ul> <li>FileExec val^</li> </ul>"},{"location":"files-FileExec/#public-functions","title":"Public Functions","text":""},{"location":"files-FileExec/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileExec/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileExec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileExec val)\n: Bool val\n</code></pre>"},{"location":"files-FileExec/#parameters","title":"Parameters","text":"<ul> <li>that: FileExec val</li> </ul>"},{"location":"files-FileExec/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileExec val)\n: Bool val\n</code></pre>"},{"location":"files-FileExec/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileExec val</li> </ul>"},{"location":"files-FileExec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExists/","title":"FileExists","text":"<p>[Source] <pre><code>primitive val FileExists\n</code></pre></p>"},{"location":"files-FileExists/#constructors","title":"Constructors","text":""},{"location":"files-FileExists/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileExists val^\n</code></pre>"},{"location":"files-FileExists/#returns","title":"Returns","text":"<ul> <li>FileExists val^</li> </ul>"},{"location":"files-FileExists/#public-functions","title":"Public Functions","text":""},{"location":"files-FileExists/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileExists val)\n: Bool val\n</code></pre>"},{"location":"files-FileExists/#parameters","title":"Parameters","text":"<ul> <li>that: FileExists val</li> </ul>"},{"location":"files-FileExists/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileExists/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileExists val)\n: Bool val\n</code></pre>"},{"location":"files-FileExists/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileExists val</li> </ul>"},{"location":"files-FileExists/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileInfo/","title":"FileInfo","text":"<p>[Source]</p> <p>This contains file system metadata for a path.</p> <p>A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag.</p> <pre><code>class val FileInfo\n</code></pre>"},{"location":"files-FileInfo/#constructors","title":"Constructors","text":""},{"location":"files-FileInfo/#create","title":"create","text":"<p>[Source]</p> <p>This will raise an error if the FileStat capability isn't available or the path doesn't exist.</p> <pre><code>new val create(\nfrom: FilePath val)\n: FileInfo val^ ?\n</code></pre>"},{"location":"files-FileInfo/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-FileInfo/#returns","title":"Returns","text":"<ul> <li>FileInfo val^ ?</li> </ul>"},{"location":"files-FileInfo/#_descriptor","title":"_descriptor","text":"<p>[Source]</p> <p>This will raise an error if the FileStat capability isn't available or the file descriptor is invalid.</p> <pre><code>new val _descriptor(\nfd: I32 val,\npath: FilePath val)\n: FileInfo val^ ?\n</code></pre>"},{"location":"files-FileInfo/#parameters_1","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> </ul>"},{"location":"files-FileInfo/#returns_1","title":"Returns","text":"<ul> <li>FileInfo val^ ?</li> </ul>"},{"location":"files-FileInfo/#_relative","title":"_relative","text":"<p>[Source]</p> <pre><code>new val _relative(\nfd: I32 val,\npath: FilePath val,\nfrom: String val)\n: FileInfo val^ ?\n</code></pre>"},{"location":"files-FileInfo/#parameters_2","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> <li>from: String val</li> </ul>"},{"location":"files-FileInfo/#returns_2","title":"Returns","text":"<ul> <li>FileInfo val^ ?</li> </ul>"},{"location":"files-FileInfo/#public-fields","title":"Public fields","text":""},{"location":"files-FileInfo/#let-filepath-filepath-val","title":"let filepath: FilePath val","text":"<p>[Source]</p>"},{"location":"files-FileInfo/#let-mode-filemode-val","title":"let mode: FileMode val","text":"<p>[Source]</p> <p>UNIX-style file mode.</p>"},{"location":"files-FileInfo/#let-hard_links-u32-val","title":"let hard_links: U32 val","text":"<p>[Source]</p> <p>Number of hardlinks to this <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-device-u64-val","title":"let device: U64 val","text":"<p>[Source]</p> <p>OS id of the device containing this <code>filepath</code>. Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system.</p>"},{"location":"files-FileInfo/#let-inode-u64-val","title":"let inode: U64 val","text":"<p>[Source]</p> <p>UNIX specific INODE number of <code>filepath</code>. Is 0 on Windows.</p>"},{"location":"files-FileInfo/#let-uid-u32-val","title":"let uid: U32 val","text":"<p>[Source]</p> <p>UNIX-style user ID of the owner of <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-gid-u32-val","title":"let gid: U32 val","text":"<p>[Source]</p> <p>UNIX-style user ID of the owning group of <code>filepath</code>.</p>"},{"location":"files-FileInfo/#let-size-usize-val","title":"let size: USize val","text":"<p>[Source]</p> <p>Total size of <code>filepath</code> in bytes.</p> <p>In case of a symlink this is the size of the target, not the symlink itself.</p>"},{"location":"files-FileInfo/#let-access_time-i64-val-i64-val","title":"let access_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of last access as a tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let a_secs: I64, let a_nanos: I64) = file_info.access_time\n</code></pre>"},{"location":"files-FileInfo/#let-modified_time-i64-val-i64-val","title":"let modified_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of last modification as tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let m_secs: I64, let m_nanos: I64) = file_info.modified_time\n</code></pre>"},{"location":"files-FileInfo/#let-change_time-i64-val-i64-val","title":"let change_time: (I64 val , I64 val)","text":"<p>[Source]</p> <p>Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of <code>filepath</code> as a tuple of seconds and nanoseconds since the epoch:</p> <pre><code>(let c_secs: I64, let c_nanos: I64) = file_info.change_time\n</code></pre> <p>On Windows this will be the file creation time.</p>"},{"location":"files-FileInfo/#let-file-bool-val","title":"let file: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to an a regular file.</p>"},{"location":"files-FileInfo/#let-directory-bool-val","title":"let directory: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a directory.</p>"},{"location":"files-FileInfo/#let-pipe-bool-val","title":"let pipe: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a named pipe.</p>"},{"location":"files-FileInfo/#let-symlink-bool-val","title":"let symlink: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a symbolic link.</p>"},{"location":"files-FileInfo/#let-broken-bool-val","title":"let broken: Bool val","text":"<p>[Source]</p> <p><code>true</code> if <code>filepath</code> points to a broken symlink.</p>"},{"location":"files-FileLines/","title":"FileLines","text":"<p>[Source]</p> <p>Iterate over the lines in a file.</p> <p>Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from <code>next</code>.</p> <p>This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care.</p> <pre><code>class ref FileLines is\nIterator[String iso^] ref\n</code></pre>"},{"location":"files-FileLines/#implements","title":"Implements","text":"<ul> <li>Iterator[String iso^] ref</li> </ul>"},{"location":"files-FileLines/#constructors","title":"Constructors","text":""},{"location":"files-FileLines/#create","title":"create","text":"<p>[Source]</p> <p>Create a FileLines instance on a given file.</p> <p>This instance returns lines from the position of the given <code>file</code> at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines.</p> <p><code>min_read_size</code> determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than <code>min_read_size</code>.</p> <pre><code>new ref create(\nfile: File ref,\nmin_read_size: USize val = 256)\n: FileLines ref^\n</code></pre>"},{"location":"files-FileLines/#parameters","title":"Parameters","text":"<ul> <li>file: File ref</li> <li>min_read_size: USize val = 256</li> </ul>"},{"location":"files-FileLines/#returns","title":"Returns","text":"<ul> <li>FileLines ref^</li> </ul>"},{"location":"files-FileLines/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLines/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun ref has_next()\n: Bool val\n</code></pre>"},{"location":"files-FileLines/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLines/#next","title":"next","text":"<p>[Source]</p> <p>Returns the next line in the file.</p> <pre><code>fun ref next()\n: String iso^ ?\n</code></pre>"},{"location":"files-FileLines/#returns_2","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"files-FileLines/#private-functions","title":"Private Functions","text":""},{"location":"files-FileLines/#_read_line","title":"_read_line","text":"<p>[Source]</p> <pre><code>fun ref _read_line()\n: String iso^ ?\n</code></pre>"},{"location":"files-FileLines/#returns_3","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"files-FileLines/#_fill_buffer","title":"_fill_buffer","text":"<p>[Source]</p> <p>read from file and fill the reader-buffer.</p> <p>Returns <code>true</code> if data could be read from the file.</p> <p>After a successful reading operation <code>_buffer_cursor</code> is updated.</p> <pre><code>fun ref _fill_buffer()\n: Bool val\n</code></pre>"},{"location":"files-FileLines/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLines/#_read_last_line","title":"_read_last_line","text":"<p>[Source]</p> <pre><code>fun ref _read_last_line()\n: String iso^ ?\n</code></pre>"},{"location":"files-FileLines/#returns_5","title":"Returns","text":"<ul> <li>String iso^ ?</li> </ul>"},{"location":"files-FileLines/#_inc_public_file_cursor","title":"_inc_public_file_cursor","text":"<p>[Source]</p> <pre><code>fun ref _inc_public_file_cursor(\namount: USize val)\n: None val\n</code></pre>"},{"location":"files-FileLines/#parameters_1","title":"Parameters","text":"<ul> <li>amount: USize val</li> </ul>"},{"location":"files-FileLines/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileLink/","title":"FileLink","text":"<p>[Source] <pre><code>primitive val FileLink\n</code></pre></p>"},{"location":"files-FileLink/#constructors","title":"Constructors","text":""},{"location":"files-FileLink/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileLink val^\n</code></pre>"},{"location":"files-FileLink/#returns","title":"Returns","text":"<ul> <li>FileLink val^</li> </ul>"},{"location":"files-FileLink/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLink/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileLink/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileLink/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileLink val)\n: Bool val\n</code></pre>"},{"location":"files-FileLink/#parameters","title":"Parameters","text":"<ul> <li>that: FileLink val</li> </ul>"},{"location":"files-FileLink/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLink/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileLink val)\n: Bool val\n</code></pre>"},{"location":"files-FileLink/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileLink val</li> </ul>"},{"location":"files-FileLink/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLookup/","title":"FileLookup","text":"<p>[Source] <pre><code>primitive val FileLookup\n</code></pre></p>"},{"location":"files-FileLookup/#constructors","title":"Constructors","text":""},{"location":"files-FileLookup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileLookup val^\n</code></pre>"},{"location":"files-FileLookup/#returns","title":"Returns","text":"<ul> <li>FileLookup val^</li> </ul>"},{"location":"files-FileLookup/#public-functions","title":"Public Functions","text":""},{"location":"files-FileLookup/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileLookup/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileLookup/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileLookup val)\n: Bool val\n</code></pre>"},{"location":"files-FileLookup/#parameters","title":"Parameters","text":"<ul> <li>that: FileLookup val</li> </ul>"},{"location":"files-FileLookup/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileLookup/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileLookup val)\n: Bool val\n</code></pre>"},{"location":"files-FileLookup/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileLookup val</li> </ul>"},{"location":"files-FileLookup/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMkdir/","title":"FileMkdir","text":"<p>[Source] <pre><code>primitive val FileMkdir\n</code></pre></p>"},{"location":"files-FileMkdir/#constructors","title":"Constructors","text":""},{"location":"files-FileMkdir/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileMkdir val^\n</code></pre>"},{"location":"files-FileMkdir/#returns","title":"Returns","text":"<ul> <li>FileMkdir val^</li> </ul>"},{"location":"files-FileMkdir/#public-functions","title":"Public Functions","text":""},{"location":"files-FileMkdir/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileMkdir/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileMkdir/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileMkdir val)\n: Bool val\n</code></pre>"},{"location":"files-FileMkdir/#parameters","title":"Parameters","text":"<ul> <li>that: FileMkdir val</li> </ul>"},{"location":"files-FileMkdir/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMkdir/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileMkdir val)\n: Bool val\n</code></pre>"},{"location":"files-FileMkdir/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileMkdir val</li> </ul>"},{"location":"files-FileMkdir/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileMode/","title":"FileMode","text":"<p>[Source]</p> <p>This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set.</p> <p>The default mode is read/write for the owner, read-only for everyone else.</p> <pre><code>class ref FileMode\n</code></pre>"},{"location":"files-FileMode/#constructors","title":"Constructors","text":""},{"location":"files-FileMode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FileMode iso^\n</code></pre>"},{"location":"files-FileMode/#returns","title":"Returns","text":"<ul> <li>FileMode iso^</li> </ul>"},{"location":"files-FileMode/#public-fields","title":"Public fields","text":""},{"location":"files-FileMode/#var-setuid-bool-val","title":"var setuid: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the SETUID bit is set.</p>"},{"location":"files-FileMode/#var-setgid-bool-val","title":"var setgid: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the SETGID bit is set.</p>"},{"location":"files-FileMode/#var-sticky-bool-val","title":"var sticky: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the sticky bit is set.</p>"},{"location":"files-FileMode/#var-owner_read-bool-val","title":"var owner_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can read the file.</p>"},{"location":"files-FileMode/#var-owner_write-bool-val","title":"var owner_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can write to the file.</p>"},{"location":"files-FileMode/#var-owner_exec-bool-val","title":"var owner_exec: Bool val","text":"<p>[Source]</p> <p><code>true</code> if the owning user can execute the file.</p>"},{"location":"files-FileMode/#var-group_read-bool-val","title":"var group_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can read the file.</p>"},{"location":"files-FileMode/#var-group_write-bool-val","title":"var group_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can write to the file.</p>"},{"location":"files-FileMode/#var-group_exec-bool-val","title":"var group_exec: Bool val","text":"<p>[Source]</p> <p><code>true</code> if members of the owning group can execute the file.</p>"},{"location":"files-FileMode/#var-any_read-bool-val","title":"var any_read: Bool val","text":"<p>[Source]</p> <p><code>true</code> if every user can read the file.</p>"},{"location":"files-FileMode/#var-any_write-bool-val","title":"var any_write: Bool val","text":"<p>[Source]</p> <p><code>true</code> if every user can write to the file.</p>"},{"location":"files-FileMode/#var-any_exec-bool-val","title":"var any_exec: Bool val","text":"<p>[Source]</p> <p>`true if every user can execute the file.</p>"},{"location":"files-FileMode/#public-functions","title":"Public Functions","text":""},{"location":"files-FileMode/#exec","title":"exec","text":"<p>[Source]</p> <p>Set the executable flag for everyone.</p> <pre><code>fun ref exec()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#shared","title":"shared","text":"<p>[Source]</p> <p>Set the write flag for everyone to the same as owner_write.</p> <pre><code>fun ref shared()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#group","title":"group","text":"<p>[Source]</p> <p>Clear all of the any-user flags.</p> <pre><code>fun ref group()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#private","title":"private","text":"<p>[Source]</p> <p>Clear all of the group and any-user flags.</p> <pre><code>fun ref private()\n: None val\n</code></pre>"},{"location":"files-FileMode/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FileMode/#u32","title":"u32","text":"<p>[Source]</p> <p>Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable.</p> <pre><code>fun box u32()\n: U32 val\n</code></pre>"},{"location":"files-FileMode/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileOK/","title":"FileOK","text":"<p>[Source] <pre><code>primitive val FileOK\n</code></pre></p>"},{"location":"files-FileOK/#constructors","title":"Constructors","text":""},{"location":"files-FileOK/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileOK val^\n</code></pre>"},{"location":"files-FileOK/#returns","title":"Returns","text":"<ul> <li>FileOK val^</li> </ul>"},{"location":"files-FileOK/#public-functions","title":"Public Functions","text":""},{"location":"files-FileOK/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileOK val)\n: Bool val\n</code></pre>"},{"location":"files-FileOK/#parameters","title":"Parameters","text":"<ul> <li>that: FileOK val</li> </ul>"},{"location":"files-FileOK/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileOK/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileOK val)\n: Bool val\n</code></pre>"},{"location":"files-FileOK/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileOK val</li> </ul>"},{"location":"files-FileOK/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/","title":"FilePath","text":"<p>[Source]</p> <p>A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path.</p> <pre><code>class val FilePath\n</code></pre>"},{"location":"files-FilePath/#constructors","title":"Constructors","text":""},{"location":"files-FilePath/#create","title":"create","text":"<p>[Source]</p> <p>Create a new path to any location.</p> <p>Unless absolute, path' will be relative to the program's working directory.</p> <p>Capabilities are exactly as given.</p> <pre><code>new val create(\nbase: FileAuth val,\npath': String val,\ncaps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^\n</code></pre>"},{"location":"files-FilePath/#parameters","title":"Parameters","text":"<ul> <li>base: FileAuth val</li> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns","title":"Returns","text":"<ul> <li>FilePath val^</li> </ul>"},{"location":"files-FilePath/#from","title":"from","text":"<p>[Source]</p> <p>Create a new path from an existing <code>FilePath</code>.</p> <p>path' is relative to the existing <code>FilePath</code>, and the existing <code>FilePath</code> must be a prefix of the resulting path.</p> <p>The resulting <code>FilePath</code> will have capabilities that are the intersection of the supplied capabilities and the capabilities of the existing <code>FilePath</code>.</p> <pre><code>new val from(\nbase: FilePath val,\npath': String val,\ncaps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^ ?\n</code></pre>"},{"location":"files-FilePath/#parameters_1","title":"Parameters","text":"<ul> <li>base: FilePath val</li> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_1","title":"Returns","text":"<ul> <li>FilePath val^ ?</li> </ul>"},{"location":"files-FilePath/#mkdtemp","title":"mkdtemp","text":"<p>[Source]</p> <p>Create a temporary directory and returns a path to it. The directory's name will begin with <code>prefix</code>.</p> <p>If <code>FileAuth</code> is provided, the resulting <code>FilePath</code> will be relative to the program's working directory. Otherwise, it will be relative to the existing <code>FilePath</code>, and the existing <code>FilePath</code> must be a prefix of the resulting path.</p> <p>The resulting <code>FilePath</code> will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base.</p> <pre><code>new val mkdtemp(\nbase: (FileAuth val | FilePath val),\nprefix: String val = \"\",\ncaps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val^ ?\n</code></pre>"},{"location":"files-FilePath/#parameters_2","title":"Parameters","text":"<ul> <li>base: (FileAuth val | FilePath val)</li> <li>prefix: String val = \"\"</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_2","title":"Returns","text":"<ul> <li>FilePath val^ ?</li> </ul>"},{"location":"files-FilePath/#_create","title":"_create","text":"<p>[Source]</p> <p>Internal constructor.</p> <pre><code>new val _create(\npath': String val,\ncaps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val)\n: FilePath val^\n</code></pre>"},{"location":"files-FilePath/#parameters_3","title":"Parameters","text":"<ul> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val</li> </ul>"},{"location":"files-FilePath/#returns_3","title":"Returns","text":"<ul> <li>FilePath val^</li> </ul>"},{"location":"files-FilePath/#public-fields","title":"Public fields","text":""},{"location":"files-FilePath/#let-path-string-val","title":"let path: String val","text":"<p>[Source]</p> <p>Absolute filesystem path.</p>"},{"location":"files-FilePath/#let-caps-flagsfilecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-fileexec-val-u32-val-ref","title":"let caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","text":"<p>[Source]</p> <p>Set of capabilities for operations on <code>path</code>.</p>"},{"location":"files-FilePath/#public-functions","title":"Public Functions","text":""},{"location":"files-FilePath/#join","title":"join","text":"<p>[Source]</p> <p>Return a new path relative to this one.</p> <pre><code>fun val join(\npath': String val,\ncaps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover)\n: FilePath val ?\n</code></pre>"},{"location":"files-FilePath/#parameters_4","title":"Parameters","text":"<ul> <li>path': String val</li> <li>caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover</li> </ul>"},{"location":"files-FilePath/#returns_4","title":"Returns","text":"<ul> <li>FilePath val ?</li> </ul>"},{"location":"files-FilePath/#walk","title":"walk","text":"<p>[Source]</p> <p>Walks a directory structure starting at this.</p> <p><code>handler(dir_path, dir_entries)</code> will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the <code>dir_entries</code> list.</p> <pre><code>fun val walk(\nhandler: WalkHandler ref,\nfollow_links: Bool val = false)\n: None val\n</code></pre>"},{"location":"files-FilePath/#parameters_5","title":"Parameters","text":"<ul> <li>handler: WalkHandler ref</li> <li>follow_links: Bool val = false</li> </ul>"},{"location":"files-FilePath/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-FilePath/#canonical","title":"canonical","text":"<p>[Source]</p> <p>Return the equivalent canonical absolute path. Raise an error if there isn't one.</p> <pre><code>fun val canonical()\n: FilePath val ?\n</code></pre>"},{"location":"files-FilePath/#returns_6","title":"Returns","text":"<ul> <li>FilePath val ?</li> </ul>"},{"location":"files-FilePath/#exists","title":"exists","text":"<p>[Source]</p> <p>Returns true if the path exists. Returns false for a broken symlink.</p> <pre><code>fun val exists()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#mkdir","title":"mkdir","text":"<p>[Source]</p> <p>Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist.</p> <pre><code>fun val mkdir(\nmust_create: Bool val = false)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_6","title":"Parameters","text":"<ul> <li>must_create: Bool val = false</li> </ul>"},{"location":"files-FilePath/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#remove","title":"remove","text":"<p>[Source]</p> <p>Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed.</p> <pre><code>fun val remove()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#rename","title":"rename","text":"<p>[Source]</p> <p>Rename a file or directory.</p> <pre><code>fun box rename(\nnew_path: FilePath val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_7","title":"Parameters","text":"<ul> <li>new_path: FilePath val</li> </ul>"},{"location":"files-FilePath/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#symlink","title":"symlink","text":"<p>[Source]</p> <p>Create a symlink to a file or directory.</p> <p>Note that on Windows a program must be running with elevated priviledges to be able to create symlinks.</p> <pre><code>fun val symlink(\nlink_name: FilePath val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_8","title":"Parameters","text":"<ul> <li>link_name: FilePath val</li> </ul>"},{"location":"files-FilePath/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for a path.</p> <pre><code>fun box chmod(\nmode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_9","title":"Parameters","text":"<ul> <li>mode: FileMode box</li> </ul>"},{"location":"files-FilePath/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for a path. Does nothing on Windows.</p> <pre><code>fun box chown(\nuid: U32 val,\ngid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_10","title":"Parameters","text":"<ul> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-FilePath/#returns_13","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of a path to now.</p> <pre><code>fun box touch()\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#returns_14","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePath/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of a path to the given values.</p> <pre><code>fun box set_time(\natime: (I64 val , I64 val),\nmtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-FilePath/#parameters_11","title":"Parameters","text":"<ul> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-FilePath/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePermissionDenied/","title":"FilePermissionDenied","text":"<p>[Source] <pre><code>primitive val FilePermissionDenied\n</code></pre></p>"},{"location":"files-FilePermissionDenied/#constructors","title":"Constructors","text":""},{"location":"files-FilePermissionDenied/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FilePermissionDenied val^\n</code></pre>"},{"location":"files-FilePermissionDenied/#returns","title":"Returns","text":"<ul> <li>FilePermissionDenied val^</li> </ul>"},{"location":"files-FilePermissionDenied/#public-functions","title":"Public Functions","text":""},{"location":"files-FilePermissionDenied/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FilePermissionDenied val)\n: Bool val\n</code></pre>"},{"location":"files-FilePermissionDenied/#parameters","title":"Parameters","text":"<ul> <li>that: FilePermissionDenied val</li> </ul>"},{"location":"files-FilePermissionDenied/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FilePermissionDenied/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FilePermissionDenied val)\n: Bool val\n</code></pre>"},{"location":"files-FilePermissionDenied/#parameters_1","title":"Parameters","text":"<ul> <li>that: FilePermissionDenied val</li> </ul>"},{"location":"files-FilePermissionDenied/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRead/","title":"FileRead","text":"<p>[Source] <pre><code>primitive val FileRead\n</code></pre></p>"},{"location":"files-FileRead/#constructors","title":"Constructors","text":""},{"location":"files-FileRead/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRead val^\n</code></pre>"},{"location":"files-FileRead/#returns","title":"Returns","text":"<ul> <li>FileRead val^</li> </ul>"},{"location":"files-FileRead/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRead/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRead/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRead/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileRead val)\n: Bool val\n</code></pre>"},{"location":"files-FileRead/#parameters","title":"Parameters","text":"<ul> <li>that: FileRead val</li> </ul>"},{"location":"files-FileRead/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRead/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileRead val)\n: Bool val\n</code></pre>"},{"location":"files-FileRead/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRead val</li> </ul>"},{"location":"files-FileRead/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRemove/","title":"FileRemove","text":"<p>[Source] <pre><code>primitive val FileRemove\n</code></pre></p>"},{"location":"files-FileRemove/#constructors","title":"Constructors","text":""},{"location":"files-FileRemove/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRemove val^\n</code></pre>"},{"location":"files-FileRemove/#returns","title":"Returns","text":"<ul> <li>FileRemove val^</li> </ul>"},{"location":"files-FileRemove/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRemove/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRemove/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRemove/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileRemove val)\n: Bool val\n</code></pre>"},{"location":"files-FileRemove/#parameters","title":"Parameters","text":"<ul> <li>that: FileRemove val</li> </ul>"},{"location":"files-FileRemove/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRemove/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileRemove val)\n: Bool val\n</code></pre>"},{"location":"files-FileRemove/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRemove val</li> </ul>"},{"location":"files-FileRemove/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRename/","title":"FileRename","text":"<p>[Source] <pre><code>primitive val FileRename\n</code></pre></p>"},{"location":"files-FileRename/#constructors","title":"Constructors","text":""},{"location":"files-FileRename/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileRename val^\n</code></pre>"},{"location":"files-FileRename/#returns","title":"Returns","text":"<ul> <li>FileRename val^</li> </ul>"},{"location":"files-FileRename/#public-functions","title":"Public Functions","text":""},{"location":"files-FileRename/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileRename/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileRename/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileRename val)\n: Bool val\n</code></pre>"},{"location":"files-FileRename/#parameters","title":"Parameters","text":"<ul> <li>that: FileRename val</li> </ul>"},{"location":"files-FileRename/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileRename/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileRename val)\n: Bool val\n</code></pre>"},{"location":"files-FileRename/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileRename val</li> </ul>"},{"location":"files-FileRename/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSeek/","title":"FileSeek","text":"<p>[Source] <pre><code>primitive val FileSeek\n</code></pre></p>"},{"location":"files-FileSeek/#constructors","title":"Constructors","text":""},{"location":"files-FileSeek/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileSeek val^\n</code></pre>"},{"location":"files-FileSeek/#returns","title":"Returns","text":"<ul> <li>FileSeek val^</li> </ul>"},{"location":"files-FileSeek/#public-functions","title":"Public Functions","text":""},{"location":"files-FileSeek/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileSeek/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileSeek/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileSeek val)\n: Bool val\n</code></pre>"},{"location":"files-FileSeek/#parameters","title":"Parameters","text":"<ul> <li>that: FileSeek val</li> </ul>"},{"location":"files-FileSeek/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSeek/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileSeek val)\n: Bool val\n</code></pre>"},{"location":"files-FileSeek/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileSeek val</li> </ul>"},{"location":"files-FileSeek/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStat/","title":"FileStat","text":"<p>[Source] <pre><code>primitive val FileStat\n</code></pre></p>"},{"location":"files-FileStat/#constructors","title":"Constructors","text":""},{"location":"files-FileStat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileStat val^\n</code></pre>"},{"location":"files-FileStat/#returns","title":"Returns","text":"<ul> <li>FileStat val^</li> </ul>"},{"location":"files-FileStat/#public-functions","title":"Public Functions","text":""},{"location":"files-FileStat/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileStat/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileStat/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileStat val)\n: Bool val\n</code></pre>"},{"location":"files-FileStat/#parameters","title":"Parameters","text":"<ul> <li>that: FileStat val</li> </ul>"},{"location":"files-FileStat/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStat/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileStat val)\n: Bool val\n</code></pre>"},{"location":"files-FileStat/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileStat val</li> </ul>"},{"location":"files-FileStat/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileStream/","title":"FileStream","text":"<p>[Source]</p> <p>Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final.</p> <pre><code>actor tag FileStream is\nOutStream tag\n</code></pre>"},{"location":"files-FileStream/#implements","title":"Implements","text":"<ul> <li>OutStream tag</li> </ul>"},{"location":"files-FileStream/#constructors","title":"Constructors","text":""},{"location":"files-FileStream/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nfile: File iso)\n: FileStream tag^\n</code></pre>"},{"location":"files-FileStream/#parameters","title":"Parameters","text":"<ul> <li>file: File iso</li> </ul>"},{"location":"files-FileStream/#returns","title":"Returns","text":"<ul> <li>FileStream tag^</li> </ul>"},{"location":"files-FileStream/#public-behaviours","title":"Public Behaviours","text":""},{"location":"files-FileStream/#print","title":"print","text":"<p>[Source]</p> <p>Print some bytes and insert a newline afterwards.</p> <pre><code>be print(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"files-FileStream/#parameters_1","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"files-FileStream/#write","title":"write","text":"<p>[Source]</p> <p>Print some bytes without inserting a newline afterwards.</p> <pre><code>be write(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"files-FileStream/#parameters_2","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"files-FileStream/#printv","title":"printv","text":"<p>[Source]</p> <p>Print an iterable collection of ByteSeqs.</p> <pre><code>be printv(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"files-FileStream/#parameters_3","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"files-FileStream/#writev","title":"writev","text":"<p>[Source]</p> <p>Write an iterable collection of ByteSeqs.</p> <pre><code>be writev(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"files-FileStream/#parameters_4","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"files-FileStream/#flush","title":"flush","text":"<p>[Source]</p> <p>Flush pending data to write.</p> <pre><code>be flush()\n</code></pre>"},{"location":"files-FileSync/","title":"FileSync","text":"<p>[Source] <pre><code>primitive val FileSync\n</code></pre></p>"},{"location":"files-FileSync/#constructors","title":"Constructors","text":""},{"location":"files-FileSync/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileSync val^\n</code></pre>"},{"location":"files-FileSync/#returns","title":"Returns","text":"<ul> <li>FileSync val^</li> </ul>"},{"location":"files-FileSync/#public-functions","title":"Public Functions","text":""},{"location":"files-FileSync/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileSync/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileSync/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileSync val)\n: Bool val\n</code></pre>"},{"location":"files-FileSync/#parameters","title":"Parameters","text":"<ul> <li>that: FileSync val</li> </ul>"},{"location":"files-FileSync/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileSync/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileSync val)\n: Bool val\n</code></pre>"},{"location":"files-FileSync/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileSync val</li> </ul>"},{"location":"files-FileSync/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTime/","title":"FileTime","text":"<p>[Source] <pre><code>primitive val FileTime\n</code></pre></p>"},{"location":"files-FileTime/#constructors","title":"Constructors","text":""},{"location":"files-FileTime/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileTime val^\n</code></pre>"},{"location":"files-FileTime/#returns","title":"Returns","text":"<ul> <li>FileTime val^</li> </ul>"},{"location":"files-FileTime/#public-functions","title":"Public Functions","text":""},{"location":"files-FileTime/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileTime/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileTime/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileTime val)\n: Bool val\n</code></pre>"},{"location":"files-FileTime/#parameters","title":"Parameters","text":"<ul> <li>that: FileTime val</li> </ul>"},{"location":"files-FileTime/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTime/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileTime val)\n: Bool val\n</code></pre>"},{"location":"files-FileTime/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileTime val</li> </ul>"},{"location":"files-FileTime/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTruncate/","title":"FileTruncate","text":"<p>[Source] <pre><code>primitive val FileTruncate\n</code></pre></p>"},{"location":"files-FileTruncate/#constructors","title":"Constructors","text":""},{"location":"files-FileTruncate/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileTruncate val^\n</code></pre>"},{"location":"files-FileTruncate/#returns","title":"Returns","text":"<ul> <li>FileTruncate val^</li> </ul>"},{"location":"files-FileTruncate/#public-functions","title":"Public Functions","text":""},{"location":"files-FileTruncate/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileTruncate/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileTruncate/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileTruncate val)\n: Bool val\n</code></pre>"},{"location":"files-FileTruncate/#parameters","title":"Parameters","text":"<ul> <li>that: FileTruncate val</li> </ul>"},{"location":"files-FileTruncate/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileTruncate/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileTruncate val)\n: Bool val\n</code></pre>"},{"location":"files-FileTruncate/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileTruncate val</li> </ul>"},{"location":"files-FileTruncate/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileWrite/","title":"FileWrite","text":"<p>[Source] <pre><code>primitive val FileWrite\n</code></pre></p>"},{"location":"files-FileWrite/#constructors","title":"Constructors","text":""},{"location":"files-FileWrite/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FileWrite val^\n</code></pre>"},{"location":"files-FileWrite/#returns","title":"Returns","text":"<ul> <li>FileWrite val^</li> </ul>"},{"location":"files-FileWrite/#public-functions","title":"Public Functions","text":""},{"location":"files-FileWrite/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U32 val\n</code></pre>"},{"location":"files-FileWrite/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"files-FileWrite/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FileWrite val)\n: Bool val\n</code></pre>"},{"location":"files-FileWrite/#parameters","title":"Parameters","text":"<ul> <li>that: FileWrite val</li> </ul>"},{"location":"files-FileWrite/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-FileWrite/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FileWrite val)\n: Bool val\n</code></pre>"},{"location":"files-FileWrite/#parameters_1","title":"Parameters","text":"<ul> <li>that: FileWrite val</li> </ul>"},{"location":"files-FileWrite/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-OpenFile/","title":"OpenFile","text":"<p>[Source]</p> <p>Open a File for read only.</p> <pre><code>primitive val OpenFile\n</code></pre>"},{"location":"files-OpenFile/#constructors","title":"Constructors","text":""},{"location":"files-OpenFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: OpenFile val^\n</code></pre>"},{"location":"files-OpenFile/#returns","title":"Returns","text":"<ul> <li>OpenFile val^</li> </ul>"},{"location":"files-OpenFile/#public-functions","title":"Public Functions","text":""},{"location":"files-OpenFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nfrom: FilePath val)\n: (File ref | FileOK val | FileError val | \nFileEOF val | FileBadFileNumber val | FileExists val | \nFilePermissionDenied val)\n</code></pre>"},{"location":"files-OpenFile/#parameters","title":"Parameters","text":"<ul> <li>from: FilePath val</li> </ul>"},{"location":"files-OpenFile/#returns_1","title":"Returns","text":"<ul> <li>(File ref | FileOK val | FileError val |      FileEOF val | FileBadFileNumber val | FileExists val |      FilePermissionDenied val)</li> </ul>"},{"location":"files-OpenFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: OpenFile val)\n: Bool val\n</code></pre>"},{"location":"files-OpenFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: OpenFile val</li> </ul>"},{"location":"files-OpenFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-OpenFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: OpenFile val)\n: Bool val\n</code></pre>"},{"location":"files-OpenFile/#parameters_2","title":"Parameters","text":"<ul> <li>that: OpenFile val</li> </ul>"},{"location":"files-OpenFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/","title":"Path","text":"<p>[Source]</p> <p>Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths.</p> <pre><code>primitive val Path\n</code></pre>"},{"location":"files-Path/#constructors","title":"Constructors","text":""},{"location":"files-Path/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Path val^\n</code></pre>"},{"location":"files-Path/#returns","title":"Returns","text":"<ul> <li>Path val^</li> </ul>"},{"location":"files-Path/#public-functions","title":"Public Functions","text":""},{"location":"files-Path/#is_sep","title":"is_sep","text":"<p>[Source]</p> <p>Determine if a byte is a path separator.</p> <pre><code>fun box is_sep(\nc: U8 val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters","title":"Parameters","text":"<ul> <li>c: U8 val</li> </ul>"},{"location":"files-Path/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#sep","title":"sep","text":"<p>[Source]</p> <p>Return the path separator as a string.</p> <pre><code>fun tag sep()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#is_abs","title":"is_abs","text":"<p>[Source]</p> <p>Return true if the path is an absolute path.</p> <pre><code>fun box is_abs(\npath: String val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_1","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#join","title":"join","text":"<p>[Source]</p> <p>Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned.</p> <pre><code>fun box join(\npath: String val,\nnext_path: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_2","title":"Parameters","text":"<ul> <li>path: String val</li> <li>next_path: String val</li> </ul>"},{"location":"files-Path/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#clean","title":"clean","text":"<p>[Source]</p> <p>Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead.</p> <pre><code>fun box clean(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_3","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#normcase","title":"normcase","text":"<p>[Source]</p> <p>Normalizes the case of path for the runtime platform.</p> <pre><code>fun box normcase(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_4","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#cwd","title":"cwd","text":"<p>[Source]</p> <p>Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe.</p> <pre><code>fun box cwd()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#abs","title":"abs","text":"<p>[Source]</p> <p>Returns a cleaned, absolute path.</p> <pre><code>fun box abs(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_5","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#rel","title":"rel","text":"<p>[Source]</p> <p>Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible.</p> <pre><code>fun box rel(\nto: String val,\ntarget: String val)\n: String val ?\n</code></pre>"},{"location":"files-Path/#parameters_6","title":"Parameters","text":"<ul> <li>to: String val</li> <li>target: String val</li> </ul>"},{"location":"files-Path/#returns_9","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"files-Path/#split","title":"split","text":"<p>[Source]</p> <p>Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base().</p> <pre><code>fun box split(\npath: String val,\nseparator: String val = call)\n: (String val , String val)\n</code></pre>"},{"location":"files-Path/#parameters_7","title":"Parameters","text":"<ul> <li>path: String val</li> <li>separator: String val = call</li> </ul>"},{"location":"files-Path/#returns_10","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"files-Path/#base","title":"base","text":"<p>[Source]</p> <p>Return the path after the last separator, or the whole path if there is no separator. If <code>with_ext</code> is <code>false</code>, the extension as defined by the <code>ext()</code> method will be omitted from the result.</p> <pre><code>fun box base(\npath: String val,\nwith_ext: Bool val = true)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_8","title":"Parameters","text":"<ul> <li>path: String val</li> <li>with_ext: Bool val = true</li> </ul>"},{"location":"files-Path/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#dir","title":"dir","text":"<p>[Source]</p> <p>Return a cleaned path before the last separator, or the whole path if there is no separator.</p> <pre><code>fun box dir(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_9","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#ext","title":"ext","text":"<p>[Source]</p> <p>Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension.</p> <pre><code>fun box ext(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_10","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#volume","title":"volume","text":"<p>[Source]</p> <p>On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string.</p> <pre><code>fun box volume(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_11","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#from_slash","title":"from_slash","text":"<p>[Source]</p> <p>Changes each / in the path to the OS specific separator.</p> <pre><code>fun box from_slash(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_12","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#to_slash","title":"to_slash","text":"<p>[Source]</p> <p>Changes each OS specific separator in the path to /.</p> <pre><code>fun box to_slash(\npath: String val)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_13","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#canonical","title":"canonical","text":"<p>[Source]</p> <p>Return the equivalent canonical absolute path. Raise an error if there isn't one.</p> <pre><code>fun box canonical(\npath: String val)\n: String val ?\n</code></pre>"},{"location":"files-Path/#parameters_14","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_17","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"files-Path/#is_list_sep","title":"is_list_sep","text":"<p>[Source]</p> <p>Determine if a byte is a path list separator.</p> <pre><code>fun box is_list_sep(\nc: U8 val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_15","title":"Parameters","text":"<ul> <li>c: U8 val</li> </ul>"},{"location":"files-Path/#returns_18","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#list_sep","title":"list_sep","text":"<p>[Source]</p> <p>Return the path list separator as a string.</p> <pre><code>fun box list_sep()\n: String val\n</code></pre>"},{"location":"files-Path/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#split_list","title":"split_list","text":"<p>[Source]</p> <p>Separate a list of paths into an array of cleaned paths.</p> <pre><code>fun box split_list(\npath: String val)\n: Array[String val] iso^\n</code></pre>"},{"location":"files-Path/#parameters_16","title":"Parameters","text":"<ul> <li>path: String val</li> </ul>"},{"location":"files-Path/#returns_20","title":"Returns","text":"<ul> <li>Array[String val] iso^</li> </ul>"},{"location":"files-Path/#random","title":"random","text":"<p>[Source]</p> <p>Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist.</p> <pre><code>fun box random(\nlen: USize val = 6)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_17","title":"Parameters","text":"<ul> <li>len: USize val = 6</li> </ul>"},{"location":"files-Path/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-Path/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Path val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_18","title":"Parameters","text":"<ul> <li>that: Path val</li> </ul>"},{"location":"files-Path/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Path val)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_19","title":"Parameters","text":"<ul> <li>that: Path val</li> </ul>"},{"location":"files-Path/#returns_23","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#private-functions","title":"Private Functions","text":""},{"location":"files-Path/#_drive_letter","title":"_drive_letter","text":"<p>[Source]</p> <p>Look for a drive letter followed by a ':', returning true if we find it.</p> <pre><code>fun box _drive_letter(\npath: String val,\noffset: ISize val = 0)\n: Bool val\n</code></pre>"},{"location":"files-Path/#parameters_20","title":"Parameters","text":"<ul> <li>path: String val</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"files-Path/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-Path/#_network_share","title":"_network_share","text":"<p>[Source]</p> <p>Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String.</p> <pre><code>fun box _network_share(\npath: String val,\noffset: ISize val = 0)\n: String val\n</code></pre>"},{"location":"files-Path/#parameters_21","title":"Parameters","text":"<ul> <li>path: String val</li> <li>offset: ISize val = 0</li> </ul>"},{"location":"files-Path/#returns_25","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-WalkHandler/","title":"WalkHandler","text":"<p>[Source]</p> <p>A handler for <code>FilePath.walk</code>.</p> <pre><code>interface ref WalkHandler\n</code></pre>"},{"location":"files-WalkHandler/#public-functions","title":"Public Functions","text":""},{"location":"files-WalkHandler/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ndir_path: FilePath val,\ndir_entries: Array[String val] ref)\n: None val\n</code></pre>"},{"location":"files-WalkHandler/#parameters","title":"Parameters","text":"<ul> <li>dir_path: FilePath val</li> <li>dir_entries: Array[String val] ref</li> </ul>"},{"location":"files-WalkHandler/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-_DirectoryEntry/","title":"_DirectoryEntry","text":"<p>[Source] <pre><code>primitive val _DirectoryEntry\n</code></pre></p>"},{"location":"files-_DirectoryEntry/#constructors","title":"Constructors","text":""},{"location":"files-_DirectoryEntry/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _DirectoryEntry val^\n</code></pre>"},{"location":"files-_DirectoryEntry/#returns","title":"Returns","text":"<ul> <li>_DirectoryEntry val^</li> </ul>"},{"location":"files-_DirectoryEntry/#public-functions","title":"Public Functions","text":""},{"location":"files-_DirectoryEntry/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _DirectoryEntry val)\n: Bool val\n</code></pre>"},{"location":"files-_DirectoryEntry/#parameters","title":"Parameters","text":"<ul> <li>that: _DirectoryEntry val</li> </ul>"},{"location":"files-_DirectoryEntry/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_DirectoryEntry/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _DirectoryEntry val)\n: Bool val\n</code></pre>"},{"location":"files-_DirectoryEntry/#parameters_1","title":"Parameters","text":"<ul> <li>that: _DirectoryEntry val</li> </ul>"},{"location":"files-_DirectoryEntry/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_DirectoryHandle/","title":"_DirectoryHandle","text":"<p>[Source] <pre><code>primitive val _DirectoryHandle\n</code></pre></p>"},{"location":"files-_DirectoryHandle/#constructors","title":"Constructors","text":""},{"location":"files-_DirectoryHandle/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _DirectoryHandle val^\n</code></pre>"},{"location":"files-_DirectoryHandle/#returns","title":"Returns","text":"<ul> <li>_DirectoryHandle val^</li> </ul>"},{"location":"files-_DirectoryHandle/#public-functions","title":"Public Functions","text":""},{"location":"files-_DirectoryHandle/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _DirectoryHandle val)\n: Bool val\n</code></pre>"},{"location":"files-_DirectoryHandle/#parameters","title":"Parameters","text":"<ul> <li>that: _DirectoryHandle val</li> </ul>"},{"location":"files-_DirectoryHandle/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_DirectoryHandle/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _DirectoryHandle val)\n: Bool val\n</code></pre>"},{"location":"files-_DirectoryHandle/#parameters_1","title":"Parameters","text":"<ul> <li>that: _DirectoryHandle val</li> </ul>"},{"location":"files-_DirectoryHandle/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EACCES/","title":"_EACCES","text":"<p>[Source] <pre><code>primitive val _EACCES\n</code></pre></p>"},{"location":"files-_EACCES/#constructors","title":"Constructors","text":""},{"location":"files-_EACCES/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EACCES val^\n</code></pre>"},{"location":"files-_EACCES/#returns","title":"Returns","text":"<ul> <li>_EACCES val^</li> </ul>"},{"location":"files-_EACCES/#public-functions","title":"Public Functions","text":""},{"location":"files-_EACCES/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I32 val\n</code></pre>"},{"location":"files-_EACCES/#returns_1","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"files-_EACCES/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EACCES val)\n: Bool val\n</code></pre>"},{"location":"files-_EACCES/#parameters","title":"Parameters","text":"<ul> <li>that: _EACCES val</li> </ul>"},{"location":"files-_EACCES/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EACCES/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EACCES val)\n: Bool val\n</code></pre>"},{"location":"files-_EACCES/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EACCES val</li> </ul>"},{"location":"files-_EACCES/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EBADF/","title":"_EBADF","text":"<p>[Source] <pre><code>primitive val _EBADF\n</code></pre></p>"},{"location":"files-_EBADF/#constructors","title":"Constructors","text":""},{"location":"files-_EBADF/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EBADF val^\n</code></pre>"},{"location":"files-_EBADF/#returns","title":"Returns","text":"<ul> <li>_EBADF val^</li> </ul>"},{"location":"files-_EBADF/#public-functions","title":"Public Functions","text":""},{"location":"files-_EBADF/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I32 val\n</code></pre>"},{"location":"files-_EBADF/#returns_1","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"files-_EBADF/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EBADF val)\n: Bool val\n</code></pre>"},{"location":"files-_EBADF/#parameters","title":"Parameters","text":"<ul> <li>that: _EBADF val</li> </ul>"},{"location":"files-_EBADF/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EBADF/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EBADF val)\n: Bool val\n</code></pre>"},{"location":"files-_EBADF/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EBADF val</li> </ul>"},{"location":"files-_EBADF/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EEXIST/","title":"_EEXIST","text":"<p>[Source] <pre><code>primitive val _EEXIST\n</code></pre></p>"},{"location":"files-_EEXIST/#constructors","title":"Constructors","text":""},{"location":"files-_EEXIST/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EEXIST val^\n</code></pre>"},{"location":"files-_EEXIST/#returns","title":"Returns","text":"<ul> <li>_EEXIST val^</li> </ul>"},{"location":"files-_EEXIST/#public-functions","title":"Public Functions","text":""},{"location":"files-_EEXIST/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: I32 val\n</code></pre>"},{"location":"files-_EEXIST/#returns_1","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"files-_EEXIST/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EEXIST val)\n: Bool val\n</code></pre>"},{"location":"files-_EEXIST/#parameters","title":"Parameters","text":"<ul> <li>that: _EEXIST val</li> </ul>"},{"location":"files-_EEXIST/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_EEXIST/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EEXIST val)\n: Bool val\n</code></pre>"},{"location":"files-_EEXIST/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EEXIST val</li> </ul>"},{"location":"files-_EEXIST/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/","title":"_FileDes","text":"<p>[Source]</p> <p>Convenience operations on file descriptors.</p> <pre><code>primitive val _FileDes\n</code></pre>"},{"location":"files-_FileDes/#constructors","title":"Constructors","text":""},{"location":"files-_FileDes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _FileDes val^\n</code></pre>"},{"location":"files-_FileDes/#returns","title":"Returns","text":"<ul> <li>_FileDes val^</li> </ul>"},{"location":"files-_FileDes/#public-functions","title":"Public Functions","text":""},{"location":"files-_FileDes/#chmod","title":"chmod","text":"<p>[Source]</p> <p>Set the FileMode for this fd.</p> <pre><code>fun box chmod(\nfd: I32 val,\npath: FilePath val,\nmode: FileMode box)\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> <li>mode: FileMode box</li> </ul>"},{"location":"files-_FileDes/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/#chown","title":"chown","text":"<p>[Source]</p> <p>Set the owner and group for this file. Does nothing on Windows.</p> <pre><code>fun box chown(\nfd: I32 val,\npath: FilePath val,\nuid: U32 val,\ngid: U32 val)\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters_1","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> <li>uid: U32 val</li> <li>gid: U32 val</li> </ul>"},{"location":"files-_FileDes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/#touch","title":"touch","text":"<p>[Source]</p> <p>Set the last access and modification times of the file to now.</p> <pre><code>fun box touch(\nfd: I32 val,\npath: FilePath val)\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters_2","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> </ul>"},{"location":"files-_FileDes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/#set_time","title":"set_time","text":"<p>[Source]</p> <p>Set the last access and modification times of the file to the given values.</p> <pre><code>fun box set_time(\nfd: I32 val,\npath: FilePath val,\natime: (I64 val , I64 val),\nmtime: (I64 val , I64 val))\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters_3","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> <li>atime: (I64 val , I64 val)</li> <li>mtime: (I64 val , I64 val)</li> </ul>"},{"location":"files-_FileDes/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/#set_rights","title":"set_rights","text":"<p>[Source]</p> <p>Set the Capsicum rights on the file descriptor.</p> <pre><code>fun box set_rights(\nfd: I32 val,\npath: FilePath val,\nwriteable: Bool val = true)\n: None val ?\n</code></pre>"},{"location":"files-_FileDes/#parameters_4","title":"Parameters","text":"<ul> <li>fd: I32 val</li> <li>path: FilePath val</li> <li>writeable: Bool val = true</li> </ul>"},{"location":"files-_FileDes/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"files-_FileDes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _FileDes val)\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters_5","title":"Parameters","text":"<ul> <li>that: _FileDes val</li> </ul>"},{"location":"files-_FileDes/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_FileDes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _FileDes val)\n: Bool val\n</code></pre>"},{"location":"files-_FileDes/#parameters_6","title":"Parameters","text":"<ul> <li>that: _FileDes val</li> </ul>"},{"location":"files-_FileDes/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_LuidAndAttributes/","title":"_LuidAndAttributes","text":"<p>[Source] <pre><code>struct ref _LuidAndAttributes\n</code></pre></p>"},{"location":"files-_LuidAndAttributes/#constructors","title":"Constructors","text":""},{"location":"files-_LuidAndAttributes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _LuidAndAttributes iso^\n</code></pre>"},{"location":"files-_LuidAndAttributes/#returns","title":"Returns","text":"<ul> <li>_LuidAndAttributes iso^</li> </ul>"},{"location":"files-_LuidAndAttributes/#public-fields","title":"Public fields","text":""},{"location":"files-_LuidAndAttributes/#var-luid-u64-val","title":"var luid: U64 val","text":"<p>[Source]</p>"},{"location":"files-_LuidAndAttributes/#var-attributes-u32-val","title":"var attributes: U32 val","text":"<p>[Source]</p>"},{"location":"files-_PathDot/","title":"_PathDot","text":"<p>[Source] <pre><code>primitive val _PathDot\n</code></pre></p>"},{"location":"files-_PathDot/#constructors","title":"Constructors","text":""},{"location":"files-_PathDot/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _PathDot val^\n</code></pre>"},{"location":"files-_PathDot/#returns","title":"Returns","text":"<ul> <li>_PathDot val^</li> </ul>"},{"location":"files-_PathDot/#public-functions","title":"Public Functions","text":""},{"location":"files-_PathDot/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _PathDot val)\n: Bool val\n</code></pre>"},{"location":"files-_PathDot/#parameters","title":"Parameters","text":"<ul> <li>that: _PathDot val</li> </ul>"},{"location":"files-_PathDot/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathDot/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _PathDot val)\n: Bool val\n</code></pre>"},{"location":"files-_PathDot/#parameters_1","title":"Parameters","text":"<ul> <li>that: _PathDot val</li> </ul>"},{"location":"files-_PathDot/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathDot2/","title":"_PathDot2","text":"<p>[Source] <pre><code>primitive val _PathDot2\n</code></pre></p>"},{"location":"files-_PathDot2/#constructors","title":"Constructors","text":""},{"location":"files-_PathDot2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _PathDot2 val^\n</code></pre>"},{"location":"files-_PathDot2/#returns","title":"Returns","text":"<ul> <li>_PathDot2 val^</li> </ul>"},{"location":"files-_PathDot2/#public-functions","title":"Public Functions","text":""},{"location":"files-_PathDot2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _PathDot2 val)\n: Bool val\n</code></pre>"},{"location":"files-_PathDot2/#parameters","title":"Parameters","text":"<ul> <li>that: _PathDot2 val</li> </ul>"},{"location":"files-_PathDot2/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathDot2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _PathDot2 val)\n: Bool val\n</code></pre>"},{"location":"files-_PathDot2/#parameters_1","title":"Parameters","text":"<ul> <li>that: _PathDot2 val</li> </ul>"},{"location":"files-_PathDot2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathOther/","title":"_PathOther","text":"<p>[Source] <pre><code>primitive val _PathOther\n</code></pre></p>"},{"location":"files-_PathOther/#constructors","title":"Constructors","text":""},{"location":"files-_PathOther/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _PathOther val^\n</code></pre>"},{"location":"files-_PathOther/#returns","title":"Returns","text":"<ul> <li>_PathOther val^</li> </ul>"},{"location":"files-_PathOther/#public-functions","title":"Public Functions","text":""},{"location":"files-_PathOther/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _PathOther val)\n: Bool val\n</code></pre>"},{"location":"files-_PathOther/#parameters","title":"Parameters","text":"<ul> <li>that: _PathOther val</li> </ul>"},{"location":"files-_PathOther/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathOther/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _PathOther val)\n: Bool val\n</code></pre>"},{"location":"files-_PathOther/#parameters_1","title":"Parameters","text":"<ul> <li>that: _PathOther val</li> </ul>"},{"location":"files-_PathOther/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathSep/","title":"_PathSep","text":"<p>[Source] <pre><code>primitive val _PathSep\n</code></pre></p>"},{"location":"files-_PathSep/#constructors","title":"Constructors","text":""},{"location":"files-_PathSep/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _PathSep val^\n</code></pre>"},{"location":"files-_PathSep/#returns","title":"Returns","text":"<ul> <li>_PathSep val^</li> </ul>"},{"location":"files-_PathSep/#public-functions","title":"Public Functions","text":""},{"location":"files-_PathSep/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _PathSep val)\n: Bool val\n</code></pre>"},{"location":"files-_PathSep/#parameters","title":"Parameters","text":"<ul> <li>that: _PathSep val</li> </ul>"},{"location":"files-_PathSep/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathSep/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _PathSep val)\n: Bool val\n</code></pre>"},{"location":"files-_PathSep/#parameters_1","title":"Parameters","text":"<ul> <li>that: _PathSep val</li> </ul>"},{"location":"files-_PathSep/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"files-_PathState/","title":"_PathState","text":"<p>[Source] <pre><code>type _PathState is\n(_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)\n</code></pre></p>"},{"location":"files-_PathState/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)</li> </ul>"},{"location":"files-_TestFileOpenWrite/","title":"_TestFileOpenWrite","text":"<p>[Source] <pre><code>class ref _TestFileOpenWrite is\nUnitTest ref\n</code></pre></p>"},{"location":"files-_TestFileOpenWrite/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"files-_TestFileOpenWrite/#constructors","title":"Constructors","text":""},{"location":"files-_TestFileOpenWrite/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _TestFileOpenWrite iso^\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#returns","title":"Returns","text":"<ul> <li>_TestFileOpenWrite iso^</li> </ul>"},{"location":"files-_TestFileOpenWrite/#public-functions","title":"Public Functions","text":""},{"location":"files-_TestFileOpenWrite/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"files-_TestFileOpenWrite/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"files-_TestFileOpenWrite/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"files-_TestFileOpenWrite/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"files-_TokenPrivileges/","title":"_TokenPrivileges","text":"<p>[Source] <pre><code>struct ref _TokenPrivileges\n</code></pre></p>"},{"location":"files-_TokenPrivileges/#constructors","title":"Constructors","text":""},{"location":"files-_TokenPrivileges/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _TokenPrivileges iso^\n</code></pre>"},{"location":"files-_TokenPrivileges/#returns","title":"Returns","text":"<ul> <li>_TokenPrivileges iso^</li> </ul>"},{"location":"files-_TokenPrivileges/#public-fields","title":"Public fields","text":""},{"location":"files-_TokenPrivileges/#var-privilege_count-u32-val","title":"var privilege_count: U32 val","text":"<p>[Source]</p>"},{"location":"files-_TokenPrivileges/#embed-privileges_0-_luidandattributes-ref","title":"embed privileges_0: _LuidAndAttributes ref","text":"<p>[Source]</p>"},{"location":"format--index/","title":"Format package","text":"<p>The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal).</p>"},{"location":"format--index/#example-program","title":"Example program","text":"<pre><code>use \"format\"\nactor Main\nfun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =&gt;\nFormat(desc where width = 10)\n+ \":\"\n+ Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\nnew create(env: Env) =&gt;\ntry\n(let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\nenv.out.print(disp(\"x\", x))\nenv.out.print(disp(\"y\", y))\nenv.out.print(disp(\"hex(x)\", x, FormatHex))\nenv.out.print(disp(\"hex(y)\", y, FormatHex))\nenv.out.print(disp(\"x * y\", x * y))\nelse\nlet exe = try env.args(0)? else \"fmt_example\" end\nenv.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\")\nend\n</code></pre>"},{"location":"format--index/#public-types","title":"Public Types","text":"<ul> <li>type Align</li> <li>primitive AlignCenter</li> <li>primitive AlignLeft</li> <li>primitive AlignRight</li> <li>primitive Format</li> <li>primitive FormatBinary</li> <li>primitive FormatBinaryBare</li> <li>primitive FormatDefault</li> <li>primitive FormatExp</li> <li>primitive FormatExpLarge</li> <li>primitive FormatFix</li> <li>primitive FormatFixLarge</li> <li>type FormatFloat</li> <li>primitive FormatGeneral</li> <li>primitive FormatGeneralLarge</li> <li>primitive FormatHex</li> <li>primitive FormatHexBare</li> <li>primitive FormatHexSmall</li> <li>primitive FormatHexSmallBare</li> <li>type FormatInt</li> <li>primitive FormatOctal</li> <li>primitive FormatOctalBare</li> <li>trait FormatSpec</li> <li>primitive FormatUTF32</li> <li>primitive PrefixDefault</li> <li>type PrefixNumber</li> <li>primitive PrefixSign</li> <li>primitive PrefixSpace</li> <li>trait PrefixSpec</li> </ul>"},{"location":"format--index/#private-types","title":"Private Types","text":"<ul> <li>primitive _FormatFloat</li> <li>primitive _FormatInt</li> </ul>"},{"location":"format-Align/","title":"Align","text":"<p>[Source] <pre><code>type Align is\n(AlignLeft val | AlignRight val | AlignCenter val)\n</code></pre></p>"},{"location":"format-Align/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(AlignLeft val | AlignRight val | AlignCenter val)</li> </ul>"},{"location":"format-AlignCenter/","title":"AlignCenter","text":"<p>[Source] <pre><code>primitive val AlignCenter\n</code></pre></p>"},{"location":"format-AlignCenter/#constructors","title":"Constructors","text":""},{"location":"format-AlignCenter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignCenter val^\n</code></pre>"},{"location":"format-AlignCenter/#returns","title":"Returns","text":"<ul> <li>AlignCenter val^</li> </ul>"},{"location":"format-AlignCenter/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignCenter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: AlignCenter val)\n: Bool val\n</code></pre>"},{"location":"format-AlignCenter/#parameters","title":"Parameters","text":"<ul> <li>that: AlignCenter val</li> </ul>"},{"location":"format-AlignCenter/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignCenter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: AlignCenter val)\n: Bool val\n</code></pre>"},{"location":"format-AlignCenter/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignCenter val</li> </ul>"},{"location":"format-AlignCenter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignLeft/","title":"AlignLeft","text":"<p>[Source] <pre><code>primitive val AlignLeft\n</code></pre></p>"},{"location":"format-AlignLeft/#constructors","title":"Constructors","text":""},{"location":"format-AlignLeft/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignLeft val^\n</code></pre>"},{"location":"format-AlignLeft/#returns","title":"Returns","text":"<ul> <li>AlignLeft val^</li> </ul>"},{"location":"format-AlignLeft/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignLeft/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: AlignLeft val)\n: Bool val\n</code></pre>"},{"location":"format-AlignLeft/#parameters","title":"Parameters","text":"<ul> <li>that: AlignLeft val</li> </ul>"},{"location":"format-AlignLeft/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignLeft/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: AlignLeft val)\n: Bool val\n</code></pre>"},{"location":"format-AlignLeft/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignLeft val</li> </ul>"},{"location":"format-AlignLeft/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignRight/","title":"AlignRight","text":"<p>[Source] <pre><code>primitive val AlignRight\n</code></pre></p>"},{"location":"format-AlignRight/#constructors","title":"Constructors","text":""},{"location":"format-AlignRight/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: AlignRight val^\n</code></pre>"},{"location":"format-AlignRight/#returns","title":"Returns","text":"<ul> <li>AlignRight val^</li> </ul>"},{"location":"format-AlignRight/#public-functions","title":"Public Functions","text":""},{"location":"format-AlignRight/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: AlignRight val)\n: Bool val\n</code></pre>"},{"location":"format-AlignRight/#parameters","title":"Parameters","text":"<ul> <li>that: AlignRight val</li> </ul>"},{"location":"format-AlignRight/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-AlignRight/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: AlignRight val)\n: Bool val\n</code></pre>"},{"location":"format-AlignRight/#parameters_1","title":"Parameters","text":"<ul> <li>that: AlignRight val</li> </ul>"},{"location":"format-AlignRight/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-Format/","title":"Format","text":"<p>[Source]</p> <p>Provides functions for generating formatted strings.</p> <ul> <li>fmt. Format to use.</li> <li>prefix. Prefix to use.</li> <li>prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used.</li> <li>width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough.</li> <li>align. Specify whether fill characters should be added at the beginning or end of the generated string, or both.</li> <li>fill. The character to pad a string with if is is shorter than width.</li> </ul> <pre><code>primitive val Format\n</code></pre>"},{"location":"format-Format/#constructors","title":"Constructors","text":""},{"location":"format-Format/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Format val^\n</code></pre>"},{"location":"format-Format/#returns","title":"Returns","text":"<ul> <li>Format val^</li> </ul>"},{"location":"format-Format/#public-functions","title":"Public Functions","text":""},{"location":"format-Format/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nstr: String val,\nfmt: FormatDefault val = reference,\nprefix: PrefixDefault val = reference,\nprec: USize val = call,\nwidth: USize val = 0,\nalign: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\nfill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters","title":"Parameters","text":"<ul> <li>str: String val</li> <li>fmt: FormatDefault val = reference</li> <li>prefix: PrefixDefault val = reference</li> <li>prec: USize val = call</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#inta-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integera","title":"int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]","text":"<p>[Source]</p> <pre><code>fun box int[A: ((I8 val | I16 val | I32 val | \nI64 val | I128 val | ILong val | \nISize val | U8 val | U16 val | \nU32 val | U64 val | U128 val | \nULong val | USize val) &amp; Integer[A])](\nx: A,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val) = reference,\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\nprec: USize val = call,\nwidth: USize val = 0,\nalign: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\nfill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters_1","title":"Parameters","text":"<ul> <li>x: A</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = call</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#floata-f32-val-f64-val-floatingpointa","title":"float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]","text":"<p>[Source]</p> <pre><code>fun box float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])](\nx: A,\nfmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \nFormatFix val | FormatFixLarge val | FormatGeneral val | \nFormatGeneralLarge val) = reference,\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\nprec: USize val = 6,\nwidth: USize val = 0,\nalign: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\nfill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-Format/#parameters_2","title":"Parameters","text":"<ul> <li>x: A</li> <li>fmt: (FormatDefault val | FormatExp val | FormatExpLarge val |      FormatFix val | FormatFixLarge val | FormatGeneral val |      FormatGeneralLarge val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = 6</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-Format/#returns_3","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-Format/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Format val)\n: Bool val\n</code></pre>"},{"location":"format-Format/#parameters_3","title":"Parameters","text":"<ul> <li>that: Format val</li> </ul>"},{"location":"format-Format/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-Format/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Format val)\n: Bool val\n</code></pre>"},{"location":"format-Format/#parameters_4","title":"Parameters","text":"<ul> <li>that: Format val</li> </ul>"},{"location":"format-Format/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinary/","title":"FormatBinary","text":"<p>[Source] <pre><code>primitive val FormatBinary is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatBinary/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatBinary/#constructors","title":"Constructors","text":""},{"location":"format-FormatBinary/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatBinary val^\n</code></pre>"},{"location":"format-FormatBinary/#returns","title":"Returns","text":"<ul> <li>FormatBinary val^</li> </ul>"},{"location":"format-FormatBinary/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatBinary/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatBinary val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinary/#parameters","title":"Parameters","text":"<ul> <li>that: FormatBinary val</li> </ul>"},{"location":"format-FormatBinary/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinary/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatBinary val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinary/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatBinary val</li> </ul>"},{"location":"format-FormatBinary/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinaryBare/","title":"FormatBinaryBare","text":"<p>[Source] <pre><code>primitive val FormatBinaryBare is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatBinaryBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatBinaryBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatBinaryBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatBinaryBare val^\n</code></pre>"},{"location":"format-FormatBinaryBare/#returns","title":"Returns","text":"<ul> <li>FormatBinaryBare val^</li> </ul>"},{"location":"format-FormatBinaryBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatBinaryBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatBinaryBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinaryBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatBinaryBare val</li> </ul>"},{"location":"format-FormatBinaryBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatBinaryBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatBinaryBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatBinaryBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatBinaryBare val</li> </ul>"},{"location":"format-FormatBinaryBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatDefault/","title":"FormatDefault","text":"<p>[Source] <pre><code>primitive val FormatDefault is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatDefault/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatDefault/#constructors","title":"Constructors","text":""},{"location":"format-FormatDefault/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatDefault val^\n</code></pre>"},{"location":"format-FormatDefault/#returns","title":"Returns","text":"<ul> <li>FormatDefault val^</li> </ul>"},{"location":"format-FormatDefault/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatDefault/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatDefault val)\n: Bool val\n</code></pre>"},{"location":"format-FormatDefault/#parameters","title":"Parameters","text":"<ul> <li>that: FormatDefault val</li> </ul>"},{"location":"format-FormatDefault/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatDefault/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatDefault val)\n: Bool val\n</code></pre>"},{"location":"format-FormatDefault/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatDefault val</li> </ul>"},{"location":"format-FormatDefault/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExp/","title":"FormatExp","text":"<p>[Source] <pre><code>primitive val FormatExp is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatExp/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatExp/#constructors","title":"Constructors","text":""},{"location":"format-FormatExp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatExp val^\n</code></pre>"},{"location":"format-FormatExp/#returns","title":"Returns","text":"<ul> <li>FormatExp val^</li> </ul>"},{"location":"format-FormatExp/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatExp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatExp val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExp/#parameters","title":"Parameters","text":"<ul> <li>that: FormatExp val</li> </ul>"},{"location":"format-FormatExp/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatExp val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExp/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatExp val</li> </ul>"},{"location":"format-FormatExp/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExpLarge/","title":"FormatExpLarge","text":"<p>[Source] <pre><code>primitive val FormatExpLarge is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatExpLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatExpLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatExpLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatExpLarge val^\n</code></pre>"},{"location":"format-FormatExpLarge/#returns","title":"Returns","text":"<ul> <li>FormatExpLarge val^</li> </ul>"},{"location":"format-FormatExpLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatExpLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatExpLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExpLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatExpLarge val</li> </ul>"},{"location":"format-FormatExpLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatExpLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatExpLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatExpLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatExpLarge val</li> </ul>"},{"location":"format-FormatExpLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFix/","title":"FormatFix","text":"<p>[Source] <pre><code>primitive val FormatFix is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatFix/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatFix/#constructors","title":"Constructors","text":""},{"location":"format-FormatFix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatFix val^\n</code></pre>"},{"location":"format-FormatFix/#returns","title":"Returns","text":"<ul> <li>FormatFix val^</li> </ul>"},{"location":"format-FormatFix/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatFix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatFix val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFix/#parameters","title":"Parameters","text":"<ul> <li>that: FormatFix val</li> </ul>"},{"location":"format-FormatFix/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatFix val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFix/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatFix val</li> </ul>"},{"location":"format-FormatFix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFixLarge/","title":"FormatFixLarge","text":"<p>[Source] <pre><code>primitive val FormatFixLarge is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatFixLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatFixLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatFixLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatFixLarge val^\n</code></pre>"},{"location":"format-FormatFixLarge/#returns","title":"Returns","text":"<ul> <li>FormatFixLarge val^</li> </ul>"},{"location":"format-FormatFixLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatFixLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatFixLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFixLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatFixLarge val</li> </ul>"},{"location":"format-FormatFixLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFixLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatFixLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatFixLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatFixLarge val</li> </ul>"},{"location":"format-FormatFixLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatFloat/","title":"FormatFloat","text":"<p>[Source] <pre><code>type FormatFloat is\n(FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)\n</code></pre></p>"},{"location":"format-FormatFloat/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)</li> </ul>"},{"location":"format-FormatGeneral/","title":"FormatGeneral","text":"<p>[Source] <pre><code>primitive val FormatGeneral is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatGeneral/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatGeneral/#constructors","title":"Constructors","text":""},{"location":"format-FormatGeneral/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatGeneral val^\n</code></pre>"},{"location":"format-FormatGeneral/#returns","title":"Returns","text":"<ul> <li>FormatGeneral val^</li> </ul>"},{"location":"format-FormatGeneral/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatGeneral/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatGeneral val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneral/#parameters","title":"Parameters","text":"<ul> <li>that: FormatGeneral val</li> </ul>"},{"location":"format-FormatGeneral/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneral/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatGeneral val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneral/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatGeneral val</li> </ul>"},{"location":"format-FormatGeneral/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneralLarge/","title":"FormatGeneralLarge","text":"<p>[Source] <pre><code>primitive val FormatGeneralLarge is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatGeneralLarge/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatGeneralLarge/#constructors","title":"Constructors","text":""},{"location":"format-FormatGeneralLarge/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatGeneralLarge val^\n</code></pre>"},{"location":"format-FormatGeneralLarge/#returns","title":"Returns","text":"<ul> <li>FormatGeneralLarge val^</li> </ul>"},{"location":"format-FormatGeneralLarge/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatGeneralLarge/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatGeneralLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneralLarge/#parameters","title":"Parameters","text":"<ul> <li>that: FormatGeneralLarge val</li> </ul>"},{"location":"format-FormatGeneralLarge/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatGeneralLarge/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatGeneralLarge val)\n: Bool val\n</code></pre>"},{"location":"format-FormatGeneralLarge/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatGeneralLarge val</li> </ul>"},{"location":"format-FormatGeneralLarge/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHex/","title":"FormatHex","text":"<p>[Source] <pre><code>primitive val FormatHex is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatHex/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHex/#constructors","title":"Constructors","text":""},{"location":"format-FormatHex/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHex val^\n</code></pre>"},{"location":"format-FormatHex/#returns","title":"Returns","text":"<ul> <li>FormatHex val^</li> </ul>"},{"location":"format-FormatHex/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHex/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatHex val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHex/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHex val</li> </ul>"},{"location":"format-FormatHex/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHex/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatHex val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHex/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHex val</li> </ul>"},{"location":"format-FormatHex/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexBare/","title":"FormatHexBare","text":"<p>[Source] <pre><code>primitive val FormatHexBare is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexBare val^\n</code></pre>"},{"location":"format-FormatHexBare/#returns","title":"Returns","text":"<ul> <li>FormatHexBare val^</li> </ul>"},{"location":"format-FormatHexBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatHexBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexBare val</li> </ul>"},{"location":"format-FormatHexBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatHexBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexBare val</li> </ul>"},{"location":"format-FormatHexBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmall/","title":"FormatHexSmall","text":"<p>[Source] <pre><code>primitive val FormatHexSmall is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexSmall/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexSmall/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexSmall/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexSmall val^\n</code></pre>"},{"location":"format-FormatHexSmall/#returns","title":"Returns","text":"<ul> <li>FormatHexSmall val^</li> </ul>"},{"location":"format-FormatHexSmall/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexSmall/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatHexSmall val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmall/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexSmall val</li> </ul>"},{"location":"format-FormatHexSmall/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmall/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatHexSmall val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmall/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexSmall val</li> </ul>"},{"location":"format-FormatHexSmall/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmallBare/","title":"FormatHexSmallBare","text":"<p>[Source] <pre><code>primitive val FormatHexSmallBare is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatHexSmallBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatHexSmallBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatHexSmallBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatHexSmallBare val^\n</code></pre>"},{"location":"format-FormatHexSmallBare/#returns","title":"Returns","text":"<ul> <li>FormatHexSmallBare val^</li> </ul>"},{"location":"format-FormatHexSmallBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatHexSmallBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatHexSmallBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmallBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatHexSmallBare val</li> </ul>"},{"location":"format-FormatHexSmallBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatHexSmallBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatHexSmallBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatHexSmallBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatHexSmallBare val</li> </ul>"},{"location":"format-FormatHexSmallBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatInt/","title":"FormatInt","text":"<p>[Source] <pre><code>type FormatInt is\n(FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)\n</code></pre></p>"},{"location":"format-FormatInt/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)</li> </ul>"},{"location":"format-FormatOctal/","title":"FormatOctal","text":"<p>[Source] <pre><code>primitive val FormatOctal is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatOctal/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatOctal/#constructors","title":"Constructors","text":""},{"location":"format-FormatOctal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatOctal val^\n</code></pre>"},{"location":"format-FormatOctal/#returns","title":"Returns","text":"<ul> <li>FormatOctal val^</li> </ul>"},{"location":"format-FormatOctal/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatOctal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatOctal val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctal/#parameters","title":"Parameters","text":"<ul> <li>that: FormatOctal val</li> </ul>"},{"location":"format-FormatOctal/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatOctal val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctal/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatOctal val</li> </ul>"},{"location":"format-FormatOctal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctalBare/","title":"FormatOctalBare","text":"<p>[Source] <pre><code>primitive val FormatOctalBare is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatOctalBare/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatOctalBare/#constructors","title":"Constructors","text":""},{"location":"format-FormatOctalBare/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatOctalBare val^\n</code></pre>"},{"location":"format-FormatOctalBare/#returns","title":"Returns","text":"<ul> <li>FormatOctalBare val^</li> </ul>"},{"location":"format-FormatOctalBare/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatOctalBare/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatOctalBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctalBare/#parameters","title":"Parameters","text":"<ul> <li>that: FormatOctalBare val</li> </ul>"},{"location":"format-FormatOctalBare/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatOctalBare/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatOctalBare val)\n: Bool val\n</code></pre>"},{"location":"format-FormatOctalBare/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatOctalBare val</li> </ul>"},{"location":"format-FormatOctalBare/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatSpec/","title":"FormatSpec","text":"<p>[Source] <pre><code>trait val FormatSpec\n</code></pre></p>"},{"location":"format-FormatUTF32/","title":"FormatUTF32","text":"<p>[Source] <pre><code>primitive val FormatUTF32 is\nFormatSpec val\n</code></pre></p>"},{"location":"format-FormatUTF32/#implements","title":"Implements","text":"<ul> <li>FormatSpec val</li> </ul>"},{"location":"format-FormatUTF32/#constructors","title":"Constructors","text":""},{"location":"format-FormatUTF32/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FormatUTF32 val^\n</code></pre>"},{"location":"format-FormatUTF32/#returns","title":"Returns","text":"<ul> <li>FormatUTF32 val^</li> </ul>"},{"location":"format-FormatUTF32/#public-functions","title":"Public Functions","text":""},{"location":"format-FormatUTF32/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FormatUTF32 val)\n: Bool val\n</code></pre>"},{"location":"format-FormatUTF32/#parameters","title":"Parameters","text":"<ul> <li>that: FormatUTF32 val</li> </ul>"},{"location":"format-FormatUTF32/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-FormatUTF32/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FormatUTF32 val)\n: Bool val\n</code></pre>"},{"location":"format-FormatUTF32/#parameters_1","title":"Parameters","text":"<ul> <li>that: FormatUTF32 val</li> </ul>"},{"location":"format-FormatUTF32/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixDefault/","title":"PrefixDefault","text":"<p>[Source] <pre><code>primitive val PrefixDefault is\nPrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixDefault/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixDefault/#constructors","title":"Constructors","text":""},{"location":"format-PrefixDefault/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixDefault val^\n</code></pre>"},{"location":"format-PrefixDefault/#returns","title":"Returns","text":"<ul> <li>PrefixDefault val^</li> </ul>"},{"location":"format-PrefixDefault/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixDefault/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PrefixDefault val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixDefault/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixDefault val</li> </ul>"},{"location":"format-PrefixDefault/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixDefault/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PrefixDefault val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixDefault/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixDefault val</li> </ul>"},{"location":"format-PrefixDefault/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixNumber/","title":"PrefixNumber","text":"<p>[Source] <pre><code>type PrefixNumber is\n(PrefixDefault val | PrefixSpace val | PrefixSign val)\n</code></pre></p>"},{"location":"format-PrefixNumber/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PrefixDefault val | PrefixSpace val | PrefixSign val)</li> </ul>"},{"location":"format-PrefixSign/","title":"PrefixSign","text":"<p>[Source] <pre><code>primitive val PrefixSign is\nPrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixSign/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixSign/#constructors","title":"Constructors","text":""},{"location":"format-PrefixSign/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixSign val^\n</code></pre>"},{"location":"format-PrefixSign/#returns","title":"Returns","text":"<ul> <li>PrefixSign val^</li> </ul>"},{"location":"format-PrefixSign/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixSign/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PrefixSign val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSign/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixSign val</li> </ul>"},{"location":"format-PrefixSign/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSign/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PrefixSign val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSign/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixSign val</li> </ul>"},{"location":"format-PrefixSign/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpace/","title":"PrefixSpace","text":"<p>[Source] <pre><code>primitive val PrefixSpace is\nPrefixSpec val\n</code></pre></p>"},{"location":"format-PrefixSpace/#implements","title":"Implements","text":"<ul> <li>PrefixSpec val</li> </ul>"},{"location":"format-PrefixSpace/#constructors","title":"Constructors","text":""},{"location":"format-PrefixSpace/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PrefixSpace val^\n</code></pre>"},{"location":"format-PrefixSpace/#returns","title":"Returns","text":"<ul> <li>PrefixSpace val^</li> </ul>"},{"location":"format-PrefixSpace/#public-functions","title":"Public Functions","text":""},{"location":"format-PrefixSpace/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PrefixSpace val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSpace/#parameters","title":"Parameters","text":"<ul> <li>that: PrefixSpace val</li> </ul>"},{"location":"format-PrefixSpace/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpace/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PrefixSpace val)\n: Bool val\n</code></pre>"},{"location":"format-PrefixSpace/#parameters_1","title":"Parameters","text":"<ul> <li>that: PrefixSpace val</li> </ul>"},{"location":"format-PrefixSpace/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-PrefixSpec/","title":"PrefixSpec","text":"<p>[Source] <pre><code>trait val PrefixSpec\n</code></pre></p>"},{"location":"format-_FormatFloat/","title":"_FormatFloat","text":"<p>[Source]</p> <p>Worker type providing to string conversions for floats.</p> <pre><code>primitive val _FormatFloat\n</code></pre>"},{"location":"format-_FormatFloat/#constructors","title":"Constructors","text":""},{"location":"format-_FormatFloat/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _FormatFloat val^\n</code></pre>"},{"location":"format-_FormatFloat/#returns","title":"Returns","text":"<ul> <li>_FormatFloat val^</li> </ul>"},{"location":"format-_FormatFloat/#public-functions","title":"Public Functions","text":""},{"location":"format-_FormatFloat/#f64","title":"f64","text":"<p>[Source]</p> <pre><code>fun box f64(\nx: F64 val,\nfmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \nFormatFix val | FormatFixLarge val | FormatGeneral val | \nFormatGeneralLarge val) = reference,\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\nprec: USize val = 6,\nwidth: USize val = 0,\nalign: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\nfill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-_FormatFloat/#parameters","title":"Parameters","text":"<ul> <li>x: F64 val</li> <li>fmt: (FormatDefault val | FormatExp val | FormatExpLarge val |      FormatFix val | FormatFixLarge val | FormatGeneral val |      FormatGeneralLarge val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = 6</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-_FormatFloat/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatFloat/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _FormatFloat val)\n: Bool val\n</code></pre>"},{"location":"format-_FormatFloat/#parameters_1","title":"Parameters","text":"<ul> <li>that: _FormatFloat val</li> </ul>"},{"location":"format-_FormatFloat/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-_FormatFloat/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _FormatFloat val)\n: Bool val\n</code></pre>"},{"location":"format-_FormatFloat/#parameters_2","title":"Parameters","text":"<ul> <li>that: _FormatFloat val</li> </ul>"},{"location":"format-_FormatFloat/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-_FormatInt/","title":"_FormatInt","text":"<p>[Source]</p> <p>Worker type providing to string conversions for integers.</p> <pre><code>primitive val _FormatInt\n</code></pre>"},{"location":"format-_FormatInt/#constructors","title":"Constructors","text":""},{"location":"format-_FormatInt/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _FormatInt val^\n</code></pre>"},{"location":"format-_FormatInt/#returns","title":"Returns","text":"<ul> <li>_FormatInt val^</li> </ul>"},{"location":"format-_FormatInt/#public-functions","title":"Public Functions","text":""},{"location":"format-_FormatInt/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun box u8(\nx: U8 val,\nneg: Bool val,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val),\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\nprec: USize val,\nwidth: USize val,\nalign: (AlignLeft val | AlignRight val | AlignCenter val),\nfill: U32 val)\n: String iso^\n</code></pre>"},{"location":"format-_FormatInt/#parameters","title":"Parameters","text":"<ul> <li>x: U8 val</li> <li>neg: Bool val</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val)</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)</li> <li>prec: USize val</li> <li>width: USize val</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val)</li> <li>fill: U32 val</li> </ul>"},{"location":"format-_FormatInt/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatInt/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun box u16(\nx: U16 val,\nneg: Bool val,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val),\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\nprec: USize val,\nwidth: USize val,\nalign: (AlignLeft val | AlignRight val | AlignCenter val),\nfill: U32 val)\n: String iso^\n</code></pre>"},{"location":"format-_FormatInt/#parameters_1","title":"Parameters","text":"<ul> <li>x: U16 val</li> <li>neg: Bool val</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val)</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)</li> <li>prec: USize val</li> <li>width: USize val</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val)</li> <li>fill: U32 val</li> </ul>"},{"location":"format-_FormatInt/#returns_2","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatInt/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun box u32(\nx: U32 val,\nneg: Bool val,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val),\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\nprec: USize val,\nwidth: USize val,\nalign: (AlignLeft val | AlignRight val | AlignCenter val),\nfill: U32 val)\n: String iso^\n</code></pre>"},{"location":"format-_FormatInt/#parameters_2","title":"Parameters","text":"<ul> <li>x: U32 val</li> <li>neg: Bool val</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val)</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)</li> <li>prec: USize val</li> <li>width: USize val</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val)</li> <li>fill: U32 val</li> </ul>"},{"location":"format-_FormatInt/#returns_3","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatInt/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun box u64(\nx: U64 val,\nneg: Bool val,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val),\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\nprec: USize val,\nwidth: USize val,\nalign: (AlignLeft val | AlignRight val | AlignCenter val),\nfill: U32 val)\n: String iso^\n</code></pre>"},{"location":"format-_FormatInt/#parameters_3","title":"Parameters","text":"<ul> <li>x: U64 val</li> <li>neg: Bool val</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val)</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)</li> <li>prec: USize val</li> <li>width: USize val</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val)</li> <li>fill: U32 val</li> </ul>"},{"location":"format-_FormatInt/#returns_4","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatInt/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun box u128(\nx: U128 val,\nneg: Bool val,\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val) = reference,\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference,\nprec: USize val = call,\nwidth: USize val = 0,\nalign: (AlignLeft val | AlignRight val | AlignCenter val) = reference,\nfill: U32 val = 32)\n: String iso^\n</code></pre>"},{"location":"format-_FormatInt/#parameters_4","title":"Parameters","text":"<ul> <li>x: U128 val</li> <li>neg: Bool val</li> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val) = reference</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference</li> <li>prec: USize val = call</li> <li>width: USize val = 0</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val) = reference</li> <li>fill: U32 val = 32</li> </ul>"},{"location":"format-_FormatInt/#returns_5","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"format-_FormatInt/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _FormatInt val)\n: Bool val\n</code></pre>"},{"location":"format-_FormatInt/#parameters_5","title":"Parameters","text":"<ul> <li>that: _FormatInt val</li> </ul>"},{"location":"format-_FormatInt/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-_FormatInt/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _FormatInt val)\n: Bool val\n</code></pre>"},{"location":"format-_FormatInt/#parameters_6","title":"Parameters","text":"<ul> <li>that: _FormatInt val</li> </ul>"},{"location":"format-_FormatInt/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"format-_FormatInt/#private-functions","title":"Private Functions","text":""},{"location":"format-_FormatInt/#_large","title":"_large","text":"<p>[Source]</p> <pre><code>fun box _large()\n: String val\n</code></pre>"},{"location":"format-_FormatInt/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"format-_FormatInt/#_small","title":"_small","text":"<p>[Source]</p> <pre><code>fun box _small()\n: String val\n</code></pre>"},{"location":"format-_FormatInt/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"format-_FormatInt/#_fmt_int","title":"_fmt_int","text":"<p>[Source]</p> <pre><code>fun box _fmt_int(\nfmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \nFormatBinaryBare val | FormatOctal val | FormatOctalBare val | \nFormatHex val | FormatHexBare val | FormatHexSmall val | \nFormatHexSmallBare val))\n: (U32 val , String val , String val)\n</code></pre>"},{"location":"format-_FormatInt/#parameters_7","title":"Parameters","text":"<ul> <li>fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val |      FormatBinaryBare val | FormatOctal val | FormatOctalBare val |      FormatHex val | FormatHexBare val | FormatHexSmall val |      FormatHexSmallBare val)</li> </ul>"},{"location":"format-_FormatInt/#returns_10","title":"Returns","text":"<ul> <li>(U32 val , String val , String val)</li> </ul>"},{"location":"format-_FormatInt/#_prefix","title":"_prefix","text":"<p>[Source]</p> <pre><code>fun box _prefix(\nneg: Bool val,\nprefix: (PrefixDefault val | PrefixSpace val | PrefixSign val))\n: String val\n</code></pre>"},{"location":"format-_FormatInt/#parameters_8","title":"Parameters","text":"<ul> <li>neg: Bool val</li> <li>prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)</li> </ul>"},{"location":"format-_FormatInt/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"format-_FormatInt/#_extend_digits","title":"_extend_digits","text":"<p>[Source]</p> <pre><code>fun box _extend_digits(\ns: String ref,\ndigits: USize val)\n: None val\n</code></pre>"},{"location":"format-_FormatInt/#parameters_9","title":"Parameters","text":"<ul> <li>s: String ref</li> <li>digits: USize val</li> </ul>"},{"location":"format-_FormatInt/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"format-_FormatInt/#_pad","title":"_pad","text":"<p>[Source]</p> <pre><code>fun box _pad(\ns: String ref,\nwidth: USize val,\nalign: (AlignLeft val | AlignRight val | AlignCenter val),\nfill: U32 val)\n: None val\n</code></pre>"},{"location":"format-_FormatInt/#parameters_10","title":"Parameters","text":"<ul> <li>s: String ref</li> <li>width: USize val</li> <li>align: (AlignLeft val | AlignRight val | AlignCenter val)</li> <li>fill: U32 val</li> </ul>"},{"location":"format-_FormatInt/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"ini--index/","title":"Ini package","text":"<p>The Ini package provides support for parsing INI file formatted text.</p> <ul> <li>Currently does not support multi-line entries.</li> <li>Any keys not in a section will be placed in the section \"\"</li> </ul>"},{"location":"ini--index/#example-code","title":"Example code","text":"<pre><code>// Parses the file 'example.ini' in the current working directory\n// Output all the content\nuse \"ini\"\nuse \"files\"\nactor Main\nnew create(env:Env) =&gt;\ntry\nlet ini_file = File(FilePath(FileAuth(env.root), \"example.ini\"))\nlet sections = IniParse(ini_file.lines())?\nfor section in sections.keys() do\nenv.out.print(\"Section name is: \" + section)\nfor key in sections(section)?.keys() do\nenv.out.print(key + \" = \" + sections(section)?(key)?)\nend\nend\nend\n</code></pre>"},{"location":"ini--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Ini</li> <li>type IniError</li> <li>primitive IniIncompleteSection</li> <li>type IniMap</li> <li>primitive IniNoDelimiter</li> <li>interface IniNotify</li> <li>primitive IniParse</li> </ul>"},{"location":"ini-Ini/","title":"Ini","text":"<p>[Source]</p> <p>A streaming parser for INI formatted lines of test.</p> <pre><code>primitive val Ini\n</code></pre>"},{"location":"ini-Ini/#constructors","title":"Constructors","text":""},{"location":"ini-Ini/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Ini val^\n</code></pre>"},{"location":"ini-Ini/#returns","title":"Returns","text":"<ul> <li>Ini val^</li> </ul>"},{"location":"ini-Ini/#public-functions","title":"Public Functions","text":""},{"location":"ini-Ini/#apply","title":"apply","text":"<p>[Source]</p> <p>This accepts a string iterator and calls the IniNotify for each new entry. If any errors are encountered, this will return false. Otherwise, it returns true.</p> <pre><code>fun box apply(\nlines: Iterator[String box] ref,\nf: IniNotify ref)\n: Bool val\n</code></pre>"},{"location":"ini-Ini/#parameters","title":"Parameters","text":"<ul> <li>lines: Iterator[String box] ref</li> <li>f: IniNotify ref</li> </ul>"},{"location":"ini-Ini/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-Ini/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Ini val)\n: Bool val\n</code></pre>"},{"location":"ini-Ini/#parameters_1","title":"Parameters","text":"<ul> <li>that: Ini val</li> </ul>"},{"location":"ini-Ini/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-Ini/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Ini val)\n: Bool val\n</code></pre>"},{"location":"ini-Ini/#parameters_2","title":"Parameters","text":"<ul> <li>that: Ini val</li> </ul>"},{"location":"ini-Ini/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniError/","title":"IniError","text":"<p>[Source] <pre><code>type IniError is\n(IniIncompleteSection val | IniNoDelimiter val)\n</code></pre></p>"},{"location":"ini-IniError/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(IniIncompleteSection val | IniNoDelimiter val)</li> </ul>"},{"location":"ini-IniIncompleteSection/","title":"IniIncompleteSection","text":"<p>[Source] <pre><code>primitive val IniIncompleteSection\n</code></pre></p>"},{"location":"ini-IniIncompleteSection/#constructors","title":"Constructors","text":""},{"location":"ini-IniIncompleteSection/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniIncompleteSection val^\n</code></pre>"},{"location":"ini-IniIncompleteSection/#returns","title":"Returns","text":"<ul> <li>IniIncompleteSection val^</li> </ul>"},{"location":"ini-IniIncompleteSection/#public-functions","title":"Public Functions","text":""},{"location":"ini-IniIncompleteSection/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniIncompleteSection val)\n: Bool val\n</code></pre>"},{"location":"ini-IniIncompleteSection/#parameters","title":"Parameters","text":"<ul> <li>that: IniIncompleteSection val</li> </ul>"},{"location":"ini-IniIncompleteSection/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniIncompleteSection/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniIncompleteSection val)\n: Bool val\n</code></pre>"},{"location":"ini-IniIncompleteSection/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniIncompleteSection val</li> </ul>"},{"location":"ini-IniIncompleteSection/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniMap/","title":"IniMap","text":"<p>[Source] <pre><code>type IniMap is\nHashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref\n</code></pre></p>"},{"location":"ini-IniMap/#type-alias-for","title":"Type Alias For","text":"<ul> <li>HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref</li> </ul>"},{"location":"ini-IniNoDelimiter/","title":"IniNoDelimiter","text":"<p>[Source] <pre><code>primitive val IniNoDelimiter\n</code></pre></p>"},{"location":"ini-IniNoDelimiter/#constructors","title":"Constructors","text":""},{"location":"ini-IniNoDelimiter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniNoDelimiter val^\n</code></pre>"},{"location":"ini-IniNoDelimiter/#returns","title":"Returns","text":"<ul> <li>IniNoDelimiter val^</li> </ul>"},{"location":"ini-IniNoDelimiter/#public-functions","title":"Public Functions","text":""},{"location":"ini-IniNoDelimiter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniNoDelimiter val)\n: Bool val\n</code></pre>"},{"location":"ini-IniNoDelimiter/#parameters","title":"Parameters","text":"<ul> <li>that: IniNoDelimiter val</li> </ul>"},{"location":"ini-IniNoDelimiter/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniNoDelimiter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniNoDelimiter val)\n: Bool val\n</code></pre>"},{"location":"ini-IniNoDelimiter/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniNoDelimiter val</li> </ul>"},{"location":"ini-IniNoDelimiter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniNotify/","title":"IniNotify","text":"<p>[Source]</p> <p>Notifications for INI parsing.</p> <pre><code>interface ref IniNotify\n</code></pre>"},{"location":"ini-IniNotify/#public-functions","title":"Public Functions","text":""},{"location":"ini-IniNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>This is called for every valid entry in the INI file. If key/value pairs occur before a section name, the section can be an empty string. Return false to halt processing.</p> <pre><code>fun ref apply(\nsection: String val,\nkey: String val,\nvalue: String val)\n: Bool val\n</code></pre>"},{"location":"ini-IniNotify/#parameters","title":"Parameters","text":"<ul> <li>section: String val</li> <li>key: String val</li> <li>value: String val</li> </ul>"},{"location":"ini-IniNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniNotify/#add_section","title":"add_section","text":"<p>[Source]</p> <p>This is called for every valid section in the INI file. Return false to halt processing.</p> <pre><code>fun ref add_section(\nsection: String val)\n: Bool val\n</code></pre>"},{"location":"ini-IniNotify/#parameters_1","title":"Parameters","text":"<ul> <li>section: String val</li> </ul>"},{"location":"ini-IniNotify/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniNotify/#errors","title":"errors","text":"<p>[Source]</p> <p>This is called for each error encountered. Return false to halt processing.</p> <pre><code>fun ref errors(\nline: USize val,\nerr: (IniIncompleteSection val | IniNoDelimiter val))\n: Bool val\n</code></pre>"},{"location":"ini-IniNotify/#parameters_2","title":"Parameters","text":"<ul> <li>line: USize val</li> <li>err: (IniIncompleteSection val | IniNoDelimiter val)</li> </ul>"},{"location":"ini-IniNotify/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniParse/","title":"IniParse","text":"<p>[Source]</p> <p>This is used to parse INI formatted text as a nested map of strings.</p> <pre><code>primitive val IniParse\n</code></pre>"},{"location":"ini-IniParse/#constructors","title":"Constructors","text":""},{"location":"ini-IniParse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniParse val^\n</code></pre>"},{"location":"ini-IniParse/#returns","title":"Returns","text":"<ul> <li>IniParse val^</li> </ul>"},{"location":"ini-IniParse/#public-functions","title":"Public Functions","text":""},{"location":"ini-IniParse/#apply","title":"apply","text":"<p>[Source]</p> <p>This accepts a string iterator and returns a nested map of strings. If parsing fails, an error is raised.</p> <pre><code>fun box apply(\nlines: Iterator[String val] ref)\n: HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?\n</code></pre>"},{"location":"ini-IniParse/#parameters","title":"Parameters","text":"<ul> <li>lines: Iterator[String val] ref</li> </ul>"},{"location":"ini-IniParse/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?</li> </ul>"},{"location":"ini-IniParse/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniParse val)\n: Bool val\n</code></pre>"},{"location":"ini-IniParse/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniParse val</li> </ul>"},{"location":"ini-IniParse/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"ini-IniParse/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniParse val)\n: Bool val\n</code></pre>"},{"location":"ini-IniParse/#parameters_2","title":"Parameters","text":"<ul> <li>that: IniParse val</li> </ul>"},{"location":"ini-IniParse/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt--index/","title":"Pony MQTT Client","text":"<p>A MQTT 3.1.1 client - currently part-way through release 0.1, supporting QoS 0/1/2 but  not yet implementing session restoration. </p> <p>If you haven't used Pony, this is the best starting point -&gt; Pony Tutorial</p>"},{"location":"mqtt--index/#release-objectives","title":"Release Objectives","text":""},{"location":"mqtt--index/#release-1","title":"Release .1","text":"<ol> <li>100% coverage of the protocol for happy path with expected i/o</li> <li>QoS 0, 1 &amp; 2 cleansession only - no message re-transmission after disconnect</li> <li>Wide use of guards, debug checks and error tracing</li> <li>Separate classes for each packet type so we don't miss any variations</li> <li>Consistent api to avoid programming errors while things stabiliise</li> <li>No hard split between library and application</li> <li>Simple ui for start/stop (Note - The ANSI terminal codes don't work on Windows)</li> </ol>"},{"location":"mqtt--index/#release-2","title":"Release .2","text":"<ol> <li>Consider edge cases and errors</li> <li>Split code into library and application</li> <li>Add session restoration </li> <li>Consolidate similar classes into factory classes</li> <li>Optimise the api (public: simple, private: efficient)  </li> <li>Remove unnecessary intermediate variable, guards and debug checks</li> <li>Simple text terminal for testing</li> </ol>"},{"location":"mqtt--index/#release-3","title":"Release .3","text":"<ol> <li>Performance  </li> <li>Load and memory usage  </li> <li>Optimise</li> <li>Build as library</li> <li>Add a simple demo app</li> </ol>"},{"location":"mqtt--index/#architecture","title":"Architecture","text":"<p>The architecture of the R.1 is highly decomposed: 1  to help understanding how the protocol works 2  to facilitate perf testing each component later</p> <p>This is probably not the most effective approach for performance so expect to see components  being consolidated later. The main purpose of each of the packages (in order of typical programe flow) is as follows.</p>"},{"location":"mqtt--index/#main","title":"Main","text":"<p>Uses a configurator actor to reads the configuration from config.ini. Passes the config to  the other actors it creates and then starts the terminal handler. Actors are stored in a  Registrar so then can be disposed later - when main's onExit behaviour is called.</p>"},{"location":"mqtt--index/#network","title":"Network","text":"<p>Connects to the server in the config.ini file (or localhost:1883 a default). Creates a Client as a callback for events.</p>"},{"location":"mqtt--index/#client","title":"Client","text":"<p>The TCP class that tells Router when the network is connected (not the MQTT broker yet, just the TCP connection). The Client received method is called when data is available and send this data to Assembler.</p>"},{"location":"mqtt--index/#assembler","title":"Assembler","text":"<p>TCP knows nothing of MQTT messages so we may receive multiple MQTT messages in a TCP packet, or fractions of a message, or any combination thereof. Assembler is responsible for assembling valid MQTT messages from these TCP packets. If you were expecting sections of the code to be written in assembler, I am sorry to disappoint...</p>"},{"location":"mqtt--index/#router","title":"Router","text":"<p>The hub of the library - carries out minimal interpretation of the incomming message and send it to the appropriate handlers. Keeps track of the incomming and outgoing message ids as acks are only tied to messages by id.</p>"},{"location":"mqtt--index/#public-types","title":"Public Types","text":"<ul> <li>class Client</li> <li>actor Main</li> </ul>"},{"location":"mqtt-Client/","title":"Client","text":"<p>[Source]</p> <p>This class manages the TCP level connection and any set-up or tear-down necessary on network connection and  disconnection. It doesn't get involved in Broker level connections.</p> <p>Assume that the TCP buffers returned by received() are of arbitrary size and may have: 1. One or more MQTT packets 2. A trailing fragment of an MQTT packet  3. Both of the above</p> <p>Client constructs the Router with the config details from main and then adds the router to the registrar. Once Client gets an established TCP connection Router is passed this in its OnTcpConnect behaviour. Router can then start the Broker connection process. This is a bit of a long way around but we need to be sure  we don't generate any incomming messages before the connection is available. </p> <p>Assembler is constructed and passed the tag of the router so that it knows where to send the  assembled packets. Assembler is not added to registrar because only client needs to access it.</p> <p>Otherwise, the client contains the callbacks called by TCPConnection when the connection state changes.</p> <pre><code>class ref Client is\nTCPConnectionNotify ref\n</code></pre>"},{"location":"mqtt-Client/#implements","title":"Implements","text":"<ul> <li>TCPConnectionNotify ref</li> </ul>"},{"location":"mqtt-Client/#constructors","title":"Constructors","text":""},{"location":"mqtt-Client/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nenv: Env val,\nrouter: Router tag)\n: Client iso^\n</code></pre>"},{"location":"mqtt-Client/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>router: Router tag</li> </ul>"},{"location":"mqtt-Client/#returns","title":"Returns","text":"<ul> <li>Client iso^</li> </ul>"},{"location":"mqtt-Client/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-Client/#connecting","title":"connecting","text":"<p>[Source]</p> <pre><code>fun ref connecting(\nconn: TCPConnection ref,\ncount: U32 val)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_1","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>count: U32 val</li> </ul>"},{"location":"mqtt-Client/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#accepted","title":"accepted","text":"<p>[Source]</p> <pre><code>fun ref accepted(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_2","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>fun ref connected(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_3","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#received","title":"received","text":"<p>[Source]</p> <pre><code>fun ref received(\nconn: TCPConnection ref,\ndata: Array[U8 val] iso,\ntimes: USize val)\n: Bool val\n</code></pre>"},{"location":"mqtt-Client/#parameters_4","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: Array[U8 val] iso</li> <li>times: USize val</li> </ul>"},{"location":"mqtt-Client/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-Client/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>fun ref connect_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_5","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>fun ref closed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_6","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#proxy_via","title":"proxy_via","text":"<pre><code>fun ref proxy_via(\nhost: String val,\nservice: String val)\n: (String val , String val)\n</code></pre>"},{"location":"mqtt-Client/#parameters_7","title":"Parameters","text":"<ul> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"mqtt-Client/#returns_7","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"mqtt-Client/#auth_failed","title":"auth_failed","text":"<pre><code>fun ref auth_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_8","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#sent","title":"sent","text":"<pre><code>fun ref sent(\nconn: TCPConnection ref,\ndata: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-Client/#parameters_9","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"mqtt-Client/#returns_9","title":"Returns","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"mqtt-Client/#sentv","title":"sentv","text":"<pre><code>fun ref sentv(\nconn: TCPConnection ref,\ndata: ByteSeqIter val)\n: ByteSeqIter val\n</code></pre>"},{"location":"mqtt-Client/#parameters_10","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: ByteSeqIter val</li> </ul>"},{"location":"mqtt-Client/#returns_10","title":"Returns","text":"<ul> <li>ByteSeqIter val</li> </ul>"},{"location":"mqtt-Client/#expect","title":"expect","text":"<pre><code>fun ref expect(\nconn: TCPConnection ref,\nqty: USize val)\n: USize val\n</code></pre>"},{"location":"mqtt-Client/#parameters_11","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>qty: USize val</li> </ul>"},{"location":"mqtt-Client/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-Client/#throttled","title":"throttled","text":"<pre><code>fun ref throttled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_12","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Client/#unthrottled","title":"unthrottled","text":"<pre><code>fun ref unthrottled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-Client/#parameters_13","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-Client/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main\n</code></pre></p>"},{"location":"mqtt-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-Main/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-Main/#onexit","title":"onExit","text":"<p>[Source]</p> <p>Only called when we are exiting the program and all of the actors need to be cleanly terminated</p> <pre><code>be onExit(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-Main/#parameters_1","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-Main/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-Main/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-Main/#_cleanup","title":"_cleanup","text":"<p>[Source]</p> <pre><code>fun ref _cleanup()\n: None val\n</code></pre>"},{"location":"mqtt-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-assembler--index/","title":"Package","text":"<p>Assembler accepts an array of bytes of arbitrary length received from the TCP buffer. It assembles these into MQTT packets, wraps them in the BasePacket class and passes them on to the router. Incomming TCP buffers may contain: 1.  one or more complete MQTT packets or 2.  one or more complete MQTT packets followed by a partial packet  3.  the trailing end of a packet, followed by zero or more complete or partial packets</p> <p>The only guarantee we assume is that the first buffer of data starts with the fixed header of a valid MQTT packet</p>"},{"location":"mqtt-assembler--index/#public-types","title":"Public Types","text":"<ul> <li>actor Assembler</li> <li>type Stream</li> </ul>"},{"location":"mqtt-assembler-Assembler/","title":"Assembler","text":"<p>[Source]</p> <p>We're using a ring buffer for packet assembly because: - it implies copying on and copying off individual bytes - packets would need to be assembled by appending every byte individually - the value of the RL bytes would need to be either calculated on the fly (which is complex  for an inner loop and would mean we have RL calculations in two places) or would mean composing a five byte array to send to the primitive (more copying)  - the split/chop approach provides a fast path for the 99.9?% of packets that arrive  single and complete TODO - Benchmark the two approaches  the performance release (maybe)  Assembler should be the only actor that needs to deal with raw Array[U8],  other than when router extracts the data in its send behaviour.</p> <pre><code>actor tag Assembler\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#constructors","title":"Constructors","text":""},{"location":"mqtt-assembler-Assembler/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag)\n: Assembler tag^\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> </ul>"},{"location":"mqtt-assembler-Assembler/#returns","title":"Returns","text":"<ul> <li>Assembler tag^</li> </ul>"},{"location":"mqtt-assembler-Assembler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-assembler-Assembler/#assemble","title":"assemble","text":"<p>[Source]</p> <p>We need to handle the case where we receive only the first byte of the packet OR where we don't have enough data to calculate the packet length. If byte n has bit 7 set then byte n+1 is also a remaining length byte so the minimum  viable fixed header is control byte + bytes until we get to a byte with bit 7 == 0</p> <pre><code>be assemble(\ninput: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters_1","title":"Parameters","text":"<ul> <li>input: Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Assembler/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-assembler-Assembler/#split","title":"split","text":"<p>[Source]</p> <pre><code>fun ref split(\ninput: Array[U8 val] val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters_2","title":"Parameters","text":"<ul> <li>input: Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Assembler/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Stream/","title":"Stream","text":"<p>[Source] <pre><code>type Stream is\nArray[Array[U8 val] val] ref\n</code></pre></p>"},{"location":"mqtt-assembler-Stream/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Array[Array[U8 val] val] ref</li> </ul>"},{"location":"mqtt-configurator--index/","title":"Package","text":"<p>No package doc string provided for mqtt/configurator.</p>"},{"location":"mqtt-configurator--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ConfigFile</li> <li>primitive DefaultBroker</li> <li>primitive FullConfig</li> <li>primitive FullConfigFile</li> <li>primitive FullConfigParams</li> <li>primitive FullSubs</li> <li>primitive IniAddress</li> <li>primitive IniCleansession</li> <li>primitive IniId</li> <li>primitive IniKeepalive</li> <li>primitive IniMessage</li> <li>primitive IniName</li> <li>primitive IniPassword</li> <li>primitive IniPort</li> <li>primitive IniQos</li> <li>class IniReader</li> <li>primitive IniSectionBroker</li> <li>primitive IniSectionClient</li> <li>primitive IniSectionCredentials</li> <li>primitive IniSectionSubscriptions</li> <li>primitive IniSectionWill</li> <li>primitive IniTopic</li> <li>primitive IsValidQos</li> <li>actor Main</li> <li>primitive MinConfig</li> <li>primitive MinConfigFile</li> <li>primitive MinConfigParams</li> <li>primitive MiniSubs</li> <li>class MqttConfig</li> <li>primitive QosPrefix</li> <li>primitive SupportedQos</li> </ul>"},{"location":"mqtt-configurator--index/#private-types","title":"Private Types","text":"<ul> <li>class _ArgsFull</li> <li>class _ArgsMini</li> <li>class _BadFile</li> <li>class _OKFull</li> <li>class _OKMini</li> <li>class _SubsFull</li> <li>class _SubsMini</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/","title":"ConfigFile","text":"<p>[Source] <pre><code>primitive val ConfigFile\n</code></pre></p>"},{"location":"mqtt-configurator-ConfigFile/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-ConfigFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConfigFile val^\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#returns","title":"Returns","text":"<ul> <li>ConfigFile val^</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-ConfigFile/#apply","title":"apply","text":"<p>[Source]</p> <p>The name of the config file - currently assumed to be in the main source directory</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#parameters","title":"Parameters","text":"<ul> <li>that: ConfigFile val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConfigFile val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/","title":"DefaultBroker","text":"<p>[Source] <pre><code>primitive val DefaultBroker\n</code></pre></p>"},{"location":"mqtt-configurator-DefaultBroker/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-DefaultBroker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DefaultBroker val^\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#returns","title":"Returns","text":"<ul> <li>DefaultBroker val^</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-DefaultBroker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DefaultBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#parameters","title":"Parameters","text":"<ul> <li>that: DefaultBroker val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DefaultBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#parameters_1","title":"Parameters","text":"<ul> <li>that: DefaultBroker val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfig/","title":"FullConfig","text":"<p>[Source] <pre><code>primitive val FullConfig\n</code></pre></p>"},{"location":"mqtt-configurator-FullConfig/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-FullConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FullConfig val^\n</code></pre>"},{"location":"mqtt-configurator-FullConfig/#returns","title":"Returns","text":"<ul> <li>FullConfig val^</li> </ul>"},{"location":"mqtt-configurator-FullConfig/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-FullConfig/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-FullConfig/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-FullConfig/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FullConfig val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfig/#parameters","title":"Parameters","text":"<ul> <li>that: FullConfig val</li> </ul>"},{"location":"mqtt-configurator-FullConfig/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfig/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FullConfig val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfig/#parameters_1","title":"Parameters","text":"<ul> <li>that: FullConfig val</li> </ul>"},{"location":"mqtt-configurator-FullConfig/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/","title":"FullConfigFile","text":"<p>[Source] <pre><code>primitive val FullConfigFile\n</code></pre></p>"},{"location":"mqtt-configurator-FullConfigFile/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-FullConfigFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FullConfigFile val^\n</code></pre>"},{"location":"mqtt-configurator-FullConfigFile/#returns","title":"Returns","text":"<ul> <li>FullConfigFile val^</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-FullConfigFile/#apply","title":"apply","text":"<p>[Source]</p> <p>The name of the full configuration ini file in this directory</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FullConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigFile/#parameters","title":"Parameters","text":"<ul> <li>that: FullConfigFile val</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FullConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: FullConfigFile val</li> </ul>"},{"location":"mqtt-configurator-FullConfigFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/","title":"FullConfigParams","text":"<p>[Source] <pre><code>primitive val FullConfigParams\n</code></pre></p>"},{"location":"mqtt-configurator-FullConfigParams/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-FullConfigParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FullConfigParams val^\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#returns","title":"Returns","text":"<ul> <li>FullConfigParams val^</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-FullConfigParams/#apply","title":"apply","text":"<p>[Source]</p> <p>Add strings to this literal array to read them from an ini file. Any strings  added here which are not represented as non-zero length strings in the ini file will cause the overall ini read to fail (by design).</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FullConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#parameters","title":"Parameters","text":"<ul> <li>that: FullConfigParams val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FullConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: FullConfigParams val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullSubs/","title":"FullSubs","text":"<p>[Source] <pre><code>primitive val FullSubs\n</code></pre></p>"},{"location":"mqtt-configurator-FullSubs/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-FullSubs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FullSubs val^\n</code></pre>"},{"location":"mqtt-configurator-FullSubs/#returns","title":"Returns","text":"<ul> <li>FullSubs val^</li> </ul>"},{"location":"mqtt-configurator-FullSubs/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-FullSubs/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-FullSubs/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-FullSubs/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FullSubs val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullSubs/#parameters","title":"Parameters","text":"<ul> <li>that: FullSubs val</li> </ul>"},{"location":"mqtt-configurator-FullSubs/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullSubs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FullSubs val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullSubs/#parameters_1","title":"Parameters","text":"<ul> <li>that: FullSubs val</li> </ul>"},{"location":"mqtt-configurator-FullSubs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/","title":"IniAddress","text":"<p>[Source] <pre><code>primitive val IniAddress\n</code></pre></p>"},{"location":"mqtt-configurator-IniAddress/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniAddress/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniAddress val^\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#returns","title":"Returns","text":"<ul> <li>IniAddress val^</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniAddress/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniAddress val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#parameters","title":"Parameters","text":"<ul> <li>that: IniAddress val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniAddress val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniAddress val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/","title":"IniCleansession","text":"<p>[Source] <pre><code>primitive val IniCleansession\n</code></pre></p>"},{"location":"mqtt-configurator-IniCleansession/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniCleansession/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniCleansession val^\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#returns","title":"Returns","text":"<ul> <li>IniCleansession val^</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniCleansession/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniCleansession val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#parameters","title":"Parameters","text":"<ul> <li>that: IniCleansession val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniCleansession val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniCleansession val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniId/","title":"IniId","text":"<p>[Source] <pre><code>primitive val IniId\n</code></pre></p>"},{"location":"mqtt-configurator-IniId/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniId/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniId val^\n</code></pre>"},{"location":"mqtt-configurator-IniId/#returns","title":"Returns","text":"<ul> <li>IniId val^</li> </ul>"},{"location":"mqtt-configurator-IniId/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniId/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniId/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniId val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#parameters","title":"Parameters","text":"<ul> <li>that: IniId val</li> </ul>"},{"location":"mqtt-configurator-IniId/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniId/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniId val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniId val</li> </ul>"},{"location":"mqtt-configurator-IniId/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/","title":"IniKeepalive","text":"<p>[Source] <pre><code>primitive val IniKeepalive\n</code></pre></p>"},{"location":"mqtt-configurator-IniKeepalive/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniKeepalive/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniKeepalive val^\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#returns","title":"Returns","text":"<ul> <li>IniKeepalive val^</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniKeepalive/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniKeepalive val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#parameters","title":"Parameters","text":"<ul> <li>that: IniKeepalive val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniKeepalive val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniKeepalive val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/","title":"IniMessage","text":"<p>[Source] <pre><code>primitive val IniMessage\n</code></pre></p>"},{"location":"mqtt-configurator-IniMessage/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniMessage/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniMessage val^\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#returns","title":"Returns","text":"<ul> <li>IniMessage val^</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniMessage/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniMessage val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#parameters","title":"Parameters","text":"<ul> <li>that: IniMessage val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniMessage val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniMessage val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniName/","title":"IniName","text":"<p>[Source] <pre><code>primitive val IniName\n</code></pre></p>"},{"location":"mqtt-configurator-IniName/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniName/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniName val^\n</code></pre>"},{"location":"mqtt-configurator-IniName/#returns","title":"Returns","text":"<ul> <li>IniName val^</li> </ul>"},{"location":"mqtt-configurator-IniName/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniName/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniName/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#parameters","title":"Parameters","text":"<ul> <li>that: IniName val</li> </ul>"},{"location":"mqtt-configurator-IniName/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniName/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniName val</li> </ul>"},{"location":"mqtt-configurator-IniName/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/","title":"IniPassword","text":"<p>[Source] <pre><code>primitive val IniPassword\n</code></pre></p>"},{"location":"mqtt-configurator-IniPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniPassword val^\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#returns","title":"Returns","text":"<ul> <li>IniPassword val^</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#parameters","title":"Parameters","text":"<ul> <li>that: IniPassword val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniPassword val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPort/","title":"IniPort","text":"<p>[Source] <pre><code>primitive val IniPort\n</code></pre></p>"},{"location":"mqtt-configurator-IniPort/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniPort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniPort val^\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#returns","title":"Returns","text":"<ul> <li>IniPort val^</li> </ul>"},{"location":"mqtt-configurator-IniPort/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniPort/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniPort val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#parameters","title":"Parameters","text":"<ul> <li>that: IniPort val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniPort val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniPort val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniQos/","title":"IniQos","text":"<p>[Source] <pre><code>primitive val IniQos\n</code></pre></p>"},{"location":"mqtt-configurator-IniQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniQos val^\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#returns","title":"Returns","text":"<ul> <li>IniQos val^</li> </ul>"},{"location":"mqtt-configurator-IniQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#parameters","title":"Parameters","text":"<ul> <li>that: IniQos val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniQos val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/","title":"IniReader","text":"<p>[Source]</p> <p>Called once for each line in the .ini file. Currently written to terminate on the first error. Uses primitive SupportedQos to determine whether subscriptions are valild</p> <pre><code>class ref IniReader is\nIniNotify ref\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#implements","title":"Implements","text":"<ul> <li>IniNotify ref</li> </ul>"},{"location":"mqtt-configurator-IniReader/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniReader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nparams: Array[String val] val)\n: IniReader ref^\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters","title":"Parameters","text":"<ul> <li>params: Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns","title":"Returns","text":"<ul> <li>IniReader ref^</li> </ul>"},{"location":"mqtt-configurator-IniReader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniReader/#getconfig","title":"getConfig","text":"<p>[Source]</p> <p>Destructive read on new (unpopulated) map should return the old (populated) map but I can't get this to work, so resorting to copying</p> <pre><code>fun box getConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#getsubs","title":"getSubs","text":"<p>[Source]</p> <p>Destructive read on new (unpopulated) map should return the old (populated) map</p> <pre><code>fun box getSubs()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nsection: String val,\nkey: String val,\nvalue: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_1","title":"Parameters","text":"<ul> <li>section: String val</li> <li>key: String val</li> <li>value: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#add_section","title":"add_section","text":"<p>[Source]</p> <p>Part of the interface but we don't need it here</p> <pre><code>fun box add_section(\nsection: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_2","title":"Parameters","text":"<ul> <li>section: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#errors","title":"errors","text":"<p>[Source]</p> <p>This is called for each error encountered. Returns false to halt processing.</p> <pre><code>fun ref errors(\nline: USize val,\nerr: (IniIncompleteSection val | IniNoDelimiter val))\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_3","title":"Parameters","text":"<ul> <li>line: USize val</li> <li>err: (IniIncompleteSection val | IniNoDelimiter val)</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-configurator-IniReader/#_isvalidparam","title":"_isValidParam","text":"<p>[Source]</p> <p>The validator for parameters. Checks that the key is in our list of  key strings and that the value is a non-empty string</p> <pre><code>fun box _isValidParam(\np: String val,\nv: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_4","title":"Parameters","text":"<ul> <li>p: String val</li> <li>v: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#_isvalidsub","title":"_isValidSub","text":"<p>[Source]</p> <p>The subscription validator function that checks a topic of a topic: qos pair for a topic length of least one character (size in bytes so UTF-8 only) </p> <pre><code>fun ref _isValidSub(\nsub: String val,\nqos: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_5","title":"Parameters","text":"<ul> <li>sub: String val</li> <li>qos: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/","title":"IniSectionBroker","text":"<p>[Source] <pre><code>primitive val IniSectionBroker\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionBroker/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionBroker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionBroker val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#returns","title":"Returns","text":"<ul> <li>IniSectionBroker val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionBroker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionBroker val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionBroker val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/","title":"IniSectionClient","text":"<p>[Source] <pre><code>primitive val IniSectionClient\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionClient/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionClient/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionClient val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#returns","title":"Returns","text":"<ul> <li>IniSectionClient val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionClient/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionClient val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionClient val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionClient val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionClient val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/","title":"IniSectionCredentials","text":"<p>[Source] <pre><code>primitive val IniSectionCredentials\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionCredentials/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionCredentials/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionCredentials val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns","title":"Returns","text":"<ul> <li>IniSectionCredentials val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionCredentials/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionCredentials val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionCredentials val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionCredentials val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionCredentials val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/","title":"IniSectionSubscriptions","text":"<p>[Source] <pre><code>primitive val IniSectionSubscriptions\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionSubscriptions/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionSubscriptions val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns","title":"Returns","text":"<ul> <li>IniSectionSubscriptions val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionSubscriptions/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionSubscriptions val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionSubscriptions val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionSubscriptions val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionSubscriptions val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/","title":"IniSectionWill","text":"<p>[Source] <pre><code>primitive val IniSectionWill\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionWill/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionWill/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionWill val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#returns","title":"Returns","text":"<ul> <li>IniSectionWill val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionWill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionWill val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionWill val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/","title":"IniTopic","text":"<p>[Source] <pre><code>primitive val IniTopic\n</code></pre></p>"},{"location":"mqtt-configurator-IniTopic/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniTopic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniTopic val^\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#returns","title":"Returns","text":"<ul> <li>IniTopic val^</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniTopic/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#parameters","title":"Parameters","text":"<ul> <li>that: IniTopic val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniTopic val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/","title":"IsValidQos","text":"<p>[Source] <pre><code>primitive val IsValidQos\n</code></pre></p>"},{"location":"mqtt-configurator-IsValidQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IsValidQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsValidQos val^\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#returns","title":"Returns","text":"<ul> <li>IsValidQos val^</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IsValidQos/#apply","title":"apply","text":"<p>[Source]</p> <p>The subscription validator function that checks the qos field</p> <pre><code>fun box apply(\nqosString: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters","title":"Parameters","text":"<ul> <li>qosString: String val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsValidQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsValidQos val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsValidQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsValidQos val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-configurator-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-configurator-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-configurator-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-configurator-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-configurator-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-configurator-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-configurator-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-configurator-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-configurator-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-MinConfig/","title":"MinConfig","text":"<p>[Source] <pre><code>primitive val MinConfig\n</code></pre></p>"},{"location":"mqtt-configurator-MinConfig/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MinConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinConfig val^\n</code></pre>"},{"location":"mqtt-configurator-MinConfig/#returns","title":"Returns","text":"<ul> <li>MinConfig val^</li> </ul>"},{"location":"mqtt-configurator-MinConfig/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MinConfig/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MinConfig/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MinConfig/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MinConfig val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfig/#parameters","title":"Parameters","text":"<ul> <li>that: MinConfig val</li> </ul>"},{"location":"mqtt-configurator-MinConfig/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfig/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MinConfig val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfig/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinConfig val</li> </ul>"},{"location":"mqtt-configurator-MinConfig/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/","title":"MinConfigFile","text":"<p>[Source] <pre><code>primitive val MinConfigFile\n</code></pre></p>"},{"location":"mqtt-configurator-MinConfigFile/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MinConfigFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinConfigFile val^\n</code></pre>"},{"location":"mqtt-configurator-MinConfigFile/#returns","title":"Returns","text":"<ul> <li>MinConfigFile val^</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MinConfigFile/#apply","title":"apply","text":"<p>[Source]</p> <p>The name of the minimum configuration ini file in this directory</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MinConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigFile/#parameters","title":"Parameters","text":"<ul> <li>that: MinConfigFile val</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MinConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinConfigFile val</li> </ul>"},{"location":"mqtt-configurator-MinConfigFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/","title":"MinConfigParams","text":"<p>[Source] <pre><code>primitive val MinConfigParams\n</code></pre></p>"},{"location":"mqtt-configurator-MinConfigParams/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MinConfigParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinConfigParams val^\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#returns","title":"Returns","text":"<ul> <li>MinConfigParams val^</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MinConfigParams/#apply","title":"apply","text":"<p>[Source]</p> <p>Add strings to this literal array to read them from an ini file. Any strings  added here which are not represented as non-zero length strings in the ini file will cause the overall ini read to fail (by design).</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MinConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#parameters","title":"Parameters","text":"<ul> <li>that: MinConfigParams val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MinConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinConfigParams val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/","title":"MiniSubs","text":"<p>[Source] <pre><code>primitive val MiniSubs\n</code></pre></p>"},{"location":"mqtt-configurator-MiniSubs/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MiniSubs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MiniSubs val^\n</code></pre>"},{"location":"mqtt-configurator-MiniSubs/#returns","title":"Returns","text":"<ul> <li>MiniSubs val^</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MiniSubs/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MiniSubs/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MiniSubs val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MiniSubs/#parameters","title":"Parameters","text":"<ul> <li>that: MiniSubs val</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MiniSubs val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MiniSubs/#parameters_1","title":"Parameters","text":"<ul> <li>that: MiniSubs val</li> </ul>"},{"location":"mqtt-configurator-MiniSubs/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/","title":"MqttConfig","text":"<p>[Source]</p> <p>All we are doing here is reading from a config.ini file and compositing two maps of key value pairs.  The first is the set of MQTT configuraton values that are used to make the initial user connection to the Broker. The format of these is parameter = argument. The parameters considered valid are defined below in the _configParams array. If the params in the config file don't match these the read terminates. The second map is a set of topics and QoS values representing the subscriptions to be requested from the  Broker on connection. The format of these is topic = QoS. If any subscriptions are not valid they are simply ignored and the conenction proceeds with no initial subscriptions (unlike for parameter reads)</p> <pre><code>class ref MqttConfig\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MqttConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nfileName: String val,\nparams: Array[String val] val)\n: MqttConfig ref^\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>fileName: String val</li> <li>params: Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#returns","title":"Returns","text":"<ul> <li>MqttConfig ref^</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MqttConfig/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>The ini file is read when the class is constructed and the _configOK flag is set if all the parameters have been found and no invalid subscriptions are present. This method should be called before calling getConfig or getSubscriptions We do a belt and braces check for empty maps (if the file couldn't be opened for example)  and zero length params and then return the result of the read we did in the constructor.  </p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#getconfig","title":"getConfig","text":"<p>[Source]</p> <p>Returns a map of key value pairs or keys with zero length strings if there were any errors in the ini file</p> <pre><code>fun ref getConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#getsubscriptions","title":"getSubscriptions","text":"<p>[Source]</p> <p>Returns an empty (but valid) array if no subscriptions were present or if there was an error in the ini file</p> <pre><code>fun ref getSubscriptions()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_3","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#hassubscriptions","title":"hasSubscriptions","text":"<p>[Source]</p> <p>Convenience method that returns true is the ini file contained any initial  subscriptions </p> <pre><code>fun box hasSubscriptions()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#fileerror","title":"fileError","text":"<p>[Source]</p> <p>Converts file error codes to strings and sends to the debug printer is all</p> <pre><code>fun box fileError(\nerrNo: (FileOK val | FileError val | FileEOF val | \nFileBadFileNumber val | FileExists val | FilePermissionDenied val))\n: String val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#parameters_1","title":"Parameters","text":"<ul> <li>errNo: (FileOK val | FileError val | FileEOF val |      FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-configurator-MqttConfig/#_readconfig","title":"_readConfig","text":"<p>[Source]</p> <p>Read the config values from the ini file and return true if they are all  found and are all non-zero length strings</p> <pre><code>fun ref _readConfig()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/","title":"QosPrefix","text":"<p>[Source] <pre><code>primitive val QosPrefix\n</code></pre></p>"},{"location":"mqtt-configurator-QosPrefix/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-QosPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: QosPrefix val^\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#returns","title":"Returns","text":"<ul> <li>QosPrefix val^</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-QosPrefix/#apply","title":"apply","text":"<p>[Source]</p> <p>In case we decide to change the case later (or something)</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: QosPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#parameters","title":"Parameters","text":"<ul> <li>that: QosPrefix val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: QosPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: QosPrefix val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/","title":"SupportedQos","text":"<p>[Source] <pre><code>primitive val SupportedQos\n</code></pre></p>"},{"location":"mqtt-configurator-SupportedQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-SupportedQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SupportedQos val^\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#returns","title":"Returns","text":"<ul> <li>SupportedQos val^</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-SupportedQos/#apply","title":"apply","text":"<p>[Source]</p> <p>01</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SupportedQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#parameters","title":"Parameters","text":"<ul> <li>that: SupportedQos val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SupportedQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: SupportedQos val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/","title":"_ArgsFull","text":"<p>[Source] <pre><code>class iso _ArgsFull is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_ArgsFull/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_ArgsFull/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ArgsFull iso^\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#returns","title":"Returns","text":"<ul> <li>_ArgsFull iso^</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_ArgsFull/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsFull/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsFull/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/","title":"_ArgsMini","text":"<p>[Source] <pre><code>class iso _ArgsMini is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_ArgsMini/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_ArgsMini/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ArgsMini iso^\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#returns","title":"Returns","text":"<ul> <li>_ArgsMini iso^</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_ArgsMini/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_ArgsMini/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_ArgsMini/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/","title":"_BadFile","text":"<p>[Source] <pre><code>class iso _BadFile is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_BadFile/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_BadFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadFile iso^\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#returns","title":"Returns","text":"<ul> <li>_BadFile iso^</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_BadFile/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_BadFile/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_BadFile/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/","title":"_OKFull","text":"<p>[Source] <pre><code>class iso _OKFull is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_OKFull/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_OKFull/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _OKFull iso^\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#returns","title":"Returns","text":"<ul> <li>_OKFull iso^</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_OKFull/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKFull/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKFull/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/","title":"_OKMini","text":"<p>[Source] <pre><code>class iso _OKMini is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_OKMini/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_OKMini/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _OKMini iso^\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#returns","title":"Returns","text":"<ul> <li>_OKMini iso^</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_OKMini/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_OKMini/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_OKMini/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/","title":"_SubsFull","text":"<p>[Source] <pre><code>class iso _SubsFull is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_SubsFull/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_SubsFull/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _SubsFull iso^\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#returns","title":"Returns","text":"<ul> <li>_SubsFull iso^</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_SubsFull/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsFull/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsFull/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/","title":"_SubsMini","text":"<p>[Source] <pre><code>class iso _SubsMini is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-configurator-_SubsMini/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-_SubsMini/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _SubsMini iso^\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#returns","title":"Returns","text":"<ul> <li>_SubsMini iso^</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-_SubsMini/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-configurator-_SubsMini/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-_SubsMini/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector--index/","title":"Package","text":"<p>No package doc string provided for mqtt/connector.</p>"},{"location":"mqtt-connector--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ConnAckAccepted</li> <li>class ConnAckPacket</li> <li>primitive ConnAckRefusedBadUserNameOrPassword</li> <li>primitive ConnAckRefusedIdentifierRejected</li> <li>primitive ConnAckRefusedNotAuthorised</li> <li>primitive ConnAckRefusedProtocolVersion</li> <li>primitive ConnAckRefusedServerUnavailable</li> <li>type ConnAckReturnCode</li> <li>primitive ConnectClean</li> <li>type ConnectFlags</li> <li>class ConnectPacket</li> <li>primitive ConnectPassword</li> <li>primitive ConnectQMask</li> <li>primitive ConnectUserName</li> <li>primitive ConnectWQos0</li> <li>primitive ConnectWQos1</li> <li>primitive ConnectWQos2</li> <li>primitive ConnectWRetain</li> <li>primitive ConnectWill</li> <li>actor Connector</li> <li>primitive DefaultConnectFlags</li> <li>class DisconnectPacket</li> <li>actor Main</li> <li>primitive RejectionCode</li> <li>primitive RestoreConnectFlags</li> <li>class TestConfig</li> </ul>"},{"location":"mqtt-connector--index/#private-types","title":"Private Types","text":"<ul> <li>class _ConnectPacketAll</li> <li>class _ConnectPacketMin</li> <li>class _Disconnect</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/","title":"ConnAckAccepted","text":"<p>[Source] <pre><code>primitive val ConnAckAccepted\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckAccepted/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckAccepted/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckAccepted val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns","title":"Returns","text":"<ul> <li>ConnAckAccepted val^</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckAccepted/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckAccepted val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckAccepted val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckAccepted val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckAccepted val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/","title":"ConnAckPacket","text":"<p>[Source]</p> <p>ConnAckPacket represents a ConnACK message from the Broker. It is receive only so it is  never generated by the client. The purpose of this class is to interpret a ConnAck packet and hide the internal workings of interpretation from the router</p> <p>CONNACK Packet Fixed Header  B0  - Control Byte = 2 B1  - Remaining Length = 2</p> <p>Variable Header B2  - Connect Acknowledge Flags (Only Bit 0 is used: 1 = session present) B3  - Connect Return Code </p> <p>\"\"\"</p> <pre><code>class ref ConnAckPacket\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nbasePacket: BasePacket val)\n: ConnAckPacket ref^\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#returns","title":"Returns","text":"<ul> <li>ConnAckPacket ref^</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckPacket/#sessionaccepted","title":"sessionAccepted","text":"<p>[Source]</p> <pre><code>fun box sessionAccepted()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#sessionpresent","title":"sessionPresent","text":"<p>[Source]</p> <pre><code>fun box sessionPresent()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#returncode","title":"returnCode","text":"<p>[Source]</p> <pre><code>fun box returnCode()\n: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | \nConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_3","title":"Returns","text":"<ul> <li>(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val |      ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/","title":"ConnAckRefusedBadUserNameOrPassword","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedBadUserNameOrPassword\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedBadUserNameOrPassword val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedBadUserNameOrPassword val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedBadUserNameOrPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedBadUserNameOrPassword val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedBadUserNameOrPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedBadUserNameOrPassword val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/","title":"ConnAckRefusedIdentifierRejected","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedIdentifierRejected\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedIdentifierRejected val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedIdentifierRejected val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedIdentifierRejected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedIdentifierRejected val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedIdentifierRejected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedIdentifierRejected val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/","title":"ConnAckRefusedNotAuthorised","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedNotAuthorised\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedNotAuthorised val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedNotAuthorised val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedNotAuthorised val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedNotAuthorised val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedNotAuthorised val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedNotAuthorised val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/","title":"ConnAckRefusedProtocolVersion","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedProtocolVersion\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedProtocolVersion val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedProtocolVersion val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedProtocolVersion val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedProtocolVersion val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedProtocolVersion val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedProtocolVersion val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/","title":"ConnAckRefusedServerUnavailable","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedServerUnavailable\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedServerUnavailable val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedServerUnavailable val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedServerUnavailable val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedServerUnavailable val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedServerUnavailable val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedServerUnavailable val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckReturnCode/","title":"ConnAckReturnCode","text":"<p>[Source] <pre><code>type ConnAckReturnCode is\n(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckReturnCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-connector-ConnectClean/","title":"ConnectClean","text":"<p>[Source] <pre><code>primitive val ConnectClean\n</code></pre></p>"},{"location":"mqtt-connector-ConnectClean/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectClean/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectClean val^\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#returns","title":"Returns","text":"<ul> <li>ConnectClean val^</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectClean/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectClean val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectClean val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectClean val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectClean val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectFlags/","title":"ConnectFlags","text":"<p>[Source] <pre><code>type ConnectFlags is\n(ConnectUserName val | ConnectPassword val | ConnectWill val | ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | ConnectWRetain val | ConnectClean val)\n</code></pre></p>"},{"location":"mqtt-connector-ConnectFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ConnectUserName val | ConnectPassword val | ConnectWill val | ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | ConnectWRetain val | ConnectClean val)</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/","title":"ConnectPacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b00010000) B2  Remaining Length - This is the length of variable header (10) plus the  length of the payload (string length + 2).  </p> <p>Variable header B1 - B6   Protocol name (must be 0,4,M,Q,T,T) B7 -      Protocol Level (must be 0x04) B8 -      Connect Flags (see below) B9 - B10  Keep Alive (MSB, LSB)  </p> <p>Payload The payload of the CONNECT Packet contains one or more length-prefixed fields as determined by the flags in the variable header.  These fields, if present, MUST appear in the order - Client Identifier - Will Topic - Will Message - User Name - Password </p> <pre><code>class ref ConnectPacket\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectPacket/#create","title":"create","text":"<p>[Source]</p> <p>Create an instance of a connect packet using the passed config parameters</p> <pre><code>new ref create(\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: ConnectPacket ref^\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns","title":"Returns","text":"<ul> <li>ConnectPacket ref^</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#public-fields","title":"Public fields","text":""},{"location":"mqtt-connector-ConnectPacket/#let-defaultkeepalive-u8-val","title":"let defaultKeepAlive: U8 val","text":"<p>[Source]</p> <p>This is a default value of the _keepAlive LSB which is used in the event we can't retrieve the  the string in the .ini file or convert it into a valid 16 bit number.</p>"},{"location":"mqtt-connector-ConnectPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectPacket/#getpacket","title":"getPacket","text":"<p>[Source]</p> <p>Return a connect packet ready to send to the broker</p> <pre><code>fun box getPacket()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>This is set false on instantiation and only set true if we have valid data</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#isset","title":"isSet","text":"<p>[Source]</p> <p>Test the value of the passed flag in the class field and returns true if it is set</p> <pre><code>fun box isSet(\nflag: (ConnectUserName val | ConnectPassword val | ConnectWill val | \nConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | \nConnectWRetain val | ConnectClean val))\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_1","title":"Parameters","text":"<ul> <li>flag: (ConnectUserName val | ConnectPassword val | ConnectWill val |      ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val |      ConnectWRetain val | ConnectClean val)</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-connector-ConnectPacket/#_assemble","title":"_assemble","text":"<p>[Source]</p> <p>Build a connect packet based on the current state of the local variables for each field</p> <pre><code>fun box _assemble()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_makekeepalive","title":"_makeKeepAlive","text":"<p>[Source]</p> <p>Sets the class variable _keepAlive that determines the keep alive time is seconds If we fail any of the validation tests we do not set the class variable and leave the packet builder to use a default value of 60 seconds</p> <pre><code>fun ref _makeKeepAlive(\nkaString: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_2","title":"Parameters","text":"<ul> <li>kaString: String val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_5","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_makesession","title":"_makeSession","text":"<p>[Source]</p> <p>Sets the field controling whether we start with a clean session or restore a past  session. If it is true then client and broker delete the old session. If it is false then the client and the Broker must restore from disc and save the session after the  network disconnect.</p> <pre><code>fun ref _makeSession(\ncsString: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_3","title":"Parameters","text":"<ul> <li>csString: String val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_setwill","title":"_setWill","text":"<p>[Source]</p> <p>Sets the will topic, message and handling flags  </p> <pre><code>fun ref _setWill(\ntopic: String val,\nmsg: String val,\nqos: String val,\nretain: Bool val = true)\n: None val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_4","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>msg: String val</li> <li>qos: String val</li> <li>retain: Bool val = true</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/","title":"ConnectPassword","text":"<p>[Source] <pre><code>primitive val ConnectPassword\n</code></pre></p>"},{"location":"mqtt-connector-ConnectPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectPassword val^\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#returns","title":"Returns","text":"<ul> <li>ConnectPassword val^</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectPassword val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectPassword val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/","title":"ConnectQMask","text":"<p>[Source] <pre><code>primitive val ConnectQMask\n</code></pre></p>"},{"location":"mqtt-connector-ConnectQMask/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectQMask/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectQMask val^\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#returns","title":"Returns","text":"<ul> <li>ConnectQMask val^</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectQMask/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectQMask val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectQMask val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectQMask val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectQMask val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/","title":"ConnectUserName","text":"<p>[Source] <pre><code>primitive val ConnectUserName\n</code></pre></p>"},{"location":"mqtt-connector-ConnectUserName/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectUserName/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectUserName val^\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#returns","title":"Returns","text":"<ul> <li>ConnectUserName val^</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectUserName/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectUserName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectUserName val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectUserName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectUserName val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/","title":"ConnectWQos0","text":"<p>[Source] <pre><code>primitive val ConnectWQos0\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos0 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#returns","title":"Returns","text":"<ul> <li>ConnectWQos0 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos0 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos0 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/","title":"ConnectWQos1","text":"<p>[Source] <pre><code>primitive val ConnectWQos1\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos1 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#returns","title":"Returns","text":"<ul> <li>ConnectWQos1 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos1 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos1 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/","title":"ConnectWQos2","text":"<p>[Source] <pre><code>primitive val ConnectWQos2\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos2 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#returns","title":"Returns","text":"<ul> <li>ConnectWQos2 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos2 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos2 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/","title":"ConnectWRetain","text":"<p>[Source] <pre><code>primitive val ConnectWRetain\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWRetain val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#returns","title":"Returns","text":"<ul> <li>ConnectWRetain val^</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWRetain/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWRetain val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWRetain val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/","title":"ConnectWill","text":"<p>[Source] <pre><code>primitive val ConnectWill\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWill/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWill/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWill val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#returns","title":"Returns","text":"<ul> <li>ConnectWill val^</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWill val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWill val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-Connector/","title":"Connector","text":"<p>[Source]</p> <p>Responsible for: 1. building the connection packet and sending it to the Broker via router.send 2. receiving and interpreting the returned ConnAck packet 3. telling router whether to start a new session or to restore an established session.</p> <p>If we are not accepted then we call the onBrokerRefusal behavior on the router and  exit. The app needs to sort it out.</p> <p>If we are accepted and requested a clean session the Broker will always give us one so we can just call the onBrokerConnect() behaviour.</p> <p>If we asked for a session restore (cleansession == 0) then we need to check whether we got one - and if we did then call _router.onBrokerRestore().</p> <p>If we asked for a restore and the Broker couldn't oblige then we can't do a disconnect and reconnect here because as soon as we send a disconnect the Broker will drop the network connection. Hence we must inform the app and let it go back through the network connection process. We do this by calling onBrokerStateNotFound() on router.</p> <p>Note - Because we are still early in the connection process we will pass connector a tag to router when it is created and let it call the router behaviours directly instead of going through the registrar.</p> <pre><code>actor tag Connector\n</code></pre>"},{"location":"mqtt-connector-Connector/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-Connector/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag)\n: Connector tag^\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> </ul>"},{"location":"mqtt-connector-Connector/#returns","title":"Returns","text":"<ul> <li>Connector tag^</li> </ul>"},{"location":"mqtt-connector-Connector/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-connector-Connector/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>be connect(\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters_1","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-Connector/#onack","title":"onAck","text":"<p>[Source]</p> <pre><code>be onAck(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters_2","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/","title":"DefaultConnectFlags","text":"<p>[Source] <pre><code>primitive val DefaultConnectFlags\n</code></pre></p>"},{"location":"mqtt-connector-DefaultConnectFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-DefaultConnectFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DefaultConnectFlags val^\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns","title":"Returns","text":"<ul> <li>DefaultConnectFlags val^</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-DefaultConnectFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DefaultConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#parameters","title":"Parameters","text":"<ul> <li>that: DefaultConnectFlags val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DefaultConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: DefaultConnectFlags val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-DisconnectPacket/","title":"DisconnectPacket","text":"<p>[Source]</p> <p>Respresents the DISCONNECT Packet, which has only two bytes B1: Control Byte ControlDisconnect B2: Remaining Length (always zero)</p> <p>After sending a DISCONNECT Packet the Client MUST close the  Network Connection and MUST NOT send any more Control Packets.</p> <p>Hardly worth building a class for two bytes, but just for consistency of approach...</p> <pre><code>class ref DisconnectPacket\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-DisconnectPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: DisconnectPacket iso^\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#returns","title":"Returns","text":"<ul> <li>DisconnectPacket iso^</li> </ul>"},{"location":"mqtt-connector-DisconnectPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-DisconnectPacket/#compose","title":"compose","text":"<p>[Source]</p> <pre><code>fun box compose()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-connector-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-connector-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-connector-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-connector-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-connector-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-connector-Main/#parameters_1","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-connector-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-connector-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-connector-Main/#parameters_2","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-connector-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-connector-Main/#parameters_3","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-connector-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/","title":"RejectionCode","text":"<p>[Source] <pre><code>primitive val RejectionCode\n</code></pre></p>"},{"location":"mqtt-connector-RejectionCode/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-RejectionCode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RejectionCode val^\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#returns","title":"Returns","text":"<ul> <li>RejectionCode val^</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-RejectionCode/#apply","title":"apply","text":"<p>[Source]</p> <p>Decodes the Connection rejection code from the Broker and add some text to the returned string</p> <pre><code>fun box apply(\nflags: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters","title":"Parameters","text":"<ul> <li>flags: U8 val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RejectionCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters_1","title":"Parameters","text":"<ul> <li>that: RejectionCode val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RejectionCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters_2","title":"Parameters","text":"<ul> <li>that: RejectionCode val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/","title":"RestoreConnectFlags","text":"<p>[Source] <pre><code>primitive val RestoreConnectFlags\n</code></pre></p>"},{"location":"mqtt-connector-RestoreConnectFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-RestoreConnectFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RestoreConnectFlags val^\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns","title":"Returns","text":"<ul> <li>RestoreConnectFlags val^</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-RestoreConnectFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RestoreConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#parameters","title":"Parameters","text":"<ul> <li>that: RestoreConnectFlags val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RestoreConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: RestoreConnectFlags val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-TestConfig/","title":"TestConfig","text":"<p>[Source] <pre><code>class ref TestConfig\n</code></pre></p>"},{"location":"mqtt-connector-TestConfig/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-TestConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: TestConfig iso^\n</code></pre>"},{"location":"mqtt-connector-TestConfig/#returns","title":"Returns","text":"<ul> <li>TestConfig iso^</li> </ul>"},{"location":"mqtt-connector-TestConfig/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-TestConfig/#fullconfig","title":"fullConfig","text":"<p>[Source]</p> <pre><code>fun box fullConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-connector-TestConfig/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-TestConfig/#minconfig","title":"minConfig","text":"<p>[Source]</p> <pre><code>fun box minConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-connector-TestConfig/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-TestConfig/#makesubs","title":"makeSubs","text":"<p>[Source]</p> <pre><code>fun box makeSubs()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-connector-TestConfig/#returns_3","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/","title":"_ConnectPacketAll","text":"<p>[Source] <pre><code>class iso _ConnectPacketAll is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-connector-_ConnectPacketAll/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-_ConnectPacketAll/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ConnectPacketAll iso^\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns","title":"Returns","text":"<ul> <li>_ConnectPacketAll iso^</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-_ConnectPacketAll/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketAll/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketAll/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/","title":"_ConnectPacketMin","text":"<p>[Source] <pre><code>class iso _ConnectPacketMin is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-connector-_ConnectPacketMin/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-_ConnectPacketMin/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ConnectPacketMin iso^\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns","title":"Returns","text":"<ul> <li>_ConnectPacketMin iso^</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-_ConnectPacketMin/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_ConnectPacketMin/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_ConnectPacketMin/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/","title":"_Disconnect","text":"<p>[Source] <pre><code>class iso _Disconnect is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-connector-_Disconnect/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-_Disconnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Disconnect iso^\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#returns","title":"Returns","text":"<ul> <li>_Disconnect iso^</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-_Disconnect/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-_Disconnect/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-connector-_Disconnect/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-examples--index/","title":"Package","text":"<p>No package doc string provided for mqtt/examples.</p>"},{"location":"mqtt-examples--index/#public-types","title":"Public Types","text":"<ul> <li>actor MessageTest</li> <li>class SoakPublisher</li> <li>actor SoakTester</li> <li>actor Spawner</li> <li>actor Timestamper</li> <li>class TsNotify</li> </ul>"},{"location":"mqtt-examples-MessageTest/","title":"MessageTest","text":"<p>[Source] <pre><code>actor tag MessageTest\n</code></pre></p>"},{"location":"mqtt-examples-MessageTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-MessageTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag)\n: MessageTest tag^\n</code></pre>"},{"location":"mqtt-examples-MessageTest/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> </ul>"},{"location":"mqtt-examples-MessageTest/#returns","title":"Returns","text":"<ul> <li>MessageTest tag^</li> </ul>"},{"location":"mqtt-examples-MessageTest/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-examples-MessageTest/#send","title":"send","text":"<p>[Source]</p> <pre><code>be send()\n</code></pre>"},{"location":"mqtt-examples-MessageTest/#mute","title":"mute","text":"<p>[Source]</p> <pre><code>be mute()\n</code></pre>"},{"location":"mqtt-examples-SoakPublisher/","title":"SoakPublisher","text":"<p>[Source] <pre><code>class ref SoakPublisher is\nTimerNotify ref\n</code></pre></p>"},{"location":"mqtt-examples-SoakPublisher/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-SoakPublisher/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nreg: Registrar tag)\n: SoakPublisher iso^\n</code></pre>"},{"location":"mqtt-examples-SoakPublisher/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#returns","title":"Returns","text":"<ul> <li>SoakPublisher iso^</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-examples-SoakPublisher/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-examples-SoakPublisher/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-examples-SoakPublisher/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-examples-SoakPublisher/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-examples-SoakTester/","title":"SoakTester","text":"<p>[Source] <pre><code>actor tag SoakTester\n</code></pre></p>"},{"location":"mqtt-examples-SoakTester/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-SoakTester/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag)\n: SoakTester tag^\n</code></pre>"},{"location":"mqtt-examples-SoakTester/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> </ul>"},{"location":"mqtt-examples-SoakTester/#returns","title":"Returns","text":"<ul> <li>SoakTester tag^</li> </ul>"},{"location":"mqtt-examples-SoakTester/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-examples-SoakTester/#mute","title":"mute","text":"<p>[Source]</p> <pre><code>be mute()\n</code></pre>"},{"location":"mqtt-examples-Spawner/","title":"Spawner","text":"<p>[Source] <pre><code>actor tag Spawner\n</code></pre></p>"},{"location":"mqtt-examples-Spawner/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-Spawner/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag,\nsubs: HashMap[String val, String val, HashEq[String val] val] val)\n: Spawner tag^\n</code></pre>"},{"location":"mqtt-examples-Spawner/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>subs: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-examples-Spawner/#returns","title":"Returns","text":"<ul> <li>Spawner tag^</li> </ul>"},{"location":"mqtt-examples-Spawner/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-examples-Spawner/#brokersubs","title":"brokerSubs","text":"<p>[Source]</p> <pre><code>be brokerSubs(\ncmd: (Sub val | UnSub val))\n</code></pre>"},{"location":"mqtt-examples-Spawner/#parameters_1","title":"Parameters","text":"<ul> <li>cmd: (Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-examples-Spawner/#testsubs","title":"testSubs","text":"<p>[Source]</p> <pre><code>be testSubs(\ncmd: (Sub val | UnSub val))\n</code></pre>"},{"location":"mqtt-examples-Spawner/#parameters_2","title":"Parameters","text":"<ul> <li>cmd: (Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-examples-Spawner/#unsuball","title":"unSubAll","text":"<p>[Source]</p> <pre><code>be unSubAll()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#perftest","title":"perfTest","text":"<p>[Source]</p> <pre><code>be perfTest()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#soaktest","title":"soakTest","text":"<p>[Source]</p> <pre><code>be soakTest()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#loadtest","title":"loadTest","text":"<p>[Source]</p> <pre><code>be loadTest()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#mute","title":"mute","text":"<p>[Source]</p> <pre><code>be mute()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"mqtt-examples-Spawner/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-examples-Spawner/#subscribermicator","title":"subscribermicator","text":"<p>[Source]</p> <p>Subscribing and unsubscribing from a map of topics</p> <pre><code>fun ref subscribermicator(\nsubs: HashMap[String val, String val, HashEq[String val] val] val,\ncmd: (Sub val | UnSub val))\n: None val\n</code></pre>"},{"location":"mqtt-examples-Spawner/#parameters_3","title":"Parameters","text":"<ul> <li>subs: HashMap[String val, String val, HashEq[String val] val] val</li> <li>cmd: (Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-examples-Spawner/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-examples-Timestamper/","title":"Timestamper","text":"<p>[Source] <pre><code>actor tag Timestamper\n</code></pre></p>"},{"location":"mqtt-examples-Timestamper/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-Timestamper/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag)\n: Timestamper tag^\n</code></pre>"},{"location":"mqtt-examples-Timestamper/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> </ul>"},{"location":"mqtt-examples-Timestamper/#returns","title":"Returns","text":"<ul> <li>Timestamper tag^</li> </ul>"},{"location":"mqtt-examples-Timestamper/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-examples-Timestamper/#mute","title":"mute","text":"<p>[Source]</p> <pre><code>be mute()\n</code></pre>"},{"location":"mqtt-examples-Timestamper/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>be dispose()\n</code></pre>"},{"location":"mqtt-examples-TsNotify/","title":"TsNotify","text":"<p>[Source] <pre><code>class ref TsNotify is\nTimerNotify ref\n</code></pre></p>"},{"location":"mqtt-examples-TsNotify/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-examples-TsNotify/#constructors","title":"Constructors","text":""},{"location":"mqtt-examples-TsNotify/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nreg: Registrar tag,\npub: Publisher tag,\ntopic: String val)\n: TsNotify iso^\n</code></pre>"},{"location":"mqtt-examples-TsNotify/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>pub: Publisher tag</li> <li>topic: String val</li> </ul>"},{"location":"mqtt-examples-TsNotify/#returns","title":"Returns","text":"<ul> <li>TsNotify iso^</li> </ul>"},{"location":"mqtt-examples-TsNotify/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-examples-TsNotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-examples-TsNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-examples-TsNotify/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-examples-TsNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-examples-TsNotify/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-examples-TsNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer--index/","title":"Package","text":"<p>No package doc string provided for mqtt/idIssuer.</p>"},{"location":"mqtt-idIssuer--index/#public-types","title":"Public Types","text":"<ul> <li>actor IdIssuer</li> <li>interface IdNotifyPub</li> <li>interface IdNotifySub</li> <li>actor Main</li> </ul>"},{"location":"mqtt-idIssuer--index/#private-types","title":"Private Types","text":"<ul> <li>class _IdIssue</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/","title":"IdIssuer","text":"<p>[Source]</p> <p>SUBSCRIBE, UNSUBSCRIBE, and PUBLISH (in cases where QoS &gt; 0) Control Packets contain a non-zero 16-bit Packet Identifier in big endian format If a Client re-sends a particular Control Packet, then it MUST use the same Packet Identifier in subsequent re-sends of that packet. The Packet Identifier becomes available for reuse after the Client has processed the corresponding acknowledgement packet. In the case of a QoS 1 PUBLISH this is the corresponding PUBACK In the case of QoS 2 it is PUBCOMP. For SUBSCRIBE or UNSUBSCRIBE it is the corresponding SUBACK or UNSUBACK.  </p> <p>Reissuing Returned Ids - create an array of returned numbers (empty on creation) - when a request is received try to pop a number out of the array - if the list is empty issue a new number - when a number is returned push it back into the list - check that the list doesn't contain the returned number to prevent any duplicates - no error checking on 16 bit overflow other than logging  </p> <pre><code>actor tag IdIssuer\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#constructors","title":"Constructors","text":""},{"location":"mqtt-idIssuer-IdIssuer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: IdIssuer tag^\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#returns","title":"Returns","text":"<ul> <li>IdIssuer tag^</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-idIssuer-IdIssuer/#checkoutsub","title":"checkOutSub","text":"<p>[Source]</p> <p>A request for an id to be returned in the provided callback. Because ids are returned and reassigned subsequent calls to checkOutSub may not return consecutive values</p> <pre><code>be checkOutSub(\nnotifySub: IdNotifySub tag)\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#parameters","title":"Parameters","text":"<ul> <li>notifySub: IdNotifySub tag</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#checkoutunsub","title":"checkOutUnsub","text":"<p>[Source]</p> <p>A request for an id to be returned in the provided callback. Because ids are returned and reassigned subsequent calls to checkOutSub may not return consecutive values</p> <pre><code>be checkOutUnsub(\nnotifySub: IdNotifySub tag)\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#parameters_1","title":"Parameters","text":"<ul> <li>notifySub: IdNotifySub tag</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#checkoutpub","title":"checkOutPub","text":"<p>[Source]</p> <p>A request for an id to be returned with arguments in the provided callback. Because ids are returned and reassigned subsequent calls to checkOutSub may not return consecutive values</p> <pre><code>be checkOutPub(\nnotifyArgs: IdNotifyPub tag,\nargs: PublishArgs val)\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#parameters_2","title":"Parameters","text":"<ul> <li>notifyArgs: IdNotifyPub tag</li> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#checkin","title":"checkIn","text":"<p>[Source]</p> <p>Called when the transaction the id was used for has been completed and the  id can be re-used</p> <pre><code>be checkIn(\nid: U16 val)\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#parameters_3","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-idIssuer-IdIssuer/#_nextid","title":"_nextId","text":"<p>[Source]</p> <p>Returns the next available id from the array of returned Ids and if there are no returned Ids in the list issues a new one</p> <pre><code>fun ref _nextId()\n: U16 val\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#returns_1","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-idIssuer-IdNotifyPub/","title":"IdNotifyPub","text":"<p>[Source]</p> <p>Notifications for issuance of a packet Id.</p> <pre><code>interface ref IdNotifyPub\n</code></pre>"},{"location":"mqtt-idIssuer-IdNotifyPub/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-idIssuer-IdNotifyPub/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>be apply(\nargs: PublishArgs val)\n</code></pre>"},{"location":"mqtt-idIssuer-IdNotifyPub/#parameters","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-idIssuer-IdNotifySub/","title":"IdNotifySub","text":"<p>[Source]</p> <p>Notifications for issuance of a packet Id.</p> <pre><code>interface ref IdNotifySub\n</code></pre>"},{"location":"mqtt-idIssuer-IdNotifySub/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-idIssuer-IdNotifySub/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>be apply(\nid: U16 val,\nsub: (Sub val | UnSub val))\n</code></pre>"},{"location":"mqtt-idIssuer-IdNotifySub/#parameters","title":"Parameters","text":"<ul> <li>id: U16 val</li> <li>sub: (Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-idIssuer-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-idIssuer-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-idIssuer-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-idIssuer-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-idIssuer-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-idIssuer-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-idIssuer-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-idIssuer-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-idIssuer-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-idIssuer-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-idIssuer-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-idIssuer-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/","title":"_IdIssue","text":"<p>[Source] <pre><code>class iso _IdIssue is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-idIssuer-_IdIssue/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#constructors","title":"Constructors","text":""},{"location":"mqtt-idIssuer-_IdIssue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _IdIssue iso^\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#returns","title":"Returns","text":"<ul> <li>_IdIssue iso^</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-idIssuer-_IdIssue/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-_IdIssue/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-idIssuer-_IdIssue/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-network--index/","title":"Package","text":"<p>No package doc string provided for mqtt/network.</p>"},{"location":"mqtt-network--index/#public-types","title":"Public Types","text":"<ul> <li>actor OsNetwork</li> </ul>"},{"location":"mqtt-network-OsNetwork/","title":"OsNetwork","text":"<p>[Source] <pre><code>actor tag OsNetwork\n</code></pre></p>"},{"location":"mqtt-network-OsNetwork/#constructors","title":"Constructors","text":""},{"location":"mqtt-network-OsNetwork/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val,\nrouter: Router tag,\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: OsNetwork tag^\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>router: Router tag</li> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-network-OsNetwork/#returns","title":"Returns","text":"<ul> <li>OsNetwork tag^</li> </ul>"},{"location":"mqtt-network-OsNetwork/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-network-OsNetwork/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>be connect()\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#disconnect","title":"disconnect","text":"<p>[Source]</p> <pre><code>be disconnect()\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-network-OsNetwork/#toipv4","title":"toIPv4","text":"<p>[Source]</p> <p>Convert a string to an ip4 address or None if it is not valid</p> <pre><code>fun box toIPv4(\nenv: Env val,\narg: String val)\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#parameters_1","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>arg: String val</li> </ul>"},{"location":"mqtt-network-OsNetwork/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-pinger--index/","title":"Package","text":"<p>No package doc string provided for mqtt/pinger.</p>"},{"location":"mqtt-pinger--index/#public-types","title":"Public Types","text":"<ul> <li>actor Main</li> <li>class Ping</li> <li>class PingReqPacket</li> <li>actor Pinger</li> </ul>"},{"location":"mqtt-pinger--index/#private-types","title":"Private Types","text":"<ul> <li>class _PingReq</li> </ul>"},{"location":"mqtt-pinger-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-pinger-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-pinger-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-pinger-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-pinger-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-pinger-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-pinger-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-pinger-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-pinger-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-pinger-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-Ping/","title":"Ping","text":"<p>[Source]</p> <p>Fire the time  number of times and then cancel. If reps is zero  then the timer does not cancel itself <pre><code>class ref Ping is\nTimerNotify ref\n</code></pre>"},{"location":"mqtt-pinger-Ping/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-pinger-Ping/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-Ping/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nreg: Registrar tag,\nreps: U64 val = 0)\n: Ping iso^\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>reps: U64 val = 0</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns","title":"Returns","text":"<ul> <li>Ping iso^</li> </ul>"},{"location":"mqtt-pinger-Ping/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-Ping/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-pinger-Ping/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-PingReqPacket/","title":"PingReqPacket","text":"<p>[Source]</p> <p>Respresents the PINGREQ Packet, which has only two bytes B1: Control Byte ControlPingReq B2: Remaining Length (always zero)</p> <p>Hardly worth building a class for two bytes, but just for consistency of approach...</p> <pre><code>class ref PingReqPacket\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-PingReqPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: PingReqPacket iso^\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#returns","title":"Returns","text":"<ul> <li>PingReqPacket iso^</li> </ul>"},{"location":"mqtt-pinger-PingReqPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-PingReqPacket/#compose","title":"compose","text":"<p>[Source]</p> <pre><code>fun box compose()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-pinger-Pinger/","title":"Pinger","text":"<p>[Source]</p> <p>Keep alive pinger. Starts a timer that calls .doPing() on the router tag stored in _reg. The timer fires every  seconds for a maximum of  times.  If  is zero then the timer fires until it is cancelled  <pre><code>actor tag Pinger\n</code></pre>"},{"location":"mqtt-pinger-Pinger/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-Pinger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag,\nperiod: U64 val,\nrepetitions: U64 val = 0)\n: Pinger tag^\n</code></pre>"},{"location":"mqtt-pinger-Pinger/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>period: U64 val</li> <li>repetitions: U64 val = 0</li> </ul>"},{"location":"mqtt-pinger-Pinger/#returns","title":"Returns","text":"<ul> <li>Pinger tag^</li> </ul>"},{"location":"mqtt-pinger-Pinger/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-pinger-Pinger/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>be cancel()\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/","title":"_PingReq","text":"<p>[Source] <pre><code>class iso _PingReq is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-pinger-_PingReq/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-_PingReq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PingReq iso^\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#returns","title":"Returns","text":"<ul> <li>_PingReq iso^</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-_PingReq/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-_PingReq/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-pinger-_PingReq/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives--index/","title":"Package","text":"<p>No package doc string provided for mqtt/primitives.</p>"},{"location":"mqtt-primitives--index/#public-types","title":"Public Types","text":"<ul> <li>type ArrayVal</li> <li>primitive BrokerDisconnect</li> <li>primitive CPFlags</li> <li>type CPNoFlags</li> <li>type CPWithFlags</li> <li>primitive CleanSessionRequired</li> <li>primitive Clear</li> <li>type Command</li> <li>primitive Commands</li> <li>primitive ConfigurationError</li> <li>primitive Connect</li> <li>primitive ConnectionClosed</li> <li>primitive ConnectionRefused</li> <li>type ControlArrayVal</li> <li>primitive ControlConnAck</li> <li>primitive ControlConnect</li> <li>primitive ControlDisconnect</li> <li>primitive ControlPingReq</li> <li>primitive ControlPingResp</li> <li>primitive ControlPubAck</li> <li>primitive ControlPubComp</li> <li>primitive ControlPubRec</li> <li>primitive ControlPubRel</li> <li>primitive ControlPublish</li> <li>primitive ControlSubAck</li> <li>primitive ControlSubscribe</li> <li>primitive ControlUnsubAck</li> <li>primitive ControlUnsubscribe</li> <li>primitive DecodeErr</li> <li>primitive Discon</li> <li>type ErrorCode</li> <li>primitive ForbiddenCode</li> <li>primitive ForbiddenFlags</li> <li>primitive ForbiddenQos</li> <li>primitive ForbiddenType</li> <li>primitive ForbiddenWillQos</li> <li>type IdType</li> <li>primitive InvalidControl</li> <li>primitive InvalidFlags</li> <li>primitive InvalidRemainingLength</li> <li>primitive InvalidType</li> <li>primitive KeyIssuer</li> <li>primitive KeyMain</li> <li>primitive KeyNetwork</li> <li>primitive KeyPerf</li> <li>primitive KeyPersistor</li> <li>primitive KeyPinger</li> <li>primitive KeyRouter</li> <li>primitive KeySpawner</li> <li>primitive KeyTerminal</li> <li>primitive KeyTicker</li> <li>primitive LoadTest</li> <li>type MQTTPublishFlags</li> <li>actor Main</li> <li>primitive MalformedRequest</li> <li>primitive MalformedResponse</li> <li>trait MqActor</li> <li>primitive Mute</li> <li>primitive NoError</li> <li>primitive NotConnected</li> <li>primitive NotImplemented</li> <li>trait Packet</li> <li>type PacketIdentifierType</li> <li>type PacketNoIdentifierType</li> <li>type PacketWithTopicType</li> <li>class PublishArgs</li> <li>primitive PublishDUP</li> <li>primitive PublishQos0</li> <li>primitive PublishQos1</li> <li>primitive PublishQos2</li> <li>primitive PublishRetain</li> <li>type Qos</li> <li>primitive Qos0</li> <li>primitive Qos1</li> <li>primitive Qos2</li> <li>primitive Quit</li> <li>primitive ReconnectFailed</li> <li>primitive SoakTest</li> <li>primitive SocketError</li> <li>primitive Sub</li> <li>type SubControl</li> <li>primitive SubscribeFailed</li> <li>primitive SubscribeStats</li> <li>primitive SubscribeTest</li> <li>primitive TestInterval</li> <li>primitive TestLength</li> <li>primitive TestPrefix</li> <li>primitive TestTopic</li> <li>primitive UnSub</li> <li>primitive UnSubscribe</li> <li>primitive UnknownError</li> </ul>"},{"location":"mqtt-primitives--index/#private-types","title":"Private Types","text":"<ul> <li>class _ToQos</li> <li>class _ToQosBits</li> <li>class _U8ToQos</li> </ul>"},{"location":"mqtt-primitives-ArrayVal/","title":"ArrayVal","text":"<p>[Source]</p> <p>A basic typedef for the type we use to construct packets for sending over the socket  to the broker</p> <pre><code>type ArrayVal is\nArray[U8 val] val\n</code></pre>"},{"location":"mqtt-primitives-ArrayVal/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/","title":"BrokerDisconnect","text":"<p>[Source] <pre><code>primitive val BrokerDisconnect\n</code></pre></p>"},{"location":"mqtt-primitives-BrokerDisconnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-BrokerDisconnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BrokerDisconnect val^\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns","title":"Returns","text":"<ul> <li>BrokerDisconnect val^</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-BrokerDisconnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BrokerDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#parameters","title":"Parameters","text":"<ul> <li>that: BrokerDisconnect val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BrokerDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: BrokerDisconnect val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/","title":"CPFlags","text":"<p>[Source] <pre><code>primitive val CPFlags\n</code></pre></p>"},{"location":"mqtt-primitives-CPFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-CPFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CPFlags val^\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#returns","title":"Returns","text":"<ul> <li>CPFlags val^</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-CPFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CPFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#parameters","title":"Parameters","text":"<ul> <li>that: CPFlags val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CPFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: CPFlags val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPNoFlags/","title":"CPNoFlags","text":"<p>[Source] <pre><code>type CPNoFlags is\n(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubComp val | ControlSubAck val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-CPNoFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubComp val | ControlSubAck val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-CPWithFlags/","title":"CPWithFlags","text":"<p>[Source] <pre><code>type CPWithFlags is\n(ControlPubRel val | ControlSubscribe val | ControlUnsubscribe val)\n</code></pre></p>"},{"location":"mqtt-primitives-CPWithFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPubRel val | ControlSubscribe val | ControlUnsubscribe val)</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/","title":"CleanSessionRequired","text":"<p>[Source] <pre><code>primitive val CleanSessionRequired\n</code></pre></p>"},{"location":"mqtt-primitives-CleanSessionRequired/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-CleanSessionRequired/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CleanSessionRequired val^\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns","title":"Returns","text":"<ul> <li>CleanSessionRequired val^</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-CleanSessionRequired/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CleanSessionRequired val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#parameters","title":"Parameters","text":"<ul> <li>that: CleanSessionRequired val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CleanSessionRequired val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#parameters_1","title":"Parameters","text":"<ul> <li>that: CleanSessionRequired val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Clear/","title":"Clear","text":"<p>[Source] <pre><code>primitive val Clear\n</code></pre></p>"},{"location":"mqtt-primitives-Clear/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Clear/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Clear val^\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns","title":"Returns","text":"<ul> <li>Clear val^</li> </ul>"},{"location":"mqtt-primitives-Clear/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Clear/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Clear/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Clear/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Clear val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#parameters","title":"Parameters","text":"<ul> <li>that: Clear val</li> </ul>"},{"location":"mqtt-primitives-Clear/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Clear/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Clear val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#parameters_1","title":"Parameters","text":"<ul> <li>that: Clear val</li> </ul>"},{"location":"mqtt-primitives-Clear/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Command/","title":"Command","text":"<p>[Source] <pre><code>type Command is\n(Connect val | SubscribeTest val | SubscribeStats val | UnSubscribe val | SoakTest val | LoadTest val | Mute val | Clear val | Discon val | Quit val)\n</code></pre></p>"},{"location":"mqtt-primitives-Command/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Connect val | SubscribeTest val | SubscribeStats val | UnSubscribe val | SoakTest val | LoadTest val | Mute val | Clear val | Discon val | Quit val)</li> </ul>"},{"location":"mqtt-primitives-Commands/","title":"Commands","text":"<p>[Source] <pre><code>primitive val Commands\n</code></pre></p>"},{"location":"mqtt-primitives-Commands/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Commands/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Commands val^\n</code></pre>"},{"location":"mqtt-primitives-Commands/#returns","title":"Returns","text":"<ul> <li>Commands val^</li> </ul>"},{"location":"mqtt-primitives-Commands/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Commands/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Commands/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Commands val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#parameters","title":"Parameters","text":"<ul> <li>that: Commands val</li> </ul>"},{"location":"mqtt-primitives-Commands/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Commands/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Commands val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#parameters_1","title":"Parameters","text":"<ul> <li>that: Commands val</li> </ul>"},{"location":"mqtt-primitives-Commands/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/","title":"ConfigurationError","text":"<p>[Source] <pre><code>primitive val ConfigurationError\n</code></pre></p>"},{"location":"mqtt-primitives-ConfigurationError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConfigurationError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConfigurationError val^\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns","title":"Returns","text":"<ul> <li>ConfigurationError val^</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConfigurationError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConfigurationError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#parameters","title":"Parameters","text":"<ul> <li>that: ConfigurationError val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConfigurationError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConfigurationError val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Connect/","title":"Connect","text":"<p>[Source] <pre><code>primitive val Connect\n</code></pre></p>"},{"location":"mqtt-primitives-Connect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Connect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Connect val^\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns","title":"Returns","text":"<ul> <li>Connect val^</li> </ul>"},{"location":"mqtt-primitives-Connect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Connect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Connect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Connect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Connect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#parameters","title":"Parameters","text":"<ul> <li>that: Connect val</li> </ul>"},{"location":"mqtt-primitives-Connect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Connect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Connect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#parameters_1","title":"Parameters","text":"<ul> <li>that: Connect val</li> </ul>"},{"location":"mqtt-primitives-Connect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/","title":"ConnectionClosed","text":"<p>[Source] <pre><code>primitive val ConnectionClosed\n</code></pre></p>"},{"location":"mqtt-primitives-ConnectionClosed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConnectionClosed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectionClosed val^\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns","title":"Returns","text":"<ul> <li>ConnectionClosed val^</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConnectionClosed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectionClosed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectionClosed val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectionClosed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectionClosed val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/","title":"ConnectionRefused","text":"<p>[Source] <pre><code>primitive val ConnectionRefused\n</code></pre></p>"},{"location":"mqtt-primitives-ConnectionRefused/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConnectionRefused/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectionRefused val^\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns","title":"Returns","text":"<ul> <li>ConnectionRefused val^</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConnectionRefused/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectionRefused val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectionRefused val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectionRefused val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectionRefused val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlArrayVal/","title":"ControlArrayVal","text":"<p>[Source] <pre><code>type ControlArrayVal is\n(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubRel val | ControlPubComp val | ControlSubscribe val | ControlSubAck val | ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-ControlArrayVal/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubRel val | ControlPubComp val | ControlSubscribe val | ControlSubAck val | ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/","title":"ControlConnAck","text":"<p>[Source] <pre><code>primitive val ControlConnAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlConnAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlConnAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlConnAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns","title":"Returns","text":"<ul> <li>ControlConnAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlConnAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlConnAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlConnAck val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlConnAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlConnAck val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/","title":"ControlConnect","text":"<p>[Source] <pre><code>primitive val ControlConnect\n</code></pre></p>"},{"location":"mqtt-primitives-ControlConnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlConnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlConnect val^\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns","title":"Returns","text":"<ul> <li>ControlConnect val^</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlConnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlConnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#parameters","title":"Parameters","text":"<ul> <li>that: ControlConnect val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlConnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlConnect val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/","title":"ControlDisconnect","text":"<p>[Source] <pre><code>primitive val ControlDisconnect\n</code></pre></p>"},{"location":"mqtt-primitives-ControlDisconnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlDisconnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlDisconnect val^\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns","title":"Returns","text":"<ul> <li>ControlDisconnect val^</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlDisconnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#parameters","title":"Parameters","text":"<ul> <li>that: ControlDisconnect val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlDisconnect val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/","title":"ControlPingReq","text":"<p>[Source] <pre><code>primitive val ControlPingReq\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPingReq/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPingReq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPingReq val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns","title":"Returns","text":"<ul> <li>ControlPingReq val^</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPingReq/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPingReq val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPingReq val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPingReq val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPingReq val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/","title":"ControlPingResp","text":"<p>[Source] <pre><code>primitive val ControlPingResp\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPingResp/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPingResp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPingResp val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns","title":"Returns","text":"<ul> <li>ControlPingResp val^</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPingResp/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPingResp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPingResp val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPingResp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPingResp val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/","title":"ControlPubAck","text":"<p>[Source] <pre><code>primitive val ControlPubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns","title":"Returns","text":"<ul> <li>ControlPubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/","title":"ControlPubComp","text":"<p>[Source] <pre><code>primitive val ControlPubComp\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubComp/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubComp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubComp val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns","title":"Returns","text":"<ul> <li>ControlPubComp val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubComp/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubComp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubComp val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubComp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubComp val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/","title":"ControlPubRec","text":"<p>[Source] <pre><code>primitive val ControlPubRec\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubRec/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubRec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubRec val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns","title":"Returns","text":"<ul> <li>ControlPubRec val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubRec/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubRec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubRec val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubRec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubRec val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/","title":"ControlPubRel","text":"<p>[Source] <pre><code>primitive val ControlPubRel\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubRel/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubRel/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubRel val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns","title":"Returns","text":"<ul> <li>ControlPubRel val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubRel/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubRel val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubRel val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubRel val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubRel val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/","title":"ControlPublish","text":"<p>[Source] <pre><code>primitive val ControlPublish\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPublish/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPublish/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPublish val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns","title":"Returns","text":"<ul> <li>ControlPublish val^</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPublish/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPublish val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPublish val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPublish val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPublish val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/","title":"ControlSubAck","text":"<p>[Source] <pre><code>primitive val ControlSubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlSubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlSubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlSubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns","title":"Returns","text":"<ul> <li>ControlSubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlSubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlSubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlSubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlSubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlSubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/","title":"ControlSubscribe","text":"<p>[Source] <pre><code>primitive val ControlSubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-ControlSubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlSubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlSubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns","title":"Returns","text":"<ul> <li>ControlSubscribe val^</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlSubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: ControlSubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlSubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/","title":"ControlUnsubAck","text":"<p>[Source] <pre><code>primitive val ControlUnsubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlUnsubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlUnsubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlUnsubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns","title":"Returns","text":"<ul> <li>ControlUnsubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlUnsubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlUnsubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlUnsubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlUnsubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlUnsubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/","title":"ControlUnsubscribe","text":"<p>[Source] <pre><code>primitive val ControlUnsubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-ControlUnsubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlUnsubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlUnsubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns","title":"Returns","text":"<ul> <li>ControlUnsubscribe val^</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlUnsubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlUnsubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: ControlUnsubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlUnsubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlUnsubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/","title":"DecodeErr","text":"<p>[Source] <pre><code>primitive val DecodeErr\n</code></pre></p>"},{"location":"mqtt-primitives-DecodeErr/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-DecodeErr/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DecodeErr val^\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#returns","title":"Returns","text":"<ul> <li>DecodeErr val^</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-DecodeErr/#apply","title":"apply","text":"<p>[Source]</p> <p>Compiles an information string from an error code</p> <pre><code>fun box apply(\nerr: (NoError val | ForbiddenType val | ForbiddenFlags val | \nForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | \nInvalidType val | InvalidControl val | InvalidFlags val | \nInvalidRemainingLength val | MalformedRequest val | MalformedResponse val | \nCleanSessionRequired val | SubscribeFailed val | NotConnected val | \nSocketError val | ConnectionClosed val | ReconnectFailed val | \nConnectionRefused val | UnknownError val),\ntext: String val = \"\")\n: None val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters","title":"Parameters","text":"<ul> <li>err: (NoError val | ForbiddenType val | ForbiddenFlags val |      ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val |      InvalidType val | InvalidControl val | InvalidFlags val |      InvalidRemainingLength val | MalformedRequest val | MalformedResponse val |      CleanSessionRequired val | SubscribeFailed val | NotConnected val |      SocketError val | ConnectionClosed val | ReconnectFailed val |      ConnectionRefused val | UnknownError val)</li> <li>text: String val = \"\"</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DecodeErr val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters_1","title":"Parameters","text":"<ul> <li>that: DecodeErr val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DecodeErr val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters_2","title":"Parameters","text":"<ul> <li>that: DecodeErr val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Discon/","title":"Discon","text":"<p>[Source] <pre><code>primitive val Discon\n</code></pre></p>"},{"location":"mqtt-primitives-Discon/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Discon/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Discon val^\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns","title":"Returns","text":"<ul> <li>Discon val^</li> </ul>"},{"location":"mqtt-primitives-Discon/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Discon/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Discon/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Discon/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Discon val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#parameters","title":"Parameters","text":"<ul> <li>that: Discon val</li> </ul>"},{"location":"mqtt-primitives-Discon/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Discon/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Discon val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#parameters_1","title":"Parameters","text":"<ul> <li>that: Discon val</li> </ul>"},{"location":"mqtt-primitives-Discon/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ErrorCode/","title":"ErrorCode","text":"<p>[Source] <pre><code>type ErrorCode is\n(NoError val | ForbiddenType val | ForbiddenFlags val | ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | InvalidType val | InvalidControl val | InvalidFlags val | InvalidRemainingLength val | MalformedRequest val | MalformedResponse val | CleanSessionRequired val | SubscribeFailed val | NotConnected val | SocketError val | ConnectionClosed val | ReconnectFailed val | ConnectionRefused val | UnknownError val)\n</code></pre></p>"},{"location":"mqtt-primitives-ErrorCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(NoError val | ForbiddenType val | ForbiddenFlags val | ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | InvalidType val | InvalidControl val | InvalidFlags val | InvalidRemainingLength val | MalformedRequest val | MalformedResponse val | CleanSessionRequired val | SubscribeFailed val | NotConnected val | SocketError val | ConnectionClosed val | ReconnectFailed val | ConnectionRefused val | UnknownError val)</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/","title":"ForbiddenCode","text":"<p>[Source] <pre><code>primitive val ForbiddenCode\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenCode/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenCode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenCode val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns","title":"Returns","text":"<ul> <li>ForbiddenCode val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenCode/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenCode val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenCode val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/","title":"ForbiddenFlags","text":"<p>[Source] <pre><code>primitive val ForbiddenFlags\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenFlags val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns","title":"Returns","text":"<ul> <li>ForbiddenFlags val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenFlags val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenFlags val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/","title":"ForbiddenQos","text":"<p>[Source] <pre><code>primitive val ForbiddenQos\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenQos val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns","title":"Returns","text":"<ul> <li>ForbiddenQos val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/","title":"ForbiddenType","text":"<p>[Source] <pre><code>primitive val ForbiddenType\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenType/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenType/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenType val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns","title":"Returns","text":"<ul> <li>ForbiddenType val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenType/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenType val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenType val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/","title":"ForbiddenWillQos","text":"<p>[Source] <pre><code>primitive val ForbiddenWillQos\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenWillQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenWillQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenWillQos val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns","title":"Returns","text":"<ul> <li>ForbiddenWillQos val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenWillQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenWillQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenWillQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenWillQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenWillQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-IdType/","title":"IdType","text":"<p>[Source]</p> <p>The type of the packet id as defined by the protocol specification</p> <pre><code>type IdType is\nU16 val\n</code></pre>"},{"location":"mqtt-primitives-IdType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/","title":"InvalidControl","text":"<p>[Source] <pre><code>primitive val InvalidControl\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidControl/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidControl/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidControl val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns","title":"Returns","text":"<ul> <li>InvalidControl val^</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidControl/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidControl val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidControl val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidControl val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidControl val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/","title":"InvalidFlags","text":"<p>[Source] <pre><code>primitive val InvalidFlags\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidFlags val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns","title":"Returns","text":"<ul> <li>InvalidFlags val^</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidFlags val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidFlags val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/","title":"InvalidRemainingLength","text":"<p>[Source] <pre><code>primitive val InvalidRemainingLength\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidRemainingLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidRemainingLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidRemainingLength val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns","title":"Returns","text":"<ul> <li>InvalidRemainingLength val^</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidRemainingLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidRemainingLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidRemainingLength val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidRemainingLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidRemainingLength val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/","title":"InvalidType","text":"<p>[Source] <pre><code>primitive val InvalidType\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidType/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidType/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidType val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns","title":"Returns","text":"<ul> <li>InvalidType val^</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidType/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidType val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidType val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/","title":"KeyIssuer","text":"<p>[Source] <pre><code>primitive val KeyIssuer\n</code></pre></p>"},{"location":"mqtt-primitives-KeyIssuer/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyIssuer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyIssuer val^\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#returns","title":"Returns","text":"<ul> <li>KeyIssuer val^</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyIssuer/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyIssuer val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#parameters","title":"Parameters","text":"<ul> <li>that: KeyIssuer val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyIssuer val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyIssuer val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyMain/","title":"KeyMain","text":"<p>[Source] <pre><code>primitive val KeyMain\n</code></pre></p>"},{"location":"mqtt-primitives-KeyMain/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyMain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyMain val^\n</code></pre>"},{"location":"mqtt-primitives-KeyMain/#returns","title":"Returns","text":"<ul> <li>KeyMain val^</li> </ul>"},{"location":"mqtt-primitives-KeyMain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyMain/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyMain/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyMain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyMain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyMain/#parameters","title":"Parameters","text":"<ul> <li>that: KeyMain val</li> </ul>"},{"location":"mqtt-primitives-KeyMain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyMain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyMain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyMain/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyMain val</li> </ul>"},{"location":"mqtt-primitives-KeyMain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/","title":"KeyNetwork","text":"<p>[Source] <pre><code>primitive val KeyNetwork\n</code></pre></p>"},{"location":"mqtt-primitives-KeyNetwork/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyNetwork/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyNetwork val^\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#returns","title":"Returns","text":"<ul> <li>KeyNetwork val^</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyNetwork/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyNetwork val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#parameters","title":"Parameters","text":"<ul> <li>that: KeyNetwork val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyNetwork val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyNetwork val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/","title":"KeyPerf","text":"<p>[Source] <pre><code>primitive val KeyPerf\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPerf/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPerf/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPerf val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#returns","title":"Returns","text":"<ul> <li>KeyPerf val^</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPerf/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPerf val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPerf val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPerf val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPerf val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/","title":"KeyPersistor","text":"<p>[Source] <pre><code>primitive val KeyPersistor\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPersistor/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPersistor/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPersistor val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#returns","title":"Returns","text":"<ul> <li>KeyPersistor val^</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPersistor/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPersistor val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPersistor val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPersistor val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPersistor val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/","title":"KeyPinger","text":"<p>[Source] <pre><code>primitive val KeyPinger\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPinger/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPinger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPinger val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#returns","title":"Returns","text":"<ul> <li>KeyPinger val^</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPinger/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPinger val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPinger val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPinger val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPinger val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/","title":"KeyRouter","text":"<p>[Source] <pre><code>primitive val KeyRouter\n</code></pre></p>"},{"location":"mqtt-primitives-KeyRouter/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyRouter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyRouter val^\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#returns","title":"Returns","text":"<ul> <li>KeyRouter val^</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyRouter/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyRouter val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#parameters","title":"Parameters","text":"<ul> <li>that: KeyRouter val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyRouter val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyRouter val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/","title":"KeySpawner","text":"<p>[Source] <pre><code>primitive val KeySpawner\n</code></pre></p>"},{"location":"mqtt-primitives-KeySpawner/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeySpawner/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeySpawner val^\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#returns","title":"Returns","text":"<ul> <li>KeySpawner val^</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeySpawner/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeySpawner val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#parameters","title":"Parameters","text":"<ul> <li>that: KeySpawner val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeySpawner val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeySpawner val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/","title":"KeyTerminal","text":"<p>[Source] <pre><code>primitive val KeyTerminal\n</code></pre></p>"},{"location":"mqtt-primitives-KeyTerminal/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyTerminal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyTerminal val^\n</code></pre>"},{"location":"mqtt-primitives-KeyTerminal/#returns","title":"Returns","text":"<ul> <li>KeyTerminal val^</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyTerminal/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyTerminal/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyTerminal val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTerminal/#parameters","title":"Parameters","text":"<ul> <li>that: KeyTerminal val</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyTerminal val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTerminal/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyTerminal val</li> </ul>"},{"location":"mqtt-primitives-KeyTerminal/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/","title":"KeyTicker","text":"<p>[Source] <pre><code>primitive val KeyTicker\n</code></pre></p>"},{"location":"mqtt-primitives-KeyTicker/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyTicker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyTicker val^\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#returns","title":"Returns","text":"<ul> <li>KeyTicker val^</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyTicker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyTicker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#parameters","title":"Parameters","text":"<ul> <li>that: KeyTicker val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyTicker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyTicker val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/","title":"LoadTest","text":"<p>[Source] <pre><code>primitive val LoadTest\n</code></pre></p>"},{"location":"mqtt-primitives-LoadTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-LoadTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: LoadTest val^\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns","title":"Returns","text":"<ul> <li>LoadTest val^</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-LoadTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: LoadTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#parameters","title":"Parameters","text":"<ul> <li>that: LoadTest val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: LoadTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#parameters_1","title":"Parameters","text":"<ul> <li>that: LoadTest val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MQTTPublishFlags/","title":"MQTTPublishFlags","text":"<p>[Source] <pre><code>type MQTTPublishFlags is\n(PublishDUP val | PublishQos0 val | PublishQos1 val | PublishQos2 val | PublishRetain val)\n</code></pre></p>"},{"location":"mqtt-primitives-MQTTPublishFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PublishDUP val | PublishQos0 val | PublishQos1 val | PublishQos2 val | PublishRetain val)</li> </ul>"},{"location":"mqtt-primitives-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-primitives-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-primitives-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-primitives-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-primitives-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-primitives-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-primitives-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-primitives-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-primitives-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-primitives-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/","title":"MalformedRequest","text":"<p>[Source] <pre><code>primitive val MalformedRequest\n</code></pre></p>"},{"location":"mqtt-primitives-MalformedRequest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-MalformedRequest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MalformedRequest val^\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns","title":"Returns","text":"<ul> <li>MalformedRequest val^</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-MalformedRequest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MalformedRequest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#parameters","title":"Parameters","text":"<ul> <li>that: MalformedRequest val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MalformedRequest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#parameters_1","title":"Parameters","text":"<ul> <li>that: MalformedRequest val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/","title":"MalformedResponse","text":"<p>[Source] <pre><code>primitive val MalformedResponse\n</code></pre></p>"},{"location":"mqtt-primitives-MalformedResponse/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-MalformedResponse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MalformedResponse val^\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns","title":"Returns","text":"<ul> <li>MalformedResponse val^</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-MalformedResponse/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MalformedResponse val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#parameters","title":"Parameters","text":"<ul> <li>that: MalformedResponse val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MalformedResponse val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#parameters_1","title":"Parameters","text":"<ul> <li>that: MalformedResponse val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MqActor/","title":"MqActor","text":"<p>[Source]</p> <p>This type def allows us to combine publishers and subscribers into one map of open transactions. The map is indexed by client allocated id (cid) and cids are unique  while checked-out so we know that we can't have clashing cids even if an actor  has multiple transactions underway. A transaction finishing is denoted by the  removal of the actor from the map and then the check-in of the cid.  TODO - consider whether we need to add some safeguards for this (e.g. a single router private function that atomically removes first and then checks-in)</p> <pre><code>trait ref MqActor\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-primitives-MqActor/#ondata","title":"onData","text":"<p>[Source]</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-primitives-MqActor/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#parameters_1","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-primitives-Mute/","title":"Mute","text":"<p>[Source] <pre><code>primitive val Mute\n</code></pre></p>"},{"location":"mqtt-primitives-Mute/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Mute/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Mute val^\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns","title":"Returns","text":"<ul> <li>Mute val^</li> </ul>"},{"location":"mqtt-primitives-Mute/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Mute/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Mute/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Mute/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Mute val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#parameters","title":"Parameters","text":"<ul> <li>that: Mute val</li> </ul>"},{"location":"mqtt-primitives-Mute/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Mute/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Mute val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#parameters_1","title":"Parameters","text":"<ul> <li>that: Mute val</li> </ul>"},{"location":"mqtt-primitives-Mute/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NoError/","title":"NoError","text":"<p>[Source] <pre><code>primitive val NoError\n</code></pre></p>"},{"location":"mqtt-primitives-NoError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NoError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NoError val^\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns","title":"Returns","text":"<ul> <li>NoError val^</li> </ul>"},{"location":"mqtt-primitives-NoError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NoError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NoError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NoError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NoError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#parameters","title":"Parameters","text":"<ul> <li>that: NoError val</li> </ul>"},{"location":"mqtt-primitives-NoError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NoError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NoError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#parameters_1","title":"Parameters","text":"<ul> <li>that: NoError val</li> </ul>"},{"location":"mqtt-primitives-NoError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/","title":"NotConnected","text":"<p>[Source] <pre><code>primitive val NotConnected\n</code></pre></p>"},{"location":"mqtt-primitives-NotConnected/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NotConnected/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NotConnected val^\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns","title":"Returns","text":"<ul> <li>NotConnected val^</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NotConnected/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NotConnected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#parameters","title":"Parameters","text":"<ul> <li>that: NotConnected val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NotConnected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#parameters_1","title":"Parameters","text":"<ul> <li>that: NotConnected val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/","title":"NotImplemented","text":"<p>[Source] <pre><code>primitive val NotImplemented\n</code></pre></p>"},{"location":"mqtt-primitives-NotImplemented/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NotImplemented/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NotImplemented val^\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns","title":"Returns","text":"<ul> <li>NotImplemented val^</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NotImplemented/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NotImplemented val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#parameters","title":"Parameters","text":"<ul> <li>that: NotImplemented val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NotImplemented val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#parameters_1","title":"Parameters","text":"<ul> <li>that: NotImplemented val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/","title":"Packet","text":"<p>[Source]</p> <p>The minimum set of functions needed to extract the information in the fixed header and enable the packet to be interpreted correctly</p> <pre><code>trait ref Packet\n</code></pre>"},{"location":"mqtt-primitives-Packet/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Packet/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>True if the packet has been validated</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/#isa","title":"isA","text":"<p>[Source]</p> <p>True if the top four bits in the byte passed as value match the ControlArrayVal passed as controlType or false otherwise.</p> <pre><code>fun box isA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#parameters","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/#controltype","title":"controlType","text":"<p>[Source]</p> <p>The MQTT message type which should only be None if isValid() returns false</p> <pre><code>fun box controlType()\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_2","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#controlbyte","title":"controlByte","text":"<p>[Source]</p> <p>The control byte which should only be None if isValid() returns false</p> <pre><code>fun box controlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_3","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#fixedheaderlength","title":"fixedHeaderLength","text":"<p>[Source]</p> <p>The sum of the control byte and the number of bytes in the remaining length field.</p> <pre><code>fun box fixedHeaderLength()\n: USize val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-primitives-Packet/#remaininglength","title":"remainingLength","text":"<p>[Source]</p> <p>The decoded value of the remaining length field. </p> <pre><code>fun box remainingLength()\n: USize val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-primitives-Packet/#data","title":"data","text":"<p>[Source]</p> <p>Returns the raw bytes of the packet as a sendable array of U8 (ArrayVal)</p> <pre><code>fun box data()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_6","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-primitives-PacketIdentifierType/","title":"PacketIdentifierType","text":"<p>[Source] <pre><code>type PacketIdentifierType is\n(ControlPubAck val | ControlPubRec val | ControlPubComp val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketIdentifierType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPubAck val | ControlPubRec val | ControlPubComp val)</li> </ul>"},{"location":"mqtt-primitives-PacketNoIdentifierType/","title":"PacketNoIdentifierType","text":"<p>[Source] <pre><code>type PacketNoIdentifierType is\n(ControlConnect val | ControlConnAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketNoIdentifierType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-PacketWithTopicType/","title":"PacketWithTopicType","text":"<p>[Source] <pre><code>type PacketWithTopicType is\n(ControlPublish val | ControlSubscribe val | ControlUnsubscribe val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketWithTopicType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPublish val | ControlSubscribe val | ControlUnsubscribe val)</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/","title":"PublishArgs","text":"<p>[Source]</p> <p>A simple class to enable a set of args for a publish behaviour to be created with sensible defaults TODO - This needs modifying to ensure that only the IDIssuer can call createWithId.</p> <pre><code>class ref PublishArgs\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\ntopic': String val,\npayload': Array[U8 val] val,\nqos': (Qos0 val | Qos1 val | Qos2 val) = reference,\nd': Bool val = false,\nr': Bool val = false,\ncid': U16 val = 0)\n: PublishArgs val^\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#parameters","title":"Parameters","text":"<ul> <li>topic': String val</li> <li>payload': Array[U8 val] val</li> <li>qos': (Qos0 val | Qos1 val | Qos2 val) = reference</li> <li>d': Bool val = false</li> <li>r': Bool val = false</li> <li>cid': U16 val = 0</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#returns","title":"Returns","text":"<ul> <li>PublishArgs val^</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#createwithid","title":"createWithId","text":"<p>[Source]</p> <pre><code>new val createWithId(\nargs: PublishArgs val,\nnewId: U16 val)\n: PublishArgs val^\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> <li>newId: U16 val</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#returns_1","title":"Returns","text":"<ul> <li>PublishArgs val^</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#public-fields","title":"Public fields","text":""},{"location":"mqtt-primitives-PublishArgs/#var-cid-u16-val","title":"var cid: U16 val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-topic-string-val","title":"let topic: String val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-payload-arrayu8-val-val","title":"let payload: Array[U8 val] val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-qos-qos0-val-qos1-val-qos2-val","title":"let qos: (Qos0 val | Qos1 val | Qos2 val)","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-retain-bool-val","title":"let retain: Bool val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-dup-bool-val","title":"let dup: Bool val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishDUP/","title":"PublishDUP","text":"<p>[Source] <pre><code>primitive val PublishDUP\n</code></pre></p>"},{"location":"mqtt-primitives-PublishDUP/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishDUP/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishDUP val^\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#returns","title":"Returns","text":"<ul> <li>PublishDUP val^</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishDUP/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishDUP val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#parameters","title":"Parameters","text":"<ul> <li>that: PublishDUP val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishDUP val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishDUP val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/","title":"PublishQos0","text":"<p>[Source] <pre><code>primitive val PublishQos0\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos0 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#returns","title":"Returns","text":"<ul> <li>PublishQos0 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos0 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos0 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/","title":"PublishQos1","text":"<p>[Source] <pre><code>primitive val PublishQos1\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos1 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#returns","title":"Returns","text":"<ul> <li>PublishQos1 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos1 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos1 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/","title":"PublishQos2","text":"<p>[Source] <pre><code>primitive val PublishQos2\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos2 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#returns","title":"Returns","text":"<ul> <li>PublishQos2 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos2 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos2 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/","title":"PublishRetain","text":"<p>[Source] <pre><code>primitive val PublishRetain\n</code></pre></p>"},{"location":"mqtt-primitives-PublishRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishRetain val^\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#returns","title":"Returns","text":"<ul> <li>PublishRetain val^</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishRetain/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#parameters","title":"Parameters","text":"<ul> <li>that: PublishRetain val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishRetain val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos/","title":"Qos","text":"<p>[Source]</p> <p>A typeDef for the three quality of service flags </p> <pre><code>type Qos is\n(Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-primitives-Qos/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-primitives-Qos0/","title":"Qos0","text":"<p>[Source] <pre><code>primitive val Qos0\n</code></pre></p>"},{"location":"mqtt-primitives-Qos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos0 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns","title":"Returns","text":"<ul> <li>Qos0 val^</li> </ul>"},{"location":"mqtt-primitives-Qos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#parameters","title":"Parameters","text":"<ul> <li>that: Qos0 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos0 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos1/","title":"Qos1","text":"<p>[Source] <pre><code>primitive val Qos1\n</code></pre></p>"},{"location":"mqtt-primitives-Qos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos1 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns","title":"Returns","text":"<ul> <li>Qos1 val^</li> </ul>"},{"location":"mqtt-primitives-Qos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#parameters","title":"Parameters","text":"<ul> <li>that: Qos1 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos1 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos2/","title":"Qos2","text":"<p>[Source] <pre><code>primitive val Qos2\n</code></pre></p>"},{"location":"mqtt-primitives-Qos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos2 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns","title":"Returns","text":"<ul> <li>Qos2 val^</li> </ul>"},{"location":"mqtt-primitives-Qos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#parameters","title":"Parameters","text":"<ul> <li>that: Qos2 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos2 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Quit/","title":"Quit","text":"<p>[Source] <pre><code>primitive val Quit\n</code></pre></p>"},{"location":"mqtt-primitives-Quit/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Quit/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Quit val^\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns","title":"Returns","text":"<ul> <li>Quit val^</li> </ul>"},{"location":"mqtt-primitives-Quit/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Quit/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Quit/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Quit/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Quit val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#parameters","title":"Parameters","text":"<ul> <li>that: Quit val</li> </ul>"},{"location":"mqtt-primitives-Quit/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Quit/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Quit val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#parameters_1","title":"Parameters","text":"<ul> <li>that: Quit val</li> </ul>"},{"location":"mqtt-primitives-Quit/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/","title":"ReconnectFailed","text":"<p>[Source] <pre><code>primitive val ReconnectFailed\n</code></pre></p>"},{"location":"mqtt-primitives-ReconnectFailed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ReconnectFailed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ReconnectFailed val^\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns","title":"Returns","text":"<ul> <li>ReconnectFailed val^</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ReconnectFailed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ReconnectFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#parameters","title":"Parameters","text":"<ul> <li>that: ReconnectFailed val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ReconnectFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#parameters_1","title":"Parameters","text":"<ul> <li>that: ReconnectFailed val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/","title":"SoakTest","text":"<p>[Source] <pre><code>primitive val SoakTest\n</code></pre></p>"},{"location":"mqtt-primitives-SoakTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SoakTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SoakTest val^\n</code></pre>"},{"location":"mqtt-primitives-SoakTest/#returns","title":"Returns","text":"<ul> <li>SoakTest val^</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SoakTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SoakTest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SoakTest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SoakTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SoakTest/#parameters","title":"Parameters","text":"<ul> <li>that: SoakTest val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SoakTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SoakTest/#parameters_1","title":"Parameters","text":"<ul> <li>that: SoakTest val</li> </ul>"},{"location":"mqtt-primitives-SoakTest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SocketError/","title":"SocketError","text":"<p>[Source] <pre><code>primitive val SocketError\n</code></pre></p>"},{"location":"mqtt-primitives-SocketError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SocketError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SocketError val^\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns","title":"Returns","text":"<ul> <li>SocketError val^</li> </ul>"},{"location":"mqtt-primitives-SocketError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SocketError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SocketError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#parameters","title":"Parameters","text":"<ul> <li>that: SocketError val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SocketError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#parameters_1","title":"Parameters","text":"<ul> <li>that: SocketError val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Sub/","title":"Sub","text":"<p>[Source] <pre><code>primitive val Sub\n</code></pre></p>"},{"location":"mqtt-primitives-Sub/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Sub/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sub val^\n</code></pre>"},{"location":"mqtt-primitives-Sub/#returns","title":"Returns","text":"<ul> <li>Sub val^</li> </ul>"},{"location":"mqtt-primitives-Sub/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Sub/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Sub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Sub/#parameters","title":"Parameters","text":"<ul> <li>that: Sub val</li> </ul>"},{"location":"mqtt-primitives-Sub/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Sub/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Sub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Sub/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sub val</li> </ul>"},{"location":"mqtt-primitives-Sub/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubControl/","title":"SubControl","text":"<p>[Source] <pre><code>type SubControl is\n(Sub val | UnSub val)\n</code></pre></p>"},{"location":"mqtt-primitives-SubControl/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/","title":"SubscribeFailed","text":"<p>[Source] <pre><code>primitive val SubscribeFailed\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeFailed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeFailed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeFailed val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns","title":"Returns","text":"<ul> <li>SubscribeFailed val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeFailed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeFailed val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeFailed val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/","title":"SubscribeStats","text":"<p>[Source] <pre><code>primitive val SubscribeStats\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeStats/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeStats/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeStats val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns","title":"Returns","text":"<ul> <li>SubscribeStats val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeStats/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeStats val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeStats val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeStats val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeStats val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/","title":"SubscribeTest","text":"<p>[Source] <pre><code>primitive val SubscribeTest\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeTest val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns","title":"Returns","text":"<ul> <li>SubscribeTest val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeTest val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeTest val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/","title":"TestInterval","text":"<p>[Source] <pre><code>primitive val TestInterval\n</code></pre></p>"},{"location":"mqtt-primitives-TestInterval/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestInterval/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestInterval val^\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#returns","title":"Returns","text":"<ul> <li>TestInterval val^</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestInterval/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestInterval val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#parameters","title":"Parameters","text":"<ul> <li>that: TestInterval val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestInterval val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestInterval val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestLength/","title":"TestLength","text":"<p>[Source] <pre><code>primitive val TestLength\n</code></pre></p>"},{"location":"mqtt-primitives-TestLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestLength val^\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#returns","title":"Returns","text":"<ul> <li>TestLength val^</li> </ul>"},{"location":"mqtt-primitives-TestLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#parameters","title":"Parameters","text":"<ul> <li>that: TestLength val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestLength val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/","title":"TestPrefix","text":"<p>[Source] <pre><code>primitive val TestPrefix\n</code></pre></p>"},{"location":"mqtt-primitives-TestPrefix/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestPrefix val^\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#returns","title":"Returns","text":"<ul> <li>TestPrefix val^</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestPrefix/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#parameters","title":"Parameters","text":"<ul> <li>that: TestPrefix val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestPrefix val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/","title":"TestTopic","text":"<p>[Source] <pre><code>primitive val TestTopic\n</code></pre></p>"},{"location":"mqtt-primitives-TestTopic/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestTopic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestTopic val^\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#returns","title":"Returns","text":"<ul> <li>TestTopic val^</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestTopic/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#parameters","title":"Parameters","text":"<ul> <li>that: TestTopic val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestTopic val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSub/","title":"UnSub","text":"<p>[Source] <pre><code>primitive val UnSub\n</code></pre></p>"},{"location":"mqtt-primitives-UnSub/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnSub/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnSub val^\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#returns","title":"Returns","text":"<ul> <li>UnSub val^</li> </ul>"},{"location":"mqtt-primitives-UnSub/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnSub/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnSub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#parameters","title":"Parameters","text":"<ul> <li>that: UnSub val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnSub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnSub val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/","title":"UnSubscribe","text":"<p>[Source] <pre><code>primitive val UnSubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-UnSubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnSubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnSubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns","title":"Returns","text":"<ul> <li>UnSubscribe val^</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnSubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: UnSubscribe val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnSubscribe val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/","title":"UnknownError","text":"<p>[Source] <pre><code>primitive val UnknownError\n</code></pre></p>"},{"location":"mqtt-primitives-UnknownError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnknownError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnknownError val^\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns","title":"Returns","text":"<ul> <li>UnknownError val^</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnknownError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnknownError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#parameters","title":"Parameters","text":"<ul> <li>that: UnknownError val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnknownError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnknownError val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/","title":"_ToQos","text":"<p>[Source] <pre><code>class iso _ToQos is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-primitives-_ToQos/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-_ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ToQos iso^\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#returns","title":"Returns","text":"<ul> <li>_ToQos iso^</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-_ToQos/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQos/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQos/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/","title":"_ToQosBits","text":"<p>[Source] <pre><code>class iso _ToQosBits is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-primitives-_ToQosBits/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-_ToQosBits/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ToQosBits iso^\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#returns","title":"Returns","text":"<ul> <li>_ToQosBits iso^</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-_ToQosBits/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_ToQosBits/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_ToQosBits/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/","title":"_U8ToQos","text":"<p>[Source] <pre><code>class iso _U8ToQos is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-primitives-_U8ToQos/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-_U8ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _U8ToQos iso^\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#returns","title":"Returns","text":"<ul> <li>_U8ToQos iso^</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-_U8ToQos/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-_U8ToQos/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-_U8ToQos/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher--index/","title":"Package","text":"<p>No package doc string provided for mqtt/publisher.</p>"},{"location":"mqtt-publisher--index/#public-types","title":"Public Types","text":"<ul> <li>primitive FlagsToQos</li> <li>primitive IsDup</li> <li>primitive IsRetain</li> <li>actor Main</li> <li>class PubAckPacket</li> <li>class PubCompPacket</li> <li>class PubRecPacket</li> <li>class PubRelPacket</li> <li>class PublishPacket</li> <li>actor Publisher</li> <li>primitive QosToFlags</li> </ul>"},{"location":"mqtt-publisher--index/#private-types","title":"Private Types","text":"<ul> <li>class _PubAck</li> <li>class _PubComp</li> <li>class _PubRec</li> <li>class _PubRelCompose</li> <li>class _PubRelFromData</li> <li>class _Publish1</li> <li>class _Publish10</li> <li>class _Publish2</li> <li>class _Publish3</li> <li>class _Publish4</li> <li>class _Publish5</li> <li>class _Publish6</li> <li>class _Publish7</li> <li>class _Publish8</li> <li>class _Publish9</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/","title":"FlagsToQos","text":"<p>[Source] <pre><code>primitive val FlagsToQos\n</code></pre></p>"},{"location":"mqtt-publisher-FlagsToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-FlagsToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FlagsToQos val^\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#returns","title":"Returns","text":"<ul> <li>FlagsToQos val^</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-FlagsToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes an unmasked control byte and extracts the Qos from bits 1 and 2. Return QoS0 for invalid flags TODO - Combine with above once we have all the use cases surfaced</p> <pre><code>fun box apply(\nvalue: U8 val)\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FlagsToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: FlagsToQos val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FlagsToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: FlagsToQos val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/","title":"IsDup","text":"<p>[Source] <pre><code>primitive val IsDup\n</code></pre></p>"},{"location":"mqtt-publisher-IsDup/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-IsDup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsDup val^\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#returns","title":"Returns","text":"<ul> <li>IsDup val^</li> </ul>"},{"location":"mqtt-publisher-IsDup/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-IsDup/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the DUP flag is set in the control byte</p> <pre><code>fun box apply(\nvalue: U8 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsDup val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsDup val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsDup val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsDup val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/","title":"IsRetain","text":"<p>[Source] <pre><code>primitive val IsRetain\n</code></pre></p>"},{"location":"mqtt-publisher-IsRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-IsRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsRetain val^\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#returns","title":"Returns","text":"<ul> <li>IsRetain val^</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-IsRetain/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the retain flag is set in the control bytes</p> <pre><code>fun box apply(\nvalue: U8 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsRetain val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsRetain val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-publisher-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-publisher-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-publisher-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-publisher-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-publisher-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-publisher-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-publisher-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-publisher-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-publisher-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/","title":"PubAckPacket","text":"<p>[Source]</p> <p>A PUBACK Packet is the response to a PUBLISH Packet with QoS level 1.</p> <p>Fixed header B1  Control byte (must be 0b01000000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubAck has no payload</p> <pre><code>class ref PubAckPacket\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubAckPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns","title":"Returns","text":"<ul> <li>PubAckPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubAckPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#returns_1","title":"Returns","text":"<ul> <li>PubAckPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubAckPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/","title":"PubCompPacket","text":"<p>[Source]</p> <p>The PUBCOMP Packet is the response to a PUBREL Packet. It is the fourth and final packet of the QoS 2 protocol exchange.</p> <p>Fixed header B1  Control byte (must be 0b01110000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubComp has no payload</p> <pre><code>class ref PubCompPacket\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubCompPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubCompPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns","title":"Returns","text":"<ul> <li>PubCompPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubCompPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#returns_1","title":"Returns","text":"<ul> <li>PubCompPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubCompPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/","title":"PubRecPacket","text":"<p>[Source]</p> <p>A PUBREC Packet is the response to a PUBLISH Packet with QoS 2. It is the  second packet of the QoS 2 protocol exchange</p> <p>Fixed header B1  Control byte (must be 0b01010000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubRec has no payload</p> <pre><code>class ref PubRecPacket\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubRecPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubRecPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns","title":"Returns","text":"<ul> <li>PubRecPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubRecPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#returns_1","title":"Returns","text":"<ul> <li>PubRecPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubRecPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/","title":"PubRelPacket","text":"<p>[Source]</p> <p>A PUBREL Packet is the response to a PUBREC Packet. It is the third packet of the QoS 2 protocol  exchange</p> <p>Fixed header B1  Control byte (must be 0b01100010) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header - Always bytes 2 and 3 of the packet B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubRel has no payload</p> <p>Create a PubRel packet from a passed BasePacket and provide a public function to retrieve the id. TODO - Once all the ack packets are done, check for consistency. It may be better to  simply check for a valid packet and return the id, or zero if not valid</p> <pre><code>class ref PubRelPacket\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubRelPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubRelPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns","title":"Returns","text":"<ul> <li>PubRelPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubRelPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#returns_1","title":"Returns","text":"<ul> <li>PubRelPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubRelPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubRel packet for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency. Do we need a id != 0 check?</p> <pre><code>fun box compose(\npktId: U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#parameters_1","title":"Parameters","text":"<ul> <li>pktId: U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/","title":"PublishPacket","text":"<p>[Source]</p>"},{"location":"mqtt-publisher-PublishPacket/#packet-format","title":"Packet Format","text":""},{"location":"mqtt-publisher-PublishPacket/#fixed-header","title":"Fixed header","text":"<p>B1  Control byte - must be 0b0011DQQR where D:DUP flag, QQ is QOS and R is Retain B2. Remaining Length - This is the length of variable header plus the length of  the payload. The remaining length field can include 1 to 4 bytes.</p> <p>DUP - If the DUP flag is set to 0, it indicates that this is the first occasion that the Client or Server has attempted to send this MQTT PUBLISH Packet. If the DUP flag is set to 1, it indicates that this might be re-delivery of an earlier attempt to send the Packet. The recipient of a Control Packet that contains the DUP flag set to 1 cannot assume that it has seen an earlier copy of this packet.</p> <p>QOS - The Packet Identifier field is only present in PUBLISH Packets where the QoS level is 1 or 2.</p> <p>Retain - When sending a PUBLISH Packet to a Client the Server MUST set the RETAIN flag to 1 if a message is sent as a result of a new subscription being made by a Client. It MUST set the RETAIN flag to 0 when a PUBLISH Packet is sent to a Client because it matches an established subscription regardless of how the flag was set in the message it received. If the RETAIN flag is set to 1, in a PUBLISH Packet sent by a CLIENT to a  SERVER, the Server MUST store the Application Message and its QoS, so that it can be delivered to future subscribers whose subscriptions match its topic name.</p>"},{"location":"mqtt-publisher-PublishPacket/#variable-header","title":"Variable header","text":"<p>Topic name B1 - Length MSB B2 - Length LSB B3-&gt; Topic Characters</p> <p>Packet Id Only present in PUBLISH Packets where the QoS level is 1 or 2. Bn    Packet id MSB Bn+1  Packet id LSB </p>"},{"location":"mqtt-publisher-PublishPacket/#payload","title":"Payload","text":"<p>The Payload contains the Application Message that is being published.  The content and format of the data is application specific. The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header. It is valid for a PUBLISH Packet to contain a zero length payload.</p>"},{"location":"mqtt-publisher-PublishPacket/#response","title":"Response","text":"<p>The receiver of a PUBLISH Packet MUST respond as follows: - QoS   None - QoS 1 PUBACK Packet - QoS 2 PUBREC Packet</p> <pre><code>class ref PublishPacket\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PublishPacket/#create","title":"create","text":"<p>[Source]</p> <p>This creates a default initialised PublishPacket that can be used as a receiver for calls to compose. Not intended to be used to create PublishPackets. Use CreateFromPacket(BasePacket) to create PublishPackets.</p> <pre><code>new ref create()\n: PublishPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns","title":"Returns","text":"<ul> <li>PublishPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates a PublishPacket with the fields set from the passed BasePacket</p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: PublishPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_1","title":"Returns","text":"<ul> <li>PublishPacket val^</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PublishPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Returns a publish packet ready to send to the broker. </p> <pre><code>fun box compose(\nargs: PublishArgs val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_2","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_4","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#qos","title":"qos","text":"<p>[Source]</p> <pre><code>fun box qos()\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_5","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#topic","title":"topic","text":"<p>[Source]</p> <pre><code>fun box topic()\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_6","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#payload_1","title":"payload","text":"<p>[Source]</p> <pre><code>fun box payload()\n: (Array[U8 val] val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_7","title":"Returns","text":"<ul> <li>(Array[U8 val] val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#payloadasstring","title":"payloadAsString","text":"<p>[Source]</p> <pre><code>fun box payloadAsString()\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_8","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-publisher-PublishPacket/#_build","title":"_build","text":"<p>[Source]</p> <p>An rather fiddly function to verify and decode a publish packet. Can be made look more simple by eliminating the intermediate variable - but we will wait until we have a little more confidence in using it first. TODO - Much of this is duplicated in BasePacket. Make BasePacket a Trait and have publishPacket as a decomposable</p> <pre><code>fun ref _build(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters_2","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/","title":"Publisher","text":"<p>[Source]</p> <p>Represents an application level publication topic. Provides a public Publish topic that: 1. takes the payload and qos 1. passes these arguments to IdIssuer to get the next unique id 2. provides an apply behaviour so IdNotifyPub can call us back and trigger sending  the completed publish packet to router</p> <p>Publisher is responsible for managing its in-flight window. For 3.1.1 we will keep this to one packet for now but with a view to parameterizing this for MQTT 5 compliance.</p> <p>To manage the in-flight window we only allow n messages to be pending ack and queue any that arrive before the ack arrives. For 3.1.1 compliance we only need to do this for QoS 1.</p> <p>TODO - The classes for the Pub ack types are virtually identical and could all be  replaced by a factory class once we have all the functions coded</p> <pre><code>actor tag Publisher is\nIdNotifyPub ref,\nMqActor ref\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#implements","title":"Implements","text":"<ul> <li>IdNotifyPub ref</li> <li>MqActor ref</li> </ul>"},{"location":"mqtt-publisher-Publisher/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-Publisher/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag,\ntopic': String val)\n: Publisher tag^\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>topic': String val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns","title":"Returns","text":"<ul> <li>Publisher tag^</li> </ul>"},{"location":"mqtt-publisher-Publisher/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-publisher-Publisher/#publish","title":"publish","text":"<p>[Source]</p> <p>Public API call to publish a payload</p> <pre><code>be publish(\nargs: PublishArgs val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#apply","title":"apply","text":"<p>[Source]</p> <p>Called by IdIssuer once an id has been allocated and we have a complete set of arguments to send and/or save to the queue. NextQosnArgs determines whether we: 1. continue to publish the current set of args 2. pull a different set of args of the pending queue and send those instead, queuing our current set 3. queue the current set and wait for a space to open in the in-flight window In the case of QoS 0, we have already sent the packet via the publish behaviour because there is no id </p> <pre><code>be apply(\nargs: PublishArgs val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_2","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#ondata","title":"onData","text":"<p>[Source]</p> <p>Called by router via the findPublisherById map [Cid,Published] when it receives one of the three publish acknowledge packets (PubAck for QoS1, PubRec or PubComp for Qos2)</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_3","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_4","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onduckandcover","title":"onDuckAndCover","text":"<p>[Source]</p> <p>We need to save state because the broker is disconnecting or something has gone awry.   </p> <pre><code>be onDuckAndCover()\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-Publisher/#nextqos1args","title":"nextQos1Args","text":"<p>[Source]</p> <p>Manages the in-flight window for QoS 1 messages and saves the packet in case we don't get a pubAck</p> <p>If we are passed args we push them onto the back of the pending queue. Then we  check whether the in-flight window is open. If it is we take the args at the head of the queue, send them to router and add the packet to the in-flight map.</p> <p>If we are passed None, we check whether the in-flight window is open. If it is we take the args at the head of the queue, if there are any, and send them to router,  addding the packet to the in-flight map.</p> <pre><code>fun ref nextQos1Args(\nargsOrNone: (PublishArgs val | None val))\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_5","title":"Parameters","text":"<ul> <li>argsOrNone: (PublishArgs val | None val)</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#inflightlimitreached","title":"inFlightLimitReached","text":"<p>[Source]</p> <p>Returns true if there are fewer messages in-flight than our in-flight limit</p> <pre><code>fun box inFlightLimitReached()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#nextqos2args","title":"nextQos2Args","text":"<p>[Source]</p> <p>For protocol Vsn 3.1.1 there is no in-flight limit for QoS 2 messages. This means  the all we need to do is save the packet in case we don't get a pubRec. We're doing it like this though because protocol Vsn 5 has in-flight windows for all QoS. Only called from within publisher so must be using Cid</p> <pre><code>fun ref nextQos2Args(\nargsOrNone: (PublishArgs val | None val))\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_6","title":"Parameters","text":"<ul> <li>argsOrNone: (PublishArgs val | None val)</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#sendtorouter","title":"sendToRouter","text":"<p>[Source]</p> <p>Make a publish packet with the passed arguments and send it to router</p> <pre><code>fun box sendToRouter(\nargs: PublishArgs val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_7","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpuback","title":"onPubAck","text":"<p>[Source]</p> <p>The single ack packet for QoS 1 messages. Once we get this we can discard the  publish message. The onPubAck can only be called in response to a routed PubAck generated by the Broker in response to a Publish with a Cid. So id is Cid</p> <pre><code>fun ref onPubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_8","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpubrec","title":"onPubRec","text":"<p>[Source]</p> <p>The first of the two acknowledgements for a QoS 2 transaction. Once we get a PubRec we can discard the publish message then send (and store) a PubRel</p> <pre><code>fun ref onPubRec(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_9","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#dopubrel","title":"doPubRel","text":"<p>[Source]</p> <p>Send a PubRelPacket with the passed Cid to the router.</p> <pre><code>fun ref doPubRel(\ncid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_10","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpubcomp","title":"onPubComp","text":"<p>[Source]</p> <p>The second of the two acknowledgement messages of the QoS 2 transaction. Once we get a PubComp we can delete the saved PubRel message and check-in the id. Always called with a Cid</p> <pre><code>fun ref onPubComp(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_11","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#publishcomplete","title":"publishComplete","text":"<p>[Source]</p> <p>Called when we have received our last publish acknowledgement. We can now remove the pubRel message from the map and tell the router to do it's necessary cleanup before it releases the id.  This function should be preceded by deletion of the publish packet in the case of QoS 1 publication and by deletion of the PubRel packet in the case of QoS 2.</p> <pre><code>fun ref publishComplete(\ncid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_12","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/","title":"QosToFlags","text":"<p>[Source] <pre><code>primitive val QosToFlags\n</code></pre></p>"},{"location":"mqtt-publisher-QosToFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-QosToFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: QosToFlags val^\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#returns","title":"Returns","text":"<ul> <li>QosToFlags val^</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-QosToFlags/#apply","title":"apply","text":"<p>[Source]</p> <p>Take a Qos and return the Qos flags for bits 1 and 2 of the  Publish Packet Note - Combine with above once we have all the use cases surfaced</p> <pre><code>fun box apply(\nq: (Qos0 val | Qos1 val | Qos2 val))\n: U8 val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters","title":"Parameters","text":"<ul> <li>q: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: QosToFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: QosToFlags val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: QosToFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters_2","title":"Parameters","text":"<ul> <li>that: QosToFlags val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/","title":"_PubAck","text":"<p>[Source] <pre><code>class iso _PubAck is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_PubAck/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_PubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PubAck iso^\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#returns","title":"Returns","text":"<ul> <li>_PubAck iso^</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_PubAck/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubAck/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubAck/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/","title":"_PubComp","text":"<p>[Source] <pre><code>class iso _PubComp is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_PubComp/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_PubComp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PubComp iso^\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#returns","title":"Returns","text":"<ul> <li>_PubComp iso^</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_PubComp/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubComp/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubComp/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/","title":"_PubRec","text":"<p>[Source] <pre><code>class iso _PubRec is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_PubRec/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_PubRec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PubRec iso^\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#returns","title":"Returns","text":"<ul> <li>_PubRec iso^</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_PubRec/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRec/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRec/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/","title":"_PubRelCompose","text":"<p>[Source] <pre><code>class iso _PubRelCompose is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_PubRelCompose/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_PubRelCompose/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PubRelCompose iso^\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#returns","title":"Returns","text":"<ul> <li>_PubRelCompose iso^</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_PubRelCompose/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelCompose/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelCompose/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/","title":"_PubRelFromData","text":"<p>[Source] <pre><code>class iso _PubRelFromData is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_PubRelFromData/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_PubRelFromData/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PubRelFromData iso^\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#returns","title":"Returns","text":"<ul> <li>_PubRelFromData iso^</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_PubRelFromData/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_PubRelFromData/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_PubRelFromData/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/","title":"_Publish1","text":"<p>[Source] <pre><code>class iso _Publish1 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish1/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish1 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#returns","title":"Returns","text":"<ul> <li>_Publish1 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish1/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish1/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish1/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/","title":"_Publish10","text":"<p>[Source] <pre><code>class iso _Publish10 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish10/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish10/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish10 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#returns","title":"Returns","text":"<ul> <li>_Publish10 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish10/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish10/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish10/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/","title":"_Publish2","text":"<p>[Source] <pre><code>class iso _Publish2 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish2/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish2 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#returns","title":"Returns","text":"<ul> <li>_Publish2 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish2/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish2/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish2/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/","title":"_Publish3","text":"<p>[Source] <pre><code>class iso _Publish3 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish3/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish3 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#returns","title":"Returns","text":"<ul> <li>_Publish3 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish3/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish3/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish3/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/","title":"_Publish4","text":"<p>[Source] <pre><code>class iso _Publish4 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish4/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish4/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish4 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#returns","title":"Returns","text":"<ul> <li>_Publish4 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish4/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish4/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish4/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/","title":"_Publish5","text":"<p>[Source] <pre><code>class iso _Publish5 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish5/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish5/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish5 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#returns","title":"Returns","text":"<ul> <li>_Publish5 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish5/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish5/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish5/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/","title":"_Publish6","text":"<p>[Source] <pre><code>class iso _Publish6 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish6/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish6/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish6 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#returns","title":"Returns","text":"<ul> <li>_Publish6 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish6/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish6/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish6/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/","title":"_Publish7","text":"<p>[Source] <pre><code>class iso _Publish7 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish7/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish7/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish7 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#returns","title":"Returns","text":"<ul> <li>_Publish7 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish7/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish7/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish7/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/","title":"_Publish8","text":"<p>[Source] <pre><code>class iso _Publish8 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish8/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish8/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish8 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#returns","title":"Returns","text":"<ul> <li>_Publish8 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish8/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish8/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish8/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/","title":"_Publish9","text":"<p>[Source] <pre><code>class iso _Publish9 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-publisher-_Publish9/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-_Publish9/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Publish9 iso^\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#returns","title":"Returns","text":"<ul> <li>_Publish9 iso^</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-_Publish9/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-_Publish9/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-publisher-_Publish9/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-router--index/","title":"Package","text":"<p>Router is responsible for interpreting data packets from the broker sufficiently to be able to route them to the appropriate handler. The table below shows which  messages are expected in each direction.</p> <p>Each handler then onward routes the data to the actor instance that is dealing with  it.  </p>"},{"location":"mqtt-router--index/#bidirectional","title":"Bidirectional","text":"Message Value Usage PUBLISH 3 Publish message PUBACK 4 Publish acknowledgment PUBREC 5 Publish received (assured delivery part 1) PUBREL 6 Publish release (assured delivery part 2) PUBCOMP 7 Publish complete (assured delivery part 3)"},{"location":"mqtt-router--index/#client-to-server","title":"Client to Server","text":"Message Value Usage CONNECT 1 Client request to connect to Server SUBSCRIBE 8 Client subscribe request UNSUBSCRIBE 10 Unsubscribe request PINGREQ 12 PING request DISCONNECT 14 Client is disconnecting"},{"location":"mqtt-router--index/#server-to-client","title":"Server to Client","text":"Message Value Usage CONNACK 2 Connect acknowledgment SUBACK 9 Subscribe acknowledgment UNSUBACK 11 Unsubscribe acknowledgment PINGRESP 13 PING response"},{"location":"mqtt-router--index/#public-types","title":"Public Types","text":"<ul> <li>actor Router</li> </ul>"},{"location":"mqtt-router-Router/","title":"Router","text":"<p>[Source]</p> <p>Router accepts incomming MQTT packets and routes these by type to the appropriate  handler actor. Router is also responsible for writing bytes back out to the Broker via the TCP connection. </p> <p>Router is constructed by Client and passed the configuration details needed to  establish the Broker connection. </p> <p>When the TCP connection is available, Client calls the onTCPConnect behaviour. This  enables Router to start a Connector actor that is responsible for the connection and  interpreting the Connack packet that the Broker sends back.</p> <p>Router only deals with MQTT packet internals to the extent needed to route the packets to the right handler actor. This means it can limit its interest to the fixed header of the packet and not get involved in interpreting variable headers or payloads. This is  why we have the DataPacket class which is used for routing and then re-interpreted  according to its control byte on arrival.</p> <p>Router constructs the idIssuer and maintains a map of subscribers keyed by id and so  all subscription requests are sent via the router's subscribe behaviour.</p> <p>Router also starts the Pinger actor responsible for keepAlive pings to the Broker, and the  system ticker used for checking message timetouts.</p> <p>The Client and Server MUST store Session state for the entire duration of the Session [MQTT-4.1.0-1]. A Session MUST last at least as long it has an active Network Connection</p> <p>The implication of this is that if there is a network disconnection then the Session state  does not need to be stored. So the client can request any saved state from the Broker but the Broker cannot demand any saved state from a client unless CleanSession = 0. But if the client does set CleanSession = 0 then it must be prepared for resent Publish and PubRel packets.</p> <p>Registrar usage - Router adds IdIssuer actor that issues ids to other actors - Router adds the pinger actor that sends pingreq messages </p> <pre><code>actor tag Router\n</code></pre>"},{"location":"mqtt-router-Router/#constructors","title":"Constructors","text":""},{"location":"mqtt-router-Router/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag,\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: Router tag^\n</code></pre>"},{"location":"mqtt-router-Router/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-router-Router/#returns","title":"Returns","text":"<ul> <li>Router tag^</li> </ul>"},{"location":"mqtt-router-Router/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-router-Router/#route","title":"route","text":"<p>[Source]</p> <p>This function demultiplexes the incomming packet stream according to packet type. In comming Publish and PubRel packets have Broker assigned Ids (bids) so these  use an id to subscriber map with Bid keys. Outgoing messages (from both publishers) and subscribers use client assigned ids (cids). The two ids need to be indexed separately  because the numeric ranges can overlap. TODO - refactor into subtypes to reduce the number of matches</p> <pre><code>be route(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_1","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#onpayloadcomplete","title":"onPayloadComplete","text":"<p>[Source]</p> <p>Called by a subscriber when it has completed processing of an incomming message This tells router to remove the link between the Bid and the subscriber. Note - This is called as the final step of an incomming message so it should  always receive a Bid and the Bid was issued by the Broker and should not be checked-in</p> <pre><code>be onPayloadComplete(\nbid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_2","title":"Parameters","text":"<ul> <li>bid: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#onpublish","title":"onPublish","text":"<p>[Source]</p> <p>Called by a publisher to publish packet on topic. Comes through the router so we have a central register of all publishers. Called with a Client allocated id (Cid). So _actorById is indexed by Cid.  TODO - During dev we have a duplicate check but this can be removed later</p> <pre><code>be onPublish(\npub: Publisher tag,\ntopic: String val,\nid: U16 val,\npacket: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_3","title":"Parameters","text":"<ul> <li>pub: Publisher tag</li> <li>topic: String val</li> <li>id: U16 val</li> <li>packet: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onpublishqos0","title":"onPublishQos0","text":"<p>[Source]</p> <p>Called by a publisher to publish a QoS 0 packet on topic. </p> <pre><code>be onPublishQos0(\npacket: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_4","title":"Parameters","text":"<ul> <li>packet: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onpublishcomplete","title":"onPublishComplete","text":"<p>[Source]</p> <p>Called by a publisher when an id has completed its processing. This tells router to remove the link between the id and the publisher. Note that QoS0 packets never get into the _actorById map and do not result in a call to onPublishComplete</p> <pre><code>be onPublishComplete(\nid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_5","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#onsubscribe","title":"onSubscribe","text":"<p>[Source]</p> <p>Called by a subscriber to subscribe to a new topic. Comes through router so we have a central register of who is subscribed to what. Only called by a subscriber so we know the id will always be a Cid TODO - We should only add the subscriber to the subscriberByTopic map when we get a SubAck with an approval but consider these two scenarios: 1. We don't put the Subscriber in the map here but wait until we get an Ack: We get a publish  message before we have finished processing the ack and adding Subscriber to the map. The next incomming publish looks in _subscriberByTopic, can't find subscriber and so decides this is an allocated subscription... duplicate subscribers... bad things happen. 2. We put the Subscriber in the map here and then get rejected by the broker: The subscriber sits in the map but gets nothing, the Nack is reported to the App and the App must unsubscribe to remove it. No error but additional work for App</p> <p>Compromise - Put subscriber in map here but remove it from Map if we get a Nack. Worst  case is an unecessary insert/remove in the unlikely event of a rejection. This also matches unsub case where we have to continue to ack messages between unsub and unsub ack TODO - Duplicate id check can be removed after testing TODO - Decide what to do if we already have a subscription for a topic. This could be a duplicate application request or it could be because we have restored a session, got a message on one of the stored subscriptions and completed our assigned message behaviour.</p> <pre><code>be onSubscribe(\nsub: Subscriber tag,\ntopic: String val,\nid: U16 val,\npacket: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_6","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>topic: String val</li> <li>id: U16 val</li> <li>packet: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onsubscribecomplete","title":"onSubscribeComplete","text":"<p>[Source]</p> <p>Called by a subscriber to indicate that it has received a SubAck and so has finished processing its subscribe request. Subscribers can subscribe and unsubscribe  repeatedly throughout their lifetime but always to the same topic. We only get the Cid back from the Broker so we need to do a look-up to find the subscriber whose subscription processing has been completed. TODO - If accepted is false then remove the subscriber from the _subscriberByTopic map because we got a rejection (See comment to onSubscribe)</p> <pre><code>be onSubscribeComplete(\nsub: Subscriber tag,\nid: U16 val,\naccepted: Bool val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_7","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>id: U16 val</li> <li>accepted: Bool val</li> </ul>"},{"location":"mqtt-router-Router/#onunsubscribe","title":"onUnsubscribe","text":"<p>[Source]</p> <p>Called by a subscriber to unsubscribe to a topic. Subscribers can subscribe and unsubscribe repeatedly throughout their lifetime. An unsubscribed subscriber is still alive but does not appear in the router's subscriber map Note - The spec states that clients must continue to acknowledge messages until an unsub request has been acknowledged - therefore we don't remove the subscriber here, only in the onUnsubAck behaviour TODO - During dev we have a duplicate check but this can be removed later</p> <pre><code>be onUnsubscribe(\nsub: Subscriber tag,\nid: U16 val,\npacket: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_8","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>id: U16 val</li> <li>packet: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onunsubscribecomplete","title":"onUnsubscribeComplete","text":"<p>[Source]</p> <p>Called by a Subscriber when the subscriber has got confirmation that its Unsubscribe request has been acknowledged by the Broker. The id is a Cid because the Unsubscribe message can only be generated by the client.  At this point, router can remove the entry for the topic from the subscriberByTopic  map and remove the id from the subscriberById map and check-in the id. TODO - Note that this implies only one subscriber per topic</p> <pre><code>be onUnsubscribeComplete(\nsub: Subscriber tag,\nid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_9","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>id: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#ontick","title":"onTick","text":"<p>[Source]</p> <p>OnTick is called on every system tick by Ticker. Router then calls all of the Publishers and Subscribers who have transactions in-flight. Publishers and  Subscribers that don't have transactions in-flight don't need to be notified because they have no in-flight messages to time-out </p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_10","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-router-Router/#doping","title":"doPing","text":"<p>[Source]</p> <p>Ask the Broker for a pingResp and debit the number of times we have asked without a response. If we have asked three times with no response then assume the broker has gone away and start the clean-up process. We also send a disconnect packet just in case the Broker comes back in the meantime and wonders where we are.</p> <pre><code>be doPing()\n</code></pre>"},{"location":"mqtt-router-Router/#ontcpconnect","title":"onTcpConnect","text":"<p>[Source]</p> <p>Once we know that we have a TCP connection we can safely start the Connector  actor to ask the Broker for a session. The reponse (a CONNACK) will return  via a call to our .route behaviour from assemblr</p> <pre><code>be onTcpConnect(\ntcp: TCPConnection tag)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_11","title":"Parameters","text":"<ul> <li>tcp: TCPConnection tag</li> </ul>"},{"location":"mqtt-router-Router/#onbrokerconnect","title":"onBrokerConnect","text":"<p>[Source]</p> <p>When this is called we should have a valid Broker connection with our local  state reflecting the (potentially saved) state in Broker.</p> <pre><code>be onBrokerConnect()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerrestore","title":"onBrokerRestore","text":"<p>[Source]</p> <p>This behaviour is called by connector if the Broker has accepted a connection with CleanSession = 0 and has a saved session for this client. </p> <p>A Client with stored Session state will expect the Server to maintain its stored  Session state. In the event that the value of Session Present received by the Client from the Server is not as expected, the Client can choose whether to proceed with the Session or to disconnect. The Client can discard the Session state on both Client and Server by disconnecting, connecting with Clean Session set to 1 and then disconnecting again.</p> <p>This means that we should check here to see whether the value of cleansession returned from the Broker matches our request in config</p> <p>So, when this is behavior is called by connector: 1. we have a valid Broker connection 2. the Broker may send us unack'd Publish and PubRel messages 3. we need to save our state and persist it on disconnect (!)</p> <p>When a Client reconnects with CleanSession set to 0, both the Client and Server MUST re-send any  unacknowledged PUBLISH Packets (where QoS &gt; 0) and PUBREL Packets using their original Packet  Identifiers [MQTT-4.4.0-1]. This is the only circumstance where a Client or Server is REQUIRED to  redeliver messages.</p> <p>So: 1.  we may have unack'd Publish and pubRel messages with Cids to be re-sent,   2.  we may receive Publish messages with Bids for which we have no subscriber yet, and 3.  we may receive PubRel messages with Bids which we do not have in our map Yikes</p> <pre><code>be onBrokerRestore()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerstatenotfound","title":"onBrokerStateNotFound","text":"<p>[Source]</p> <p>This behaviour is called by connector if the Broker has accepted a connection with CleanSession = 0 and but cannot find a saved session for this client. In this event we must inform the app and await further instructions.  TODO - Add main method for handling session not found?</p> <pre><code>be onBrokerStateNotFound()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerrefusal","title":"onBrokerRefusal","text":"<p>[Source]</p> <p>Called by Connector if the Broker has refused the connection</p> <pre><code>be onBrokerRefusal(\nreason: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | \nConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_12","title":"Parameters","text":"<ul> <li>reason: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val |      ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-router-Router/#onerror","title":"onError","text":"<p>[Source]</p> <pre><code>be onError(\nerrorCode: (NoError val | ForbiddenType val | ForbiddenFlags val | \nForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | \nInvalidType val | InvalidControl val | InvalidFlags val | \nInvalidRemainingLength val | MalformedRequest val | MalformedResponse val | \nCleanSessionRequired val | SubscribeFailed val | NotConnected val | \nSocketError val | ConnectionClosed val | ReconnectFailed val | \nConnectionRefused val | UnknownError val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_13","title":"Parameters","text":"<ul> <li>errorCode: (NoError val | ForbiddenType val | ForbiddenFlags val |      ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val |      InvalidType val | InvalidControl val | InvalidFlags val |      InvalidRemainingLength val | MalformedRequest val | MalformedResponse val |      CleanSessionRequired val | SubscribeFailed val | NotConnected val |      SocketError val | ConnectionClosed val | ReconnectFailed val |      ConnectionRefused val | UnknownError val)</li> </ul>"},{"location":"mqtt-router-Router/#ontcpdisconnect","title":"onTCPDisconnect","text":"<p>[Source]</p> <p>Called if the TCP connection is closed in client</p> <pre><code>be onTCPDisconnect(\nerrorCode: (NoError val | ForbiddenType val | ForbiddenFlags val | \nForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | \nInvalidType val | InvalidControl val | InvalidFlags val | \nInvalidRemainingLength val | MalformedRequest val | MalformedResponse val | \nCleanSessionRequired val | SubscribeFailed val | NotConnected val | \nSocketError val | ConnectionClosed val | ReconnectFailed val | \nConnectionRefused val | UnknownError val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_14","title":"Parameters","text":"<ul> <li>errorCode: (NoError val | ForbiddenType val | ForbiddenFlags val |      ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val |      InvalidType val | InvalidControl val | InvalidFlags val |      InvalidRemainingLength val | MalformedRequest val | MalformedResponse val |      CleanSessionRequired val | SubscribeFailed val | NotConnected val |      SocketError val | ConnectionClosed val | ReconnectFailed val |      ConnectionRefused val | UnknownError val)</li> </ul>"},{"location":"mqtt-router-Router/#disconnectbroker","title":"disconnectBroker","text":"<p>[Source]</p> <p>This is called to disconnect cleanly from the Broker. DISCONNECT must be the last message sent by the client to the server. The client must close the TCP connection after sending DISCONNECT (so any clean-up from there on must be independent of the network)</p> <pre><code>be disconnectBroker()\n</code></pre>"},{"location":"mqtt-router-Router/#cancelkeepalive","title":"cancelKeepAlive","text":"<p>[Source]</p> <p>We make this a behaviour so that main can cancel it in the event of an error. Otherwise router can terminate but leave pinger pinging - which means the process won't terminate.</p> <pre><code>be cancelKeepAlive()\n</code></pre>"},{"location":"mqtt-router-Router/#send","title":"send","text":"<p>[Source]</p> <p>Check the TCP connection is valid and use it to send our packet</p> <pre><code>be send(\ndata: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_15","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#showmessage","title":"showMessage","text":"<p>[Source]</p> <pre><code>be showMessage(\ns1: String val,\ns2: String val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_16","title":"Parameters","text":"<ul> <li>s1: String val</li> <li>s2: String val</li> </ul>"},{"location":"mqtt-router-Router/#showstatus","title":"showStatus","text":"<p>[Source]</p> <pre><code>be showStatus(\nstatus: String val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_17","title":"Parameters","text":"<ul> <li>status: String val</li> </ul>"},{"location":"mqtt-router-Router/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-router-Router/#cleanup","title":"cleanup","text":"<p>[Source]</p> <pre><code>fun ref cleanup()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#savestate","title":"saveState","text":"<p>[Source]</p> <p>Called when we have lost connection with the Broker and need to save our state in the sure and certain hope of the ressurection</p> <pre><code>fun box saveState()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolconnect","title":"onControlConnect","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlConnect(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_18","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolsubscribe","title":"onControlSubscribe","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun ref onControlSubscribe(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_19","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolunsubscribe","title":"onControlUnsubscribe","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlUnsubscribe(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_20","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolpingreq","title":"onControlPingReq","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlPingReq(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_21","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontroldisconnect","title":"onControlDisconnect","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlDisconnect(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_22","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-router-Router/#_findactorbyid","title":"_findActorById","text":"<p>[Source]</p> <p>Get the packet id from a PubAck, PubRel, PubRec, PubComp and UnsubAck packets. For these packet types the RL field is always one byte (=0x02) and the id bytes are always in bytes 2 and 3. Because we are not implementing multi-subscriber the suback id will also be in  bytes 2 and 3. We search the subscriber map by Id to find the subscriber who is working this id. Note - This will not work if we implement multi-subscribe</p> <pre><code>fun box _findActorById(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_23","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_findsubscriberbytopic","title":"_findSubscriberByTopic","text":"<p>[Source]</p> <p>Process a Publish Packet and route to the appropriate subscriber. All publish packets have a topic and this is how we locate the subscriber. There is always a 1:1 mapping between topics and subscribers (at least in spec 3.1.1) Note - From the specification:  </p> <p>The Client and Server assign Packet Identifiers independently of each other. As a result, Client Server pairs can participate in concurrent message exchanges using the same Packet Identifiers. It is possible for a Client to send a PUBLISH Packet with Packet  Identifier 0x1234 and then receive a different PUBLISH with Packet Identifier 0x1234 from its Server before it receives a PUBACK for the PUBLISH that it sent.</p> <p>So - our outgoing publish with Id=3 is not the same as an incomming publish with id=3 but this is OK because we are using the Broker allocated id (bid) for incomming publish  messages and the Client allocated id (cid) for outgoing messages.  _findSubscriberByTopic is only called in response to an incomming publish so uses Bid. TODO - The duplicate check on Broker id can probably be optimised out.</p> <pre><code>fun ref _findSubscriberByTopic(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_24","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_findpayloadbyid","title":"_findPayloadById","text":"<p>[Source]</p> <p>We search the payload map by Bid to find the subscriber who is working this Bid.</p> <pre><code>fun box _findPayloadById(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_25","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_doassignedsubscription","title":"_doAssignedSubscription","text":"<p>[Source]</p> <p>Only called if we receive a Publish message and we have no record of a Subscriber that has subscribed to that topic. Apparently, this is possible in Protocol 3.1.1. From the specification:  </p> <p>A Client could receive messages that do not match any of its explicit Subscriptions. This can happen if the Broker:  1. automatically assigned a subscription to the Client 2. sends a Publish or PubRel message while the unsubscribe message is in-flight 3. The client has connected with CleanSession=0 and is getting retransmissions </p> <p>The Client MUST acknowledge any Publish Packet it receives according to the applicable QoS rules regardless of whether it elects to process the message it contains.  </p> <p>Note - the receiver does not ack any Publish packets it received but hadn't ack'd at the time of the disconnect. Therefore don't save the incomming publication list because the sender will re-send anything we haven't ack'd.</p> <p>Case 1. We can include the subscription in the local subscriber map then re-route the packet to let nature take its course. We don't use router.subscribe() because we don't want subscriber to send a another subscription request to the Broker.  TODO - We need to remove this local only subscriber from the maps at some point in the cleanup process</p> <p>Case 2. We don't remove Subscription from router tables until we get a sub-ack so we should be covered for 2 unless the broker continues to send pubRel after an unsubscribe (which it might?). TODO - Does the broker send a PubRel after getting an unsubscribe? If so, we probably have a potential error condition here. </p> <p>Case 3 is expected behaviour and can result in a Publish or PubRel for which we have no  subscriber. Publish messages will be caught by Case 1 but for PubRel all we will have is the Bid. </p> <p>If we implement Method A in 4.3.3 of the spec then we need to retrieve the payload by Bid, release it to the application and then send PubComp.  </p> <p>If we implement Method B in 4.3.3 of the spec (release the payload on receipt of the publish), then all we need to do is send a PubComp with the same Bid. But, note  that in Method B we are responsible for ensuring that duplicates are not sent  to the application. This means we need to save a list of Bids for which we have released the payload but not yet got a PubRel. </p> <p>So the choice is: a) persist the payload and the Bid and rely on the Broker to prevent duplicates, or b) persist only bid but check each incomming bid against this and filter any bids that appear in this list (i.e. where the Broker did not get the pubrec). Delete the Bid from the list when a PubRel is received for it </p> <p>In keeping with the spirit of QoS 2 we have implemented Method A. So Subscriber must persist messages in the event of a disconnect.</p> <p>Note - this section is synchronous so we know that the new subscriber is in the subscriber map before we call router.route(). Keep this in mind when changing this  function.  </p> <p>Also - during dev, this could be because are are a Mock Broker. In this event the  acks should just flow as required</p> <pre><code>fun ref _doAssignedSubscription(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_26","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_removesubscriber","title":"_removeSubscriber","text":"<p>[Source]</p> <p>This function enables us to do a reverse lookup on the _subscriberByTopic map to determine which subscriber has been subscribed to or unsubscriber from. We need it  to remove a subscriber from the map in the event that it unsubscribes  </p> <pre><code>fun ref _removeSubscriber(\nsub: Subscriber tag)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_27","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> </ul>"},{"location":"mqtt-router-Router/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_onpingresp","title":"_onPingResp","text":"<p>[Source]</p> <p>When the broker responds to a ping response we credit the token count. This value  is debited by doPing() each time we ask for a ping and we quit when it reaches zero. TODO - The test isn't really needed unless we need to protect against missing  an incomming Ping</p> <pre><code>fun ref _onPingResp()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber--index/","title":"Package","text":"<p>No package doc string provided for mqtt/subscriber.</p>"},{"location":"mqtt-subscriber--index/#public-types","title":"Public Types","text":"<ul> <li>actor Main</li> <li>primitive SubAckFailure</li> <li>class SubAckPacket</li> <li>primitive SubAckSuccessMaxQos0</li> <li>primitive SubAckSuccessMaxQos1</li> <li>primitive SubAckSuccessMaxQos2</li> <li>type SubackReturnCode</li> <li>class SubscribePacket</li> <li>actor Subscriber</li> <li>class UnsubscribePacket</li> </ul>"},{"location":"mqtt-subscriber--index/#private-types","title":"Private Types","text":"<ul> <li>class _Subscribe</li> <li>class _Unsubscribe</li> </ul>"},{"location":"mqtt-subscriber-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-subscriber-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-subscriber-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-subscriber-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-subscriber-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-subscriber-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-subscriber-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-subscriber-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-subscriber-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-subscriber-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/","title":"SubAckFailure","text":"<p>[Source] <pre><code>primitive val SubAckFailure\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckFailure/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckFailure/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckFailure val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#returns","title":"Returns","text":"<ul> <li>SubAckFailure val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckFailure/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckFailure val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckFailure val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckFailure val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckFailure val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/","title":"SubAckPacket","text":"<p>[Source]</p>"},{"location":"mqtt-subscriber-SubAckPacket/#suback","title":"SubAck","text":"<p>A SUBACK Packet is sent by the Server to the Client to confirm receipt and processing of a SUBSCRIBE Packet. A SUBACK Packet contains a list of return codes that specify the maximum QoS level that was granted in each Subscription that was requested by the SUBSCRIBE.</p>"},{"location":"mqtt-subscriber-SubAckPacket/#fixed-header","title":"Fixed header","text":"<p>B1  Control byte (must be 0b10010000) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p>"},{"location":"mqtt-subscriber-SubAckPacket/#variable-header","title":"Variable header","text":"<p>B1 Packet id MSB B2 Packet id LSB </p>"},{"location":"mqtt-subscriber-SubAckPacket/#payload","title":"Payload ###","text":"<p>B1  Return Code - The payload contains a list of return codes. Each return code corresponds to a Topic Filter in the SUBSCRIBE Packet being acknowledged. The order of return codes in the SUBACK Packet will match the order of Topic  Filters in the SUBSCRIBE Packet Payload = 0x00 - Success - Maximum QoS 0 Payload = 0x01 - Success - Maximum QoS 1 Payload = 0x02 - Success - Maximum QoS 2 Payload = 0x80 - Failure</p>"},{"location":"mqtt-subscriber-SubAckPacket/#actions","title":"Actions ###","text":"<p>We're not implementing the multi-subscribe capability in the specification because  the saving in a few sub/unsub messages is outweighed by: 1. losing the \"one topic:one subscriber\" model 2. the additional complexity of an intermediate routing step to decompose the SubAck from the Broker into SubAcks for individual actors.</p> <p>Note: The Broker cannot conflate multiple acks into one SubAck unlessthe client subscribes to multiple topics in one subscribe message.</p> <pre><code>class ref SubAckPacket\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nbasePacket: BasePacket val)\n: SubAckPacket val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#returns","title":"Returns","text":"<ul> <li>SubAckPacket val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#approvedqos","title":"approvedQos","text":"<p>[Source]</p> <pre><code>fun box approvedQos()\n: (Qos0 val | Qos1 val | Qos2 val | \nNone val)\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_2","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val |      None val)</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_3","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/","title":"SubAckSuccessMaxQos0","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos0\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos0 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos0 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos0 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos0 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/","title":"SubAckSuccessMaxQos1","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos1\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos1 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos1 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos1 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos1 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/","title":"SubAckSuccessMaxQos2","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos2\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos2 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos2 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos2 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos2 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubackReturnCode/","title":"SubackReturnCode","text":"<p>[Source] <pre><code>type SubackReturnCode is\n(SubAckSuccessMaxQos0 val | SubAckSuccessMaxQos1 val | SubAckSuccessMaxQos2 val | SubAckFailure val)\n</code></pre></p>"},{"location":"mqtt-subscriber-SubackReturnCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(SubAckSuccessMaxQos0 val | SubAckSuccessMaxQos1 val | SubAckSuccessMaxQos2 val | SubAckFailure val)</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/","title":"SubscribePacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b10000010 = Control Packet Type &amp; 0b00000010) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload B1  Payload Length MSB B2  Payload Length LSB</p> <p>String representation of topic name (length is NOT encoded as remaining length) B3  Length of topic filter in bytes - MSB B4  Length of topic filter in bytes - LSB B.. Characters of topic filter '$SYS/broker/load/bytes/sent/1min' B.. Requested Qos (0b000000xx) 0, 1 or 2</p> <pre><code>if topic is \"$SYS/#\" = qos0\nPacket =  130, 11, 0, 1, 0, 6, 36, 83, 89, 83, 47, 35, 0\n</code></pre> <pre><code>class ref SubscribePacket\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubscribePacket/#create","title":"create","text":"<p>[Source]</p> <p>Only intended to enable SubscribePacket.compose(&lt;&gt;)  <pre><code>new ref create()\n: SubscribePacket ref^\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns","title":"Returns","text":"<ul> <li>SubscribePacket ref^</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates a Subscribe Packet with the fields set from the passed BasePacket. Only used for Mock Broker </p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: SubscribePacket val^\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_1","title":"Returns","text":"<ul> <li>SubscribePacket val^</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubscribePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_3","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Return a subscribe packet ready to send to the broker</p> <pre><code>fun ref compose(\nid': U16 val,\ntopic: String val,\nqosString: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> <li>topic: String val</li> <li>qosString: String val</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/","title":"Subscriber","text":"<p>[Source]</p> <p>Represents an application level subscription to one topic.  Note - We're not implementing the multi-subscribe capability in the specification because the saving in a few sub/unsub messages is outweighed by losing the one topic: one subscriber model. The Broker cannot conflate multiple acks into one SubAck unless the client subscribes to multiple topics in one subscribe message so we are protected  from multiple unsub messages. Clients must continue to ack messages from the Broker while the unsubscribe process is underway so we don't have an unsubscribe behaviour. Instead we have a onUnsubAck  behaviour which is called when the Broker has acknowledged the unsubscirbe request.  Only then, when we know there will be no more messages, do we start our clean-up. TODO - Rather than implement timeouts here we should have router manage timeouts for all messages - so we don't hang the app if we don't get a response to a  subscribe or unsubscribe for example. Note: The ids for sub/unsub and publish can conflict so must be kept within  the relevant methods. Sub/unsub ids are issued by IdIssuer. Publish ids are issued by the Broker.</p> <pre><code>actor tag Subscriber is\nIdNotifySub ref,\nMqActor ref\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#implements","title":"Implements","text":"<ul> <li>IdNotifySub ref</li> <li>MqActor ref</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-Subscriber/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nreg: Registrar tag,\ntopic: String val,\nqos: String val)\n: Subscriber tag^\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters","title":"Parameters","text":"<ul> <li>reg: Registrar tag</li> <li>topic: String val</li> <li>qos: String val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns","title":"Returns","text":"<ul> <li>Subscriber tag^</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-subscriber-Subscriber/#apply","title":"apply","text":"<p>[Source]</p> <p>The packet id is the last piece of the jigsaw. Once we have this we can build our  subscribe or unsubscribe packet and send it to the broker</p> <pre><code>be apply(\nid: U16 val,\nsub: (Sub val | UnSub val))\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_1","title":"Parameters","text":"<ul> <li>id: U16 val</li> <li>sub: (Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#ontick","title":"onTick","text":"<p>[Source]</p> <p>This is the target for the TickListener trait that is called by the system tick tick timer. Each time we get this we scan the in-flight queue for expired messages</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_2","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onduckandcover","title":"onDuckAndCover","text":"<p>[Source]</p> <p>We need to save state because the broker is disconnecting or something has gone awry.   </p> <pre><code>be onDuckAndCover()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#ondisconnect","title":"onDisconnect","text":"<p>[Source]</p> <p>All Subscribers get informed of a broker disconnect with a call to the onDisconnect behaviour. This enables the Subscriber to take whatever application level action is to respond  to this externally (to the actor) generated break in data. Actions depend on QoS of messages: QoS 0 - Nothing to be done QoS 1 - Nothing to be done. If we haven't acked a received packet the Broker will re-send it QoS 2 - Save the _pktMap entries because the app may want to restore the session Note - Disconnect may be a result of an error so we can't assume there is a Broker connection at this point but we will try to unsubscribe anyway. If we have packets in _pktMap onDisconnect and CleanSession is false then they are awaiting PubRels from the Broker. We need to save these by sending them to main. </p> <pre><code>be onDisconnect()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#ondata","title":"onData","text":"<p>[Source]</p> <p>The Router sends data packets from the Broker, to actors who have requested it, using the onData behaviour. Note that QoS 0 Publish messages don't have an id so we default this to 0. As a Subscriber the only messages we get from the Broker are: 1. A SubAck to confirm our subscription 2. A Publish packet containing a payload 3. A PubRel message forming part three of the QoS 2 handshake 4. A UnSubAck to confirm out unsubscription</p> <p>In response to a SubAck: 1. We notify the app of the result 2. We tell router we have finished processing the id of the subscribe packet 3. If the subscription is not accepted then we leave it to the app to take further action</p> <p>In response to a Publish: 1. If QoS is Qos1 then the Subscriber must respond with a PubAck packet containing the id of  the packet being acknowledged and then release the packet to the app 2. If QoS is Qos2 then Subscriber must respond with a PubRec and save the packet until  a PubRel is received. </p> <p>In reponse to a PubRel 1. Subscriber must respond with a PubComp  2. Subscriber must release the packet to the app</p> <p>In response to an UnsubAck: 1. We notify the app (via Main) of the result 2. We tell router we have finished processing the id of the subscribe packet</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_3","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#subscribe","title":"subscribe","text":"<p>[Source]</p> <pre><code>be subscribe()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#unsubscribe","title":"unsubscribe","text":"<p>[Source]</p> <pre><code>be unsubscribe()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-Subscriber/#onsuback","title":"onSubAck","text":"<p>[Source]</p> <p>Our subscription has been acknowledged so we need to notify the app of the result. TODO - Why don't we respond directly to main instead of going via router?</p> <pre><code>fun box onSubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_4","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onunsuback","title":"onUnsubAck","text":"<p>[Source]</p> <p>Our unsubscribe has been acknowledged so we need to tell router to remove us from the map of subscribers. TODO - Why don't we respond directly to main instead of going via router? TODO - We may also have some packets in our queue and we need to decide what to do about these</p> <pre><code>fun ref onUnsubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_5","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onpayload","title":"onPayload","text":"<p>[Source]</p> <p>Note - We name this function onPayload to avoid confusion with message publication. We have received a publish message. The publish message is either: 1. A QoS 0 packet with no id 2. A QoS 1 or QoS2 packet with an id.</p> <p>If it is QoS 0 then just release the packet</p> <p>If it is QoS 1 then send a PubAck in return and release the message. Then tell router we have completed processing the id. The packet is never stored in _pktMap</p> <p>If it is QoS 2 then save the message, send a PubRec and wait for a PubRel</p> <pre><code>fun ref onPayload(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_6","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopuback","title":"doPubAck","text":"<p>[Source]</p> <p>All we have is an id, so make the pubAck packet and send it. No look-ups with id so we don't care whether it is Broker or Client assigned. Note that QoS 1 packets are never stored in _pktMap so there is no remove to do</p> <pre><code>fun box doPubAck(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_7","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopubrec","title":"doPubRec","text":"<p>[Source]</p> <p>We have received a publish message with QoS 2. We acknowledge this with a  PubRec message and wait for a PubRel in response. No id lookup so we don't  care whether this is a Bid or  Cid</p> <pre><code>fun ref doPubRec(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_8","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onpubrel","title":"onPubRel","text":"<p>[Source]</p> <p>We have received a publish release message for a QoS 2 packet. Send a pubComp to ack this. The payload was stored when we received the publish message and  we need to retrieve this from the packetMap to release it.  Then we delete the message from the packet Map and tell router we have completed processing. Note - we do a lookup with id on _pktMap so we can't mix Bid and Cid in one subscriber instance. </p> <pre><code>fun ref onPubRel(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_9","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopubcomp","title":"doPubComp","text":"<p>[Source]</p> <p>We have received a PubRel from a sender so we acknowledge this with a PubComp  message. We only have the id at this stage so there is little else to do. No lookups on id so we don't care whether it is a Bid or a Cid.</p> <pre><code>fun box doPubComp(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_10","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#releasepkt","title":"releasePkt","text":"<p>[Source]</p> <p>We are at an appropriate place in the protocol to release the message to the  application. This can be: 1. After receiving a ControlPublish with QoS 0 2. After receiving a ControlPublish with QoS 1 2. After receiving a ControlPubRel with QoS 2 TODO - The second argument in the _reg call is a temporary kludge to get Mock Broker to print payloads. Mock Broker has no router so the call _reg will fail the promise and we print the payload as a Debug message. Nasty.</p> <pre><code>fun box releasePkt(\npubPacket: PublishPacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_11","title":"Parameters","text":"<ul> <li>pubPacket: PublishPacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#payloadcomplete","title":"payloadComplete","text":"<p>[Source]</p> <p>Informs router that we have finished processing this id.</p> <pre><code>fun ref payloadComplete(\nbid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_12","title":"Parameters","text":"<ul> <li>bid: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/","title":"UnsubscribePacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b10100010 = Control Packet Type &amp; 0b00000010) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload B1  Payload Length MSB B2  Payload Length LSB</p> <p>String representation of topic name (length is NOT encoded as remaining length) B3  Length of topic filter in bytes - MSB B4  Length of topic filter in bytes - LSB B.. Characters of topic filter '$SYS/broker/load/bytes/sent/1min'</p> <pre><code>class ref UnsubscribePacket\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-UnsubscribePacket/#create","title":"create","text":"<p>[Source]</p> <p>Only intended to enable UnsubscribePacket.compose(&lt;&gt;)  <pre><code>new ref create()\n: UnsubscribePacket ref^\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns","title":"Returns","text":"<ul> <li>UnsubscribePacket ref^</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates an Unsubscribe Packet with the fields set from the passed BasePacket. Only used for Mock Broker </p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: UnsubscribePacket val^\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_1","title":"Returns","text":"<ul> <li>UnsubscribePacket val^</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-UnsubscribePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_3","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Build an unsubscribe packet based on the passed arguments</p> <pre><code>fun ref compose(\nid': U16 val,\ntopic: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> <li>topic: String val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/","title":"_Subscribe","text":"<p>[Source] <pre><code>class iso _Subscribe is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-subscriber-_Subscribe/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-_Subscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Subscribe iso^\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#returns","title":"Returns","text":"<ul> <li>_Subscribe iso^</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-_Subscribe/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Subscribe/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Subscribe/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/","title":"_Unsubscribe","text":"<p>[Source] <pre><code>class iso _Unsubscribe is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-subscriber-_Unsubscribe/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-_Unsubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Unsubscribe iso^\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns","title":"Returns","text":"<ul> <li>_Unsubscribe iso^</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-_Unsubscribe/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-_Unsubscribe/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-subscriber-_Unsubscribe/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal--index/","title":"Package","text":"<p>The terminal package is provided as a simple text based interface to the client. This is a test of package level documentation. </p>"},{"location":"mqtt-terminal--index/#public-types","title":"Public Types","text":"<ul> <li>class Aclass</li> <li>type Areas</li> <li>class BoxLine</li> <li>primitive CMD</li> <li>primitive FRM</li> <li>class Handler</li> <li>primitive HighlightPeriod</li> <li>primitive MSG</li> <li>primitive STS</li> <li>class StatusLine</li> <li>actor Terminal</li> <li>primitive TerminalColour</li> <li>actor UIManager</li> <li>class UiNotify</li> </ul>"},{"location":"mqtt-terminal-Aclass/","title":"Aclass","text":"<p>[Source]</p> <p>InputNotify is the outer wrapper notifier. Apply is called by env.input when data is  available from the input stream. Apply then calls the ANSI terminal so that the data  can be interpreted </p> <pre><code>class ref Aclass is\nInputNotify ref\n</code></pre>"},{"location":"mqtt-terminal-Aclass/#implements","title":"Implements","text":"<ul> <li>InputNotify ref</li> </ul>"},{"location":"mqtt-terminal-Aclass/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Aclass/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nterm: ANSITerm tag)\n: Aclass ref^\n</code></pre>"},{"location":"mqtt-terminal-Aclass/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>term: ANSITerm tag</li> </ul>"},{"location":"mqtt-terminal-Aclass/#returns","title":"Returns","text":"<ul> <li>Aclass ref^</li> </ul>"},{"location":"mqtt-terminal-Aclass/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Aclass/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ndata: Array[U8 val] iso)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Aclass/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"mqtt-terminal-Aclass/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Aclass/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Aclass/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Areas/","title":"Areas","text":"<p>[Source] <pre><code>type Areas is\nFlags[(MSG val | STS val | FRM val | CMD val), U64 val] ref\n</code></pre></p>"},{"location":"mqtt-terminal-Areas/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Flags[(MSG val | STS val | FRM val | CMD val), U64 val] ref</li> </ul>"},{"location":"mqtt-terminal-BoxLine/","title":"BoxLine","text":"<p>[Source] <pre><code>class ref BoxLine\n</code></pre></p>"},{"location":"mqtt-terminal-BoxLine/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-BoxLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ntopic: String val,\ncontent': String val)\n: BoxLine ref^\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns","title":"Returns","text":"<ul> <li>BoxLine ref^</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-BoxLine/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun box paint()\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#deadline","title":"deadline","text":"<p>[Source]</p> <pre><code>fun ref deadline(\nseconds: I64 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_1","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#update","title":"update","text":"<p>[Source]</p> <pre><code>fun ref update(\ncontent': String val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_2","title":"Parameters","text":"<ul> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#ansi","title":"ansi","text":"<p>[Source]</p> <pre><code>fun ref ansi(\nleft: U32 val,\nright: U32 val,\ny: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_3","title":"Parameters","text":"<ul> <li>left: U32 val</li> <li>right: U32 val</li> <li>y: U32 val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-CMD/","title":"CMD","text":"<p>[Source] <pre><code>primitive val CMD\n</code></pre></p>"},{"location":"mqtt-terminal-CMD/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-CMD/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CMD val^\n</code></pre>"},{"location":"mqtt-terminal-CMD/#returns","title":"Returns","text":"<ul> <li>CMD val^</li> </ul>"},{"location":"mqtt-terminal-CMD/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-CMD/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-CMD/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CMD val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#parameters","title":"Parameters","text":"<ul> <li>that: CMD val</li> </ul>"},{"location":"mqtt-terminal-CMD/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-CMD/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CMD val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#parameters_1","title":"Parameters","text":"<ul> <li>that: CMD val</li> </ul>"},{"location":"mqtt-terminal-CMD/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-FRM/","title":"FRM","text":"<p>[Source] <pre><code>primitive val FRM\n</code></pre></p>"},{"location":"mqtt-terminal-FRM/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-FRM/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FRM val^\n</code></pre>"},{"location":"mqtt-terminal-FRM/#returns","title":"Returns","text":"<ul> <li>FRM val^</li> </ul>"},{"location":"mqtt-terminal-FRM/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-FRM/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-FRM/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FRM val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#parameters","title":"Parameters","text":"<ul> <li>that: FRM val</li> </ul>"},{"location":"mqtt-terminal-FRM/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-FRM/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FRM val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#parameters_1","title":"Parameters","text":"<ul> <li>that: FRM val</li> </ul>"},{"location":"mqtt-terminal-FRM/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/","title":"Handler","text":"<p>[Source]</p> <p>ANSINotify is the inner wrapper notifier. Apply is called by the ANSITerm when input is available. Closed is called when the window is closed.</p> <pre><code>class ref Handler is\nANSINotify ref\n</code></pre>"},{"location":"mqtt-terminal-Handler/#implements","title":"Implements","text":"<ul> <li>ANSINotify ref</li> </ul>"},{"location":"mqtt-terminal-Handler/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Handler/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nreg: Registrar tag,\nexitCall: {(U8)} iso)\n: Handler ref^\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>reg: Registrar tag</li> <li>exitCall: {(U8)} iso</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns","title":"Returns","text":"<ul> <li>Handler ref^</li> </ul>"},{"location":"mqtt-terminal-Handler/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Handler/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nterm: ANSITerm ref,\ninput: U8 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_1","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\ni: U8 val,\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_2","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\nrows: U16 val,\ncols: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_3","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#close","title":"close","text":"<p>[Source]</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#prompt","title":"prompt","text":"<p>[Source]</p> <pre><code>fun ref prompt(\nterm: ANSITerm ref,\nvalue: String val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_4","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#home","title":"home","text":"<p>[Source]</p> <pre><code>fun ref home(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#up","title":"up","text":"<p>[Source]</p> <pre><code>fun ref up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#down","title":"down","text":"<p>[Source]</p> <pre><code>fun ref down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#left","title":"left","text":"<p>[Source]</p> <pre><code>fun ref left(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#right","title":"right","text":"<p>[Source]</p> <pre><code>fun ref right(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#delete","title":"delete","text":"<p>[Source]</p> <pre><code>fun ref delete(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_11","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#end_key","title":"end_key","text":"<p>[Source]</p> <pre><code>fun ref end_key(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_12","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_13","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_14","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#closed","title":"closed","text":"<pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/","title":"HighlightPeriod","text":"<p>[Source] <pre><code>primitive val HighlightPeriod\n</code></pre></p>"},{"location":"mqtt-terminal-HighlightPeriod/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-HighlightPeriod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HighlightPeriod val^\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#returns","title":"Returns","text":"<ul> <li>HighlightPeriod val^</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-HighlightPeriod/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: HighlightPeriod val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#parameters","title":"Parameters","text":"<ul> <li>that: HighlightPeriod val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HighlightPeriod val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#parameters_1","title":"Parameters","text":"<ul> <li>that: HighlightPeriod val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-MSG/","title":"MSG","text":"<p>[Source] <pre><code>primitive val MSG\n</code></pre></p>"},{"location":"mqtt-terminal-MSG/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-MSG/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MSG val^\n</code></pre>"},{"location":"mqtt-terminal-MSG/#returns","title":"Returns","text":"<ul> <li>MSG val^</li> </ul>"},{"location":"mqtt-terminal-MSG/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-MSG/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-MSG/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MSG val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#parameters","title":"Parameters","text":"<ul> <li>that: MSG val</li> </ul>"},{"location":"mqtt-terminal-MSG/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-MSG/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MSG val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#parameters_1","title":"Parameters","text":"<ul> <li>that: MSG val</li> </ul>"},{"location":"mqtt-terminal-MSG/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-STS/","title":"STS","text":"<p>[Source] <pre><code>primitive val STS\n</code></pre></p>"},{"location":"mqtt-terminal-STS/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-STS/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: STS val^\n</code></pre>"},{"location":"mqtt-terminal-STS/#returns","title":"Returns","text":"<ul> <li>STS val^</li> </ul>"},{"location":"mqtt-terminal-STS/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-STS/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-STS/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-STS/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: STS val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-STS/#parameters","title":"Parameters","text":"<ul> <li>that: STS val</li> </ul>"},{"location":"mqtt-terminal-STS/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-STS/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: STS val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-STS/#parameters_1","title":"Parameters","text":"<ul> <li>that: STS val</li> </ul>"},{"location":"mqtt-terminal-STS/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/","title":"StatusLine","text":"<p>[Source] <pre><code>class ref StatusLine\n</code></pre></p>"},{"location":"mqtt-terminal-StatusLine/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-StatusLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ncontent': String val)\n: StatusLine ref^\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#parameters","title":"Parameters","text":"<ul> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#returns","title":"Returns","text":"<ul> <li>StatusLine ref^</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-StatusLine/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun box paint()\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#ansi","title":"ansi","text":"<p>[Source]</p> <pre><code>fun box ansi(\nleft: U32 val,\ny: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#parameters_1","title":"Parameters","text":"<ul> <li>left: U32 val</li> <li>y: U32 val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/","title":"Terminal","text":"<p>[Source] <pre><code>actor tag Terminal\n</code></pre></p>"},{"location":"mqtt-terminal-Terminal/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Terminal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Terminal tag^\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns","title":"Returns","text":"<ul> <li>Terminal tag^</li> </ul>"},{"location":"mqtt-terminal-Terminal/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-Terminal/#message","title":"message","text":"<p>[Source]</p> <pre><code>be message(\ntopic: String val,\ncontent: String val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_1","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#status","title":"status","text":"<p>[Source]</p> <pre><code>be status(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_2","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#clear","title":"clear","text":"<p>[Source]</p> <pre><code>be clear()\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#size","title":"size","text":"<p>[Source]</p> <p>Called by ANSINotify to report the cmd window size</p> <pre><code>be size(\nrows: U16 val,\ncols: U16 val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_3","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nseconds: I64 val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_4","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#exitandreset","title":"exitAndReset","text":"<p>[Source]</p> <pre><code>be exitAndReset()\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Terminal/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun ref paint()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#clearscreen","title":"clearScreen","text":"<p>[Source]</p> <pre><code>fun ref clearScreen()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#composite","title":"composite","text":"<p>[Source]</p> <pre><code>fun ref composite()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#windowsize","title":"windowSize","text":"<p>[Source]</p> <pre><code>fun box windowSize(\nw: U32 val,\nh: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_5","title":"Parameters","text":"<ul> <li>w: U32 val</li> <li>h: U32 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#cmdstring","title":"cmdString","text":"<p>[Source]</p> <pre><code>fun box cmdString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#boxstring","title":"boxString","text":"<p>[Source]</p> <pre><code>fun ref boxString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#statusstring","title":"statusString","text":"<p>[Source]</p> <pre><code>fun ref statusString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#separatorline","title":"separatorLine","text":"<p>[Source]</p> <pre><code>fun box separatorLine(\ny: U32 val,\nwidth: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_6","title":"Parameters","text":"<ul> <li>y: U32 val</li> <li>width: U32 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#separator","title":"separator","text":"<p>[Source]</p> <pre><code>fun box separator(\nwidth: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_7","title":"Parameters","text":"<ul> <li>width: U32 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#border","title":"border","text":"<p>[Source]</p> <pre><code>fun box border(\nx: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_8","title":"Parameters","text":"<ul> <li>x: U32 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#timeout","title":"timeout","text":"<p>[Source]</p> <pre><code>fun ref timeout(\nseconds: I64 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_9","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/","title":"TerminalColour","text":"<p>[Source] <pre><code>primitive val TerminalColour\n</code></pre></p>"},{"location":"mqtt-terminal-TerminalColour/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-TerminalColour/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TerminalColour val^\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns","title":"Returns","text":"<ul> <li>TerminalColour val^</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-TerminalColour/#border","title":"border","text":"<p>[Source]</p> <pre><code>fun box border()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#separator","title":"separator","text":"<p>[Source]</p> <pre><code>fun box separator()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#cmd","title":"cmd","text":"<p>[Source]</p> <pre><code>fun box cmd()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#boxdormant","title":"boxDormant","text":"<p>[Source]</p> <pre><code>fun box boxDormant()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#boxnormal","title":"boxNormal","text":"<p>[Source]</p> <pre><code>fun box boxNormal()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#boxchange","title":"boxChange","text":"<p>[Source]</p> <pre><code>fun box boxChange()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#status","title":"status","text":"<p>[Source]</p> <pre><code>fun box status()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TerminalColour val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#parameters","title":"Parameters","text":"<ul> <li>that: TerminalColour val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TerminalColour val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-TerminalColour/#parameters_1","title":"Parameters","text":"<ul> <li>that: TerminalColour val</li> </ul>"},{"location":"mqtt-terminal-TerminalColour/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-UIManager/","title":"UIManager","text":"<p>[Source] <pre><code>actor tag UIManager\n</code></pre></p>"},{"location":"mqtt-terminal-UIManager/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-UIManager/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nterm: Terminal tag)\n: UIManager tag^\n</code></pre>"},{"location":"mqtt-terminal-UIManager/#parameters","title":"Parameters","text":"<ul> <li>term: Terminal tag</li> </ul>"},{"location":"mqtt-terminal-UIManager/#returns","title":"Returns","text":"<ul> <li>UIManager tag^</li> </ul>"},{"location":"mqtt-terminal-UIManager/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-UIManager/#mute","title":"mute","text":"<p>[Source]</p> <pre><code>be mute()\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/","title":"UiNotify","text":"<p>[Source] <pre><code>class ref UiNotify is\nTimerNotify ref\n</code></pre></p>"},{"location":"mqtt-terminal-UiNotify/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-UiNotify/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nterm: Terminal tag)\n: UiNotify iso^\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters","title":"Parameters","text":"<ul> <li>term: Terminal tag</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns","title":"Returns","text":"<ul> <li>UiNotify iso^</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-UiNotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker--index/","title":"Package","text":"<p>No package doc string provided for mqtt/ticker.</p>"},{"location":"mqtt-ticker--index/#public-types","title":"Public Types","text":"<ul> <li>actor Main</li> <li>class Tick</li> <li>actor Ticker</li> </ul>"},{"location":"mqtt-ticker--index/#private-types","title":"Private Types","text":"<ul> <li>class _TickTest</li> </ul>"},{"location":"mqtt-ticker-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-ticker-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-ticker-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-ticker-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-ticker-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-ticker-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-ticker-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-ticker-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-ticker-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-ticker-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-ticker-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-ticker-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-Tick/","title":"Tick","text":"<p>[Source]</p> <p>Fire the timer  number of times and then cancel. If reps is zero then the timer does not cancel itself <pre><code>class ref Tick is\nTimerNotify ref\n</code></pre>"},{"location":"mqtt-ticker-Tick/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-ticker-Tick/#constructors","title":"Constructors","text":""},{"location":"mqtt-ticker-Tick/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nrouter: Router tag,\nreps: U64 val = 0)\n: Tick iso^\n</code></pre>"},{"location":"mqtt-ticker-Tick/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> <li>reps: U64 val = 0</li> </ul>"},{"location":"mqtt-ticker-Tick/#returns","title":"Returns","text":"<ul> <li>Tick iso^</li> </ul>"},{"location":"mqtt-ticker-Tick/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-ticker-Tick/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-ticker-Tick/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-ticker-Tick/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-ticker-Tick/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-Tick/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-ticker-Tick/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-Ticker/","title":"Ticker","text":"<p>[Source]</p> <p>Ticker is used by router to schedule calls to every publisher and subscriber to  check message queues for expiry The timer fires every  seconds for a maximum of  times.  If  is zero then the timer fires until it is cancelled  <pre><code>actor tag Ticker\n</code></pre>"},{"location":"mqtt-ticker-Ticker/#constructors","title":"Constructors","text":""},{"location":"mqtt-ticker-Ticker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag,\nperiod: U64 val = 1,\nrepetitions: U64 val = 0)\n: Ticker tag^\n</code></pre>"},{"location":"mqtt-ticker-Ticker/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> <li>period: U64 val = 1</li> <li>repetitions: U64 val = 0</li> </ul>"},{"location":"mqtt-ticker-Ticker/#returns","title":"Returns","text":"<ul> <li>Ticker tag^</li> </ul>"},{"location":"mqtt-ticker-Ticker/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-ticker-Ticker/#start","title":"start","text":"<p>[Source]</p> <pre><code>be start()\n</code></pre>"},{"location":"mqtt-ticker-Ticker/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>be cancel()\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/","title":"_TickTest","text":"<p>[Source] <pre><code>class iso _TickTest is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-ticker-_TickTest/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-ticker-_TickTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _TickTest iso^\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#returns","title":"Returns","text":"<ul> <li>_TickTest iso^</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-ticker-_TickTest/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-ticker-_TickTest/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-ticker-_TickTest/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities--index/","title":"Package","text":"<p>No package doc string provided for mqtt/utilities.</p>"},{"location":"mqtt-utilities--index/#public-types","title":"Public Types","text":"<ul> <li>class BasePacket</li> <li>primitive BytesToU16</li> <li>primitive BytesToValue</li> <li>primitive Dump</li> <li>primitive DumpBin</li> <li>primitive Elapsed</li> <li>primitive ElapsedSince</li> <li>class FixedHeader</li> <li>primitive FixedHeaderLength</li> <li>primitive FmtBin</li> <li>primitive FmtDec</li> <li>primitive FmtHex</li> <li>primitive GoodPkt1</li> <li>primitive GoodPkt2</li> <li>primitive GoodPkt3</li> <li>primitive GoodPkt4</li> <li>primitive GoodPkt5</li> <li>primitive GoodPkt6</li> <li>primitive IsFixedHeader</li> <li>actor Main</li> <li>primitive MqString</li> <li>class MqTime</li> <li>primitive RlByteCount</li> <li>primitive Split</li> <li>primitive ToQos</li> <li>primitive ToQosBits</li> <li>primitive TotalLength</li> <li>primitive U16ToBytes</li> <li>primitive U8ToQos</li> <li>primitive ValueToRLBytes</li> </ul>"},{"location":"mqtt-utilities--index/#private-types","title":"Private Types","text":"<ul> <li>class _BadPkt1</li> <li>class _BadPkt2</li> <li>class _BadPkt3</li> <li>class _BadPkt4</li> <li>class _BadPkt5</li> <li>class _BadPkt6</li> <li>class _BytesToU16</li> <li>class _BytesToValueEx</li> <li>class _BytesToValueLim</li> <li>class _FPubHeader</li> <li>class _Fheader</li> <li>class _GoodPkt1</li> <li>class _GoodPkt2</li> <li>class _GoodPkt3</li> <li>class _GoodPkt4</li> <li>class _GoodPkt5</li> <li>class _GoodPkt6</li> <li>class _MqStringEmpty</li> <li>class _MqStringLong</li> <li>class _MqStringOver</li> <li>class _MqStringShort</li> <li>class _RlByteCount</li> <li>class _Split</li> <li>class _U16ToBytes</li> <li>class _ValueToRLBytesEx</li> <li>class _ValueToRLBytesLim</li> </ul>"},{"location":"mqtt-utilities-BasePacket/","title":"BasePacket","text":"<p>[Source]</p> <p>BasePacket is the simplest concrete representation of the Packet trait. It is used by  Assembler to send a basic validated packet to router.  If the BasePacket.IsValid() method returns true then BasePacket guarantees 1. The first byte of the data can be read 2. The remaining length bytes can be read 3. The length of the array matches the remaining length value 4. The control packet is valid ( 0 &gt; b7..b4 &lt; 15)</p> <pre><code>class ref BasePacket is\nPacket ref\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#implements","title":"Implements","text":"<ul> <li>Packet ref</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BasePacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ndata': Array[U8 val] val,\nsource: String val = \"\")\n: BasePacket ref^\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters","title":"Parameters","text":"<ul> <li>data': Array[U8 val] val</li> <li>source: String val = \"\"</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns","title":"Returns","text":"<ul> <li>BasePacket ref^</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BasePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet has been validated</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isnotvalid","title":"isNotValid","text":"<p>[Source]</p> <p>Sugar to remove some nots from the main code, sorry</p> <pre><code>fun box isNotValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#controltype","title":"controlType","text":"<p>[Source]</p> <p>Returns the packetType which should only be None if isValid() returns false</p> <pre><code>fun box controlType()\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_3","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#controlbyte","title":"controlByte","text":"<p>[Source]</p> <p>Returns the control byte which has been checked for a valid type code</p> <pre><code>fun box controlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_4","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isa","title":"isA","text":"<p>[Source]</p> <p>Returns true if the top four bits in the byte passed as value match the ControlArrayVal passed as controlType or false otherwise.</p> <pre><code>fun box isA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_1","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isnota","title":"isNotA","text":"<p>[Source]</p> <p>Embarrasingly unecccessary sugar to keep the main code clean </p> <pre><code>fun box isNotA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_2","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#remaininglength","title":"remainingLength","text":"<p>[Source]</p> <p>Returns the remaining length value of the packet (may be zero)</p> <pre><code>fun box remainingLength()\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#fixedheaderlength","title":"fixedHeaderLength","text":"<p>[Source]</p> <p>Control byte + remainingLength bytes</p> <pre><code>fun box fixedHeaderLength()\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#data","title":"data","text":"<p>[Source]</p> <p>Returns the raw data used to create this BasePacket as an Array[U8] val</p> <pre><code>fun box data()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_9","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-BasePacket/#_getcontrolbyte","title":"_getControlByte","text":"<p>[Source]</p> <p>Returns the control byte if we can read the first byte of the data and the top four bits are a valid control byte value. Returns None if we can't read the data or the first byte is not a valid control byte which is defined in the specification as [1..14] Note: We need to return the whole byte, not just the type because some control bytes have flags in the lower four bits</p> <pre><code>fun box _getControlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_10","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#_decode","title":"_decode","text":"<p>[Source]</p> <p>Takes an 8 bit byte and decodes the Control Packet Type from the most significant four bits (matching on value to get a type)</p> <pre><code>fun box _decode(\nvalue: (U8 val | None val))\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_3","title":"Parameters","text":"<ul> <li>value: (U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_11","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/","title":"BytesToU16","text":"<p>[Source]</p> <p>Converts an Array of two U8 bytes into a U16 packtId. Note that the spec defines a valid Id to be non-zero, so we can use zero as an error case</p> <pre><code>primitive val BytesToU16\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BytesToU16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BytesToU16 val^\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#returns","title":"Returns","text":"<ul> <li>BytesToU16 val^</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BytesToU16/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nbytes: Array[U8 val] val)\n: U16 val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters","title":"Parameters","text":"<ul> <li>bytes: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_1","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BytesToU16 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters_1","title":"Parameters","text":"<ul> <li>that: BytesToU16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BytesToU16 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters_2","title":"Parameters","text":"<ul> <li>that: BytesToU16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/","title":"BytesToValue","text":"<p>[Source] <pre><code>primitive val BytesToValue\n</code></pre></p>"},{"location":"mqtt-utilities-BytesToValue/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BytesToValue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BytesToValue val^\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#returns","title":"Returns","text":"<ul> <li>BytesToValue val^</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BytesToValue/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes the leading bytes of an MQTT packet and returns the remaining length encoded in bytes 1 to n, where 0 &lt; n &lt; 4. If n &gt; 4, zero is returned as the packet cannot  meet the MQTT protocol standard. Note - This function takes the leading bytes including the control byte (Byte 0) that is not used in the BytesToValue calculation (hence index is defined as 1 below).</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BytesToValue val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters_1","title":"Parameters","text":"<ul> <li>that: BytesToValue val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BytesToValue val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters_2","title":"Parameters","text":"<ul> <li>that: BytesToValue val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Dump/","title":"Dump","text":"<p>[Source] <pre><code>primitive val Dump\n</code></pre></p>"},{"location":"mqtt-utilities-Dump/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Dump/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Dump val^\n</code></pre>"},{"location":"mqtt-utilities-Dump/#returns","title":"Returns","text":"<ul> <li>Dump val^</li> </ul>"},{"location":"mqtt-utilities-Dump/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Dump/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-Dump/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Dump val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters_1","title":"Parameters","text":"<ul> <li>that: Dump val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Dump/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Dump val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters_2","title":"Parameters","text":"<ul> <li>that: Dump val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/","title":"DumpBin","text":"<p>[Source] <pre><code>primitive val DumpBin\n</code></pre></p>"},{"location":"mqtt-utilities-DumpBin/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-DumpBin/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DumpBin val^\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#returns","title":"Returns","text":"<ul> <li>DumpBin val^</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-DumpBin/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nname: String val,\ndata: Array[U8 val] val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters","title":"Parameters","text":"<ul> <li>name: String val</li> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DumpBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters_1","title":"Parameters","text":"<ul> <li>that: DumpBin val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DumpBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters_2","title":"Parameters","text":"<ul> <li>that: DumpBin val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/","title":"Elapsed","text":"<p>[Source] <pre><code>primitive val Elapsed\n</code></pre></p>"},{"location":"mqtt-utilities-Elapsed/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Elapsed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Elapsed val^\n</code></pre>"},{"location":"mqtt-utilities-Elapsed/#returns","title":"Returns","text":"<ul> <li>Elapsed val^</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Elapsed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nstart: String val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-Elapsed/#parameters","title":"Parameters","text":"<ul> <li>start: String val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Elapsed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Elapsed/#parameters_1","title":"Parameters","text":"<ul> <li>that: Elapsed val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Elapsed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Elapsed/#parameters_2","title":"Parameters","text":"<ul> <li>that: Elapsed val</li> </ul>"},{"location":"mqtt-utilities-Elapsed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/","title":"ElapsedSince","text":"<p>[Source] <pre><code>primitive val ElapsedSince\n</code></pre></p>"},{"location":"mqtt-utilities-ElapsedSince/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ElapsedSince/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ElapsedSince val^\n</code></pre>"},{"location":"mqtt-utilities-ElapsedSince/#returns","title":"Returns","text":"<ul> <li>ElapsedSince val^</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ElapsedSince/#apply","title":"apply","text":"<p>[Source]</p> <p>Content in the form of String val = 2023:08:05 10:57:00 [123456789:123456789] s is seconds ns is nanoseconds</p> <p>returns String val = elpased seconds:elpased nanoseconds</p> <pre><code>fun box apply(\nsFinish: I64 val,\nnsFinish: I64 val,\nstart: String val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-ElapsedSince/#parameters","title":"Parameters","text":"<ul> <li>sFinish: I64 val</li> <li>nsFinish: I64 val</li> <li>start: String val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ElapsedSince val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ElapsedSince/#parameters_1","title":"Parameters","text":"<ul> <li>that: ElapsedSince val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ElapsedSince val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ElapsedSince/#parameters_2","title":"Parameters","text":"<ul> <li>that: ElapsedSince val</li> </ul>"},{"location":"mqtt-utilities-ElapsedSince/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/","title":"FixedHeader","text":"<p>[Source]</p> <p>Makes a fixed header of between two and four bytes - present in all MQTT Control Packets byte 1 MQTT Control Packet type Flags specific to each MQTT Control Packet type byte 2 Remaining Length byte 1 (mandatory) [Optional Bytes]  byte 3 Remaining Length byte 2 (only if remaining length is &gt; 127) byte 4 Remaining Length byte 3 (only if remaining length is &gt; 16383) byte 5 Remaining Length byte 4 (only if remaining length is &gt; 2 097 151)  </p> <pre><code>class ref FixedHeader\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FixedHeader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FixedHeader iso^\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#returns","title":"Returns","text":"<ul> <li>FixedHeader iso^</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FixedHeader/#makeheader","title":"makeHeader","text":"<p>[Source]</p> <p>Make a control packet header for anything other than a publish message (which needs special flags)</p> <pre><code>fun ref makeHeader(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubComp val | \nControlSubAck val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | ControlPubRel val | \nControlSubscribe val | ControlUnsubscribe val),\nlen: USize val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubComp val |      ControlSubAck val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | ControlPubRel val |      ControlSubscribe val | ControlUnsubscribe val)</li> <li>len: USize val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#makepubheader","title":"makePubHeader","text":"<p>[Source]</p> <p>Make a control packet header for a publish message - setting the flags from the passed arguments</p> <pre><code>fun ref makePubHeader(\nlen: USize val,\nq: (Qos0 val | Qos1 val | Qos2 val) = reference,\ndup: Bool val = false,\nretain: Bool val = false)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_1","title":"Parameters","text":"<ul> <li>len: USize val</li> <li>q: (Qos0 val | Qos1 val | Qos2 val) = reference</li> <li>dup: Bool val = false</li> <li>retain: Bool val = false</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_2","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-FixedHeader/#_make","title":"_make","text":"<p>[Source]</p> <p>Make a fixed header of between two and five bytes. len is the length of the remaining packet. If len is &lt; 128 the length of the returned  fixed header in the array will be two bytes</p> <pre><code>fun ref _make(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val),\nlen: USize val,\nflags: U8 val = 0)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_2","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> <li>len: USize val</li> <li>flags: U8 val = 0</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_3","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_controlpacket","title":"_controlPacket","text":"<p>[Source]</p> <p>Returns the code of the requested packetType with the four flags set by the lower nibble of flags</p> <pre><code>fun ref _controlPacket(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val),\nflags: U8 val = 0)\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_3","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> <li>flags: U8 val = 0</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_packettype","title":"_packetType","text":"<p>[Source]</p> <p>returns the code of the requested packetType with the lower four bits set to zero</p> <pre><code>fun box _packetType(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_4","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_5","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_publishflags","title":"_publishFlags","text":"<p>[Source]</p> <p>returns a control packet of the requested type with the four flags set by the lower nibble of flags</p> <pre><code>fun ref _publishFlags(\nq: (Qos0 val | Qos1 val | Qos2 val),\ndup: Bool val,\nretain: Bool val)\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_5","title":"Parameters","text":"<ul> <li>q: (Qos0 val | Qos1 val | Qos2 val)</li> <li>dup: Bool val</li> <li>retain: Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/","title":"FixedHeaderLength","text":"<p>[Source] <pre><code>primitive val FixedHeaderLength\n</code></pre></p>"},{"location":"mqtt-utilities-FixedHeaderLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FixedHeaderLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FixedHeaderLength val^\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns","title":"Returns","text":"<ul> <li>FixedHeaderLength val^</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FixedHeaderLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FixedHeaderLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: FixedHeaderLength val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FixedHeaderLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters_2","title":"Parameters","text":"<ul> <li>that: FixedHeaderLength val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/","title":"FmtBin","text":"<p>[Source] <pre><code>primitive val FmtBin\n</code></pre></p>"},{"location":"mqtt-utilities-FmtBin/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtBin/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtBin val^\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#returns","title":"Returns","text":"<ul> <li>FmtBin val^</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtBin/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters","title":"Parameters","text":"<ul> <li>v: U8 val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtBin val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtBin val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/","title":"FmtDec","text":"<p>[Source] <pre><code>primitive val FmtDec\n</code></pre></p>"},{"location":"mqtt-utilities-FmtDec/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtDec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtDec val^\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#returns","title":"Returns","text":"<ul> <li>FmtDec val^</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtDec/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: I32 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters","title":"Parameters","text":"<ul> <li>v: I32 val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtDec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtDec val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtDec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtDec val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/","title":"FmtHex","text":"<p>[Source] <pre><code>primitive val FmtHex\n</code></pre></p>"},{"location":"mqtt-utilities-FmtHex/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtHex/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtHex val^\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#returns","title":"Returns","text":"<ul> <li>FmtHex val^</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtHex/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters","title":"Parameters","text":"<ul> <li>v: U8 val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtHex val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtHex val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtHex val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtHex val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/","title":"GoodPkt1","text":"<p>[Source] <pre><code>primitive val GoodPkt1\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt1/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt1 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#returns","title":"Returns","text":"<ul> <li>GoodPkt1 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt1/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 1: $SYS/broker/subscriptions/count = 0 </p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt1 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt1 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/","title":"GoodPkt2","text":"<p>[Source] <pre><code>primitive val GoodPkt2\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt2/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt2 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#returns","title":"Returns","text":"<ul> <li>GoodPkt2 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt2/#apply","title":"apply","text":"<p>[Source]</p> <p>Packet 2 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt2 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt2 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/","title":"GoodPkt3","text":"<p>[Source] <pre><code>primitive val GoodPkt3\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt3/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt3 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#returns","title":"Returns","text":"<ul> <li>GoodPkt3 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt3/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt3 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt3 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt3 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt3 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/","title":"GoodPkt4","text":"<p>[Source] <pre><code>primitive val GoodPkt4\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt4/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt4/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt4 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#returns","title":"Returns","text":"<ul> <li>GoodPkt4 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt4/#apply","title":"apply","text":"<p>[Source]</p> <p>Packet 3 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt4 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt4 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt4 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt4 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/","title":"GoodPkt5","text":"<p>[Source] <pre><code>primitive val GoodPkt5\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt5/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt5/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt5 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#returns","title":"Returns","text":"<ul> <li>GoodPkt5 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt5/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 3: $SYS/broker/load/bytes/received/1min = 502.63  controlbyte = 51 fixed header length = 2 fixed header = 51 ; 46 variable header = 0;36 then 36 chars  remaining length = 46</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt5 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt5 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt5 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt5 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/","title":"GoodPkt6","text":"<p>[Source] <pre><code>primitive val GoodPkt6\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt6/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt6/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt6 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#returns","title":"Returns","text":"<ul> <li>GoodPkt6 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt6/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 4: $SYS/broker/load/publish/dropped/1min = 0.00</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt6 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt6 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt6 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt6 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/","title":"IsFixedHeader","text":"<p>[Source] <pre><code>primitive val IsFixedHeader\n</code></pre></p>"},{"location":"mqtt-utilities-IsFixedHeader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-IsFixedHeader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsFixedHeader val^\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#returns","title":"Returns","text":"<ul> <li>IsFixedHeader val^</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-IsFixedHeader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsFixedHeader val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsFixedHeader val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsFixedHeader val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsFixedHeader val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main is\nTestList ref\n</code></pre></p>"},{"location":"mqtt-utilities-Main/#implements","title":"Implements","text":"<ul> <li>TestList ref</li> </ul>"},{"location":"mqtt-utilities-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-utilities-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-utilities-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-utilities-Main/#make","title":"make","text":"<p>[Source]</p> <pre><code>new tag make()\n: Main tag^\n</code></pre>"},{"location":"mqtt-utilities-Main/#returns_1","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-utilities-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Main/#tests","title":"tests","text":"<p>[Source]</p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-Main/#parameters_1","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"mqtt-utilities-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-utilities-Main/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-MqString/","title":"MqString","text":"<p>[Source]</p> <p>Converts a standard string into a sequence of bytes representing the format used for  strings in the MQTT spec. This has a two byte length field followed by the bytes of  the charaacters. The MQTT version of an empty string is two bytes of zeros</p> <pre><code>primitive val MqString\n</code></pre>"},{"location":"mqtt-utilities-MqString/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-MqString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MqString val^\n</code></pre>"},{"location":"mqtt-utilities-MqString/#returns","title":"Returns","text":"<ul> <li>MqString val^</li> </ul>"},{"location":"mqtt-utilities-MqString/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-MqString/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nstg: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters","title":"Parameters","text":"<ul> <li>stg: String val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-MqString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MqString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters_1","title":"Parameters","text":"<ul> <li>that: MqString val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-MqString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MqString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters_2","title":"Parameters","text":"<ul> <li>that: MqString val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-MqTime/","title":"MqTime","text":"<p>[Source] <pre><code>class ref MqTime\n</code></pre></p>"},{"location":"mqtt-utilities-MqTime/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-MqTime/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: MqTime ref^\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns","title":"Returns","text":"<ul> <li>MqTime ref^</li> </ul>"},{"location":"mqtt-utilities-MqTime/#create_at","title":"create_at","text":"<p>[Source]</p> <pre><code>new ref create_at(\ns: I64 val,\nns: I64 val)\n: MqTime ref^\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#parameters","title":"Parameters","text":"<ul> <li>s: I64 val</li> <li>ns: I64 val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#returns_1","title":"Returns","text":"<ul> <li>MqTime ref^</li> </ul>"},{"location":"mqtt-utilities-MqTime/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-MqTime/#elapsed","title":"elapsed","text":"<p>[Source]</p> <pre><code>fun box elapsed()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#starttime","title":"startTime","text":"<p>[Source]</p> <pre><code>fun box startTime()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-MqTime/#_elapsed","title":"_elapsed","text":"<p>[Source]</p> <pre><code>fun box _elapsed(\ns: I64 val,\nns: I64 val)\n: (I64 val , I64 val)\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#parameters_1","title":"Parameters","text":"<ul> <li>s: I64 val</li> <li>ns: I64 val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#returns_4","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/","title":"RlByteCount","text":"<p>[Source] <pre><code>primitive val RlByteCount\n</code></pre></p>"},{"location":"mqtt-utilities-RlByteCount/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-RlByteCount/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RlByteCount val^\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#returns","title":"Returns","text":"<ul> <li>RlByteCount val^</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-RlByteCount/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the number of bytes in the remaining length field of the fixed header  </p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RlByteCount val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters_1","title":"Parameters","text":"<ul> <li>that: RlByteCount val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RlByteCount val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters_2","title":"Parameters","text":"<ul> <li>that: RlByteCount val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Split/","title":"Split","text":"<p>[Source]</p> <p>Split the provided U16 into two U8 bytes `</p> <pre><code>primitive val Split\n</code></pre>"},{"location":"mqtt-utilities-Split/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Split/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Split val^\n</code></pre>"},{"location":"mqtt-utilities-Split/#returns","title":"Returns","text":"<ul> <li>Split val^</li> </ul>"},{"location":"mqtt-utilities-Split/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Split/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nvalue: U16 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_1","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"mqtt-utilities-Split/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Split val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters_1","title":"Parameters","text":"<ul> <li>that: Split val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Split/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Split val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters_2","title":"Parameters","text":"<ul> <li>that: Split val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQos/","title":"ToQos","text":"<p>[Source] <pre><code>primitive val ToQos\n</code></pre></p>"},{"location":"mqtt-utilities-ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ToQos val^\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#returns","title":"Returns","text":"<ul> <li>ToQos val^</li> </ul>"},{"location":"mqtt-utilities-ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes a string and matches it against the qos patterns. Anything that doesn't match returns QOS0 ( = 0)</p> <pre><code>fun box apply(\nstg: String val)\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters","title":"Parameters","text":"<ul> <li>stg: String val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-utilities-ToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ToQos val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: ToQos val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/","title":"ToQosBits","text":"<p>[Source] <pre><code>primitive val ToQosBits\n</code></pre></p>"},{"location":"mqtt-utilities-ToQosBits/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ToQosBits/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ToQosBits val^\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#returns","title":"Returns","text":"<ul> <li>ToQosBits val^</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ToQosBits/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes a string and matches it against the qos patterns. Anything that doesn't match returns QOS0 ( = 0)</p> <pre><code>fun box apply(\nstg: String val)\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters","title":"Parameters","text":"<ul> <li>stg: String val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ToQosBits val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters_1","title":"Parameters","text":"<ul> <li>that: ToQosBits val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ToQosBits val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters_2","title":"Parameters","text":"<ul> <li>that: ToQosBits val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/","title":"TotalLength","text":"<p>[Source] <pre><code>primitive val TotalLength\n</code></pre></p>"},{"location":"mqtt-utilities-TotalLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-TotalLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TotalLength val^\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#returns","title":"Returns","text":"<ul> <li>TotalLength val^</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-TotalLength/#apply","title":"apply","text":"<p>[Source]</p> <p>Convenience function that calculates the total length of a packet by summing: 1.  The fixed header length 2.  The value of the remaining length field TODO - Optimise so we don't scan twice</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TotalLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: TotalLength val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TotalLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters_2","title":"Parameters","text":"<ul> <li>that: TotalLength val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/","title":"U16ToBytes","text":"<p>[Source]</p> <p>Convert a U16 into two U8 bytes where the first byte is the msb of the original U16.  Just a pass-through for Split at present. TODO - Endian for different platforms?</p> <pre><code>primitive val U16ToBytes\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-U16ToBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: U16ToBytes val^\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#returns","title":"Returns","text":"<ul> <li>U16ToBytes val^</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-U16ToBytes/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nvalue: U16 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_1","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: U16ToBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters_1","title":"Parameters","text":"<ul> <li>that: U16ToBytes val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: U16ToBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters_2","title":"Parameters","text":"<ul> <li>that: U16ToBytes val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/","title":"U8ToQos","text":"<p>[Source] <pre><code>primitive val U8ToQos\n</code></pre></p>"},{"location":"mqtt-utilities-U8ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-U8ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: U8ToQos val^\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#returns","title":"Returns","text":"<ul> <li>U8ToQos val^</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-U8ToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Take a U8 and returns a Qos type from QoS0 to QoS2. Returns None for any other value</p> <pre><code>fun box apply(\nvalue: U8 val)\n: (Qos0 val | Qos1 val | Qos2 val | \nNone val)\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val |      None val)</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: U8ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: U8ToQos val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: U8ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: U8ToQos val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/","title":"ValueToRLBytes","text":"<p>[Source] <pre><code>primitive val ValueToRLBytes\n</code></pre></p>"},{"location":"mqtt-utilities-ValueToRLBytes/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ValueToRLBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ValueToRLBytes val^\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns","title":"Returns","text":"<ul> <li>ValueToRLBytes val^</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ValueToRLBytes/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns an array of bytes containing the passed length value encoded as required for the remaining length field in the MQTT fixed header</p> <pre><code>fun box apply(\nlength: USize val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters","title":"Parameters","text":"<ul> <li>length: USize val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ValueToRLBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters_1","title":"Parameters","text":"<ul> <li>that: ValueToRLBytes val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ValueToRLBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters_2","title":"Parameters","text":"<ul> <li>that: ValueToRLBytes val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/","title":"_BadPkt1","text":"<p>[Source]</p> <p>Publish id 1: $SYS/broker/subscriptions/count = 0  error - incorrect length (-1 byte)</p> <pre><code>class iso _BadPkt1 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt1 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#returns","title":"Returns","text":"<ul> <li>_BadPkt1 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt1/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt1/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt1/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/","title":"_BadPkt2","text":"<p>[Source]</p> <p>Packet 2 QoS: Requested QoS 1 Approved QoS 1 error - incorrect length (+1 byte)</p> <pre><code>class iso _BadPkt2 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt2 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#returns","title":"Returns","text":"<ul> <li>_BadPkt2 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt2/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt2/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt2/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/","title":"_BadPkt3","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63 error - invalid control byte (0x00)</p> <pre><code>class iso _BadPkt3 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt3 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#returns","title":"Returns","text":"<ul> <li>_BadPkt3 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt3/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt3/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt3/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/","title":"_BadPkt4","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63 error - invalid control byte (0xF0)</p> <pre><code>class iso _BadPkt4 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt4/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt4 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#returns","title":"Returns","text":"<ul> <li>_BadPkt4 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt4/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt4/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt4/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/","title":"_BadPkt5","text":"<p>[Source]</p> <p>Publish id 1: $SYS/broker/subscriptions/count = 0  error - incorrect length (-1 byte)</p> <pre><code>class iso _BadPkt5 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt5/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt5 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#returns","title":"Returns","text":"<ul> <li>_BadPkt5 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt5/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt5/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt5/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/","title":"_BadPkt6","text":"<p>[Source]</p> <p>Packet 3 QoS: Requested QoS 1 Approved QoS 1 error - To many remaining length bytes</p> <pre><code>class iso _BadPkt6 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BadPkt6/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BadPkt6 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#returns","title":"Returns","text":"<ul> <li>_BadPkt6 iso^</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BadPkt6/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BadPkt6/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BadPkt6/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/","title":"_BytesToU16","text":"<p>[Source] <pre><code>class iso _BytesToU16 is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_BytesToU16/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BytesToU16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BytesToU16 iso^\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#returns","title":"Returns","text":"<ul> <li>_BytesToU16 iso^</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BytesToU16/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToU16/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToU16/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/","title":"_BytesToValueEx","text":"<p>[Source] <pre><code>class iso _BytesToValueEx is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_BytesToValueEx/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BytesToValueEx/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BytesToValueEx iso^\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns","title":"Returns","text":"<ul> <li>_BytesToValueEx iso^</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#public-fields","title":"Public fields","text":""},{"location":"mqtt-utilities-_BytesToValueEx/#let-b-arrayu8-val-val","title":"let b: Array[U8 val] val","text":"<p>[Source]</p>"},{"location":"mqtt-utilities-_BytesToValueEx/#let-v-u32-val","title":"let v: U32 val","text":"<p>[Source]</p>"},{"location":"mqtt-utilities-_BytesToValueEx/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BytesToValueEx/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueEx/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueEx/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/","title":"_BytesToValueLim","text":"<p>[Source] <pre><code>class iso _BytesToValueLim is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_BytesToValueLim/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_BytesToValueLim/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _BytesToValueLim iso^\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns","title":"Returns","text":"<ul> <li>_BytesToValueLim iso^</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_BytesToValueLim/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_BytesToValueLim/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_BytesToValueLim/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/","title":"_FPubHeader","text":"<p>[Source] <pre><code>class iso _FPubHeader is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_FPubHeader/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_FPubHeader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _FPubHeader iso^\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#returns","title":"Returns","text":"<ul> <li>_FPubHeader iso^</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_FPubHeader/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_FPubHeader/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_FPubHeader/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/","title":"_Fheader","text":"<p>[Source] <pre><code>class iso _Fheader is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_Fheader/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_Fheader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Fheader iso^\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#returns","title":"Returns","text":"<ul> <li>_Fheader iso^</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_Fheader/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Fheader/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Fheader/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/","title":"_GoodPkt1","text":"<p>[Source]</p> <p>Publish id 1: $SYS/broker/subscriptions/count = 0 </p> <pre><code>class iso _GoodPkt1 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt1 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#returns","title":"Returns","text":"<ul> <li>_GoodPkt1 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt1/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt1/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt1/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/","title":"_GoodPkt2","text":"<p>[Source]</p> <p>Packet 2 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>class iso _GoodPkt2 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt2 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#returns","title":"Returns","text":"<ul> <li>_GoodPkt2 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt2/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt2/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt2/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/","title":"_GoodPkt3","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63</p> <pre><code>class iso _GoodPkt3 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt3 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#returns","title":"Returns","text":"<ul> <li>_GoodPkt3 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt3/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt3/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt3/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/","title":"_GoodPkt4","text":"<p>[Source]</p> <p>Packet 3 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>class iso _GoodPkt4 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt4/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt4 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#returns","title":"Returns","text":"<ul> <li>_GoodPkt4 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt4/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt4/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt4/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/","title":"_GoodPkt5","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63</p> <pre><code>class iso _GoodPkt5 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt5/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt5 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#returns","title":"Returns","text":"<ul> <li>_GoodPkt5 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt5/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt5/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt5/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/","title":"_GoodPkt6","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63</p> <pre><code>class iso _GoodPkt6 is\nUnitTest ref\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_GoodPkt6/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _GoodPkt6 iso^\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#returns","title":"Returns","text":"<ul> <li>_GoodPkt6 iso^</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_GoodPkt6/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_GoodPkt6/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_GoodPkt6/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/","title":"_MqStringEmpty","text":"<p>[Source] <pre><code>class iso _MqStringEmpty is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_MqStringEmpty/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_MqStringEmpty/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _MqStringEmpty iso^\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns","title":"Returns","text":"<ul> <li>_MqStringEmpty iso^</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_MqStringEmpty/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringEmpty/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringEmpty/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/","title":"_MqStringLong","text":"<p>[Source] <pre><code>class iso _MqStringLong is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_MqStringLong/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_MqStringLong/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _MqStringLong iso^\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#returns","title":"Returns","text":"<ul> <li>_MqStringLong iso^</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_MqStringLong/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringLong/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringLong/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/","title":"_MqStringOver","text":"<p>[Source] <pre><code>class iso _MqStringOver is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_MqStringOver/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_MqStringOver/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _MqStringOver iso^\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#returns","title":"Returns","text":"<ul> <li>_MqStringOver iso^</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_MqStringOver/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringOver/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringOver/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/","title":"_MqStringShort","text":"<p>[Source] <pre><code>class iso _MqStringShort is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_MqStringShort/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_MqStringShort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _MqStringShort iso^\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#returns","title":"Returns","text":"<ul> <li>_MqStringShort iso^</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_MqStringShort/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_MqStringShort/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_MqStringShort/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/","title":"_RlByteCount","text":"<p>[Source] <pre><code>class iso _RlByteCount is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_RlByteCount/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_RlByteCount/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _RlByteCount iso^\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#returns","title":"Returns","text":"<ul> <li>_RlByteCount iso^</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_RlByteCount/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_RlByteCount/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_RlByteCount/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Split/","title":"_Split","text":"<p>[Source] <pre><code>class iso _Split is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_Split/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_Split/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_Split/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _Split iso^\n</code></pre>"},{"location":"mqtt-utilities-_Split/#returns","title":"Returns","text":"<ul> <li>_Split iso^</li> </ul>"},{"location":"mqtt-utilities-_Split/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_Split/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Split/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Split/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Split/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_Split/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Split/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Split/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_Split/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Split/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_Split/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_Split/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_Split/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_Split/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/","title":"_U16ToBytes","text":"<p>[Source] <pre><code>class iso _U16ToBytes is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_U16ToBytes/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_U16ToBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _U16ToBytes iso^\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#returns","title":"Returns","text":"<ul> <li>_U16ToBytes iso^</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_U16ToBytes/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_U16ToBytes/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_U16ToBytes/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/","title":"_ValueToRLBytesEx","text":"<p>[Source] <pre><code>class iso _ValueToRLBytesEx is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_ValueToRLBytesEx/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ValueToRLBytesEx iso^\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns","title":"Returns","text":"<ul> <li>_ValueToRLBytesEx iso^</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#public-fields","title":"Public fields","text":""},{"location":"mqtt-utilities-_ValueToRLBytesEx/#let-b-arrayu8-val-val","title":"let b: Array[U8 val] val","text":"<p>[Source]</p>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#let-v-usize-val","title":"let v: USize val","text":"<p>[Source]</p>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_ValueToRLBytesEx/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesEx/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/","title":"_ValueToRLBytesLim","text":"<p>[Source] <pre><code>class iso _ValueToRLBytesLim is\nUnitTest ref\n</code></pre></p>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#implements","title":"Implements","text":"<ul> <li>UnitTest ref</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-_ValueToRLBytesLim/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _ValueToRLBytesLim iso^\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns","title":"Returns","text":"<ul> <li>_ValueToRLBytesLim iso^</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-_ValueToRLBytesLim/#name","title":"name","text":"<p>[Source]</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#exclusion_group","title":"exclusion_group","text":"<pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#timed_out","title":"timed_out","text":"<pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#set_up","title":"set_up","text":"<pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_5","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#tear_down","title":"tear_down","text":"<pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#label","title":"label","text":"<pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-_ValueToRLBytesLim/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"net--index/","title":"Net package","text":"<p>The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections.</p>"},{"location":"net--index/#public-types","title":"Public Types","text":"<ul> <li>primitive DNS</li> <li>primitive DNSAuth</li> <li>class NetAddress</li> <li>primitive NetAuth</li> <li>class NoProxy</li> <li>primitive OSSockOpt</li> <li>interface Proxy</li> <li>primitive TCPAuth</li> <li>primitive TCPConnectAuth</li> <li>actor TCPConnection</li> <li>interface TCPConnectionNotify</li> <li>primitive TCPListenAuth</li> <li>interface TCPListenNotify</li> <li>actor TCPListener</li> <li>primitive UDPAuth</li> <li>interface UDPNotify</li> <li>actor UDPSocket</li> </ul>"},{"location":"net--index/#private-types","title":"Private Types","text":"<ul> <li>primitive _OSSocket</li> </ul>"},{"location":"net-DNS/","title":"DNS","text":"<p>[Source]</p> <p>Helper functions for resolving DNS queries.</p> <pre><code>primitive val DNS\n</code></pre>"},{"location":"net-DNS/#constructors","title":"Constructors","text":""},{"location":"net-DNS/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DNS val^\n</code></pre>"},{"location":"net-DNS/#returns","title":"Returns","text":"<ul> <li>DNS val^</li> </ul>"},{"location":"net-DNS/#public-functions","title":"Public Functions","text":""},{"location":"net-DNS/#apply","title":"apply","text":"<p>[Source]</p> <p>Gets all IPv4 and IPv6 addresses for a host and service.</p> <pre><code>fun box apply(\nauth: DNSAuth val,\nhost: String val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_1","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Gets all IPv4 addresses for a host and service.</p> <pre><code>fun box ip4(\nauth: DNSAuth val,\nhost: String val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_1","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_2","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Gets all IPv6 addresses for a host and service.</p> <pre><code>fun box ip6(\nauth: DNSAuth val,\nhost: String val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_2","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_3","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#broadcast_ip4","title":"broadcast_ip4","text":"<p>[Source]</p> <p>Link-local IP4 broadcast address.</p> <pre><code>fun box broadcast_ip4(\nauth: DNSAuth val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_3","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_4","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#broadcast_ip6","title":"broadcast_ip6","text":"<p>[Source]</p> <p>Link-local IP6 broadcast address.</p> <pre><code>fun box broadcast_ip6(\nauth: DNSAuth val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_4","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_5","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNS/#is_ip4","title":"is_ip4","text":"<p>[Source]</p> <p>Returns true if the host is a literal IPv4 address.</p> <pre><code>fun box is_ip4(\nhost: String val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_5","title":"Parameters","text":"<ul> <li>host: String val</li> </ul>"},{"location":"net-DNS/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#is_ip6","title":"is_ip6","text":"<p>[Source]</p> <p>Returns true if the host is a literal IPv6 address.</p> <pre><code>fun box is_ip6(\nhost: String val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_6","title":"Parameters","text":"<ul> <li>host: String val</li> </ul>"},{"location":"net-DNS/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DNS val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_7","title":"Parameters","text":"<ul> <li>that: DNS val</li> </ul>"},{"location":"net-DNS/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DNS val)\n: Bool val\n</code></pre>"},{"location":"net-DNS/#parameters_8","title":"Parameters","text":"<ul> <li>that: DNS val</li> </ul>"},{"location":"net-DNS/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNS/#private-functions","title":"Private Functions","text":""},{"location":"net-DNS/#_resolve","title":"_resolve","text":"<p>[Source]</p> <p>Turns an addrinfo pointer into an array of addresses.</p> <pre><code>fun box _resolve(\nauth: DNSAuth val,\nfamily: U32 val,\nhost: String val,\nservice: String val)\n: Array[NetAddress val] iso^\n</code></pre>"},{"location":"net-DNS/#parameters_9","title":"Parameters","text":"<ul> <li>auth: DNSAuth val</li> <li>family: U32 val</li> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-DNS/#returns_10","title":"Returns","text":"<ul> <li>Array[NetAddress val] iso^</li> </ul>"},{"location":"net-DNSAuth/","title":"DNSAuth","text":"<p>[Source] <pre><code>primitive val DNSAuth\n</code></pre></p>"},{"location":"net-DNSAuth/#constructors","title":"Constructors","text":""},{"location":"net-DNSAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: (AmbientAuth val | NetAuth val))\n: DNSAuth val^\n</code></pre>"},{"location":"net-DNSAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-DNSAuth/#returns","title":"Returns","text":"<ul> <li>DNSAuth val^</li> </ul>"},{"location":"net-DNSAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-DNSAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DNSAuth val)\n: Bool val\n</code></pre>"},{"location":"net-DNSAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: DNSAuth val</li> </ul>"},{"location":"net-DNSAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-DNSAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DNSAuth val)\n: Bool val\n</code></pre>"},{"location":"net-DNSAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: DNSAuth val</li> </ul>"},{"location":"net-DNSAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/","title":"NetAddress","text":"<p>[Source]</p> <p>Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address.</p> <p>This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 <code>sockaddr_storage</code>.</p> <p>Use the <code>name</code> method to obtain address/hostname and port/service as Strings.</p> <pre><code>class val NetAddress is\nEquatable[NetAddress val] ref\n</code></pre>"},{"location":"net-NetAddress/#implements","title":"Implements","text":"<ul> <li>Equatable[NetAddress val] ref</li> </ul>"},{"location":"net-NetAddress/#constructors","title":"Constructors","text":""},{"location":"net-NetAddress/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: NetAddress iso^\n</code></pre>"},{"location":"net-NetAddress/#returns","title":"Returns","text":"<ul> <li>NetAddress iso^</li> </ul>"},{"location":"net-NetAddress/#public-functions","title":"Public Functions","text":""},{"location":"net-NetAddress/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Returns true for an IPv4 address.</p> <pre><code>fun box ip4()\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Returns true for an IPv6 address.</p> <pre><code>fun box ip6()\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#name","title":"name","text":"<p>[Source]</p> <p>Returns the host and service name.</p> <p>If <code>reversedns</code> is <code>DNSAuth</code>, a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If <code>reversedns</code> is <code>None</code> the plain IP address is given and no DNS lookup is executed.</p> <p>If <code>servicename</code> is <code>false</code> the numeric port is returned as second element of the result tuple. If it is <code>true</code> the port is translated into its corresponding servicename (e.g. port 80 is returned as <code>\"http\"</code>).</p> <p>Internally this method uses the POSIX C function <code>getnameinfo</code>.</p> <pre><code>fun box name(\nreversedns: (DNSAuth val | None val) = reference,\nservicename: Bool val = false)\n: (String val , String val) ?\n</code></pre>"},{"location":"net-NetAddress/#parameters","title":"Parameters","text":"<ul> <li>reversedns: (DNSAuth val | None val) = reference</li> <li>servicename: Bool val = false</li> </ul>"},{"location":"net-NetAddress/#returns_3","title":"Returns","text":"<ul> <li>(String val , String val) ?</li> </ul>"},{"location":"net-NetAddress/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NetAddress box)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_1","title":"Parameters","text":"<ul> <li>that: NetAddress box</li> </ul>"},{"location":"net-NetAddress/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#host_eq","title":"host_eq","text":"<p>[Source]</p> <pre><code>fun box host_eq(\nthat: NetAddress box)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_2","title":"Parameters","text":"<ul> <li>that: NetAddress box</li> </ul>"},{"location":"net-NetAddress/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAddress/#length","title":"length","text":"<p>[Source]</p> <p>For platforms (OSX/FreeBSD) with <code>length</code> field as part of its <code>struct sockaddr</code> definition, returns the <code>length</code>. Else (Linux/Windows) returns the size of <code>sockaddr_in</code> or <code>sockaddr_in6</code>.</p> <pre><code>fun box length()\n: U8 val\n</code></pre>"},{"location":"net-NetAddress/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"net-NetAddress/#family","title":"family","text":"<p>[Source]</p> <p>Returns the <code>family</code>.</p> <pre><code>fun box family()\n: U8 val\n</code></pre>"},{"location":"net-NetAddress/#returns_7","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"net-NetAddress/#port","title":"port","text":"<p>[Source]</p> <p>Returns port number in host byte order.</p> <pre><code>fun box port()\n: U16 val\n</code></pre>"},{"location":"net-NetAddress/#returns_8","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"net-NetAddress/#scope","title":"scope","text":"<p>[Source]</p> <p>Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.</p> <pre><code>fun box scope()\n: U32 val\n</code></pre>"},{"location":"net-NetAddress/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-NetAddress/#ipv4_addr","title":"ipv4_addr","text":"<p>[Source]</p> <p>Returns IPV4 address (<code>_addr</code> field in the class) if <code>ip4()</code> is <code>True</code>. If <code>ip4()</code> is <code>False</code> then the contents are invalid.</p> <pre><code>fun box ipv4_addr()\n: U32 val\n</code></pre>"},{"location":"net-NetAddress/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-NetAddress/#ipv6_addr","title":"ipv6_addr","text":"<p>[Source]</p> <p>Returns IPV6 address as the 4-tuple (say <code>a</code>). <code>a._1 = _addr1</code> // Bits 0-32 of the IPv6 address in host byte order. <code>a._2 = _addr2  // Bits 33-64 of the IPv6 address in host byte order.</code>a._3 = _addr3  // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4  // Bits 97-128 of the IPv6 address in host byte order.</p> <p>The contents of the 4-tuple returned are valid only if <code>ip6()</code> is <code>True</code>.</p> <pre><code>fun box ipv6_addr()\n: (U32 val , U32 val , U32 val , \nU32 val)\n</code></pre>"},{"location":"net-NetAddress/#returns_11","title":"Returns","text":"<ul> <li>(U32 val , U32 val , U32 val ,      U32 val)</li> </ul>"},{"location":"net-NetAddress/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NetAddress val)\n: Bool val\n</code></pre>"},{"location":"net-NetAddress/#parameters_3","title":"Parameters","text":"<ul> <li>that: NetAddress val</li> </ul>"},{"location":"net-NetAddress/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAuth/","title":"NetAuth","text":"<p>[Source] <pre><code>primitive val NetAuth\n</code></pre></p>"},{"location":"net-NetAuth/#constructors","title":"Constructors","text":""},{"location":"net-NetAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: AmbientAuth val)\n: NetAuth val^\n</code></pre>"},{"location":"net-NetAuth/#parameters","title":"Parameters","text":"<ul> <li>from: AmbientAuth val</li> </ul>"},{"location":"net-NetAuth/#returns","title":"Returns","text":"<ul> <li>NetAuth val^</li> </ul>"},{"location":"net-NetAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-NetAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NetAuth val)\n: Bool val\n</code></pre>"},{"location":"net-NetAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: NetAuth val</li> </ul>"},{"location":"net-NetAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NetAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NetAuth val)\n: Bool val\n</code></pre>"},{"location":"net-NetAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: NetAuth val</li> </ul>"},{"location":"net-NetAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-NoProxy/","title":"NoProxy","text":"<p>[Source]</p> <p>Default implementation of a proxy that does not alter the supplied <code>TCPConnectionNotify</code>.</p> <pre><code>actor MyClient\nnew create(host: String, service: String, proxy: Proxy = NoProxy) =&gt;\nlet conn: TCPConnection = TCPConnection.create(\nTCPConnectAuth(env.root),\nproxy.apply(MyConnectionNotify.create()),\n\"localhost\",\n\"80\")\n</code></pre> <pre><code>class val NoProxy is\nProxy ref\n</code></pre>"},{"location":"net-NoProxy/#implements","title":"Implements","text":"<ul> <li>Proxy ref</li> </ul>"},{"location":"net-NoProxy/#constructors","title":"Constructors","text":""},{"location":"net-NoProxy/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: NoProxy iso^\n</code></pre>"},{"location":"net-NoProxy/#returns","title":"Returns","text":"<ul> <li>NoProxy iso^</li> </ul>"},{"location":"net-NoProxy/#public-functions","title":"Public Functions","text":""},{"location":"net-NoProxy/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nwrap: TCPConnectionNotify iso)\n: TCPConnectionNotify iso^\n</code></pre>"},{"location":"net-NoProxy/#parameters","title":"Parameters","text":"<ul> <li>wrap: TCPConnectionNotify iso</li> </ul>"},{"location":"net-NoProxy/#returns_1","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^</li> </ul>"},{"location":"net-OSSockOpt/","title":"OSSockOpt","text":"<p>[Source]</p> <p>Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the <code>getsockopt(2)</code> and <code>setsockopt(2)</code> operating system calls.</p> <p>The values of the option level and option name constants are typically C preprocessor macros, e.g., <code>#define SOMETHING 42</code>. These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, <code>IP_NAT__XXX</code>).  The function names in this primitive are derived by the C macro name and then:</p> <ul> <li>converted to lower case</li> <li>any double underscore (<code>__</code>) is converted to a     single underscore (<code>_</code>).</li> </ul> <p>These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization &amp; deserialization or via direct shared memory).</p> <p>Many functions may return <code>-1</code>, which means that the constant's value could not be determined at the Pony runtime library compile time.  One cause may be that the option truly isn't available, for example, the option level constant <code>IPPROTO_3PC</code> is available on MacOS 10.x but not on Linux 4.4.  Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform.</p> <p>A third cause of error is due to the regular expression-based approach used to harvest desirable constants.  It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with <code>getsockopt(2)</code> and <code>setsockopt(2)</code>. Please consult your platform's documentation to verify the names of the option level and option name macros.</p> <p>The following code fragments are equivalent: set the socket receive buffer size for the file descriptor <code>fd</code> to <code>4455</code>.</p> <pre><code>/* In C */\nint option_value = 4455;\nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, &amp;option_value, 4);\n/* In Pony */\nvar option: I32 = 4455;\n@setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(),\naddressof option, I32(4))\n</code></pre> <pre><code>primitive val OSSockOpt\n</code></pre>"},{"location":"net-OSSockOpt/#constructors","title":"Constructors","text":""},{"location":"net-OSSockOpt/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: OSSockOpt val^\n</code></pre>"},{"location":"net-OSSockOpt/#returns","title":"Returns","text":"<ul> <li>OSSockOpt val^</li> </ul>"},{"location":"net-OSSockOpt/#public-functions","title":"Public Functions","text":""},{"location":"net-OSSockOpt/#ipproto_3pc","title":"ipproto_3pc","text":"<p>[Source]</p> <pre><code>fun box ipproto_3pc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_adfs","title":"ipproto_adfs","text":"<p>[Source]</p> <pre><code>fun box ipproto_adfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_2","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ah","title":"ipproto_ah","text":"<p>[Source]</p> <pre><code>fun box ipproto_ah()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_3","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ahip","title":"ipproto_ahip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ahip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_4","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_apes","title":"ipproto_apes","text":"<p>[Source]</p> <pre><code>fun box ipproto_apes()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_5","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_argus","title":"ipproto_argus","text":"<p>[Source]</p> <pre><code>fun box ipproto_argus()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_6","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ax25","title":"ipproto_ax25","text":"<p>[Source]</p> <pre><code>fun box ipproto_ax25()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_7","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_beetph","title":"ipproto_beetph","text":"<p>[Source]</p> <pre><code>fun box ipproto_beetph()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_8","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_bha","title":"ipproto_bha","text":"<p>[Source]</p> <pre><code>fun box ipproto_bha()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_9","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_blt","title":"ipproto_blt","text":"<p>[Source]</p> <pre><code>fun box ipproto_blt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_10","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_brsatmon","title":"ipproto_brsatmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_brsatmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_11","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_carp","title":"ipproto_carp","text":"<p>[Source]</p> <pre><code>fun box ipproto_carp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cftp","title":"ipproto_cftp","text":"<p>[Source]</p> <pre><code>fun box ipproto_cftp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_chaos","title":"ipproto_chaos","text":"<p>[Source]</p> <pre><code>fun box ipproto_chaos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_14","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cmtp","title":"ipproto_cmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_cmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_15","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_comp","title":"ipproto_comp","text":"<p>[Source]</p> <pre><code>fun box ipproto_comp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_16","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cphb","title":"ipproto_cphb","text":"<p>[Source]</p> <pre><code>fun box ipproto_cphb()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_17","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_cpnx","title":"ipproto_cpnx","text":"<p>[Source]</p> <pre><code>fun box ipproto_cpnx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_18","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dccp","title":"ipproto_dccp","text":"<p>[Source]</p> <pre><code>fun box ipproto_dccp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_19","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ddp","title":"ipproto_ddp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ddp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_20","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dgp","title":"ipproto_dgp","text":"<p>[Source]</p> <pre><code>fun box ipproto_dgp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_21","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_divert","title":"ipproto_divert","text":"<p>[Source]</p> <pre><code>fun box ipproto_divert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_22","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_done","title":"ipproto_done","text":"<p>[Source]</p> <pre><code>fun box ipproto_done()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_23","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_dstopts","title":"ipproto_dstopts","text":"<p>[Source]</p> <pre><code>fun box ipproto_dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_24","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_egp","title":"ipproto_egp","text":"<p>[Source]</p> <pre><code>fun box ipproto_egp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_25","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_emcon","title":"ipproto_emcon","text":"<p>[Source]</p> <pre><code>fun box ipproto_emcon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_26","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_encap","title":"ipproto_encap","text":"<p>[Source]</p> <pre><code>fun box ipproto_encap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_27","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_eon","title":"ipproto_eon","text":"<p>[Source]</p> <pre><code>fun box ipproto_eon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_28","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_esp","title":"ipproto_esp","text":"<p>[Source]</p> <pre><code>fun box ipproto_esp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_29","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_etherip","title":"ipproto_etherip","text":"<p>[Source]</p> <pre><code>fun box ipproto_etherip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_30","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_fragment","title":"ipproto_fragment","text":"<p>[Source]</p> <pre><code>fun box ipproto_fragment()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_31","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ggp","title":"ipproto_ggp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ggp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_32","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_gmtp","title":"ipproto_gmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_gmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_33","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_gre","title":"ipproto_gre","text":"<p>[Source]</p> <pre><code>fun box ipproto_gre()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_34","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hello","title":"ipproto_hello","text":"<p>[Source]</p> <pre><code>fun box ipproto_hello()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_35","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hip","title":"ipproto_hip","text":"<p>[Source]</p> <pre><code>fun box ipproto_hip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_36","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hmp","title":"ipproto_hmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_hmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_37","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_hopopts","title":"ipproto_hopopts","text":"<p>[Source]</p> <pre><code>fun box ipproto_hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_38","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_icmp","title":"ipproto_icmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_icmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_39","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_icmpv6","title":"ipproto_icmpv6","text":"<p>[Source]</p> <pre><code>fun box ipproto_icmpv6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_40","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idp","title":"ipproto_idp","text":"<p>[Source]</p> <pre><code>fun box ipproto_idp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_41","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idpr","title":"ipproto_idpr","text":"<p>[Source]</p> <pre><code>fun box ipproto_idpr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_42","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_idrp","title":"ipproto_idrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_idrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_43","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igmp","title":"ipproto_igmp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_44","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igp","title":"ipproto_igp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_45","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_igrp","title":"ipproto_igrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_igrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_46","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_il","title":"ipproto_il","text":"<p>[Source]</p> <pre><code>fun box ipproto_il()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_47","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_inlsp","title":"ipproto_inlsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_inlsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_48","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_inp","title":"ipproto_inp","text":"<p>[Source]</p> <pre><code>fun box ipproto_inp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_49","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ip","title":"ipproto_ip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_50","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipcomp","title":"ipproto_ipcomp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipcomp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_51","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipcv","title":"ipproto_ipcv","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipcv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_52","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipeip","title":"ipproto_ipeip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipeip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_53","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipip","title":"ipproto_ipip","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_54","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ippc","title":"ipproto_ippc","text":"<p>[Source]</p> <pre><code>fun box ipproto_ippc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_55","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipv4","title":"ipproto_ipv4","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipv4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_56","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ipv6","title":"ipproto_ipv6","text":"<p>[Source]</p> <pre><code>fun box ipproto_ipv6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_57","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_irtp","title":"ipproto_irtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_irtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_58","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_kryptolan","title":"ipproto_kryptolan","text":"<p>[Source]</p> <pre><code>fun box ipproto_kryptolan()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_59","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_larp","title":"ipproto_larp","text":"<p>[Source]</p> <pre><code>fun box ipproto_larp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_60","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_leaf1","title":"ipproto_leaf1","text":"<p>[Source]</p> <pre><code>fun box ipproto_leaf1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_61","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_leaf2","title":"ipproto_leaf2","text":"<p>[Source]</p> <pre><code>fun box ipproto_leaf2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_62","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_max","title":"ipproto_max","text":"<p>[Source]</p> <pre><code>fun box ipproto_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_63","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_maxid","title":"ipproto_maxid","text":"<p>[Source]</p> <pre><code>fun box ipproto_maxid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_64","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_meas","title":"ipproto_meas","text":"<p>[Source]</p> <pre><code>fun box ipproto_meas()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_65","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mh","title":"ipproto_mh","text":"<p>[Source]</p> <pre><code>fun box ipproto_mh()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_66","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mhrp","title":"ipproto_mhrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_mhrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_67","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_micp","title":"ipproto_micp","text":"<p>[Source]</p> <pre><code>fun box ipproto_micp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_68","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mobile","title":"ipproto_mobile","text":"<p>[Source]</p> <pre><code>fun box ipproto_mobile()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_69","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mpls","title":"ipproto_mpls","text":"<p>[Source]</p> <pre><code>fun box ipproto_mpls()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_70","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mtp","title":"ipproto_mtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_mtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_71","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_mux","title":"ipproto_mux","text":"<p>[Source]</p> <pre><code>fun box ipproto_mux()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_72","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nd","title":"ipproto_nd","text":"<p>[Source]</p> <pre><code>fun box ipproto_nd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_73","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nhrp","title":"ipproto_nhrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_nhrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_74","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_none","title":"ipproto_none","text":"<p>[Source]</p> <pre><code>fun box ipproto_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_75","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nsp","title":"ipproto_nsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_nsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_76","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_nvpii","title":"ipproto_nvpii","text":"<p>[Source]</p> <pre><code>fun box ipproto_nvpii()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_77","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_old_divert","title":"ipproto_old_divert","text":"<p>[Source]</p> <pre><code>fun box ipproto_old_divert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_78","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ospfigp","title":"ipproto_ospfigp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ospfigp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_79","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pfsync","title":"ipproto_pfsync","text":"<p>[Source]</p> <pre><code>fun box ipproto_pfsync()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_80","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pgm","title":"ipproto_pgm","text":"<p>[Source]</p> <pre><code>fun box ipproto_pgm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_81","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pigp","title":"ipproto_pigp","text":"<p>[Source]</p> <pre><code>fun box ipproto_pigp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_82","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pim","title":"ipproto_pim","text":"<p>[Source]</p> <pre><code>fun box ipproto_pim()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_83","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_prm","title":"ipproto_prm","text":"<p>[Source]</p> <pre><code>fun box ipproto_prm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_84","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pup","title":"ipproto_pup","text":"<p>[Source]</p> <pre><code>fun box ipproto_pup()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_85","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_pvp","title":"ipproto_pvp","text":"<p>[Source]</p> <pre><code>fun box ipproto_pvp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_86","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_raw","title":"ipproto_raw","text":"<p>[Source]</p> <pre><code>fun box ipproto_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_87","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rccmon","title":"ipproto_rccmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_rccmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_88","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rdp","title":"ipproto_rdp","text":"<p>[Source]</p> <pre><code>fun box ipproto_rdp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_89","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_reserved_253","title":"ipproto_reserved_253","text":"<p>[Source]</p> <pre><code>fun box ipproto_reserved_253()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_90","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_reserved_254","title":"ipproto_reserved_254","text":"<p>[Source]</p> <pre><code>fun box ipproto_reserved_254()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_91","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_routing","title":"ipproto_routing","text":"<p>[Source]</p> <pre><code>fun box ipproto_routing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_92","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rsvp","title":"ipproto_rsvp","text":"<p>[Source]</p> <pre><code>fun box ipproto_rsvp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_93","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_rvd","title":"ipproto_rvd","text":"<p>[Source]</p> <pre><code>fun box ipproto_rvd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_94","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_satexpak","title":"ipproto_satexpak","text":"<p>[Source]</p> <pre><code>fun box ipproto_satexpak()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_95","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_satmon","title":"ipproto_satmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_satmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_96","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sccsp","title":"ipproto_sccsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sccsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_97","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sctp","title":"ipproto_sctp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sctp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_98","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sdrp","title":"ipproto_sdrp","text":"<p>[Source]</p> <pre><code>fun box ipproto_sdrp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_99","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_send","title":"ipproto_send","text":"<p>[Source]</p> <pre><code>fun box ipproto_send()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_100","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_sep","title":"ipproto_sep","text":"<p>[Source]</p> <pre><code>fun box ipproto_sep()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_shim6","title":"ipproto_shim6","text":"<p>[Source]</p> <pre><code>fun box ipproto_shim6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_102","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_skip","title":"ipproto_skip","text":"<p>[Source]</p> <pre><code>fun box ipproto_skip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_103","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_spacer","title":"ipproto_spacer","text":"<p>[Source]</p> <pre><code>fun box ipproto_spacer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_104","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_srpc","title":"ipproto_srpc","text":"<p>[Source]</p> <pre><code>fun box ipproto_srpc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_105","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_st","title":"ipproto_st","text":"<p>[Source]</p> <pre><code>fun box ipproto_st()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_106","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_svmtp","title":"ipproto_svmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_svmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_swipe","title":"ipproto_swipe","text":"<p>[Source]</p> <pre><code>fun box ipproto_swipe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_108","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tcf","title":"ipproto_tcf","text":"<p>[Source]</p> <pre><code>fun box ipproto_tcf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tcp","title":"ipproto_tcp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_110","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tlsp","title":"ipproto_tlsp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tlsp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_111","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tp","title":"ipproto_tp","text":"<p>[Source]</p> <pre><code>fun box ipproto_tp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_112","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_tpxx","title":"ipproto_tpxx","text":"<p>[Source]</p> <pre><code>fun box ipproto_tpxx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_113","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_trunk1","title":"ipproto_trunk1","text":"<p>[Source]</p> <pre><code>fun box ipproto_trunk1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_114","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_trunk2","title":"ipproto_trunk2","text":"<p>[Source]</p> <pre><code>fun box ipproto_trunk2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_115","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_ttp","title":"ipproto_ttp","text":"<p>[Source]</p> <pre><code>fun box ipproto_ttp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_116","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_udp","title":"ipproto_udp","text":"<p>[Source]</p> <pre><code>fun box ipproto_udp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_117","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_udplite","title":"ipproto_udplite","text":"<p>[Source]</p> <pre><code>fun box ipproto_udplite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_118","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_vines","title":"ipproto_vines","text":"<p>[Source]</p> <pre><code>fun box ipproto_vines()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_119","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_visa","title":"ipproto_visa","text":"<p>[Source]</p> <pre><code>fun box ipproto_visa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_120","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_vmtp","title":"ipproto_vmtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_vmtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_121","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wbexpak","title":"ipproto_wbexpak","text":"<p>[Source]</p> <pre><code>fun box ipproto_wbexpak()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_122","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wbmon","title":"ipproto_wbmon","text":"<p>[Source]</p> <pre><code>fun box ipproto_wbmon()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_123","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_wsn","title":"ipproto_wsn","text":"<p>[Source]</p> <pre><code>fun box ipproto_wsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_124","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_xnet","title":"ipproto_xnet","text":"<p>[Source]</p> <pre><code>fun box ipproto_xnet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_125","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipproto_xtp","title":"ipproto_xtp","text":"<p>[Source]</p> <pre><code>fun box ipproto_xtp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_126","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_atalk","title":"sol_atalk","text":"<p>[Source]</p> <pre><code>fun box sol_atalk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_127","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ax25","title":"sol_ax25","text":"<p>[Source]</p> <pre><code>fun box sol_ax25()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_128","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_hci_raw","title":"sol_hci_raw","text":"<p>[Source]</p> <pre><code>fun box sol_hci_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_129","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ipx","title":"sol_ipx","text":"<p>[Source]</p> <pre><code>fun box sol_ipx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_130","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_l2cap","title":"sol_l2cap","text":"<p>[Source]</p> <pre><code>fun box sol_l2cap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_131","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_local","title":"sol_local","text":"<p>[Source]</p> <pre><code>fun box sol_local()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_132","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_ndrvproto","title":"sol_ndrvproto","text":"<p>[Source]</p> <pre><code>fun box sol_ndrvproto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_133","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_netrom","title":"sol_netrom","text":"<p>[Source]</p> <pre><code>fun box sol_netrom()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_134","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rds","title":"sol_rds","text":"<p>[Source]</p> <pre><code>fun box sol_rds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_135","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rfcomm","title":"sol_rfcomm","text":"<p>[Source]</p> <pre><code>fun box sol_rfcomm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_136","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_rose","title":"sol_rose","text":"<p>[Source]</p> <pre><code>fun box sol_rose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_137","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_sco","title":"sol_sco","text":"<p>[Source]</p> <pre><code>fun box sol_sco()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_138","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_socket","title":"sol_socket","text":"<p>[Source]</p> <pre><code>fun box sol_socket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_139","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_tipc","title":"sol_tipc","text":"<p>[Source]</p> <pre><code>fun box sol_tipc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_140","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sol_udp","title":"sol_udp","text":"<p>[Source]</p> <pre><code>fun box sol_udp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_141","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_coip","title":"af_coip","text":"<p>[Source]</p> <pre><code>fun box af_coip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_142","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_inet","title":"af_inet","text":"<p>[Source]</p> <pre><code>fun box af_inet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_143","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#af_inet6","title":"af_inet6","text":"<p>[Source]</p> <pre><code>fun box af_inet6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_144","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#bluetooth_proto_sco","title":"bluetooth_proto_sco","text":"<p>[Source]</p> <pre><code>fun box bluetooth_proto_sco()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_145","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_nr_pkt_types","title":"dccp_nr_pkt_types","text":"<p>[Source]</p> <pre><code>fun box dccp_nr_pkt_types()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_146","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_service_list_max_len","title":"dccp_service_list_max_len","text":"<p>[Source]</p> <pre><code>fun box dccp_service_list_max_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_147","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_single_opt_maxlen","title":"dccp_single_opt_maxlen","text":"<p>[Source]</p> <pre><code>fun box dccp_single_opt_maxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_148","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_available_ccids","title":"dccp_sockopt_available_ccids","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_available_ccids()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_149","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid","title":"dccp_sockopt_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_150","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_rx_info","title":"dccp_sockopt_ccid_rx_info","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid_rx_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_151","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_tx_info","title":"dccp_sockopt_ccid_tx_info","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_ccid_tx_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_152","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_change_l","title":"dccp_sockopt_change_l","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_change_l()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_153","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_change_r","title":"dccp_sockopt_change_r","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_change_r()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_154","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_get_cur_mps","title":"dccp_sockopt_get_cur_mps","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_get_cur_mps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_155","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_packet_size","title":"dccp_sockopt_packet_size","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_packet_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_156","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_id","title":"dccp_sockopt_qpolicy_id","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_qpolicy_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_157","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_txqlen","title":"dccp_sockopt_qpolicy_txqlen","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_qpolicy_txqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_158","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_recv_cscov","title":"dccp_sockopt_recv_cscov","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_recv_cscov()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_159","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_rx_ccid","title":"dccp_sockopt_rx_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_rx_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_160","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_send_cscov","title":"dccp_sockopt_send_cscov","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_send_cscov()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_161","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_server_timewait","title":"dccp_sockopt_server_timewait","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_server_timewait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_162","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_service","title":"dccp_sockopt_service","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_service()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_163","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dccp_sockopt_tx_ccid","title":"dccp_sockopt_tx_ccid","text":"<p>[Source]</p> <pre><code>fun box dccp_sockopt_tx_ccid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_164","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_acceptmode","title":"dso_acceptmode","text":"<p>[Source]</p> <pre><code>fun box dso_acceptmode()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_165","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conaccept","title":"dso_conaccept","text":"<p>[Source]</p> <pre><code>fun box dso_conaccept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_166","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conaccess","title":"dso_conaccess","text":"<p>[Source]</p> <pre><code>fun box dso_conaccess()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_167","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_condata","title":"dso_condata","text":"<p>[Source]</p> <pre><code>fun box dso_condata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_168","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_conreject","title":"dso_conreject","text":"<p>[Source]</p> <pre><code>fun box dso_conreject()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_169","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_cork","title":"dso_cork","text":"<p>[Source]</p> <pre><code>fun box dso_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_170","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_disdata","title":"dso_disdata","text":"<p>[Source]</p> <pre><code>fun box dso_disdata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_171","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_info","title":"dso_info","text":"<p>[Source]</p> <pre><code>fun box dso_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_172","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_linkinfo","title":"dso_linkinfo","text":"<p>[Source]</p> <pre><code>fun box dso_linkinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_173","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_max","title":"dso_max","text":"<p>[Source]</p> <pre><code>fun box dso_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_174","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_maxwindow","title":"dso_maxwindow","text":"<p>[Source]</p> <pre><code>fun box dso_maxwindow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_175","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_nodelay","title":"dso_nodelay","text":"<p>[Source]</p> <pre><code>fun box dso_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_176","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_seqpacket","title":"dso_seqpacket","text":"<p>[Source]</p> <pre><code>fun box dso_seqpacket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_177","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_services","title":"dso_services","text":"<p>[Source]</p> <pre><code>fun box dso_services()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_178","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#dso_stream","title":"dso_stream","text":"<p>[Source]</p> <pre><code>fun box dso_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_179","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_address","title":"icmp_address","text":"<p>[Source]</p> <pre><code>fun box icmp_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_180","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_addressreply","title":"icmp_addressreply","text":"<p>[Source]</p> <pre><code>fun box icmp_addressreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_181","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_dest_unreach","title":"icmp_dest_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_dest_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_182","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_echo","title":"icmp_echo","text":"<p>[Source]</p> <pre><code>fun box icmp_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_183","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_echoreply","title":"icmp_echoreply","text":"<p>[Source]</p> <pre><code>fun box icmp_echoreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_184","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_exc_fragtime","title":"icmp_exc_fragtime","text":"<p>[Source]</p> <pre><code>fun box icmp_exc_fragtime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_185","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_exc_ttl","title":"icmp_exc_ttl","text":"<p>[Source]</p> <pre><code>fun box icmp_exc_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_186","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_filter","title":"icmp_filter","text":"<p>[Source]</p> <pre><code>fun box icmp_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_187","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_frag_needed","title":"icmp_frag_needed","text":"<p>[Source]</p> <pre><code>fun box icmp_frag_needed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_188","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_ano","title":"icmp_host_ano","text":"<p>[Source]</p> <pre><code>fun box icmp_host_ano()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_189","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_isolated","title":"icmp_host_isolated","text":"<p>[Source]</p> <pre><code>fun box icmp_host_isolated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_190","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unknown","title":"icmp_host_unknown","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unknown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_191","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unreach","title":"icmp_host_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_192","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_host_unr_tos","title":"icmp_host_unr_tos","text":"<p>[Source]</p> <pre><code>fun box icmp_host_unr_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_193","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_info_reply","title":"icmp_info_reply","text":"<p>[Source]</p> <pre><code>fun box icmp_info_reply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_194","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_info_request","title":"icmp_info_request","text":"<p>[Source]</p> <pre><code>fun box icmp_info_request()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_195","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_ano","title":"icmp_net_ano","text":"<p>[Source]</p> <pre><code>fun box icmp_net_ano()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_196","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unknown","title":"icmp_net_unknown","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unknown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_197","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unreach","title":"icmp_net_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_198","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_net_unr_tos","title":"icmp_net_unr_tos","text":"<p>[Source]</p> <pre><code>fun box icmp_net_unr_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_199","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_parameterprob","title":"icmp_parameterprob","text":"<p>[Source]</p> <pre><code>fun box icmp_parameterprob()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_200","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_pkt_filtered","title":"icmp_pkt_filtered","text":"<p>[Source]</p> <pre><code>fun box icmp_pkt_filtered()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_201","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_port_unreach","title":"icmp_port_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_port_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_202","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prec_cutoff","title":"icmp_prec_cutoff","text":"<p>[Source]</p> <pre><code>fun box icmp_prec_cutoff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_203","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prec_violation","title":"icmp_prec_violation","text":"<p>[Source]</p> <pre><code>fun box icmp_prec_violation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_204","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_prot_unreach","title":"icmp_prot_unreach","text":"<p>[Source]</p> <pre><code>fun box icmp_prot_unreach()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_205","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redirect","title":"icmp_redirect","text":"<p>[Source]</p> <pre><code>fun box icmp_redirect()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_206","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_host","title":"icmp_redir_host","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_host()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_207","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_hosttos","title":"icmp_redir_hosttos","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_hosttos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_208","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_net","title":"icmp_redir_net","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_net()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_209","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_redir_nettos","title":"icmp_redir_nettos","text":"<p>[Source]</p> <pre><code>fun box icmp_redir_nettos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_210","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_source_quench","title":"icmp_source_quench","text":"<p>[Source]</p> <pre><code>fun box icmp_source_quench()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_211","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_sr_failed","title":"icmp_sr_failed","text":"<p>[Source]</p> <pre><code>fun box icmp_sr_failed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_212","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_timestamp","title":"icmp_timestamp","text":"<p>[Source]</p> <pre><code>fun box icmp_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_213","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_timestampreply","title":"icmp_timestampreply","text":"<p>[Source]</p> <pre><code>fun box icmp_timestampreply()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_214","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#icmp_time_exceeded","title":"icmp_time_exceeded","text":"<p>[Source]</p> <pre><code>fun box icmp_time_exceeded()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_215","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_acceptsourceroute","title":"ipctl_acceptsourceroute","text":"<p>[Source]</p> <pre><code>fun box ipctl_acceptsourceroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_216","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_defmtu","title":"ipctl_defmtu","text":"<p>[Source]</p> <pre><code>fun box ipctl_defmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_217","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_defttl","title":"ipctl_defttl","text":"<p>[Source]</p> <pre><code>fun box ipctl_defttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_218","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_directedbroadcast","title":"ipctl_directedbroadcast","text":"<p>[Source]</p> <pre><code>fun box ipctl_directedbroadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_219","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_fastforwarding","title":"ipctl_fastforwarding","text":"<p>[Source]</p> <pre><code>fun box ipctl_fastforwarding()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_220","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_forwarding","title":"ipctl_forwarding","text":"<p>[Source]</p> <pre><code>fun box ipctl_forwarding()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_221","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_gif_ttl","title":"ipctl_gif_ttl","text":"<p>[Source]</p> <pre><code>fun box ipctl_gif_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_222","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrdqdrops","title":"ipctl_intrdqdrops","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrdqdrops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_223","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrdqmaxlen","title":"ipctl_intrdqmaxlen","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrdqmaxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_224","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrqdrops","title":"ipctl_intrqdrops","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrqdrops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_225","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_intrqmaxlen","title":"ipctl_intrqmaxlen","text":"<p>[Source]</p> <pre><code>fun box ipctl_intrqmaxlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_226","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_keepfaith","title":"ipctl_keepfaith","text":"<p>[Source]</p> <pre><code>fun box ipctl_keepfaith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_227","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_maxid","title":"ipctl_maxid","text":"<p>[Source]</p> <pre><code>fun box ipctl_maxid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_228","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtexpire","title":"ipctl_rtexpire","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtexpire()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_229","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtmaxcache","title":"ipctl_rtmaxcache","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtmaxcache()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_230","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_rtminexpire","title":"ipctl_rtminexpire","text":"<p>[Source]</p> <pre><code>fun box ipctl_rtminexpire()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_231","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_sendredirects","title":"ipctl_sendredirects","text":"<p>[Source]</p> <pre><code>fun box ipctl_sendredirects()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_232","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_sourceroute","title":"ipctl_sourceroute","text":"<p>[Source]</p> <pre><code>fun box ipctl_sourceroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_233","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipctl_stats","title":"ipctl_stats","text":"<p>[Source]</p> <pre><code>fun box ipctl_stats()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_234","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_ephemeralfirst","title":"ipport_ephemeralfirst","text":"<p>[Source]</p> <pre><code>fun box ipport_ephemeralfirst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_235","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_ephemerallast","title":"ipport_ephemerallast","text":"<p>[Source]</p> <pre><code>fun box ipport_ephemerallast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_236","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_hifirstauto","title":"ipport_hifirstauto","text":"<p>[Source]</p> <pre><code>fun box ipport_hifirstauto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_237","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_hilastauto","title":"ipport_hilastauto","text":"<p>[Source]</p> <pre><code>fun box ipport_hilastauto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_238","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_max","title":"ipport_max","text":"<p>[Source]</p> <pre><code>fun box ipport_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_239","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_reserved","title":"ipport_reserved","text":"<p>[Source]</p> <pre><code>fun box ipport_reserved()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_240","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_reservedstart","title":"ipport_reservedstart","text":"<p>[Source]</p> <pre><code>fun box ipport_reservedstart()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_241","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipport_userreserved","title":"ipport_userreserved","text":"<p>[Source]</p> <pre><code>fun box ipport_userreserved()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_242","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292dstopts","title":"ipv6_2292dstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_243","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292hoplimit","title":"ipv6_2292hoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292hoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_244","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292hopopts","title":"ipv6_2292hopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_245","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292pktinfo","title":"ipv6_2292pktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_246","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292pktoptions","title":"ipv6_2292pktoptions","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292pktoptions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_247","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_2292rthdr","title":"ipv6_2292rthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_2292rthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_248","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_addrform","title":"ipv6_addrform","text":"<p>[Source]</p> <pre><code>fun box ipv6_addrform()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_249","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_addr_preferences","title":"ipv6_addr_preferences","text":"<p>[Source]</p> <pre><code>fun box ipv6_addr_preferences()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_250","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_add_membership","title":"ipv6_add_membership","text":"<p>[Source]</p> <pre><code>fun box ipv6_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_251","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_authhdr","title":"ipv6_authhdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_authhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_252","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_autoflowlabel","title":"ipv6_autoflowlabel","text":"<p>[Source]</p> <pre><code>fun box ipv6_autoflowlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_253","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_checksum","title":"ipv6_checksum","text":"<p>[Source]</p> <pre><code>fun box ipv6_checksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_254","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_dontfrag","title":"ipv6_dontfrag","text":"<p>[Source]</p> <pre><code>fun box ipv6_dontfrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_255","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_drop_membership","title":"ipv6_drop_membership","text":"<p>[Source]</p> <pre><code>fun box ipv6_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_256","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_dstopts","title":"ipv6_dstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_dstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_257","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo","title":"ipv6_flowinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_258","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_flowlabel","title":"ipv6_flowinfo_flowlabel","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_flowlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_259","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_priority","title":"ipv6_flowinfo_priority","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_260","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowinfo_send","title":"ipv6_flowinfo_send","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowinfo_send()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_261","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_flowlabel_mgr","title":"ipv6_flowlabel_mgr","text":"<p>[Source]</p> <pre><code>fun box ipv6_flowlabel_mgr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_262","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_get","title":"ipv6_fl_a_get","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_263","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_put","title":"ipv6_fl_a_put","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_put()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_264","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_a_renew","title":"ipv6_fl_a_renew","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_a_renew()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_265","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_create","title":"ipv6_fl_f_create","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_create()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_266","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_excl","title":"ipv6_fl_f_excl","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_excl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_267","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_reflect","title":"ipv6_fl_f_reflect","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_reflect()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_268","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_f_remote","title":"ipv6_fl_f_remote","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_f_remote()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_269","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_any","title":"ipv6_fl_s_any","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_any()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_270","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_excl","title":"ipv6_fl_s_excl","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_excl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_271","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_none","title":"ipv6_fl_s_none","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_272","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_process","title":"ipv6_fl_s_process","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_process()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_273","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_fl_s_user","title":"ipv6_fl_s_user","text":"<p>[Source]</p> <pre><code>fun box ipv6_fl_s_user()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_274","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_hoplimit","title":"ipv6_hoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_hoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_275","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_hopopts","title":"ipv6_hopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_hopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_276","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_ipsec_policy","title":"ipv6_ipsec_policy","text":"<p>[Source]</p> <pre><code>fun box ipv6_ipsec_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_277","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_join_anycast","title":"ipv6_join_anycast","text":"<p>[Source]</p> <pre><code>fun box ipv6_join_anycast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_278","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_leave_anycast","title":"ipv6_leave_anycast","text":"<p>[Source]</p> <pre><code>fun box ipv6_leave_anycast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_279","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_minhopcount","title":"ipv6_minhopcount","text":"<p>[Source]</p> <pre><code>fun box ipv6_minhopcount()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_280","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_mtu","title":"ipv6_mtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_281","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_mtu_discover","title":"ipv6_mtu_discover","text":"<p>[Source]</p> <pre><code>fun box ipv6_mtu_discover()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_282","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_hops","title":"ipv6_multicast_hops","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_hops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_283","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_if","title":"ipv6_multicast_if","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_284","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_multicast_loop","title":"ipv6_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ipv6_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_285","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_nexthop","title":"ipv6_nexthop","text":"<p>[Source]</p> <pre><code>fun box ipv6_nexthop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_286","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_origdstaddr","title":"ipv6_origdstaddr","text":"<p>[Source]</p> <pre><code>fun box ipv6_origdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_287","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pathmtu","title":"ipv6_pathmtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_pathmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_288","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pktinfo","title":"ipv6_pktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_289","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_do","title":"ipv6_pmtudisc_do","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_do()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_290","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_dont","title":"ipv6_pmtudisc_dont","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_dont()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_291","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_interface","title":"ipv6_pmtudisc_interface","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_interface()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_292","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_omit","title":"ipv6_pmtudisc_omit","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_omit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_293","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_probe","title":"ipv6_pmtudisc_probe","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_probe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_294","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_want","title":"ipv6_pmtudisc_want","text":"<p>[Source]</p> <pre><code>fun box ipv6_pmtudisc_want()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_295","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_cga","title":"ipv6_prefer_src_cga","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_cga()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_296","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_coa","title":"ipv6_prefer_src_coa","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_coa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_297","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_home","title":"ipv6_prefer_src_home","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_home()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_298","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_noncga","title":"ipv6_prefer_src_noncga","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_noncga()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_299","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_public","title":"ipv6_prefer_src_public","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_public()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_300","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_pubtmp_default","title":"ipv6_prefer_src_pubtmp_default","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_pubtmp_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_301","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_prefer_src_tmp","title":"ipv6_prefer_src_tmp","text":"<p>[Source]</p> <pre><code>fun box ipv6_prefer_src_tmp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_302","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_10","title":"ipv6_priority_10","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_10()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_303","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_11","title":"ipv6_priority_11","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_11()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_304","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_12","title":"ipv6_priority_12","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_12()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_305","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_13","title":"ipv6_priority_13","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_13()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_306","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_14","title":"ipv6_priority_14","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_14()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_307","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_15","title":"ipv6_priority_15","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_15()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_308","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_8","title":"ipv6_priority_8","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_8()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_309","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_9","title":"ipv6_priority_9","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_9()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_310","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_bulk","title":"ipv6_priority_bulk","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_bulk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_311","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_control","title":"ipv6_priority_control","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_control()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_312","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_filler","title":"ipv6_priority_filler","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_filler()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_313","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_interactive","title":"ipv6_priority_interactive","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_interactive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_314","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_reserved1","title":"ipv6_priority_reserved1","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_reserved1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_315","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_reserved2","title":"ipv6_priority_reserved2","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_reserved2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_316","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_unattended","title":"ipv6_priority_unattended","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_unattended()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_317","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_priority_uncharacterized","title":"ipv6_priority_uncharacterized","text":"<p>[Source]</p> <pre><code>fun box ipv6_priority_uncharacterized()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_318","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvdstopts","title":"ipv6_recvdstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvdstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_319","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recverr","title":"ipv6_recverr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_320","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvhoplimit","title":"ipv6_recvhoplimit","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvhoplimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_321","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvhopopts","title":"ipv6_recvhopopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvhopopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_322","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvorigdstaddr","title":"ipv6_recvorigdstaddr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvorigdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_323","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvpathmtu","title":"ipv6_recvpathmtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvpathmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_324","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvpktinfo","title":"ipv6_recvpktinfo","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvpktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_325","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvrthdr","title":"ipv6_recvrthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvrthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_326","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_recvtclass","title":"ipv6_recvtclass","text":"<p>[Source]</p> <pre><code>fun box ipv6_recvtclass()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_327","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_router_alert","title":"ipv6_router_alert","text":"<p>[Source]</p> <pre><code>fun box ipv6_router_alert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_328","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_rthdr","title":"ipv6_rthdr","text":"<p>[Source]</p> <pre><code>fun box ipv6_rthdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_329","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_rthdrdstopts","title":"ipv6_rthdrdstopts","text":"<p>[Source]</p> <pre><code>fun box ipv6_rthdrdstopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_330","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tclass","title":"ipv6_tclass","text":"<p>[Source]</p> <pre><code>fun box ipv6_tclass()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_331","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_hao","title":"ipv6_tlv_hao","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_hao()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_332","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_jumbo","title":"ipv6_tlv_jumbo","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_jumbo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_333","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_pad1","title":"ipv6_tlv_pad1","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_pad1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_334","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_padn","title":"ipv6_tlv_padn","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_padn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_335","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_tlv_routeralert","title":"ipv6_tlv_routeralert","text":"<p>[Source]</p> <pre><code>fun box ipv6_tlv_routeralert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_336","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_transparent","title":"ipv6_transparent","text":"<p>[Source]</p> <pre><code>fun box ipv6_transparent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_337","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_unicast_hops","title":"ipv6_unicast_hops","text":"<p>[Source]</p> <pre><code>fun box ipv6_unicast_hops()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_338","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_unicast_if","title":"ipv6_unicast_if","text":"<p>[Source]</p> <pre><code>fun box ipv6_unicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_339","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_use_min_mtu","title":"ipv6_use_min_mtu","text":"<p>[Source]</p> <pre><code>fun box ipv6_use_min_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_340","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_v6only","title":"ipv6_v6only","text":"<p>[Source]</p> <pre><code>fun box ipv6_v6only()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_341","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipv6_xfrm_policy","title":"ipv6_xfrm_policy","text":"<p>[Source]</p> <pre><code>fun box ipv6_xfrm_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_342","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_address","title":"ipx_address","text":"<p>[Source]</p> <pre><code>fun box ipx_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_343","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_address_notify","title":"ipx_address_notify","text":"<p>[Source]</p> <pre><code>fun box ipx_address_notify()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_344","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_crtitf","title":"ipx_crtitf","text":"<p>[Source]</p> <pre><code>fun box ipx_crtitf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_345","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_dltitf","title":"ipx_dltitf","text":"<p>[Source]</p> <pre><code>fun box ipx_dltitf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_346","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_dstype","title":"ipx_dstype","text":"<p>[Source]</p> <pre><code>fun box ipx_dstype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_347","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_extended_address","title":"ipx_extended_address","text":"<p>[Source]</p> <pre><code>fun box ipx_extended_address()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_348","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_filterptype","title":"ipx_filterptype","text":"<p>[Source]</p> <pre><code>fun box ipx_filterptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_349","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_8022","title":"ipx_frame_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_350","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_8023","title":"ipx_frame_8023","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_8023()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_351","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_etherii","title":"ipx_frame_etherii","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_etherii()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_352","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_none","title":"ipx_frame_none","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_353","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_snap","title":"ipx_frame_snap","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_354","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_frame_tr_8022","title":"ipx_frame_tr_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_frame_tr_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_355","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_getnetinfo","title":"ipx_getnetinfo","text":"<p>[Source]</p> <pre><code>fun box ipx_getnetinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_356","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_getnetinfo_norip","title":"ipx_getnetinfo_norip","text":"<p>[Source]</p> <pre><code>fun box ipx_getnetinfo_norip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_357","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_immediatespxack","title":"ipx_immediatespxack","text":"<p>[Source]</p> <pre><code>fun box ipx_immediatespxack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_358","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_internal","title":"ipx_internal","text":"<p>[Source]</p> <pre><code>fun box ipx_internal()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_359","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_maxsize","title":"ipx_maxsize","text":"<p>[Source]</p> <pre><code>fun box ipx_maxsize()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_360","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_max_adapter_num","title":"ipx_max_adapter_num","text":"<p>[Source]</p> <pre><code>fun box ipx_max_adapter_num()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_361","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_mtu","title":"ipx_mtu","text":"<p>[Source]</p> <pre><code>fun box ipx_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_362","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_node_len","title":"ipx_node_len","text":"<p>[Source]</p> <pre><code>fun box ipx_node_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_363","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_primary","title":"ipx_primary","text":"<p>[Source]</p> <pre><code>fun box ipx_primary()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_364","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_ptype","title":"ipx_ptype","text":"<p>[Source]</p> <pre><code>fun box ipx_ptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_365","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_receive_broadcast","title":"ipx_receive_broadcast","text":"<p>[Source]</p> <pre><code>fun box ipx_receive_broadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_366","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_recvhdr","title":"ipx_recvhdr","text":"<p>[Source]</p> <pre><code>fun box ipx_recvhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_367","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_reripnetnumber","title":"ipx_reripnetnumber","text":"<p>[Source]</p> <pre><code>fun box ipx_reripnetnumber()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_368","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_route_no_router","title":"ipx_route_no_router","text":"<p>[Source]</p> <pre><code>fun box ipx_route_no_router()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_369","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_8022","title":"ipx_rt_8022","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_8022()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_370","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_bluebook","title":"ipx_rt_bluebook","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_bluebook()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_371","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_routed","title":"ipx_rt_routed","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_routed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_372","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_rt_snap","title":"ipx_rt_snap","text":"<p>[Source]</p> <pre><code>fun box ipx_rt_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_373","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_special_none","title":"ipx_special_none","text":"<p>[Source]</p> <pre><code>fun box ipx_special_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_374","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_spxgetconnectionstatus","title":"ipx_spxgetconnectionstatus","text":"<p>[Source]</p> <pre><code>fun box ipx_spxgetconnectionstatus()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_375","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_stopfilterptype","title":"ipx_stopfilterptype","text":"<p>[Source]</p> <pre><code>fun box ipx_stopfilterptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_376","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ipx_type","title":"ipx_type","text":"<p>[Source]</p> <pre><code>fun box ipx_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_377","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_add_membership","title":"ip_add_membership","text":"<p>[Source]</p> <pre><code>fun box ip_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_378","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_add_source_membership","title":"ip_add_source_membership","text":"<p>[Source]</p> <pre><code>fun box ip_add_source_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_379","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bindany","title":"ip_bindany","text":"<p>[Source]</p> <pre><code>fun box ip_bindany()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_380","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bindmulti","title":"ip_bindmulti","text":"<p>[Source]</p> <pre><code>fun box ip_bindmulti()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_381","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bind_address_no_port","title":"ip_bind_address_no_port","text":"<p>[Source]</p> <pre><code>fun box ip_bind_address_no_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_382","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_block_source","title":"ip_block_source","text":"<p>[Source]</p> <pre><code>fun box ip_block_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_383","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_bound_if","title":"ip_bound_if","text":"<p>[Source]</p> <pre><code>fun box ip_bound_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_384","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_checksum","title":"ip_checksum","text":"<p>[Source]</p> <pre><code>fun box ip_checksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_385","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_default_multicast_loop","title":"ip_default_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ip_default_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_386","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_default_multicast_ttl","title":"ip_default_multicast_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_default_multicast_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_387","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dontfrag","title":"ip_dontfrag","text":"<p>[Source]</p> <pre><code>fun box ip_dontfrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_388","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_drop_membership","title":"ip_drop_membership","text":"<p>[Source]</p> <pre><code>fun box ip_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_389","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_drop_source_membership","title":"ip_drop_source_membership","text":"<p>[Source]</p> <pre><code>fun box ip_drop_source_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_390","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet3","title":"ip_dummynet3","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_391","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_configure","title":"ip_dummynet_configure","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_configure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_392","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_del","title":"ip_dummynet_del","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_393","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_flush","title":"ip_dummynet_flush","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_394","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_dummynet_get","title":"ip_dummynet_get","text":"<p>[Source]</p> <pre><code>fun box ip_dummynet_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_395","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_faith","title":"ip_faith","text":"<p>[Source]</p> <pre><code>fun box ip_faith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_396","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_flowid","title":"ip_flowid","text":"<p>[Source]</p> <pre><code>fun box ip_flowid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_397","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_flowtype","title":"ip_flowtype","text":"<p>[Source]</p> <pre><code>fun box ip_flowtype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_398","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_freebind","title":"ip_freebind","text":"<p>[Source]</p> <pre><code>fun box ip_freebind()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_399","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw3","title":"ip_fw3","text":"<p>[Source]</p> <pre><code>fun box ip_fw3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_400","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_add","title":"ip_fw_add","text":"<p>[Source]</p> <pre><code>fun box ip_fw_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_401","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_del","title":"ip_fw_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_402","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_flush","title":"ip_fw_flush","text":"<p>[Source]</p> <pre><code>fun box ip_fw_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_403","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_get","title":"ip_fw_get","text":"<p>[Source]</p> <pre><code>fun box ip_fw_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_404","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_cfg","title":"ip_fw_nat_cfg","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_cfg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_405","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_del","title":"ip_fw_nat_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_406","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_get_config","title":"ip_fw_nat_get_config","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_get_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_407","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_nat_get_log","title":"ip_fw_nat_get_log","text":"<p>[Source]</p> <pre><code>fun box ip_fw_nat_get_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_408","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_resetlog","title":"ip_fw_resetlog","text":"<p>[Source]</p> <pre><code>fun box ip_fw_resetlog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_409","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_add","title":"ip_fw_table_add","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_410","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_del","title":"ip_fw_table_del","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_411","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_flush","title":"ip_fw_table_flush","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_412","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_getsize","title":"ip_fw_table_getsize","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_getsize()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_413","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_table_list","title":"ip_fw_table_list","text":"<p>[Source]</p> <pre><code>fun box ip_fw_table_list()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_414","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_fw_zero","title":"ip_fw_zero","text":"<p>[Source]</p> <pre><code>fun box ip_fw_zero()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_415","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_hdrincl","title":"ip_hdrincl","text":"<p>[Source]</p> <pre><code>fun box ip_hdrincl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_416","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_ipsec_policy","title":"ip_ipsec_policy","text":"<p>[Source]</p> <pre><code>fun box ip_ipsec_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_417","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_group_src_filter","title":"ip_max_group_src_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_group_src_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_418","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_memberships","title":"ip_max_memberships","text":"<p>[Source]</p> <pre><code>fun box ip_max_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_419","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_sock_mute_filter","title":"ip_max_sock_mute_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_sock_mute_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_420","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_sock_src_filter","title":"ip_max_sock_src_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_sock_src_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_421","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_max_source_filter","title":"ip_max_source_filter","text":"<p>[Source]</p> <pre><code>fun box ip_max_source_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_422","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_minttl","title":"ip_minttl","text":"<p>[Source]</p> <pre><code>fun box ip_minttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_423","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_min_memberships","title":"ip_min_memberships","text":"<p>[Source]</p> <pre><code>fun box ip_min_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_424","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_msfilter","title":"ip_msfilter","text":"<p>[Source]</p> <pre><code>fun box ip_msfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_425","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_mtu","title":"ip_mtu","text":"<p>[Source]</p> <pre><code>fun box ip_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_426","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_mtu_discover","title":"ip_mtu_discover","text":"<p>[Source]</p> <pre><code>fun box ip_mtu_discover()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_427","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_all","title":"ip_multicast_all","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_428","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_if","title":"ip_multicast_if","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_429","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_ifindex","title":"ip_multicast_ifindex","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_ifindex()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_430","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_loop","title":"ip_multicast_loop","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_loop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_431","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_ttl","title":"ip_multicast_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_432","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_multicast_vif","title":"ip_multicast_vif","text":"<p>[Source]</p> <pre><code>fun box ip_multicast_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_433","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_nat_xxx","title":"ip_nat_xxx","text":"<p>[Source]</p> <pre><code>fun box ip_nat_xxx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_434","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_nodefrag","title":"ip_nodefrag","text":"<p>[Source]</p> <pre><code>fun box ip_nodefrag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_435","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_add","title":"ip_old_fw_add","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_add()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_436","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_del","title":"ip_old_fw_del","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_del()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_437","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_flush","title":"ip_old_fw_flush","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_438","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_get","title":"ip_old_fw_get","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_get()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_439","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_resetlog","title":"ip_old_fw_resetlog","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_resetlog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_440","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_old_fw_zero","title":"ip_old_fw_zero","text":"<p>[Source]</p> <pre><code>fun box ip_old_fw_zero()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_441","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_onesbcast","title":"ip_onesbcast","text":"<p>[Source]</p> <pre><code>fun box ip_onesbcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_442","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_options","title":"ip_options","text":"<p>[Source]</p> <pre><code>fun box ip_options()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_443","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_origdstaddr","title":"ip_origdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_origdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_444","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_passsec","title":"ip_passsec","text":"<p>[Source]</p> <pre><code>fun box ip_passsec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_445","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pktinfo","title":"ip_pktinfo","text":"<p>[Source]</p> <pre><code>fun box ip_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_446","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pktoptions","title":"ip_pktoptions","text":"<p>[Source]</p> <pre><code>fun box ip_pktoptions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_447","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_do","title":"ip_pmtudisc_do","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_do()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_448","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_dont","title":"ip_pmtudisc_dont","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_dont()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_449","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_interface","title":"ip_pmtudisc_interface","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_interface()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_450","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_omit","title":"ip_pmtudisc_omit","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_omit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_451","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_probe","title":"ip_pmtudisc_probe","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_probe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_452","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_pmtudisc_want","title":"ip_pmtudisc_want","text":"<p>[Source]</p> <pre><code>fun box ip_pmtudisc_want()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_453","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange","title":"ip_portrange","text":"<p>[Source]</p> <pre><code>fun box ip_portrange()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_454","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_default","title":"ip_portrange_default","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_455","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_high","title":"ip_portrange_high","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_high()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_456","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_portrange_low","title":"ip_portrange_low","text":"<p>[Source]</p> <pre><code>fun box ip_portrange_low()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_457","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvdstaddr","title":"ip_recvdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_recvdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_458","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recverr","title":"ip_recverr","text":"<p>[Source]</p> <pre><code>fun box ip_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_459","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvflowid","title":"ip_recvflowid","text":"<p>[Source]</p> <pre><code>fun box ip_recvflowid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_460","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvif","title":"ip_recvif","text":"<p>[Source]</p> <pre><code>fun box ip_recvif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_461","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvopts","title":"ip_recvopts","text":"<p>[Source]</p> <pre><code>fun box ip_recvopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_462","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvorigdstaddr","title":"ip_recvorigdstaddr","text":"<p>[Source]</p> <pre><code>fun box ip_recvorigdstaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_463","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvpktinfo","title":"ip_recvpktinfo","text":"<p>[Source]</p> <pre><code>fun box ip_recvpktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_464","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvretopts","title":"ip_recvretopts","text":"<p>[Source]</p> <pre><code>fun box ip_recvretopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_465","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvrssbucketid","title":"ip_recvrssbucketid","text":"<p>[Source]</p> <pre><code>fun box ip_recvrssbucketid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_466","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvtos","title":"ip_recvtos","text":"<p>[Source]</p> <pre><code>fun box ip_recvtos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_467","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_recvttl","title":"ip_recvttl","text":"<p>[Source]</p> <pre><code>fun box ip_recvttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_468","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_retopts","title":"ip_retopts","text":"<p>[Source]</p> <pre><code>fun box ip_retopts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_469","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_router_alert","title":"ip_router_alert","text":"<p>[Source]</p> <pre><code>fun box ip_router_alert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_470","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rssbucketid","title":"ip_rssbucketid","text":"<p>[Source]</p> <pre><code>fun box ip_rssbucketid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_471","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rss_listen_bucket","title":"ip_rss_listen_bucket","text":"<p>[Source]</p> <pre><code>fun box ip_rss_listen_bucket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_472","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_off","title":"ip_rsvp_off","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_473","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_on","title":"ip_rsvp_on","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_on()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_474","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_vif_off","title":"ip_rsvp_vif_off","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_vif_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_475","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_rsvp_vif_on","title":"ip_rsvp_vif_on","text":"<p>[Source]</p> <pre><code>fun box ip_rsvp_vif_on()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_476","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_sendsrcaddr","title":"ip_sendsrcaddr","text":"<p>[Source]</p> <pre><code>fun box ip_sendsrcaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_477","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_striphdr","title":"ip_striphdr","text":"<p>[Source]</p> <pre><code>fun box ip_striphdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_478","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_tos","title":"ip_tos","text":"<p>[Source]</p> <pre><code>fun box ip_tos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_479","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_traffic_mgt_background","title":"ip_traffic_mgt_background","text":"<p>[Source]</p> <pre><code>fun box ip_traffic_mgt_background()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_480","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_transparent","title":"ip_transparent","text":"<p>[Source]</p> <pre><code>fun box ip_transparent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_481","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_ttl","title":"ip_ttl","text":"<p>[Source]</p> <pre><code>fun box ip_ttl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_482","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_unblock_source","title":"ip_unblock_source","text":"<p>[Source]</p> <pre><code>fun box ip_unblock_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_483","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_unicast_if","title":"ip_unicast_if","text":"<p>[Source]</p> <pre><code>fun box ip_unicast_if()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_484","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ip_xfrm_policy","title":"ip_xfrm_policy","text":"<p>[Source]</p> <pre><code>fun box ip_xfrm_policy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_485","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_connwait","title":"local_connwait","text":"<p>[Source]</p> <pre><code>fun box local_connwait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_486","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_creds","title":"local_creds","text":"<p>[Source]</p> <pre><code>fun box local_creds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_487","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peercred","title":"local_peercred","text":"<p>[Source]</p> <pre><code>fun box local_peercred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_488","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peerepid","title":"local_peerepid","text":"<p>[Source]</p> <pre><code>fun box local_peerepid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_489","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peereuuid","title":"local_peereuuid","text":"<p>[Source]</p> <pre><code>fun box local_peereuuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_490","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peerpid","title":"local_peerpid","text":"<p>[Source]</p> <pre><code>fun box local_peerpid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_491","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_peeruuid","title":"local_peeruuid","text":"<p>[Source]</p> <pre><code>fun box local_peeruuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_492","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#local_vendor","title":"local_vendor","text":"<p>[Source]</p> <pre><code>fun box local_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_493","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#max_tcpoptlen","title":"max_tcpoptlen","text":"<p>[Source]</p> <pre><code>fun box max_tcpoptlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_494","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_block_source","title":"mcast_block_source","text":"<p>[Source]</p> <pre><code>fun box mcast_block_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_495","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_exclude","title":"mcast_exclude","text":"<p>[Source]</p> <pre><code>fun box mcast_exclude()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_496","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_include","title":"mcast_include","text":"<p>[Source]</p> <pre><code>fun box mcast_include()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_497","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_join_group","title":"mcast_join_group","text":"<p>[Source]</p> <pre><code>fun box mcast_join_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_498","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_join_source_group","title":"mcast_join_source_group","text":"<p>[Source]</p> <pre><code>fun box mcast_join_source_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_499","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_leave_group","title":"mcast_leave_group","text":"<p>[Source]</p> <pre><code>fun box mcast_leave_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_500","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_leave_source_group","title":"mcast_leave_source_group","text":"<p>[Source]</p> <pre><code>fun box mcast_leave_source_group()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_501","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_msfilter","title":"mcast_msfilter","text":"<p>[Source]</p> <pre><code>fun box mcast_msfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_502","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_unblock_source","title":"mcast_unblock_source","text":"<p>[Source]</p> <pre><code>fun box mcast_unblock_source()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_503","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mcast_undefined","title":"mcast_undefined","text":"<p>[Source]</p> <pre><code>fun box mcast_undefined()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_504","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_bw_upcall","title":"mrt_add_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_add_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_505","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_mfc","title":"mrt_add_mfc","text":"<p>[Source]</p> <pre><code>fun box mrt_add_mfc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_506","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_add_vif","title":"mrt_add_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_add_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_507","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_config","title":"mrt_api_config","text":"<p>[Source]</p> <pre><code>fun box mrt_api_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_508","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_flags_all","title":"mrt_api_flags_all","text":"<p>[Source]</p> <pre><code>fun box mrt_api_flags_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_509","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_api_support","title":"mrt_api_support","text":"<p>[Source]</p> <pre><code>fun box mrt_api_support()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_510","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_assert","title":"mrt_assert","text":"<p>[Source]</p> <pre><code>fun box mrt_assert()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_511","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_bw_upcall","title":"mrt_del_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_del_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_512","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_mfc","title":"mrt_del_mfc","text":"<p>[Source]</p> <pre><code>fun box mrt_del_mfc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_513","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_del_vif","title":"mrt_del_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_del_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_514","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_done","title":"mrt_done","text":"<p>[Source]</p> <pre><code>fun box mrt_done()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_515","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_init","title":"mrt_init","text":"<p>[Source]</p> <pre><code>fun box mrt_init()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_516","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_bw_upcall","title":"mrt_mfc_bw_upcall","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_bw_upcall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_517","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_all","title":"mrt_mfc_flags_all","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_all()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_518","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_border_vif","title":"mrt_mfc_flags_border_vif","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_border_vif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_519","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_flags_disable_wrongvif","title":"mrt_mfc_flags_disable_wrongvif","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_flags_disable_wrongvif()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_520","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_mfc_rp","title":"mrt_mfc_rp","text":"<p>[Source]</p> <pre><code>fun box mrt_mfc_rp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_521","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_pim","title":"mrt_pim","text":"<p>[Source]</p> <pre><code>fun box mrt_pim()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_522","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#mrt_version","title":"mrt_version","text":"<p>[Source]</p> <pre><code>fun box mrt_version()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_523","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#msg_notification","title":"msg_notification","text":"<p>[Source]</p> <pre><code>fun box msg_notification()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_524","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#msg_socallbck","title":"msg_socallbck","text":"<p>[Source]</p> <pre><code>fun box msg_socallbck()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_525","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrvproto_ndrv","title":"ndrvproto_ndrv","text":"<p>[Source]</p> <pre><code>fun box ndrvproto_ndrv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_526","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_addmulticast","title":"ndrv_addmulticast","text":"<p>[Source]</p> <pre><code>fun box ndrv_addmulticast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_527","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_deldmxspec","title":"ndrv_deldmxspec","text":"<p>[Source]</p> <pre><code>fun box ndrv_deldmxspec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_528","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_delmulticast","title":"ndrv_delmulticast","text":"<p>[Source]</p> <pre><code>fun box ndrv_delmulticast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_529","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_ethertype","title":"ndrv_demuxtype_ethertype","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_ethertype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_530","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_sap","title":"ndrv_demuxtype_sap","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_sap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_531","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_demuxtype_snap","title":"ndrv_demuxtype_snap","text":"<p>[Source]</p> <pre><code>fun box ndrv_demuxtype_snap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_532","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_dmux_max_descr","title":"ndrv_dmux_max_descr","text":"<p>[Source]</p> <pre><code>fun box ndrv_dmux_max_descr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_533","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_protocol_desc_vers","title":"ndrv_protocol_desc_vers","text":"<p>[Source]</p> <pre><code>fun box ndrv_protocol_desc_vers()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_534","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ndrv_setdmxspec","title":"ndrv_setdmxspec","text":"<p>[Source]</p> <pre><code>fun box ndrv_setdmxspec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_535","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_add_membership","title":"netlink_add_membership","text":"<p>[Source]</p> <pre><code>fun box netlink_add_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_536","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_audit","title":"netlink_audit","text":"<p>[Source]</p> <pre><code>fun box netlink_audit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_537","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_broadcast_error","title":"netlink_broadcast_error","text":"<p>[Source]</p> <pre><code>fun box netlink_broadcast_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_538","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_cap_ack","title":"netlink_cap_ack","text":"<p>[Source]</p> <pre><code>fun box netlink_cap_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_539","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_connector","title":"netlink_connector","text":"<p>[Source]</p> <pre><code>fun box netlink_connector()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_540","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_crypto","title":"netlink_crypto","text":"<p>[Source]</p> <pre><code>fun box netlink_crypto()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_541","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_dnrtmsg","title":"netlink_dnrtmsg","text":"<p>[Source]</p> <pre><code>fun box netlink_dnrtmsg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_542","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_drop_membership","title":"netlink_drop_membership","text":"<p>[Source]</p> <pre><code>fun box netlink_drop_membership()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_543","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_ecryptfs","title":"netlink_ecryptfs","text":"<p>[Source]</p> <pre><code>fun box netlink_ecryptfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_544","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_fib_lookup","title":"netlink_fib_lookup","text":"<p>[Source]</p> <pre><code>fun box netlink_fib_lookup()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_545","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_firewall","title":"netlink_firewall","text":"<p>[Source]</p> <pre><code>fun box netlink_firewall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_546","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_generic","title":"netlink_generic","text":"<p>[Source]</p> <pre><code>fun box netlink_generic()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_547","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_inet_diag","title":"netlink_inet_diag","text":"<p>[Source]</p> <pre><code>fun box netlink_inet_diag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_548","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_ip6_fw","title":"netlink_ip6_fw","text":"<p>[Source]</p> <pre><code>fun box netlink_ip6_fw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_549","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_iscsi","title":"netlink_iscsi","text":"<p>[Source]</p> <pre><code>fun box netlink_iscsi()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_550","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_kobject_uevent","title":"netlink_kobject_uevent","text":"<p>[Source]</p> <pre><code>fun box netlink_kobject_uevent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_551","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_listen_all_nsid","title":"netlink_listen_all_nsid","text":"<p>[Source]</p> <pre><code>fun box netlink_listen_all_nsid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_552","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_list_memberships","title":"netlink_list_memberships","text":"<p>[Source]</p> <pre><code>fun box netlink_list_memberships()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_553","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_netfilter","title":"netlink_netfilter","text":"<p>[Source]</p> <pre><code>fun box netlink_netfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_554","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_nflog","title":"netlink_nflog","text":"<p>[Source]</p> <pre><code>fun box netlink_nflog()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_555","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_no_enobufs","title":"netlink_no_enobufs","text":"<p>[Source]</p> <pre><code>fun box netlink_no_enobufs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_556","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_pktinfo","title":"netlink_pktinfo","text":"<p>[Source]</p> <pre><code>fun box netlink_pktinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_557","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_rdma","title":"netlink_rdma","text":"<p>[Source]</p> <pre><code>fun box netlink_rdma()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_558","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_route","title":"netlink_route","text":"<p>[Source]</p> <pre><code>fun box netlink_route()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_559","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_rx_ring","title":"netlink_rx_ring","text":"<p>[Source]</p> <pre><code>fun box netlink_rx_ring()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_560","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_scsitransport","title":"netlink_scsitransport","text":"<p>[Source]</p> <pre><code>fun box netlink_scsitransport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_561","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_selinux","title":"netlink_selinux","text":"<p>[Source]</p> <pre><code>fun box netlink_selinux()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_562","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_sock_diag","title":"netlink_sock_diag","text":"<p>[Source]</p> <pre><code>fun box netlink_sock_diag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_563","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_tx_ring","title":"netlink_tx_ring","text":"<p>[Source]</p> <pre><code>fun box netlink_tx_ring()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_564","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_unused","title":"netlink_unused","text":"<p>[Source]</p> <pre><code>fun box netlink_unused()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_565","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_usersock","title":"netlink_usersock","text":"<p>[Source]</p> <pre><code>fun box netlink_usersock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_566","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netlink_xfrm","title":"netlink_xfrm","text":"<p>[Source]</p> <pre><code>fun box netlink_xfrm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_567","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_idle","title":"netrom_idle","text":"<p>[Source]</p> <pre><code>fun box netrom_idle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_568","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_kill","title":"netrom_kill","text":"<p>[Source]</p> <pre><code>fun box netrom_kill()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_569","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_n2","title":"netrom_n2","text":"<p>[Source]</p> <pre><code>fun box netrom_n2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_570","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_neigh","title":"netrom_neigh","text":"<p>[Source]</p> <pre><code>fun box netrom_neigh()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_571","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_node","title":"netrom_node","text":"<p>[Source]</p> <pre><code>fun box netrom_node()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_572","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_paclen","title":"netrom_paclen","text":"<p>[Source]</p> <pre><code>fun box netrom_paclen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_573","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t1","title":"netrom_t1","text":"<p>[Source]</p> <pre><code>fun box netrom_t1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_574","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t2","title":"netrom_t2","text":"<p>[Source]</p> <pre><code>fun box netrom_t2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_575","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#netrom_t4","title":"netrom_t4","text":"<p>[Source]</p> <pre><code>fun box netrom_t4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_576","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#nrdv_multicast_addrs_per_sock","title":"nrdv_multicast_addrs_per_sock","text":"<p>[Source]</p> <pre><code>fun box nrdv_multicast_addrs_per_sock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_577","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#pvd_config","title":"pvd_config","text":"<p>[Source]</p> <pre><code>fun box pvd_config()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_578","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cancel_sent_to","title":"rds_cancel_sent_to","text":"<p>[Source]</p> <pre><code>fun box rds_cancel_sent_to()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_579","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_cswp","title":"rds_cmsg_atomic_cswp","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_atomic_cswp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_580","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_fadd","title":"rds_cmsg_atomic_fadd","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_atomic_fadd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_581","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_cong_update","title":"rds_cmsg_cong_update","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_cong_update()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_582","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_cswp","title":"rds_cmsg_masked_atomic_cswp","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_masked_atomic_cswp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_583","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_fadd","title":"rds_cmsg_masked_atomic_fadd","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_masked_atomic_fadd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_584","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_args","title":"rds_cmsg_rdma_args","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_args()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_585","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_dest","title":"rds_cmsg_rdma_dest","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_dest()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_586","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_map","title":"rds_cmsg_rdma_map","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_map()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_587","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_status","title":"rds_cmsg_rdma_status","text":"<p>[Source]</p> <pre><code>fun box rds_cmsg_rdma_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_588","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cong_monitor","title":"rds_cong_monitor","text":"<p>[Source]</p> <pre><code>fun box rds_cong_monitor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_589","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_cong_monitor_size","title":"rds_cong_monitor_size","text":"<p>[Source]</p> <pre><code>fun box rds_cong_monitor_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_590","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_free_mr","title":"rds_free_mr","text":"<p>[Source]</p> <pre><code>fun box rds_free_mr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_591","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_get_mr","title":"rds_get_mr","text":"<p>[Source]</p> <pre><code>fun box rds_get_mr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_592","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_get_mr_for_dest","title":"rds_get_mr_for_dest","text":"<p>[Source]</p> <pre><code>fun box rds_get_mr_for_dest()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_593","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_ib_abi_version","title":"rds_ib_abi_version","text":"<p>[Source]</p> <pre><code>fun box rds_ib_abi_version()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_594","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_ib_gid_len","title":"rds_ib_gid_len","text":"<p>[Source]</p> <pre><code>fun box rds_ib_gid_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_595","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connections","title":"rds_info_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_596","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connected","title":"rds_info_connection_flag_connected","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_597","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connecting","title":"rds_info_connection_flag_connecting","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_connecting()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_598","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_flag_sending","title":"rds_info_connection_flag_sending","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_flag_sending()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_599","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_connection_stats","title":"rds_info_connection_stats","text":"<p>[Source]</p> <pre><code>fun box rds_info_connection_stats()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_600","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_counters","title":"rds_info_counters","text":"<p>[Source]</p> <pre><code>fun box rds_info_counters()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_601","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_first","title":"rds_info_first","text":"<p>[Source]</p> <pre><code>fun box rds_info_first()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_602","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_ib_connections","title":"rds_info_ib_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_ib_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_603","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_iwarp_connections","title":"rds_info_iwarp_connections","text":"<p>[Source]</p> <pre><code>fun box rds_info_iwarp_connections()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_604","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_last","title":"rds_info_last","text":"<p>[Source]</p> <pre><code>fun box rds_info_last()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_605","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_message_flag_ack","title":"rds_info_message_flag_ack","text":"<p>[Source]</p> <pre><code>fun box rds_info_message_flag_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_606","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_message_flag_fast_ack","title":"rds_info_message_flag_fast_ack","text":"<p>[Source]</p> <pre><code>fun box rds_info_message_flag_fast_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_607","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_recv_messages","title":"rds_info_recv_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_recv_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_608","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_retrans_messages","title":"rds_info_retrans_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_retrans_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_609","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_send_messages","title":"rds_info_send_messages","text":"<p>[Source]</p> <pre><code>fun box rds_info_send_messages()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_610","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_sockets","title":"rds_info_sockets","text":"<p>[Source]</p> <pre><code>fun box rds_info_sockets()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_611","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_info_tcp_sockets","title":"rds_info_tcp_sockets","text":"<p>[Source]</p> <pre><code>fun box rds_info_tcp_sockets()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_612","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_canceled","title":"rds_rdma_canceled","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_canceled()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_613","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_dontwait","title":"rds_rdma_dontwait","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_dontwait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_614","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_dropped","title":"rds_rdma_dropped","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_dropped()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_615","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_fence","title":"rds_rdma_fence","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_fence()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_616","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_invalidate","title":"rds_rdma_invalidate","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_invalidate()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_617","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_notify_me","title":"rds_rdma_notify_me","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_notify_me()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_618","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_other_error","title":"rds_rdma_other_error","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_other_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_619","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_readwrite","title":"rds_rdma_readwrite","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_readwrite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_620","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_remote_error","title":"rds_rdma_remote_error","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_remote_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_621","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_silent","title":"rds_rdma_silent","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_silent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_622","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_success","title":"rds_rdma_success","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_success()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_623","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_rdma_use_once","title":"rds_rdma_use_once","text":"<p>[Source]</p> <pre><code>fun box rds_rdma_use_once()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_624","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_recverr","title":"rds_recverr","text":"<p>[Source]</p> <pre><code>fun box rds_recverr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_625","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_count","title":"rds_trans_count","text":"<p>[Source]</p> <pre><code>fun box rds_trans_count()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_626","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_ib","title":"rds_trans_ib","text":"<p>[Source]</p> <pre><code>fun box rds_trans_ib()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_627","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_iwarp","title":"rds_trans_iwarp","text":"<p>[Source]</p> <pre><code>fun box rds_trans_iwarp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_628","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_none","title":"rds_trans_none","text":"<p>[Source]</p> <pre><code>fun box rds_trans_none()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_629","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rds_trans_tcp","title":"rds_trans_tcp","text":"<p>[Source]</p> <pre><code>fun box rds_trans_tcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_630","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_access_barred","title":"rose_access_barred","text":"<p>[Source]</p> <pre><code>fun box rose_access_barred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_631","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_defer","title":"rose_defer","text":"<p>[Source]</p> <pre><code>fun box rose_defer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_632","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_dte_originated","title":"rose_dte_originated","text":"<p>[Source]</p> <pre><code>fun box rose_dte_originated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_633","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_holdback","title":"rose_holdback","text":"<p>[Source]</p> <pre><code>fun box rose_holdback()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_634","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_idle","title":"rose_idle","text":"<p>[Source]</p> <pre><code>fun box rose_idle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_635","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_invalid_facility","title":"rose_invalid_facility","text":"<p>[Source]</p> <pre><code>fun box rose_invalid_facility()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_636","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_local_procedure","title":"rose_local_procedure","text":"<p>[Source]</p> <pre><code>fun box rose_local_procedure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_637","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_max_digis","title":"rose_max_digis","text":"<p>[Source]</p> <pre><code>fun box rose_max_digis()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_638","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_mtu","title":"rose_mtu","text":"<p>[Source]</p> <pre><code>fun box rose_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_639","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_network_congestion","title":"rose_network_congestion","text":"<p>[Source]</p> <pre><code>fun box rose_network_congestion()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_640","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_not_obtainable","title":"rose_not_obtainable","text":"<p>[Source]</p> <pre><code>fun box rose_not_obtainable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_641","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_number_busy","title":"rose_number_busy","text":"<p>[Source]</p> <pre><code>fun box rose_number_busy()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_642","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_out_of_order","title":"rose_out_of_order","text":"<p>[Source]</p> <pre><code>fun box rose_out_of_order()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_643","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_qbitincl","title":"rose_qbitincl","text":"<p>[Source]</p> <pre><code>fun box rose_qbitincl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_644","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_remote_procedure","title":"rose_remote_procedure","text":"<p>[Source]</p> <pre><code>fun box rose_remote_procedure()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_645","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_ship_absent","title":"rose_ship_absent","text":"<p>[Source]</p> <pre><code>fun box rose_ship_absent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_646","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t1","title":"rose_t1","text":"<p>[Source]</p> <pre><code>fun box rose_t1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_647","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t2","title":"rose_t2","text":"<p>[Source]</p> <pre><code>fun box rose_t2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_648","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#rose_t3","title":"rose_t3","text":"<p>[Source]</p> <pre><code>fun box rose_t3()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_649","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_hci_raw_direction","title":"scm_hci_raw_direction","text":"<p>[Source]</p> <pre><code>fun box scm_hci_raw_direction()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_650","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestamp","title":"scm_timestamp","text":"<p>[Source]</p> <pre><code>fun box scm_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_651","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestamping","title":"scm_timestamping","text":"<p>[Source]</p> <pre><code>fun box scm_timestamping()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_652","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_timestampns","title":"scm_timestampns","text":"<p>[Source]</p> <pre><code>fun box scm_timestampns()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_653","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#scm_wifi_status","title":"scm_wifi_status","text":"<p>[Source]</p> <pre><code>fun box scm_wifi_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_654","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_abort_association","title":"sctp_abort_association","text":"<p>[Source]</p> <pre><code>fun box sctp_abort_association()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_655","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_adaptation_layer","title":"sctp_adaptation_layer","text":"<p>[Source]</p> <pre><code>fun box sctp_adaptation_layer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_656","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_adaption_layer","title":"sctp_adaption_layer","text":"<p>[Source]</p> <pre><code>fun box sctp_adaption_layer()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_657","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_add_streams","title":"sctp_add_streams","text":"<p>[Source]</p> <pre><code>fun box sctp_add_streams()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_658","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_add_vrf_id","title":"sctp_add_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_add_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_659","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf","title":"sctp_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_660","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf_ack","title":"sctp_asconf_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_661","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_asconf_supported","title":"sctp_asconf_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_asconf_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_662","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_associnfo","title":"sctp_associnfo","text":"<p>[Source]</p> <pre><code>fun box sctp_associnfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_663","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_authentication","title":"sctp_authentication","text":"<p>[Source]</p> <pre><code>fun box sctp_authentication()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_664","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_active_key","title":"sctp_auth_active_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_active_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_665","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_chunk","title":"sctp_auth_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_666","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_deactivate_key","title":"sctp_auth_deactivate_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_deactivate_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_667","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_delete_key","title":"sctp_auth_delete_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_delete_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_668","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_key","title":"sctp_auth_key","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_key()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_669","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auth_supported","title":"sctp_auth_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_auth_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_670","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_autoclose","title":"sctp_autoclose","text":"<p>[Source]</p> <pre><code>fun box sctp_autoclose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_671","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_auto_asconf","title":"sctp_auto_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_auto_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_672","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_badcrc","title":"sctp_badcrc","text":"<p>[Source]</p> <pre><code>fun box sctp_badcrc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_673","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bindx_add_addr","title":"sctp_bindx_add_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_bindx_add_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_674","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bindx_rem_addr","title":"sctp_bindx_rem_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_bindx_rem_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_675","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_blk_logging_enable","title":"sctp_blk_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_blk_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_676","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_bound","title":"sctp_bound","text":"<p>[Source]</p> <pre><code>fun box sctp_bound()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_677","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_cookie_in_shutdown","title":"sctp_cause_cookie_in_shutdown","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_cookie_in_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_678","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_deleting_last_addr","title":"sctp_cause_deleting_last_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_deleting_last_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_679","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_deleting_src_addr","title":"sctp_cause_deleting_src_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_deleting_src_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_680","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_illegal_asconf_ack","title":"sctp_cause_illegal_asconf_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_illegal_asconf_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_681","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_invalid_param","title":"sctp_cause_invalid_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_invalid_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_682","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_invalid_stream","title":"sctp_cause_invalid_stream","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_invalid_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_683","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_missing_param","title":"sctp_cause_missing_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_missing_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_684","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_nat_colliding_state","title":"sctp_cause_nat_colliding_state","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_nat_colliding_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_685","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_nat_missing_state","title":"sctp_cause_nat_missing_state","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_nat_missing_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_686","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_no_error","title":"sctp_cause_no_error","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_no_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_687","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_no_user_data","title":"sctp_cause_no_user_data","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_no_user_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_688","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_out_of_resc","title":"sctp_cause_out_of_resc","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_out_of_resc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_689","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_protocol_violation","title":"sctp_cause_protocol_violation","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_protocol_violation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_690","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_request_refused","title":"sctp_cause_request_refused","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_request_refused()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_691","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_resource_shortage","title":"sctp_cause_resource_shortage","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_resource_shortage()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_692","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_restart_w_newaddr","title":"sctp_cause_restart_w_newaddr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_restart_w_newaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_693","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_stale_cookie","title":"sctp_cause_stale_cookie","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_stale_cookie()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_694","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_chunk","title":"sctp_cause_unrecog_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unrecog_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_695","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_param","title":"sctp_cause_unrecog_param","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unrecog_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_696","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unresolvable_addr","title":"sctp_cause_unresolvable_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unresolvable_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_697","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_unsupported_hmacid","title":"sctp_cause_unsupported_hmacid","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_unsupported_hmacid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_698","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cause_user_initiated_abt","title":"sctp_cause_user_initiated_abt","text":"<p>[Source]</p> <pre><code>fun box sctp_cause_user_initiated_abt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_699","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_hstcp","title":"sctp_cc_hstcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_hstcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_700","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_htcp","title":"sctp_cc_htcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_htcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_701","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_option","title":"sctp_cc_option","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_option()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_702","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_rtcc_setmode","title":"sctp_cc_opt_rtcc_setmode","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_rtcc_setmode()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_703","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_steady_step","title":"sctp_cc_opt_steady_step","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_steady_step()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_704","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_opt_use_dccc_ecn","title":"sctp_cc_opt_use_dccc_ecn","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_opt_use_dccc_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_705","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_rfc2581","title":"sctp_cc_rfc2581","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_rfc2581()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_706","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cc_rtcc","title":"sctp_cc_rtcc","text":"<p>[Source]</p> <pre><code>fun box sctp_cc_rtcc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_707","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_closed","title":"sctp_closed","text":"<p>[Source]</p> <pre><code>fun box sctp_closed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_708","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_clr_stat_log","title":"sctp_clr_stat_log","text":"<p>[Source]</p> <pre><code>fun box sctp_clr_stat_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_709","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_base","title":"sctp_cmt_base","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_base()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_710","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_max","title":"sctp_cmt_max","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_711","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_mptcp","title":"sctp_cmt_mptcp","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_mptcp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_712","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_off","title":"sctp_cmt_off","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_713","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_on_off","title":"sctp_cmt_on_off","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_on_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_714","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_rpv1","title":"sctp_cmt_rpv1","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_rpv1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_715","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_rpv2","title":"sctp_cmt_rpv2","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_rpv2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_716","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cmt_use_dac","title":"sctp_cmt_use_dac","text":"<p>[Source]</p> <pre><code>fun box sctp_cmt_use_dac()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_717","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x","title":"sctp_connect_x","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_718","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x_complete","title":"sctp_connect_x_complete","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x_complete()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_719","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_connect_x_delayed","title":"sctp_connect_x_delayed","text":"<p>[Source]</p> <pre><code>fun box sctp_connect_x_delayed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_720","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_context","title":"sctp_context","text":"<p>[Source]</p> <pre><code>fun box sctp_context()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_721","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_ack","title":"sctp_cookie_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_722","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_echo","title":"sctp_cookie_echo","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_723","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_echoed","title":"sctp_cookie_echoed","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_echoed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_724","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cookie_wait","title":"sctp_cookie_wait","text":"<p>[Source]</p> <pre><code>fun box sctp_cookie_wait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_725","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwnd_logging_enable","title":"sctp_cwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_cwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_726","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwnd_monitor_enable","title":"sctp_cwnd_monitor_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_cwnd_monitor_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_727","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwr_in_same_window","title":"sctp_cwr_in_same_window","text":"<p>[Source]</p> <pre><code>fun box sctp_cwr_in_same_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_728","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_cwr_reduce_override","title":"sctp_cwr_reduce_override","text":"<p>[Source]</p> <pre><code>fun box sctp_cwr_reduce_override()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_729","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data","title":"sctp_data","text":"<p>[Source]</p> <pre><code>fun box sctp_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_730","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_first_frag","title":"sctp_data_first_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_first_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_731","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_frag_mask","title":"sctp_data_frag_mask","text":"<p>[Source]</p> <pre><code>fun box sctp_data_frag_mask()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_732","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_last_frag","title":"sctp_data_last_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_last_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_733","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_middle_frag","title":"sctp_data_middle_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_middle_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_734","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_not_frag","title":"sctp_data_not_frag","text":"<p>[Source]</p> <pre><code>fun box sctp_data_not_frag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_735","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_sack_immediately","title":"sctp_data_sack_immediately","text":"<p>[Source]</p> <pre><code>fun box sctp_data_sack_immediately()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_736","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_data_unordered","title":"sctp_data_unordered","text":"<p>[Source]</p> <pre><code>fun box sctp_data_unordered()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_737","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_prinfo","title":"sctp_default_prinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_default_prinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_738","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_send_param","title":"sctp_default_send_param","text":"<p>[Source]</p> <pre><code>fun box sctp_default_send_param()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_739","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_default_sndinfo","title":"sctp_default_sndinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_default_sndinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_740","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_delayed_sack","title":"sctp_delayed_sack","text":"<p>[Source]</p> <pre><code>fun box sctp_delayed_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_741","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_del_vrf_id","title":"sctp_del_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_del_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_742","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_disable_fragments","title":"sctp_disable_fragments","text":"<p>[Source]</p> <pre><code>fun box sctp_disable_fragments()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_743","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_cwr","title":"sctp_ecn_cwr","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_cwr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_744","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_echo","title":"sctp_ecn_echo","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_echo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_745","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ecn_supported","title":"sctp_ecn_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_ecn_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_746","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_change_assoc_req","title":"sctp_enable_change_assoc_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_change_assoc_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_747","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_reset_assoc_req","title":"sctp_enable_reset_assoc_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_reset_assoc_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_748","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_reset_stream_req","title":"sctp_enable_reset_stream_req","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_reset_stream_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_749","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_stream_reset","title":"sctp_enable_stream_reset","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_stream_reset()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_750","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_enable_value_mask","title":"sctp_enable_value_mask","text":"<p>[Source]</p> <pre><code>fun box sctp_enable_value_mask()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_751","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_established","title":"sctp_established","text":"<p>[Source]</p> <pre><code>fun box sctp_established()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_752","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_event","title":"sctp_event","text":"<p>[Source]</p> <pre><code>fun box sctp_event()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_753","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_events","title":"sctp_events","text":"<p>[Source]</p> <pre><code>fun box sctp_events()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_754","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_explicit_eor","title":"sctp_explicit_eor","text":"<p>[Source]</p> <pre><code>fun box sctp_explicit_eor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_755","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_flight_logging_enable","title":"sctp_flight_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_flight_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_756","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_forward_cum_tsn","title":"sctp_forward_cum_tsn","text":"<p>[Source]</p> <pre><code>fun box sctp_forward_cum_tsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_757","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_fragment_interleave","title":"sctp_fragment_interleave","text":"<p>[Source]</p> <pre><code>fun box sctp_fragment_interleave()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_758","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_0","title":"sctp_frag_level_0","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_0()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_759","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_1","title":"sctp_frag_level_1","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_1()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_760","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_frag_level_2","title":"sctp_frag_level_2","text":"<p>[Source]</p> <pre><code>fun box sctp_frag_level_2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_761","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_from_middle_box","title":"sctp_from_middle_box","text":"<p>[Source]</p> <pre><code>fun box sctp_from_middle_box()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_762","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_fr_logging_enable","title":"sctp_fr_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_fr_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_763","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_addr_len","title":"sctp_get_addr_len","text":"<p>[Source]</p> <pre><code>fun box sctp_get_addr_len()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_764","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_asoc_vrf","title":"sctp_get_asoc_vrf","text":"<p>[Source]</p> <pre><code>fun box sctp_get_asoc_vrf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_765","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_assoc_id_list","title":"sctp_get_assoc_id_list","text":"<p>[Source]</p> <pre><code>fun box sctp_get_assoc_id_list()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_766","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_assoc_number","title":"sctp_get_assoc_number","text":"<p>[Source]</p> <pre><code>fun box sctp_get_assoc_number()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_767","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_local_addresses","title":"sctp_get_local_addresses","text":"<p>[Source]</p> <pre><code>fun box sctp_get_local_addresses()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_768","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_local_addr_size","title":"sctp_get_local_addr_size","text":"<p>[Source]</p> <pre><code>fun box sctp_get_local_addr_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_769","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_nonce_values","title":"sctp_get_nonce_values","text":"<p>[Source]</p> <pre><code>fun box sctp_get_nonce_values()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_770","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_packet_log","title":"sctp_get_packet_log","text":"<p>[Source]</p> <pre><code>fun box sctp_get_packet_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_771","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_peer_addresses","title":"sctp_get_peer_addresses","text":"<p>[Source]</p> <pre><code>fun box sctp_get_peer_addresses()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_772","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_peer_addr_info","title":"sctp_get_peer_addr_info","text":"<p>[Source]</p> <pre><code>fun box sctp_get_peer_addr_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_773","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_remote_addr_size","title":"sctp_get_remote_addr_size","text":"<p>[Source]</p> <pre><code>fun box sctp_get_remote_addr_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_774","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_sndbuf_use","title":"sctp_get_sndbuf_use","text":"<p>[Source]</p> <pre><code>fun box sctp_get_sndbuf_use()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_775","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_stat_log","title":"sctp_get_stat_log","text":"<p>[Source]</p> <pre><code>fun box sctp_get_stat_log()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_776","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_get_vrf_ids","title":"sctp_get_vrf_ids","text":"<p>[Source]</p> <pre><code>fun box sctp_get_vrf_ids()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_777","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_had_no_tcb","title":"sctp_had_no_tcb","text":"<p>[Source]</p> <pre><code>fun box sctp_had_no_tcb()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_778","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_heartbeat_ack","title":"sctp_heartbeat_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_heartbeat_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_779","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_heartbeat_request","title":"sctp_heartbeat_request","text":"<p>[Source]</p> <pre><code>fun box sctp_heartbeat_request()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_780","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_hmac_ident","title":"sctp_hmac_ident","text":"<p>[Source]</p> <pre><code>fun box sctp_hmac_ident()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_781","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_idata","title":"sctp_idata","text":"<p>[Source]</p> <pre><code>fun box sctp_idata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_782","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_iforward_cum_tsn","title":"sctp_iforward_cum_tsn","text":"<p>[Source]</p> <pre><code>fun box sctp_iforward_cum_tsn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_783","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initiation","title":"sctp_initiation","text":"<p>[Source]</p> <pre><code>fun box sctp_initiation()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_784","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initiation_ack","title":"sctp_initiation_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_initiation_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_785","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_initmsg","title":"sctp_initmsg","text":"<p>[Source]</p> <pre><code>fun box sctp_initmsg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_786","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_interleaving_supported","title":"sctp_interleaving_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_interleaving_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_787","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_i_want_mapped_v4_addr","title":"sctp_i_want_mapped_v4_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_i_want_mapped_v4_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_788","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_last_packet_tracing","title":"sctp_last_packet_tracing","text":"<p>[Source]</p> <pre><code>fun box sctp_last_packet_tracing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_789","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_listen","title":"sctp_listen","text":"<p>[Source]</p> <pre><code>fun box sctp_listen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_790","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_local_auth_chunks","title":"sctp_local_auth_chunks","text":"<p>[Source]</p> <pre><code>fun box sctp_local_auth_chunks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_791","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_lock_logging_enable","title":"sctp_lock_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_lock_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_792","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_outq","title":"sctp_log_at_send_2_outq","text":"<p>[Source]</p> <pre><code>fun box sctp_log_at_send_2_outq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_793","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_sctp","title":"sctp_log_at_send_2_sctp","text":"<p>[Source]</p> <pre><code>fun box sctp_log_at_send_2_sctp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_794","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_maxburst_enable","title":"sctp_log_maxburst_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_maxburst_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_795","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_rwnd_enable","title":"sctp_log_rwnd_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_rwnd_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_796","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_sack_arrivals_enable","title":"sctp_log_sack_arrivals_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_log_sack_arrivals_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_797","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_log_try_advance","title":"sctp_log_try_advance","text":"<p>[Source]</p> <pre><code>fun box sctp_log_try_advance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_798","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ltrace_chunk_enable","title":"sctp_ltrace_chunk_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_ltrace_chunk_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_799","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ltrace_error_enable","title":"sctp_ltrace_error_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_ltrace_error_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_800","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_map_logging_enable","title":"sctp_map_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_map_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_801","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_maxburst","title":"sctp_maxburst","text":"<p>[Source]</p> <pre><code>fun box sctp_maxburst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_802","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_maxseg","title":"sctp_maxseg","text":"<p>[Source]</p> <pre><code>fun box sctp_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_803","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_burst","title":"sctp_max_burst","text":"<p>[Source]</p> <pre><code>fun box sctp_max_burst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_804","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_cookie_life","title":"sctp_max_cookie_life","text":"<p>[Source]</p> <pre><code>fun box sctp_max_cookie_life()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_805","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_cwnd","title":"sctp_max_cwnd","text":"<p>[Source]</p> <pre><code>fun box sctp_max_cwnd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_806","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_hb_interval","title":"sctp_max_hb_interval","text":"<p>[Source]</p> <pre><code>fun box sctp_max_hb_interval()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_807","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_max_sack_delay","title":"sctp_max_sack_delay","text":"<p>[Source]</p> <pre><code>fun box sctp_max_sack_delay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_808","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mbcnt_logging_enable","title":"sctp_mbcnt_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_mbcnt_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_809","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mbuf_logging_enable","title":"sctp_mbuf_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_mbuf_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_810","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_base","title":"sctp_mobility_base","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_base()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_811","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_fasthandoff","title":"sctp_mobility_fasthandoff","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_fasthandoff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_812","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_mobility_prim_deleted","title":"sctp_mobility_prim_deleted","text":"<p>[Source]</p> <pre><code>fun box sctp_mobility_prim_deleted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_813","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nagle_logging_enable","title":"sctp_nagle_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_nagle_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_814","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nodelay","title":"sctp_nodelay","text":"<p>[Source]</p> <pre><code>fun box sctp_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_815","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nrsack_supported","title":"sctp_nrsack_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_nrsack_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_816","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_nr_selective_ack","title":"sctp_nr_selective_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_nr_selective_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_817","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_operation_error","title":"sctp_operation_error","text":"<p>[Source]</p> <pre><code>fun box sctp_operation_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_818","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packed","title":"sctp_packed","text":"<p>[Source]</p> <pre><code>fun box sctp_packed()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_819","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_dropped","title":"sctp_packet_dropped","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_dropped()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_820","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_log_size","title":"sctp_packet_log_size","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_log_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_821","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_packet_truncated","title":"sctp_packet_truncated","text":"<p>[Source]</p> <pre><code>fun box sctp_packet_truncated()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_822","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pad_chunk","title":"sctp_pad_chunk","text":"<p>[Source]</p> <pre><code>fun box sctp_pad_chunk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_823","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_partial_delivery_point","title":"sctp_partial_delivery_point","text":"<p>[Source]</p> <pre><code>fun box sctp_partial_delivery_point()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_824","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_copy_flags","title":"sctp_pcb_copy_flags","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_copy_flags()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_825","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_accepting","title":"sctp_pcb_flags_accepting","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_accepting()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_826","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_adaptationevnt","title":"sctp_pcb_flags_adaptationevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_adaptationevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_827","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_assoc_resetevnt","title":"sctp_pcb_flags_assoc_resetevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_assoc_resetevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_828","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_authevnt","title":"sctp_pcb_flags_authevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_authevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_829","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_autoclose","title":"sctp_pcb_flags_autoclose","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_autoclose()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_830","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_auto_asconf","title":"sctp_pcb_flags_auto_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_auto_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_831","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_blocking_io","title":"sctp_pcb_flags_blocking_io","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_blocking_io()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_832","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_boundall","title":"sctp_pcb_flags_boundall","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_boundall()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_833","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_bound_v6","title":"sctp_pcb_flags_bound_v6","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_bound_v6()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_834","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_close_ip","title":"sctp_pcb_flags_close_ip","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_close_ip()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_835","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_connected","title":"sctp_pcb_flags_connected","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_836","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_donot_heartbeat","title":"sctp_pcb_flags_donot_heartbeat","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_donot_heartbeat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_837","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dont_wake","title":"sctp_pcb_flags_dont_wake","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_dont_wake()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_838","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_asconf","title":"sctp_pcb_flags_do_asconf","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_do_asconf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_839","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_not_pmtud","title":"sctp_pcb_flags_do_not_pmtud","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_do_not_pmtud()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_840","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dryevnt","title":"sctp_pcb_flags_dryevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_dryevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_841","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_explicit_eor","title":"sctp_pcb_flags_explicit_eor","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_explicit_eor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_842","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_ext_rcvinfo","title":"sctp_pcb_flags_ext_rcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_ext_rcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_843","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_frag_interleave","title":"sctp_pcb_flags_frag_interleave","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_frag_interleave()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_844","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_interleave_strms","title":"sctp_pcb_flags_interleave_strms","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_interleave_strms()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_845","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_in_tcppool","title":"sctp_pcb_flags_in_tcppool","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_in_tcppool()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_846","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_multiple_asconfs","title":"sctp_pcb_flags_multiple_asconfs","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_multiple_asconfs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_847","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_needs_mapped_v4","title":"sctp_pcb_flags_needs_mapped_v4","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_needs_mapped_v4()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_848","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_nodelay","title":"sctp_pcb_flags_nodelay","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_849","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_no_fragment","title":"sctp_pcb_flags_no_fragment","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_no_fragment()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_850","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_pdapievnt","title":"sctp_pcb_flags_pdapievnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_pdapievnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_851","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_portreuse","title":"sctp_pcb_flags_portreuse","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_portreuse()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_852","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvassocevnt","title":"sctp_pcb_flags_recvassocevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvassocevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_853","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvdataioevnt","title":"sctp_pcb_flags_recvdataioevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvdataioevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_854","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnsendfailevnt","title":"sctp_pcb_flags_recvnsendfailevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvnsendfailevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_855","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnxtinfo","title":"sctp_pcb_flags_recvnxtinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvnxtinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_856","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpaddrevnt","title":"sctp_pcb_flags_recvpaddrevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvpaddrevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_857","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpeererr","title":"sctp_pcb_flags_recvpeererr","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvpeererr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_858","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvrcvinfo","title":"sctp_pcb_flags_recvrcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvrcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_859","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvsendfailevnt","title":"sctp_pcb_flags_recvsendfailevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvsendfailevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_860","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvshutdownevnt","title":"sctp_pcb_flags_recvshutdownevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_recvshutdownevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_861","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_allgone","title":"sctp_pcb_flags_socket_allgone","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_allgone()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_862","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_cant_read","title":"sctp_pcb_flags_socket_cant_read","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_cant_read()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_863","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_gone","title":"sctp_pcb_flags_socket_gone","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_socket_gone()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_864","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_changeevnt","title":"sctp_pcb_flags_stream_changeevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_stream_changeevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_865","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_resetevnt","title":"sctp_pcb_flags_stream_resetevnt","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_stream_resetevnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_866","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_tcptype","title":"sctp_pcb_flags_tcptype","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_tcptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_867","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_udptype","title":"sctp_pcb_flags_udptype","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_udptype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_868","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_unbound","title":"sctp_pcb_flags_unbound","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_unbound()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_869","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeinput","title":"sctp_pcb_flags_wakeinput","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_wakeinput()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_870","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeoutput","title":"sctp_pcb_flags_wakeoutput","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_wakeoutput()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_871","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_aborted","title":"sctp_pcb_flags_was_aborted","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_was_aborted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_872","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_connected","title":"sctp_pcb_flags_was_connected","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_was_connected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_873","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_flags_zero_copy_active","title":"sctp_pcb_flags_zero_copy_active","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_flags_zero_copy_active()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_874","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pcb_status","title":"sctp_pcb_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pcb_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_875","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peeloff","title":"sctp_peeloff","text":"<p>[Source]</p> <pre><code>fun box sctp_peeloff()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_876","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_addr_params","title":"sctp_peer_addr_params","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_addr_params()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_877","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_addr_thlds","title":"sctp_peer_addr_thlds","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_addr_thlds()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_878","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_peer_auth_chunks","title":"sctp_peer_auth_chunks","text":"<p>[Source]</p> <pre><code>fun box sctp_peer_auth_chunks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_879","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pktdrop_supported","title":"sctp_pktdrop_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_pktdrop_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_880","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pluggable_cc","title":"sctp_pluggable_cc","text":"<p>[Source]</p> <pre><code>fun box sctp_pluggable_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_881","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pluggable_ss","title":"sctp_pluggable_ss","text":"<p>[Source]</p> <pre><code>fun box sctp_pluggable_ss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_882","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_primary_addr","title":"sctp_primary_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_primary_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_883","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_assoc_status","title":"sctp_pr_assoc_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_assoc_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_884","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_stream_status","title":"sctp_pr_stream_status","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_stream_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_885","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_pr_supported","title":"sctp_pr_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_pr_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_886","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reconfig_supported","title":"sctp_reconfig_supported","text":"<p>[Source]</p> <pre><code>fun box sctp_reconfig_supported()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_887","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recvnxtinfo","title":"sctp_recvnxtinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_recvnxtinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_888","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recvrcvinfo","title":"sctp_recvrcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_recvrcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_889","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_recv_rwnd_logging_enable","title":"sctp_recv_rwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_recv_rwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_890","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_remote_udp_encaps_port","title":"sctp_remote_udp_encaps_port","text":"<p>[Source]</p> <pre><code>fun box sctp_remote_udp_encaps_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_891","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reset_assoc","title":"sctp_reset_assoc","text":"<p>[Source]</p> <pre><code>fun box sctp_reset_assoc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_892","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reset_streams","title":"sctp_reset_streams","text":"<p>[Source]</p> <pre><code>fun box sctp_reset_streams()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_893","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_reuse_port","title":"sctp_reuse_port","text":"<p>[Source]</p> <pre><code>fun box sctp_reuse_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_894","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_rtoinfo","title":"sctp_rtoinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_rtoinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_895","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_rttvar_logging_enable","title":"sctp_rttvar_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_rttvar_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_896","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_cmt_dac","title":"sctp_sack_cmt_dac","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_cmt_dac()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_897","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_logging_enable","title":"sctp_sack_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_898","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_nonce_sum","title":"sctp_sack_nonce_sum","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_nonce_sum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_899","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sack_rwnd_logging_enable","title":"sctp_sack_rwnd_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sack_rwnd_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_900","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sat_network_burst_incr","title":"sctp_sat_network_burst_incr","text":"<p>[Source]</p> <pre><code>fun box sctp_sat_network_burst_incr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_901","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sat_network_min","title":"sctp_sat_network_min","text":"<p>[Source]</p> <pre><code>fun box sctp_sat_network_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_902","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_sb_logging_enable","title":"sctp_sb_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_sb_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_903","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_selective_ack","title":"sctp_selective_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_selective_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_904","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_debug_level","title":"sctp_set_debug_level","text":"<p>[Source]</p> <pre><code>fun box sctp_set_debug_level()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_905","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_dynamic_primary","title":"sctp_set_dynamic_primary","text":"<p>[Source]</p> <pre><code>fun box sctp_set_dynamic_primary()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_906","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_initial_dbg_seq","title":"sctp_set_initial_dbg_seq","text":"<p>[Source]</p> <pre><code>fun box sctp_set_initial_dbg_seq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_907","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_set_peer_primary_addr","title":"sctp_set_peer_primary_addr","text":"<p>[Source]</p> <pre><code>fun box sctp_set_peer_primary_addr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_908","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown","title":"sctp_shutdown","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_909","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_ack","title":"sctp_shutdown_ack","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_ack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_910","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_ack_sent","title":"sctp_shutdown_ack_sent","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_ack_sent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_911","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_complete","title":"sctp_shutdown_complete","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_complete()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_912","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_pending","title":"sctp_shutdown_pending","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_pending()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_913","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_received","title":"sctp_shutdown_received","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_received()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_914","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_shutdown_sent","title":"sctp_shutdown_sent","text":"<p>[Source]</p> <pre><code>fun box sctp_shutdown_sent()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_915","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_smallest_pmtu","title":"sctp_smallest_pmtu","text":"<p>[Source]</p> <pre><code>fun box sctp_smallest_pmtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_916","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_default","title":"sctp_ss_default","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_917","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_fair_bandwith","title":"sctp_ss_fair_bandwith","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_fair_bandwith()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_918","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_first_come","title":"sctp_ss_first_come","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_first_come()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_919","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_priority","title":"sctp_ss_priority","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_920","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_round_robin","title":"sctp_ss_round_robin","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_round_robin()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_921","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_round_robin_packet","title":"sctp_ss_round_robin_packet","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_round_robin_packet()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_922","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_ss_value","title":"sctp_ss_value","text":"<p>[Source]</p> <pre><code>fun box sctp_ss_value()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_923","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_status","title":"sctp_status","text":"<p>[Source]</p> <pre><code>fun box sctp_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_924","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset","title":"sctp_stream_reset","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_925","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset_incoming","title":"sctp_stream_reset_incoming","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset_incoming()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_926","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_stream_reset_outgoing","title":"sctp_stream_reset_outgoing","text":"<p>[Source]</p> <pre><code>fun box sctp_stream_reset_outgoing()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_927","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_str_logging_enable","title":"sctp_str_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_str_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_928","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_threshold_logging","title":"sctp_threshold_logging","text":"<p>[Source]</p> <pre><code>fun box sctp_threshold_logging()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_929","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_timeouts","title":"sctp_timeouts","text":"<p>[Source]</p> <pre><code>fun box sctp_timeouts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_930","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_use_ext_rcvinfo","title":"sctp_use_ext_rcvinfo","text":"<p>[Source]</p> <pre><code>fun box sctp_use_ext_rcvinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_931","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_vrf_id","title":"sctp_vrf_id","text":"<p>[Source]</p> <pre><code>fun box sctp_vrf_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_932","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sctp_wake_logging_enable","title":"sctp_wake_logging_enable","text":"<p>[Source]</p> <pre><code>fun box sctp_wake_logging_enable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_933","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_cloexec","title":"sock_cloexec","text":"<p>[Source]</p> <pre><code>fun box sock_cloexec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_934","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_dgram","title":"sock_dgram","text":"<p>[Source]</p> <pre><code>fun box sock_dgram()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_935","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_maxaddrlen","title":"sock_maxaddrlen","text":"<p>[Source]</p> <pre><code>fun box sock_maxaddrlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_936","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_nonblock","title":"sock_nonblock","text":"<p>[Source]</p> <pre><code>fun box sock_nonblock()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_937","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_raw","title":"sock_raw","text":"<p>[Source]</p> <pre><code>fun box sock_raw()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_938","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_rdm","title":"sock_rdm","text":"<p>[Source]</p> <pre><code>fun box sock_rdm()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_939","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_seqpacket","title":"sock_seqpacket","text":"<p>[Source]</p> <pre><code>fun box sock_seqpacket()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_940","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sock_stream","title":"sock_stream","text":"<p>[Source]</p> <pre><code>fun box sock_stream()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_941","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#somaxconn","title":"somaxconn","text":"<p>[Source]</p> <pre><code>fun box somaxconn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_942","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#sonpx_setoptshut","title":"sonpx_setoptshut","text":"<p>[Source]</p> <pre><code>fun box sonpx_setoptshut()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_943","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_acceptconn","title":"so_acceptconn","text":"<p>[Source]</p> <pre><code>fun box so_acceptconn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_944","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_acceptfilter","title":"so_acceptfilter","text":"<p>[Source]</p> <pre><code>fun box so_acceptfilter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_945","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmpvc","title":"so_atmpvc","text":"<p>[Source]</p> <pre><code>fun box so_atmpvc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_946","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmqos","title":"so_atmqos","text":"<p>[Source]</p> <pre><code>fun box so_atmqos()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_947","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_atmsap","title":"so_atmsap","text":"<p>[Source]</p> <pre><code>fun box so_atmsap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_948","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_attach_bpf","title":"so_attach_bpf","text":"<p>[Source]</p> <pre><code>fun box so_attach_bpf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_949","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_attach_filter","title":"so_attach_filter","text":"<p>[Source]</p> <pre><code>fun box so_attach_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_950","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bindtodevice","title":"so_bindtodevice","text":"<p>[Source]</p> <pre><code>fun box so_bindtodevice()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_951","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bintime","title":"so_bintime","text":"<p>[Source]</p> <pre><code>fun box so_bintime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_952","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bpf_extensions","title":"so_bpf_extensions","text":"<p>[Source]</p> <pre><code>fun box so_bpf_extensions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_953","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_broadcast","title":"so_broadcast","text":"<p>[Source]</p> <pre><code>fun box so_broadcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_954","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bsdcompat","title":"so_bsdcompat","text":"<p>[Source]</p> <pre><code>fun box so_bsdcompat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_955","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_bsp_state","title":"so_bsp_state","text":"<p>[Source]</p> <pre><code>fun box so_bsp_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_956","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_busy_poll","title":"so_busy_poll","text":"<p>[Source]</p> <pre><code>fun box so_busy_poll()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_957","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_conaccess","title":"so_conaccess","text":"<p>[Source]</p> <pre><code>fun box so_conaccess()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_958","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_condata","title":"so_condata","text":"<p>[Source]</p> <pre><code>fun box so_condata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_959","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_conditional_accept","title":"so_conditional_accept","text":"<p>[Source]</p> <pre><code>fun box so_conditional_accept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_960","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_connect_time","title":"so_connect_time","text":"<p>[Source]</p> <pre><code>fun box so_connect_time()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_961","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_debug","title":"so_debug","text":"<p>[Source]</p> <pre><code>fun box so_debug()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_962","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_detach_bpf","title":"so_detach_bpf","text":"<p>[Source]</p> <pre><code>fun box so_detach_bpf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_963","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_detach_filter","title":"so_detach_filter","text":"<p>[Source]</p> <pre><code>fun box so_detach_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_964","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_domain","title":"so_domain","text":"<p>[Source]</p> <pre><code>fun box so_domain()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_965","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_dontlinger","title":"so_dontlinger","text":"<p>[Source]</p> <pre><code>fun box so_dontlinger()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_966","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_dontroute","title":"so_dontroute","text":"<p>[Source]</p> <pre><code>fun box so_dontroute()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_967","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_donttrunc","title":"so_donttrunc","text":"<p>[Source]</p> <pre><code>fun box so_donttrunc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_968","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_error","title":"so_error","text":"<p>[Source]</p> <pre><code>fun box so_error()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_969","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_exclusiveaddruse","title":"so_exclusiveaddruse","text":"<p>[Source]</p> <pre><code>fun box so_exclusiveaddruse()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_970","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_get_filter","title":"so_get_filter","text":"<p>[Source]</p> <pre><code>fun box so_get_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_971","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_group_id","title":"so_group_id","text":"<p>[Source]</p> <pre><code>fun box so_group_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_972","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_group_priority","title":"so_group_priority","text":"<p>[Source]</p> <pre><code>fun box so_group_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_973","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_hci_raw_direction","title":"so_hci_raw_direction","text":"<p>[Source]</p> <pre><code>fun box so_hci_raw_direction()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_974","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_hci_raw_filter","title":"so_hci_raw_filter","text":"<p>[Source]</p> <pre><code>fun box so_hci_raw_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_975","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_incoming_cpu","title":"so_incoming_cpu","text":"<p>[Source]</p> <pre><code>fun box so_incoming_cpu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_976","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_keepalive","title":"so_keepalive","text":"<p>[Source]</p> <pre><code>fun box so_keepalive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_977","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_encrypted","title":"so_l2cap_encrypted","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_encrypted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_978","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_flush","title":"so_l2cap_flush","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_flush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_979","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_iflow","title":"so_l2cap_iflow","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_iflow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_980","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_imtu","title":"so_l2cap_imtu","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_imtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_981","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_oflow","title":"so_l2cap_oflow","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_oflow()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_982","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_l2cap_omtu","title":"so_l2cap_omtu","text":"<p>[Source]</p> <pre><code>fun box so_l2cap_omtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_983","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_label","title":"so_label","text":"<p>[Source]</p> <pre><code>fun box so_label()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_984","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linger","title":"so_linger","text":"<p>[Source]</p> <pre><code>fun box so_linger()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_985","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linger_sec","title":"so_linger_sec","text":"<p>[Source]</p> <pre><code>fun box so_linger_sec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_986","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_linkinfo","title":"so_linkinfo","text":"<p>[Source]</p> <pre><code>fun box so_linkinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_987","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenincqlen","title":"so_listenincqlen","text":"<p>[Source]</p> <pre><code>fun box so_listenincqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_988","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenqlen","title":"so_listenqlen","text":"<p>[Source]</p> <pre><code>fun box so_listenqlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_989","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_listenqlimit","title":"so_listenqlimit","text":"<p>[Source]</p> <pre><code>fun box so_listenqlimit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_990","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_lock_filter","title":"so_lock_filter","text":"<p>[Source]</p> <pre><code>fun box so_lock_filter()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_991","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_mark","title":"so_mark","text":"<p>[Source]</p> <pre><code>fun box so_mark()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_992","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_max_msg_size","title":"so_max_msg_size","text":"<p>[Source]</p> <pre><code>fun box so_max_msg_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_993","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_max_pacing_rate","title":"so_max_pacing_rate","text":"<p>[Source]</p> <pre><code>fun box so_max_pacing_rate()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_994","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_multipoint","title":"so_multipoint","text":"<p>[Source]</p> <pre><code>fun box so_multipoint()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_995","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_netsvc_marking_level","title":"so_netsvc_marking_level","text":"<p>[Source]</p> <pre><code>fun box so_netsvc_marking_level()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_996","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_net_service_type","title":"so_net_service_type","text":"<p>[Source]</p> <pre><code>fun box so_net_service_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_997","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nke","title":"so_nke","text":"<p>[Source]</p> <pre><code>fun box so_nke()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_998","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_noaddrerr","title":"so_noaddrerr","text":"<p>[Source]</p> <pre><code>fun box so_noaddrerr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_999","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nofcs","title":"so_nofcs","text":"<p>[Source]</p> <pre><code>fun box so_nofcs()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1000","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nosigpipe","title":"so_nosigpipe","text":"<p>[Source]</p> <pre><code>fun box so_nosigpipe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1001","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_notifyconflict","title":"so_notifyconflict","text":"<p>[Source]</p> <pre><code>fun box so_notifyconflict()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1002","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_check","title":"so_no_check","text":"<p>[Source]</p> <pre><code>fun box so_no_check()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1003","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_ddp","title":"so_no_ddp","text":"<p>[Source]</p> <pre><code>fun box so_no_ddp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1004","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_no_offload","title":"so_no_offload","text":"<p>[Source]</p> <pre><code>fun box so_no_offload()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1005","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_np_extensions","title":"so_np_extensions","text":"<p>[Source]</p> <pre><code>fun box so_np_extensions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1006","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nread","title":"so_nread","text":"<p>[Source]</p> <pre><code>fun box so_nread()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1007","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_numrcvpkt","title":"so_numrcvpkt","text":"<p>[Source]</p> <pre><code>fun box so_numrcvpkt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1008","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_nwrite","title":"so_nwrite","text":"<p>[Source]</p> <pre><code>fun box so_nwrite()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1009","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_oobinline","title":"so_oobinline","text":"<p>[Source]</p> <pre><code>fun box so_oobinline()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1010","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_original_dst","title":"so_original_dst","text":"<p>[Source]</p> <pre><code>fun box so_original_dst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1011","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_passcred","title":"so_passcred","text":"<p>[Source]</p> <pre><code>fun box so_passcred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1012","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_passsec","title":"so_passsec","text":"<p>[Source]</p> <pre><code>fun box so_passsec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1013","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peek_off","title":"so_peek_off","text":"<p>[Source]</p> <pre><code>fun box so_peek_off()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1014","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peercred","title":"so_peercred","text":"<p>[Source]</p> <pre><code>fun box so_peercred()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1015","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peerlabel","title":"so_peerlabel","text":"<p>[Source]</p> <pre><code>fun box so_peerlabel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1016","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peername","title":"so_peername","text":"<p>[Source]</p> <pre><code>fun box so_peername()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1017","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_peersec","title":"so_peersec","text":"<p>[Source]</p> <pre><code>fun box so_peersec()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1018","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_port_scalability","title":"so_port_scalability","text":"<p>[Source]</p> <pre><code>fun box so_port_scalability()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1019","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_priority","title":"so_priority","text":"<p>[Source]</p> <pre><code>fun box so_priority()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1020","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_protocol","title":"so_protocol","text":"<p>[Source]</p> <pre><code>fun box so_protocol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1021","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_protocol_info","title":"so_protocol_info","text":"<p>[Source]</p> <pre><code>fun box so_protocol_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1022","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_prototype","title":"so_prototype","text":"<p>[Source]</p> <pre><code>fun box so_prototype()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1023","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_proxyusr","title":"so_proxyusr","text":"<p>[Source]</p> <pre><code>fun box so_proxyusr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1024","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_randomport","title":"so_randomport","text":"<p>[Source]</p> <pre><code>fun box so_randomport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1025","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvbuf","title":"so_rcvbuf","text":"<p>[Source]</p> <pre><code>fun box so_rcvbuf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1026","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvbufforce","title":"so_rcvbufforce","text":"<p>[Source]</p> <pre><code>fun box so_rcvbufforce()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1027","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvlowat","title":"so_rcvlowat","text":"<p>[Source]</p> <pre><code>fun box so_rcvlowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1028","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo","title":"so_rcvtimeo","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1029","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rds_transport","title":"so_rds_transport","text":"<p>[Source]</p> <pre><code>fun box so_rds_transport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1030","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseaddr","title":"so_reuseaddr","text":"<p>[Source]</p> <pre><code>fun box so_reuseaddr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1031","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseport","title":"so_reuseport","text":"<p>[Source]</p> <pre><code>fun box so_reuseport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1032","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_reuseshareuid","title":"so_reuseshareuid","text":"<p>[Source]</p> <pre><code>fun box so_reuseshareuid()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1033","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rfcomm_fc_info","title":"so_rfcomm_fc_info","text":"<p>[Source]</p> <pre><code>fun box so_rfcomm_fc_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1034","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rfcomm_mtu","title":"so_rfcomm_mtu","text":"<p>[Source]</p> <pre><code>fun box so_rfcomm_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1035","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rxq_ovfl","title":"so_rxq_ovfl","text":"<p>[Source]</p> <pre><code>fun box so_rxq_ovfl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1036","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sco_conninfo","title":"so_sco_conninfo","text":"<p>[Source]</p> <pre><code>fun box so_sco_conninfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1037","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sco_mtu","title":"so_sco_mtu","text":"<p>[Source]</p> <pre><code>fun box so_sco_mtu()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1038","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_authentication","title":"so_security_authentication","text":"<p>[Source]</p> <pre><code>fun box so_security_authentication()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1039","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_encryption_network","title":"so_security_encryption_network","text":"<p>[Source]</p> <pre><code>fun box so_security_encryption_network()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1040","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_security_encryption_transport","title":"so_security_encryption_transport","text":"<p>[Source]</p> <pre><code>fun box so_security_encryption_transport()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1041","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_select_err_queue","title":"so_select_err_queue","text":"<p>[Source]</p> <pre><code>fun box so_select_err_queue()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1042","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_setclp","title":"so_setclp","text":"<p>[Source]</p> <pre><code>fun box so_setclp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1043","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_setfib","title":"so_setfib","text":"<p>[Source]</p> <pre><code>fun box so_setfib()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1044","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndbuf","title":"so_sndbuf","text":"<p>[Source]</p> <pre><code>fun box so_sndbuf()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1045","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndbufforce","title":"so_sndbufforce","text":"<p>[Source]</p> <pre><code>fun box so_sndbufforce()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1046","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndlowat","title":"so_sndlowat","text":"<p>[Source]</p> <pre><code>fun box so_sndlowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1047","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo","title":"so_sndtimeo","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1048","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamp","title":"so_timestamp","text":"<p>[Source]</p> <pre><code>fun box so_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1049","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamping","title":"so_timestamping","text":"<p>[Source]</p> <pre><code>fun box so_timestamping()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1050","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestampns","title":"so_timestampns","text":"<p>[Source]</p> <pre><code>fun box so_timestampns()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1051","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_timestamp_monotonic","title":"so_timestamp_monotonic","text":"<p>[Source]</p> <pre><code>fun box so_timestamp_monotonic()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1052","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_type","title":"so_type","text":"<p>[Source]</p> <pre><code>fun box so_type()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1053","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_upcallclosewait","title":"so_upcallclosewait","text":"<p>[Source]</p> <pre><code>fun box so_upcallclosewait()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1054","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_update_accept_context","title":"so_update_accept_context","text":"<p>[Source]</p> <pre><code>fun box so_update_accept_context()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1055","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_useloopback","title":"so_useloopback","text":"<p>[Source]</p> <pre><code>fun box so_useloopback()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1056","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_user_cookie","title":"so_user_cookie","text":"<p>[Source]</p> <pre><code>fun box so_user_cookie()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1057","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vendor","title":"so_vendor","text":"<p>[Source]</p> <pre><code>fun box so_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1058","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_max_size","title":"so_vm_sockets_buffer_max_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_max_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1059","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_min_size","title":"so_vm_sockets_buffer_min_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_min_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1060","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_size","title":"so_vm_sockets_buffer_size","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_buffer_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1061","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_connect_timeout","title":"so_vm_sockets_connect_timeout","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_connect_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1062","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_nonblock_txrx","title":"so_vm_sockets_nonblock_txrx","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_nonblock_txrx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1063","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_peer_host_vm_id","title":"so_vm_sockets_peer_host_vm_id","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_peer_host_vm_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1064","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_vm_sockets_trusted","title":"so_vm_sockets_trusted","text":"<p>[Source]</p> <pre><code>fun box so_vm_sockets_trusted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1065","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wantmore","title":"so_wantmore","text":"<p>[Source]</p> <pre><code>fun box so_wantmore()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1066","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wantoobflag","title":"so_wantoobflag","text":"<p>[Source]</p> <pre><code>fun box so_wantoobflag()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1067","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_wifi_status","title":"so_wifi_status","text":"<p>[Source]</p> <pre><code>fun box so_wifi_status()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1068","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp6_mss","title":"tcp6_mss","text":"<p>[Source]</p> <pre><code>fun box tcp6_mss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1069","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_flag_lossrecovery","title":"tcpci_flag_lossrecovery","text":"<p>[Source]</p> <pre><code>fun box tcpci_flag_lossrecovery()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1070","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_flag_reordering_detected","title":"tcpci_flag_reordering_detected","text":"<p>[Source]</p> <pre><code>fun box tcpci_flag_reordering_detected()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1071","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_ecn","title":"tcpci_opt_ecn","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1072","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_sack","title":"tcpci_opt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1073","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_timestamps","title":"tcpci_opt_timestamps","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_timestamps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1074","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpci_opt_wscale","title":"tcpci_opt_wscale","text":"<p>[Source]</p> <pre><code>fun box tcpci_opt_wscale()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1075","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_cwr","title":"tcpf_ca_cwr","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_cwr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1076","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_disorder","title":"tcpf_ca_disorder","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_disorder()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1077","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_loss","title":"tcpf_ca_loss","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_loss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1078","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_open","title":"tcpf_ca_open","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_open()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1079","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpf_ca_recovery","title":"tcpf_ca_recovery","text":"<p>[Source]</p> <pre><code>fun box tcpf_ca_recovery()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1080","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_ecn","title":"tcpi_opt_ecn","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1081","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_ecn_seen","title":"tcpi_opt_ecn_seen","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_ecn_seen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1082","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_sack","title":"tcpi_opt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1083","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_syn_data","title":"tcpi_opt_syn_data","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_syn_data()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1084","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_timestamps","title":"tcpi_opt_timestamps","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_timestamps()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1085","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_toe","title":"tcpi_opt_toe","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_toe()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1086","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpi_opt_wscale","title":"tcpi_opt_wscale","text":"<p>[Source]</p> <pre><code>fun box tcpi_opt_wscale()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1087","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_cc","title":"tcpolen_cc","text":"<p>[Source]</p> <pre><code>fun box tcpolen_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1088","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_cc_appa","title":"tcpolen_cc_appa","text":"<p>[Source]</p> <pre><code>fun box tcpolen_cc_appa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1089","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_eol","title":"tcpolen_eol","text":"<p>[Source]</p> <pre><code>fun box tcpolen_eol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1090","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fastopen_req","title":"tcpolen_fastopen_req","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fastopen_req()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1091","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_empty","title":"tcpolen_fast_open_empty","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_empty()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1092","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_max","title":"tcpolen_fast_open_max","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1093","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_fast_open_min","title":"tcpolen_fast_open_min","text":"<p>[Source]</p> <pre><code>fun box tcpolen_fast_open_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1094","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_maxseg","title":"tcpolen_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcpolen_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1095","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_nop","title":"tcpolen_nop","text":"<p>[Source]</p> <pre><code>fun box tcpolen_nop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1096","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_pad","title":"tcpolen_pad","text":"<p>[Source]</p> <pre><code>fun box tcpolen_pad()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1097","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sack","title":"tcpolen_sack","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1098","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sackhdr","title":"tcpolen_sackhdr","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sackhdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1099","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_sack_permitted","title":"tcpolen_sack_permitted","text":"<p>[Source]</p> <pre><code>fun box tcpolen_sack_permitted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1100","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_signature","title":"tcpolen_signature","text":"<p>[Source]</p> <pre><code>fun box tcpolen_signature()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1101","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_timestamp","title":"tcpolen_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcpolen_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1102","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_tstamp_appa","title":"tcpolen_tstamp_appa","text":"<p>[Source]</p> <pre><code>fun box tcpolen_tstamp_appa()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1103","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpolen_window","title":"tcpolen_window","text":"<p>[Source]</p> <pre><code>fun box tcpolen_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1104","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_cc","title":"tcpopt_cc","text":"<p>[Source]</p> <pre><code>fun box tcpopt_cc()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1105","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_ccecho","title":"tcpopt_ccecho","text":"<p>[Source]</p> <pre><code>fun box tcpopt_ccecho()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1106","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_ccnew","title":"tcpopt_ccnew","text":"<p>[Source]</p> <pre><code>fun box tcpopt_ccnew()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1107","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_eol","title":"tcpopt_eol","text":"<p>[Source]</p> <pre><code>fun box tcpopt_eol()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1108","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_fastopen","title":"tcpopt_fastopen","text":"<p>[Source]</p> <pre><code>fun box tcpopt_fastopen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1109","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_fast_open","title":"tcpopt_fast_open","text":"<p>[Source]</p> <pre><code>fun box tcpopt_fast_open()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1110","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_maxseg","title":"tcpopt_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcpopt_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1111","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_multipath","title":"tcpopt_multipath","text":"<p>[Source]</p> <pre><code>fun box tcpopt_multipath()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1112","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_nop","title":"tcpopt_nop","text":"<p>[Source]</p> <pre><code>fun box tcpopt_nop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1113","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_pad","title":"tcpopt_pad","text":"<p>[Source]</p> <pre><code>fun box tcpopt_pad()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1114","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack","title":"tcpopt_sack","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1115","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_hdr","title":"tcpopt_sack_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1116","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_permitted","title":"tcpopt_sack_permitted","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_permitted()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1117","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_sack_permit_hdr","title":"tcpopt_sack_permit_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_sack_permit_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1118","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_signature","title":"tcpopt_signature","text":"<p>[Source]</p> <pre><code>fun box tcpopt_signature()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1119","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_timestamp","title":"tcpopt_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcpopt_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1120","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_tstamp_hdr","title":"tcpopt_tstamp_hdr","text":"<p>[Source]</p> <pre><code>fun box tcpopt_tstamp_hdr()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1121","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcpopt_window","title":"tcpopt_window","text":"<p>[Source]</p> <pre><code>fun box tcpopt_window()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1122","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_ca_name_max","title":"tcp_ca_name_max","text":"<p>[Source]</p> <pre><code>fun box tcp_ca_name_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1123","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_ccalgoopt","title":"tcp_ccalgoopt","text":"<p>[Source]</p> <pre><code>fun box tcp_ccalgoopt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1124","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cc_info","title":"tcp_cc_info","text":"<p>[Source]</p> <pre><code>fun box tcp_cc_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1125","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_congestion","title":"tcp_congestion","text":"<p>[Source]</p> <pre><code>fun box tcp_congestion()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1126","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_connectiontimeout","title":"tcp_connectiontimeout","text":"<p>[Source]</p> <pre><code>fun box tcp_connectiontimeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1127","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_connection_info","title":"tcp_connection_info","text":"<p>[Source]</p> <pre><code>fun box tcp_connection_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1128","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_in_always","title":"tcp_cookie_in_always","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_in_always()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1129","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_max","title":"tcp_cookie_max","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1130","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_min","title":"tcp_cookie_min","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_min()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1131","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_out_never","title":"tcp_cookie_out_never","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_out_never()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1132","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_pair_size","title":"tcp_cookie_pair_size","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_pair_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1133","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cookie_transactions","title":"tcp_cookie_transactions","text":"<p>[Source]</p> <pre><code>fun box tcp_cookie_transactions()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1134","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_cork","title":"tcp_cork","text":"<p>[Source]</p> <pre><code>fun box tcp_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1135","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_defer_accept","title":"tcp_defer_accept","text":"<p>[Source]</p> <pre><code>fun box tcp_defer_accept()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1136","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_enable_ecn","title":"tcp_enable_ecn","text":"<p>[Source]</p> <pre><code>fun box tcp_enable_ecn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1137","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_fastopen","title":"tcp_fastopen","text":"<p>[Source]</p> <pre><code>fun box tcp_fastopen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1138","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_function_blk","title":"tcp_function_blk","text":"<p>[Source]</p> <pre><code>fun box tcp_function_blk()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1139","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_function_name_len_max","title":"tcp_function_name_len_max","text":"<p>[Source]</p> <pre><code>fun box tcp_function_name_len_max()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1140","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_info","title":"tcp_info","text":"<p>[Source]</p> <pre><code>fun box tcp_info()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1141","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepalive","title":"tcp_keepalive","text":"<p>[Source]</p> <pre><code>fun box tcp_keepalive()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1142","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepcnt","title":"tcp_keepcnt","text":"<p>[Source]</p> <pre><code>fun box tcp_keepcnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1143","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepidle","title":"tcp_keepidle","text":"<p>[Source]</p> <pre><code>fun box tcp_keepidle()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1144","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepinit","title":"tcp_keepinit","text":"<p>[Source]</p> <pre><code>fun box tcp_keepinit()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1145","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_keepintvl","title":"tcp_keepintvl","text":"<p>[Source]</p> <pre><code>fun box tcp_keepintvl()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1146","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_linger2","title":"tcp_linger2","text":"<p>[Source]</p> <pre><code>fun box tcp_linger2()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1147","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxburst","title":"tcp_maxburst","text":"<p>[Source]</p> <pre><code>fun box tcp_maxburst()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1148","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxhlen","title":"tcp_maxhlen","text":"<p>[Source]</p> <pre><code>fun box tcp_maxhlen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1149","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxolen","title":"tcp_maxolen","text":"<p>[Source]</p> <pre><code>fun box tcp_maxolen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1150","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxseg","title":"tcp_maxseg","text":"<p>[Source]</p> <pre><code>fun box tcp_maxseg()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1151","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_maxwin","title":"tcp_maxwin","text":"<p>[Source]</p> <pre><code>fun box tcp_maxwin()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1152","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_max_sack","title":"tcp_max_sack","text":"<p>[Source]</p> <pre><code>fun box tcp_max_sack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1153","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_max_winshift","title":"tcp_max_winshift","text":"<p>[Source]</p> <pre><code>fun box tcp_max_winshift()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1154","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_md5sig","title":"tcp_md5sig","text":"<p>[Source]</p> <pre><code>fun box tcp_md5sig()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1155","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_md5sig_maxkeylen","title":"tcp_md5sig_maxkeylen","text":"<p>[Source]</p> <pre><code>fun box tcp_md5sig_maxkeylen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1156","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_minmss","title":"tcp_minmss","text":"<p>[Source]</p> <pre><code>fun box tcp_minmss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1157","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss","title":"tcp_mss","text":"<p>[Source]</p> <pre><code>fun box tcp_mss()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1158","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss_default","title":"tcp_mss_default","text":"<p>[Source]</p> <pre><code>fun box tcp_mss_default()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1159","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_mss_desired","title":"tcp_mss_desired","text":"<p>[Source]</p> <pre><code>fun box tcp_mss_desired()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1160","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_nodelay","title":"tcp_nodelay","text":"<p>[Source]</p> <pre><code>fun box tcp_nodelay()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1161","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_noopt","title":"tcp_noopt","text":"<p>[Source]</p> <pre><code>fun box tcp_noopt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1162","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_nopush","title":"tcp_nopush","text":"<p>[Source]</p> <pre><code>fun box tcp_nopush()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1163","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_notsent_lowat","title":"tcp_notsent_lowat","text":"<p>[Source]</p> <pre><code>fun box tcp_notsent_lowat()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1164","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_pcap_in","title":"tcp_pcap_in","text":"<p>[Source]</p> <pre><code>fun box tcp_pcap_in()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1165","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_pcap_out","title":"tcp_pcap_out","text":"<p>[Source]</p> <pre><code>fun box tcp_pcap_out()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1166","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_queue_seq","title":"tcp_queue_seq","text":"<p>[Source]</p> <pre><code>fun box tcp_queue_seq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1167","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_quickack","title":"tcp_quickack","text":"<p>[Source]</p> <pre><code>fun box tcp_quickack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1168","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair","title":"tcp_repair","text":"<p>[Source]</p> <pre><code>fun box tcp_repair()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1169","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair_options","title":"tcp_repair_options","text":"<p>[Source]</p> <pre><code>fun box tcp_repair_options()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1170","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_repair_queue","title":"tcp_repair_queue","text":"<p>[Source]</p> <pre><code>fun box tcp_repair_queue()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1171","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_rxt_conndroptime","title":"tcp_rxt_conndroptime","text":"<p>[Source]</p> <pre><code>fun box tcp_rxt_conndroptime()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1172","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_rxt_findrop","title":"tcp_rxt_findrop","text":"<p>[Source]</p> <pre><code>fun box tcp_rxt_findrop()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1173","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_saved_syn","title":"tcp_saved_syn","text":"<p>[Source]</p> <pre><code>fun box tcp_saved_syn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1174","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_save_syn","title":"tcp_save_syn","text":"<p>[Source]</p> <pre><code>fun box tcp_save_syn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1175","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_sendmoreacks","title":"tcp_sendmoreacks","text":"<p>[Source]</p> <pre><code>fun box tcp_sendmoreacks()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1176","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_syncnt","title":"tcp_syncnt","text":"<p>[Source]</p> <pre><code>fun box tcp_syncnt()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1177","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_s_data_in","title":"tcp_s_data_in","text":"<p>[Source]</p> <pre><code>fun box tcp_s_data_in()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1178","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_s_data_out","title":"tcp_s_data_out","text":"<p>[Source]</p> <pre><code>fun box tcp_s_data_out()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1179","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_thin_dupack","title":"tcp_thin_dupack","text":"<p>[Source]</p> <pre><code>fun box tcp_thin_dupack()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1180","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_thin_linear_timeouts","title":"tcp_thin_linear_timeouts","text":"<p>[Source]</p> <pre><code>fun box tcp_thin_linear_timeouts()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1181","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_timestamp","title":"tcp_timestamp","text":"<p>[Source]</p> <pre><code>fun box tcp_timestamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1182","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_user_timeout","title":"tcp_user_timeout","text":"<p>[Source]</p> <pre><code>fun box tcp_user_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1183","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_vendor","title":"tcp_vendor","text":"<p>[Source]</p> <pre><code>fun box tcp_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1184","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tcp_window_clamp","title":"tcp_window_clamp","text":"<p>[Source]</p> <pre><code>fun box tcp_window_clamp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1185","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_id","title":"tipc_addr_id","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_id()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1186","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_mcast","title":"tipc_addr_mcast","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_mcast()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1187","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_name","title":"tipc_addr_name","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1188","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_addr_nameseq","title":"tipc_addr_nameseq","text":"<p>[Source]</p> <pre><code>fun box tipc_addr_nameseq()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1189","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_cfg_srv","title":"tipc_cfg_srv","text":"<p>[Source]</p> <pre><code>fun box tipc_cfg_srv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1190","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_cluster_scope","title":"tipc_cluster_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_cluster_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1191","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_conn_shutdown","title":"tipc_conn_shutdown","text":"<p>[Source]</p> <pre><code>fun box tipc_conn_shutdown()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1192","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_conn_timeout","title":"tipc_conn_timeout","text":"<p>[Source]</p> <pre><code>fun box tipc_conn_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1193","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_critical_importance","title":"tipc_critical_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_critical_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1194","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_destname","title":"tipc_destname","text":"<p>[Source]</p> <pre><code>fun box tipc_destname()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1195","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_dest_droppable","title":"tipc_dest_droppable","text":"<p>[Source]</p> <pre><code>fun box tipc_dest_droppable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1196","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_errinfo","title":"tipc_errinfo","text":"<p>[Source]</p> <pre><code>fun box tipc_errinfo()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1197","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_name","title":"tipc_err_no_name","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1198","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_node","title":"tipc_err_no_node","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_node()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1199","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_no_port","title":"tipc_err_no_port","text":"<p>[Source]</p> <pre><code>fun box tipc_err_no_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1200","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_err_overload","title":"tipc_err_overload","text":"<p>[Source]</p> <pre><code>fun box tipc_err_overload()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1201","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_high_importance","title":"tipc_high_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_high_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1202","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_importance","title":"tipc_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1203","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_link_state","title":"tipc_link_state","text":"<p>[Source]</p> <pre><code>fun box tipc_link_state()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1204","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_low_importance","title":"tipc_low_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_low_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1205","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_bearer_name","title":"tipc_max_bearer_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_bearer_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1206","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_if_name","title":"tipc_max_if_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_if_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1207","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_link_name","title":"tipc_max_link_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_link_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1208","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_media_name","title":"tipc_max_media_name","text":"<p>[Source]</p> <pre><code>fun box tipc_max_media_name()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1209","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_max_user_msg_size","title":"tipc_max_user_msg_size","text":"<p>[Source]</p> <pre><code>fun box tipc_max_user_msg_size()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1210","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_medium_importance","title":"tipc_medium_importance","text":"<p>[Source]</p> <pre><code>fun box tipc_medium_importance()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1211","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_node_recvq_depth","title":"tipc_node_recvq_depth","text":"<p>[Source]</p> <pre><code>fun box tipc_node_recvq_depth()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1212","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_node_scope","title":"tipc_node_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_node_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1213","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_ok","title":"tipc_ok","text":"<p>[Source]</p> <pre><code>fun box tipc_ok()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1214","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_published","title":"tipc_published","text":"<p>[Source]</p> <pre><code>fun box tipc_published()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1215","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_reserved_types","title":"tipc_reserved_types","text":"<p>[Source]</p> <pre><code>fun box tipc_reserved_types()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1216","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_retdata","title":"tipc_retdata","text":"<p>[Source]</p> <pre><code>fun box tipc_retdata()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1217","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sock_recvq_depth","title":"tipc_sock_recvq_depth","text":"<p>[Source]</p> <pre><code>fun box tipc_sock_recvq_depth()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1218","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_src_droppable","title":"tipc_src_droppable","text":"<p>[Source]</p> <pre><code>fun box tipc_src_droppable()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1219","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_subscr_timeout","title":"tipc_subscr_timeout","text":"<p>[Source]</p> <pre><code>fun box tipc_subscr_timeout()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1220","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_cancel","title":"tipc_sub_cancel","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_cancel()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1221","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_ports","title":"tipc_sub_ports","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_ports()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1222","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_sub_service","title":"tipc_sub_service","text":"<p>[Source]</p> <pre><code>fun box tipc_sub_service()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1223","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_top_srv","title":"tipc_top_srv","text":"<p>[Source]</p> <pre><code>fun box tipc_top_srv()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1224","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_wait_forever","title":"tipc_wait_forever","text":"<p>[Source]</p> <pre><code>fun box tipc_wait_forever()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1225","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_withdrawn","title":"tipc_withdrawn","text":"<p>[Source]</p> <pre><code>fun box tipc_withdrawn()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1226","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#tipc_zone_scope","title":"tipc_zone_scope","text":"<p>[Source]</p> <pre><code>fun box tipc_zone_scope()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1227","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#ttcp_client_snd_wnd","title":"ttcp_client_snd_wnd","text":"<p>[Source]</p> <pre><code>fun box ttcp_client_snd_wnd()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1228","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_cork","title":"udp_cork","text":"<p>[Source]</p> <pre><code>fun box udp_cork()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1229","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap","title":"udp_encap","text":"<p>[Source]</p> <pre><code>fun box udp_encap()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1230","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp","title":"udp_encap_espinudp","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1231","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_maxfraglen","title":"udp_encap_espinudp_maxfraglen","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_maxfraglen()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1232","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_non_ike","title":"udp_encap_espinudp_non_ike","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_non_ike()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1233","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_espinudp_port","title":"udp_encap_espinudp_port","text":"<p>[Source]</p> <pre><code>fun box udp_encap_espinudp_port()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1234","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_encap_l2tpinudp","title":"udp_encap_l2tpinudp","text":"<p>[Source]</p> <pre><code>fun box udp_encap_l2tpinudp()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1235","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_nocksum","title":"udp_nocksum","text":"<p>[Source]</p> <pre><code>fun box udp_nocksum()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1236","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_no_check6_rx","title":"udp_no_check6_rx","text":"<p>[Source]</p> <pre><code>fun box udp_no_check6_rx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1237","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_no_check6_tx","title":"udp_no_check6_tx","text":"<p>[Source]</p> <pre><code>fun box udp_no_check6_tx()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1238","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#udp_vendor","title":"udp_vendor","text":"<p>[Source]</p> <pre><code>fun box udp_vendor()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1239","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo_old","title":"so_rcvtimeo_old","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo_old()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1240","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_rcvtimeo_new","title":"so_rcvtimeo_new","text":"<p>[Source]</p> <pre><code>fun box so_rcvtimeo_new()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1241","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo_old","title":"so_sndtimeo_old","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo_old()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1242","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#so_sndtimeo_new","title":"so_sndtimeo_new","text":"<p>[Source]</p> <pre><code>fun box so_sndtimeo_new()\n: I32 val\n</code></pre>"},{"location":"net-OSSockOpt/#returns_1243","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"net-OSSockOpt/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: OSSockOpt val)\n: Bool val\n</code></pre>"},{"location":"net-OSSockOpt/#parameters","title":"Parameters","text":"<ul> <li>that: OSSockOpt val</li> </ul>"},{"location":"net-OSSockOpt/#returns_1244","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-OSSockOpt/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: OSSockOpt val)\n: Bool val\n</code></pre>"},{"location":"net-OSSockOpt/#parameters_1","title":"Parameters","text":"<ul> <li>that: OSSockOpt val</li> </ul>"},{"location":"net-OSSockOpt/#returns_1245","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-Proxy/","title":"Proxy","text":"<p>[Source] <pre><code>interface ref Proxy\n</code></pre></p>"},{"location":"net-Proxy/#public-functions","title":"Public Functions","text":""},{"location":"net-Proxy/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nwrap: TCPConnectionNotify iso)\n: TCPConnectionNotify iso^\n</code></pre>"},{"location":"net-Proxy/#parameters","title":"Parameters","text":"<ul> <li>wrap: TCPConnectionNotify iso</li> </ul>"},{"location":"net-Proxy/#returns","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^</li> </ul>"},{"location":"net-TCPAuth/","title":"TCPAuth","text":"<p>[Source] <pre><code>primitive val TCPAuth\n</code></pre></p>"},{"location":"net-TCPAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: (AmbientAuth val | NetAuth val))\n: TCPAuth val^\n</code></pre>"},{"location":"net-TCPAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-TCPAuth/#returns","title":"Returns","text":"<ul> <li>TCPAuth val^</li> </ul>"},{"location":"net-TCPAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TCPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPAuth val</li> </ul>"},{"location":"net-TCPAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TCPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPAuth val</li> </ul>"},{"location":"net-TCPAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectAuth/","title":"TCPConnectAuth","text":"<p>[Source] <pre><code>primitive val TCPConnectAuth\n</code></pre></p>"},{"location":"net-TCPConnectAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPConnectAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val | TCPAuth val)</li> </ul>"},{"location":"net-TCPConnectAuth/#returns","title":"Returns","text":"<ul> <li>TCPConnectAuth val^</li> </ul>"},{"location":"net-TCPConnectAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnectAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TCPConnectAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPConnectAuth val</li> </ul>"},{"location":"net-TCPConnectAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TCPConnectAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPConnectAuth val</li> </ul>"},{"location":"net-TCPConnectAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnection/","title":"TCPConnection","text":"<p>[Source]</p> <p>A TCP connection. When connecting, the Happy Eyeballs algorithm is used.</p> <p>The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints.</p> <pre><code>use \"net\"\nclass MyTCPConnectionNotify is TCPConnectionNotify\nlet _out: OutStream\nnew create(out: OutStream) =&gt;\n_out = out\nfun ref connected(conn: TCPConnection ref) =&gt;\nconn.write(\"hello world\")\nfun ref received(\nconn: TCPConnection ref,\ndata: Array[U8] iso,\ntimes: USize)\n: Bool\n=&gt;\n_out.print(\"GOT:\" + String.from_array(consume data))\nconn.close()\ntrue\nfun ref connect_failed(conn: TCPConnection ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\nTCPConnection(TCPConnectAuth(env.root),\nrecover MyTCPConnectionNotify(env.out) end, \"\", \"8989\")\n</code></pre> <p>Note: when writing to the connection data will be silently discarded if the connection has not yet been established.</p>"},{"location":"net-TCPConnection/#backpressure-support","title":"Backpressure support","text":""},{"location":"net-TCPConnection/#write","title":"Write","text":"<p>The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In <code>TCPConnection</code>, this is hidden from the programmer. When this occurs, <code>TCPConnection</code> will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, <code>TCPConnectionNotify</code> implements two methods <code>throttled</code> and <code>unthrottled</code> that are called when backpressure is applied and released.</p> <p>Upon receiving a <code>throttled</code> notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like:</p> <pre><code>// Here we have a TCPConnectionNotify that upon construction\n// is given a ApplyReleaseBackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\nuse \"backpressure\"\nuse \"collections\"\nuse \"net\"\nclass SlowDown is TCPConnectionNotify\nlet _auth: ApplyReleaseBackpressureAuth\nlet _out: OutStream\nnew iso create(auth: ApplyReleaseBackpressureAuth, out: OutStream) =&gt;\n_auth = auth\n_out = out\nfun ref throttled(connection: TCPConnection ref) =&gt;\n_out.print(\"Experiencing backpressure!\")\nBackpressure.apply(_auth)\nfun ref unthrottled(connection: TCPConnection ref) =&gt;\n_out.print(\"Releasing backpressure!\")\nBackpressure.release(_auth)\nfun ref closed(connection: TCPConnection ref) =&gt;\n// if backpressure has been applied, make sure we release\n// when shutting down\n_out.print(\"Releasing backpressure if applied!\")\nBackpressure.release(_auth)\nfun ref connect_failed(conn: TCPConnection ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\nlet c_auth = TCPConnectAuth(env.root)\nlet bp_auth = ApplyReleaseBackpressureAuth(env.root)\nlet socket = TCPConnection(c_auth,\nrecover SlowDown(bp_auth, env.out) end, \"\", \"7669\")\n</code></pre> <p>Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like:</p> <pre><code>use \"net\"\nclass ThrowItAway is TCPConnectionNotify\nvar _throttled: Bool = false\nfun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =&gt;\nif not _throttled then\ndata\nelse\n\"\"\nend\nfun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =&gt;\nif not _throttled then\ndata\nelse\nrecover Array[String] end\nend\nfun ref throttled(connection: TCPConnection ref) =&gt;\n_throttled = true\nfun ref unthrottled(connection: TCPConnection ref) =&gt;\n_throttled = false\nfun ref connect_failed(conn: TCPConnection ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\nTCPConnection(TCPConnectAuth(env.root),\nrecover ThrowItAway end, \"\", \"7669\")\n</code></pre> <p>In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data.</p>"},{"location":"net-TCPConnection/#read","title":"Read","text":"<p>If your application is unable to keep up with data being sent to it over a <code>TCPConnection</code> you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket.</p> <p>The <code>mute</code> behavior allow any other actors in your application to request the cessation of additional reads until such time as <code>unmute</code> is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the <code>TCPConnection</code>'s mailbox to be handled.</p> <p>On non-windows platforms, your <code>TCPConnection</code> will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call <code>unmute</code> on a muted connection to have it close. Without calling <code>unmute</code> the <code>TCPConnection</code> actor will never exit.</p>"},{"location":"net-TCPConnection/#proxy-support","title":"Proxy support","text":"<p>Using the <code>proxy_via</code> callback in a <code>TCPConnectionNotify</code> it is possible to implement proxies. The function takes the intended destination host and service as parameters and returns a 2-tuple of the proxy host and service.</p> <p>The proxy <code>TCPConnectionNotify</code> should decorate another implementation of <code>TCPConnectionNotify</code> passing relevent data through.</p>"},{"location":"net-TCPConnection/#example-proxy-implementation","title":"Example proxy implementation","text":"<pre><code>actor Main\nnew create(env: Env) =&gt;\nMyClient.create(\n\"example.com\", // we actually want to connect to this host\n\"80\",\nExampleProxy.create(\"proxy.example.com\", \"80\")) // we connect via this proxy\nactor MyClient\nnew create(host: String, service: String, proxy: Proxy = NoProxy) =&gt;\nlet conn: TCPConnection = TCPConnection.create(\nTCPConnectAuth(env.root),\nproxy.apply(MyConnectionNotify.create()),\nhost,\nservice)\nclass ExampleProxy is Proxy\nlet _proxy_host: String\nlet _proxy_service: String\nnew create(proxy_host: String, proxy_service: String) =&gt;\n_proxy_host = proxy_host\n_proxy_service = proxy_service\nfun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ =&gt;\nExampleProxyNotify.create(consume wrap, _proxy_service, _proxy_service)\nclass iso ExampleProxyNotify is TCPConnectionNotify\n// Fictional proxy implementation that has no error\n// conditions, and always forwards the connection.\nlet _proxy_host: String\nlet _proxy_service: String\nvar _destination_host: (None | String) = None\nvar _destination_service: (None | String) = None\nlet _wrapped: TCPConnectionNotify iso\nnew iso create(wrap: TCPConnectionNotify iso, proxy_host: String, proxy_service: String) =&gt;\n_wrapped = wrap\n_proxy_host = proxy_host\n_proxy_service = proxy_service\nfun ref proxy_via(host: String, service: String): (String, String) =&gt;\n// Stash the original host &amp; service; return the host &amp; service\n// for the proxy; indicating that the initial TCP connection should\n// be made to the proxy\n_destination_host = host\n_destination_service = service\n(_proxy_host, _proxy_service)\nfun ref connected(conn: TCPConnection ref) =&gt;\n// conn is the connection to the *proxy* server. We need to ask the\n// proxy server to forward this connection to our intended final\n// destination.\nconn.write((_destination_host + \"\\n\").array())\nconn.write((_destination_service + \"\\n\").array())\nwrapped.connected(conn)\nfun ref received(conn, data, times) =&gt; _wrapped.received(conn, data, times)\nfun ref connect_failed(conn: TCPConnection ref) =&gt; None\n</code></pre> <pre><code>actor tag TCPConnection is\nAsioEventNotify tag\n</code></pre>"},{"location":"net-TCPConnection/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-TCPConnection/#constructors","title":"Constructors","text":""},{"location":"net-TCPConnection/#create","title":"create","text":"<p>[Source]</p> <p>Connect via IPv4 or IPv6. If <code>from</code> is a non-empty string, the connection will be made from the specified interface.</p> <pre><code>new tag create(\nauth: TCPConnectAuth val,\nnotify: TCPConnectionNotify iso,\nhost: String val,\nservice: String val,\nfrom: String val = \"\",\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Connect via IPv4.</p> <pre><code>new tag ip4(\nauth: TCPConnectAuth val,\nnotify: TCPConnectionNotify iso,\nhost: String val,\nservice: String val,\nfrom: String val = \"\",\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters_1","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns_1","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Connect via IPv6.</p> <pre><code>new tag ip6(\nauth: TCPConnectAuth val,\nnotify: TCPConnectionNotify iso,\nhost: String val,\nservice: String val,\nfrom: String val = \"\",\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters_2","title":"Parameters","text":"<ul> <li>auth: TCPConnectAuth val</li> <li>notify: TCPConnectionNotify iso</li> <li>host: String val</li> <li>service: String val</li> <li>from: String val = \"\"</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns_2","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#_accept","title":"_accept","text":"<p>[Source]</p> <p>A new connection accepted on a server.</p> <pre><code>new tag _accept(\nlisten: TCPListener tag,\nnotify: TCPConnectionNotify iso,\nfd: U32 val,\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPConnection tag^\n</code></pre>"},{"location":"net-TCPConnection/#parameters_3","title":"Parameters","text":"<ul> <li>listen: TCPListener tag</li> <li>notify: TCPConnectionNotify iso</li> <li>fd: U32 val</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPConnection/#returns_3","title":"Returns","text":"<ul> <li>TCPConnection tag^</li> </ul>"},{"location":"net-TCPConnection/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-TCPConnection/#write_1","title":"write","text":"<p>[Source]</p> <p>Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>be write(\ndata: (String val | Array[U8 val] val))\n</code></pre>"},{"location":"net-TCPConnection/#parameters_4","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnection/#writev","title":"writev","text":"<p>[Source]</p> <p>Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>be writev(\ndata: ByteSeqIter val)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_5","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnection/#mute","title":"mute","text":"<p>[Source]</p> <p>Temporarily suspend reading off this TCPConnection until such time as <code>unmute</code> is called.</p> <pre><code>be mute()\n</code></pre>"},{"location":"net-TCPConnection/#unmute","title":"unmute","text":"<p>[Source]</p> <p>Start reading off this TCPConnection again after having been muted.</p> <pre><code>be unmute()\n</code></pre>"},{"location":"net-TCPConnection/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\nnotify: TCPConnectionNotify iso)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_6","title":"Parameters","text":"<ul> <li>notify: TCPConnectionNotify iso</li> </ul>"},{"location":"net-TCPConnection/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Close the connection gracefully once all writes are sent.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-TCPConnection/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnection/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the local IP address. If this TCPConnection is closed then the address returned is invalid.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPConnection/#returns_4","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPConnection/#remote_address","title":"remote_address","text":"<p>[Source]</p> <p>Return the remote IP address. If this TCPConnection is closed then the address returned is invalid.</p> <pre><code>fun box remote_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPConnection/#returns_5","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPConnection/#expect","title":"expect","text":"<p>[Source]</p> <p>A <code>received</code> call on the notifier must contain exactly <code>qty</code> bytes. If <code>qty</code> is zero, the call can contain any amount of data. This has no effect if called in the <code>sent</code> notifier callback.</p> <p>Errors if <code>qty</code> exceeds the max buffer size as indicated by the <code>read_buffer_size</code> supplied when the connection was created.</p> <pre><code>fun ref expect(\nqty: USize val = 0)\n: None val ?\n</code></pre>"},{"location":"net-TCPConnection/#parameters_7","title":"Parameters","text":"<ul> <li>qty: USize val = 0</li> </ul>"},{"location":"net-TCPConnection/#returns_6","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"net-TCPConnection/#set_nodelay","title":"set_nodelay","text":"<p>[Source]</p> <p>Turn Nagle on/off. Defaults to on. This can only be set on a connected socket.</p> <pre><code>fun ref set_nodelay(\nstate: Bool val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_8","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-TCPConnection/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#set_keepalive","title":"set_keepalive","text":"<p>[Source]</p> <p>Sets the TCP keepalive timeout to approximately <code>secs</code> seconds. Exact timing is OS dependent. If <code>secs</code> is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket.</p> <pre><code>fun ref set_keepalive(\nsecs: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_9","title":"Parameters","text":"<ul> <li>secs: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#write_final","title":"write_final","text":"<p>[Source]</p> <p>Write as much as possible to the socket. Set <code>_writeable</code> to <code>false</code> if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though.</p> <pre><code>fun ref write_final(\ndata: (String val | Array[U8 val] val))\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_10","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnection/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#close","title":"close","text":"<p>[Source]</p> <p>Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately.</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#hard_close","title":"hard_close","text":"<p>[Source]</p> <p>When an error happens, do a non-graceful close.</p> <pre><code>fun ref hard_close()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>getsockopt(2)</code> system call.</p> <p>The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <p>Usage example:</p> <pre><code>// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =&gt;\nmatch conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n| (0, let gbytes: Array[U8] iso) =&gt;\ntry\nlet br = Reader.create().&gt;append(consume gbytes)\nifdef littleendian then\nlet buffer_size = br.u32_le()?\nelse\nlet buffer_size = br.u32_be()?\nend\nend\n| (let errno: U32, _) =&gt;\n// System call failed\nend\n</code></pre> <pre><code>fun ref getsockopt(\nlevel: I32 val,\noption_name: I32 val,\noption_max_size: USize val = 4)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_11","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val = 4</li> </ul>"},{"location":"net-TCPConnection/#returns_12","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-TCPConnection/#getsockopt_u32","title":"getsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for TCP sockets to the <code>getsockopt(2)</code> system call where the kernel's returned option value is a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. The <code>*option_value</code> returned by the kernel converted to a Pony <code>U32</code>.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun ref getsockopt_u32(\nlevel: I32 val,\noption_name: I32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_12","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_13","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>setsockopt(2)</code> system call.</p> <p>The caller is responsible for the correct size and byte contents of the <code>option</code> array for the requested <code>level</code> and <code>option_name</code>, including using the appropriate machine endian byte order.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <p>Usage example:</p> <pre><code>// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =&gt;\nlet sb = Writer\nsb.u32_le(7744)             // Our desired socket buffer size\nlet sbytes = Array[U8]\nfor bs in sb.done().values() do\nsbytes.append(bs)\nend\nmatch conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n| 0 =&gt;\n// System call was successful\n| let errno: U32 =&gt;\n// System call failed\nend\n</code></pre> <pre><code>fun ref setsockopt(\nlevel: I32 val,\noption_name: I32 val,\noption: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_13","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-TCPConnection/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#setsockopt_u32","title":"setsockopt_u32","text":"<p>[Source]</p> <p>General wrapper for TCP sockets to the <code>setsockopt(2)</code> system call where the kernel expects an option value of a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun ref setsockopt_u32(\nlevel: I32 val,\noption_name: I32 val,\noption: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_14","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#get_so_error","title":"get_so_error","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)</code></p> <pre><code>fun ref get_so_error()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_16","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_so_rcvbuf","title":"get_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_17","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_so_sndbuf","title":"get_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref get_so_sndbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_18","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#get_tcp_nodelay","title":"get_tcp_nodelay","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)</code></p> <pre><code>fun ref get_tcp_nodelay()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#returns_19","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-TCPConnection/#set_so_rcvbuf","title":"set_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref set_so_rcvbuf(\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_15","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_20","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#set_so_sndbuf","title":"set_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref set_so_sndbuf(\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_16","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_21","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#set_tcp_nodelay","title":"set_tcp_nodelay","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)</code></p> <pre><code>fun ref set_tcp_nodelay(\nstate: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_17","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-TCPConnection/#returns_22","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-TCPConnection/#private-behaviours","title":"Private Behaviours","text":""},{"location":"net-TCPConnection/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>Handle socket events.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"net-TCPConnection/#parameters_18","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"net-TCPConnection/#_read_again","title":"_read_again","text":"<p>[Source]</p> <p>Resume reading.</p> <pre><code>be _read_again()\n</code></pre>"},{"location":"net-TCPConnection/#_write_again","title":"_write_again","text":"<p>[Source]</p> <p>Resume writing.</p> <pre><code>be _write_again()\n</code></pre>"},{"location":"net-TCPConnection/#private-functions","title":"Private Functions","text":""},{"location":"net-TCPConnection/#_complete_writes","title":"_complete_writes","text":"<p>[Source]</p> <p>The OS has informed us that <code>len</code> bytes of pending writes have completed. This occurs only with IOCP on Windows.</p> <pre><code>fun ref _complete_writes(\nlen: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_19","title":"Parameters","text":"<ul> <li>len: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_pending_writes","title":"_pending_writes","text":"<p>[Source]</p> <p>Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not.</p> <pre><code>fun ref _pending_writes()\n: Bool val\n</code></pre>"},{"location":"net-TCPConnection/#returns_24","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnection/#_manage_pending_buffer","title":"_manage_pending_buffer","text":"<p>[Source]</p> <p>Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not.</p> <pre><code>fun ref _manage_pending_buffer(\nbytes_sent: USize val,\nbytes_to_send: USize val,\nnum_to_send: USize val)\n: Bool val ?\n</code></pre>"},{"location":"net-TCPConnection/#parameters_20","title":"Parameters","text":"<ul> <li>bytes_sent: USize val</li> <li>bytes_to_send: USize val</li> <li>num_to_send: USize val</li> </ul>"},{"location":"net-TCPConnection/#returns_25","title":"Returns","text":"<ul> <li>Bool val ?</li> </ul>"},{"location":"net-TCPConnection/#_complete_reads","title":"_complete_reads","text":"<p>[Source]</p> <p>The OS has informed us that <code>len</code> bytes of pending reads have completed. This occurs only with IOCP on Windows.</p> <pre><code>fun ref _complete_reads(\nlen: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_21","title":"Parameters","text":"<ul> <li>len: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_26","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_read_buf_size","title":"_read_buf_size","text":"<p>[Source]</p> <p>Resize the read buffer if it is empty or smaller than the next payload size</p> <pre><code>fun ref _read_buf_size()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_27","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_queue_read","title":"_queue_read","text":"<p>[Source]</p> <p>Begin an IOCP read on Windows.</p> <pre><code>fun ref _queue_read()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_28","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_pending_reads","title":"_pending_reads","text":"<p>[Source]</p> <p>Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 5 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. Currently we can handle a varying value of _expect (greater than 0) and constant _expect of 0 but we cannot handle switching between these two cases.</p> <pre><code>fun ref _pending_reads()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_29","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_notify_connecting","title":"_notify_connecting","text":"<p>[Source]</p> <p>Inform the notifier that we're connecting.</p> <pre><code>fun ref _notify_connecting()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_30","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_close","title":"_close","text":"<p>[Source]</p> <pre><code>fun ref _close()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_31","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_try_shutdown","title":"_try_shutdown","text":"<p>[Source]</p> <p>If we have closed and we have no remaining writes or pending connections, then shutdown.</p> <pre><code>fun ref _try_shutdown()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_32","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_is_sock_connected","title":"_is_sock_connected","text":"<p>[Source]</p> <pre><code>fun box _is_sock_connected(\nfd: U32 val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnection/#parameters_22","title":"Parameters","text":"<ul> <li>fd: U32 val</li> </ul>"},{"location":"net-TCPConnection/#returns_33","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnection/#_apply_backpressure","title":"_apply_backpressure","text":"<p>[Source]</p> <pre><code>fun ref _apply_backpressure()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_34","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnection/#_release_backpressure","title":"_release_backpressure","text":"<p>[Source]</p> <pre><code>fun ref _release_backpressure()\n: None val\n</code></pre>"},{"location":"net-TCPConnection/#returns_35","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/","title":"TCPConnectionNotify","text":"<p>[Source]</p> <p>Notifications for TCP connections.</p> <p>For an example of using this class please see the documentation for the <code>TCPConnection</code> and <code>TCPListener</code> actors.</p> <pre><code>interface ref TCPConnectionNotify\n</code></pre>"},{"location":"net-TCPConnectionNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPConnectionNotify/#accepted","title":"accepted","text":"<p>[Source]</p> <p>Called when a TCPConnection is accepted by a TCPListener.</p> <pre><code>fun ref accepted(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#proxy_via","title":"proxy_via","text":"<p>[Source]</p> <p>Called before before attempting to connect to the destination server In order to connect via proxy, return the host &amp; service for the proxy server.</p> <p>An implementation of this function might look like: <pre><code>let _proxy_host = \"some-proxy.example.com\"\nlet _proxy_service = \"80\"\nvar _destination_host: ( None | String )\nvar _destination_service: ( None | String )\nfun ref proxy_via(host: String, service: String): (String, String) =&gt;\n_destination_host = host\n_destination_service = service\n( _proxy_host, _proxy_service )\n</code></pre></p> <pre><code>fun ref proxy_via(\nhost: String val,\nservice: String val)\n: (String val , String val)\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_1","title":"Parameters","text":"<ul> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_1","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#connecting","title":"connecting","text":"<p>[Source]</p> <p>Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called.</p> <pre><code>fun ref connecting(\nconn: TCPConnection ref,\ncount: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_2","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>count: U32 val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#connected","title":"connected","text":"<p>[Source]</p> <p>Called when we have successfully connected to the server.</p> <pre><code>fun ref connected(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_3","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <p>Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref connect_failed(conn: TCPConnection ref) =&gt;\nNone\n</code></pre> <pre><code>fun ref connect_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_4","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#auth_failed","title":"auth_failed","text":"<p>[Source]</p> <p>A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL).</p> <pre><code>fun ref auth_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_5","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#sent","title":"sent","text":"<p>[Source]</p> <p>Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string.</p> <pre><code>fun ref sent(\nconn: TCPConnection ref,\ndata: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_6","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_6","title":"Returns","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"net-TCPConnectionNotify/#sentv","title":"sentv","text":"<p>[Source]</p> <p>Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String].</p> <pre><code>fun ref sentv(\nconn: TCPConnection ref,\ndata: ByteSeqIter val)\n: ByteSeqIter val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_7","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_7","title":"Returns","text":"<ul> <li>ByteSeqIter val</li> </ul>"},{"location":"net-TCPConnectionNotify/#received","title":"received","text":"<p>[Source]</p> <p>Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now.</p> <p>Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis.</p> <pre><code>fun ref received(\nconn: TCPConnection ref,\ndata: Array[U8 val] iso,\ntimes: USize val)\n: Bool val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_8","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: Array[U8 val] iso</li> <li>times: USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPConnectionNotify/#expect","title":"expect","text":"<p>[Source]</p> <p>Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL).</p> <pre><code>fun ref expect(\nconn: TCPConnection ref,\nqty: USize val)\n: USize val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_9","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>qty: USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"net-TCPConnectionNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the connection is closed.</p> <pre><code>fun ref closed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_10","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#throttled","title":"throttled","text":"<p>[Source]</p> <p>Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to <code>write</code> and <code>writev</code> until you are informed that pressure has been released. Failure to respond to the <code>throttled</code> notification will result in outgoing data queuing in the connection and increasing memory usage.</p> <pre><code>fun ref throttled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_11","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPConnectionNotify/#unthrottled","title":"unthrottled","text":"<p>[Source]</p> <p>Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to <code>write</code> and <code>writev</code> again.</p> <pre><code>fun ref unthrottled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"net-TCPConnectionNotify/#parameters_12","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"net-TCPConnectionNotify/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenAuth/","title":"TCPListenAuth","text":"<p>[Source] <pre><code>primitive val TCPListenAuth\n</code></pre></p>"},{"location":"net-TCPListenAuth/#constructors","title":"Constructors","text":""},{"location":"net-TCPListenAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val | TCPAuth val)</li> </ul>"},{"location":"net-TCPListenAuth/#returns","title":"Returns","text":"<ul> <li>TCPListenAuth val^</li> </ul>"},{"location":"net-TCPListenAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListenAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TCPListenAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: TCPListenAuth val</li> </ul>"},{"location":"net-TCPListenAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPListenAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TCPListenAuth val)\n: Bool val\n</code></pre>"},{"location":"net-TCPListenAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: TCPListenAuth val</li> </ul>"},{"location":"net-TCPListenAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-TCPListenNotify/","title":"TCPListenNotify","text":"<p>[Source]</p> <p>Notifications for TCP listeners.</p> <p>For an example of using this class, please see the documentation for the <code>TCPListener</code> actor.</p> <pre><code>interface ref TCPListenNotify\n</code></pre>"},{"location":"net-TCPListenNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListenNotify/#listening","title":"listening","text":"<p>[Source]</p> <p>Called when the listener has been bound to an address.</p> <pre><code>fun ref listening(\nlisten: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#not_listening","title":"not_listening","text":"<p>[Source]</p> <p>Called if it wasn't possible to bind the listener to an address.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref not_listening(listen: TCPListener ref) =&gt;\nNone\n</code></pre> <pre><code>fun ref not_listening(\nlisten: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_1","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the listener is closed.</p> <pre><code>fun ref closed(\nlisten: TCPListener ref)\n: None val\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_2","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListenNotify/#connected","title":"connected","text":"<p>[Source]</p> <p>Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server.</p> <pre><code>fun ref connected(\nlisten: TCPListener ref)\n: TCPConnectionNotify iso^ ?\n</code></pre>"},{"location":"net-TCPListenNotify/#parameters_3","title":"Parameters","text":"<ul> <li>listen: TCPListener ref</li> </ul>"},{"location":"net-TCPListenNotify/#returns_3","title":"Returns","text":"<ul> <li>TCPConnectionNotify iso^ ?</li> </ul>"},{"location":"net-TCPListener/","title":"TCPListener","text":"<p>[Source]</p> <p>Listens for new network connections.</p> <p>The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives.</p> <pre><code>use \"net\"\nclass MyTCPConnectionNotify is TCPConnectionNotify\nfun ref received(\nconn: TCPConnection ref,\ndata: Array[U8] iso,\ntimes: USize)\n: Bool\n=&gt;\nconn.write(String.from_array(consume data))\ntrue\nfun ref connect_failed(conn: TCPConnection ref) =&gt;\nNone\nclass MyTCPListenNotify is TCPListenNotify\nfun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =&gt;\nMyTCPConnectionNotify\nfun ref not_listening(listen: TCPListener ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\nTCPListener(TCPListenAuth(env.root),\nrecover MyTCPListenNotify end, \"\", \"8989\")\n</code></pre> <pre><code>actor tag TCPListener is\nAsioEventNotify tag\n</code></pre>"},{"location":"net-TCPListener/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-TCPListener/#constructors","title":"Constructors","text":""},{"location":"net-TCPListener/#create","title":"create","text":"<p>[Source]</p> <p>Listens for both IPv4 and IPv6 connections.</p> <pre><code>new tag create(\nauth: TCPListenAuth val,\nnotify: TCPListenNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nlimit: USize val = 0,\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Listens for IPv4 connections.</p> <pre><code>new tag ip4(\nauth: TCPListenAuth val,\nnotify: TCPListenNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nlimit: USize val = 0,\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters_1","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns_1","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Listens for IPv6 connections.</p> <pre><code>new tag ip6(\nauth: TCPListenAuth val,\nnotify: TCPListenNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nlimit: USize val = 0,\nread_buffer_size: USize val = 16384,\nyield_after_reading: USize val = 16384,\nyield_after_writing: USize val = 16384)\n: TCPListener tag^\n</code></pre>"},{"location":"net-TCPListener/#parameters_2","title":"Parameters","text":"<ul> <li>auth: TCPListenAuth val</li> <li>notify: TCPListenNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>limit: USize val = 0</li> <li>read_buffer_size: USize val = 16384</li> <li>yield_after_reading: USize val = 16384</li> <li>yield_after_writing: USize val = 16384</li> </ul>"},{"location":"net-TCPListener/#returns_2","title":"Returns","text":"<ul> <li>TCPListener tag^</li> </ul>"},{"location":"net-TCPListener/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-TCPListener/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\nnotify: TCPListenNotify iso)\n</code></pre>"},{"location":"net-TCPListener/#parameters_3","title":"Parameters","text":"<ul> <li>notify: TCPListenNotify iso</li> </ul>"},{"location":"net-TCPListener/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop listening.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-TCPListener/#public-functions","title":"Public Functions","text":""},{"location":"net-TCPListener/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the bound IP address.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-TCPListener/#returns_3","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-TCPListener/#close","title":"close","text":"<p>[Source]</p> <p>Dispose of resources.</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"net-TCPListener/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListener/#private-behaviours","title":"Private Behaviours","text":""},{"location":"net-TCPListener/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>When we are readable, we accept new connections until none remain.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"net-TCPListener/#parameters_4","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"net-TCPListener/#_conn_closed","title":"_conn_closed","text":"<p>[Source]</p> <p>An accepted connection has closed. If we have dropped below the limit, try to accept new connections.</p> <pre><code>be _conn_closed()\n</code></pre>"},{"location":"net-TCPListener/#private-functions","title":"Private Functions","text":""},{"location":"net-TCPListener/#_accept","title":"_accept","text":"<p>[Source]</p> <p>Accept connections as long as we have spawned fewer than our limit.</p> <pre><code>fun ref _accept(\nns: U32 val = 0)\n: None val\n</code></pre>"},{"location":"net-TCPListener/#parameters_5","title":"Parameters","text":"<ul> <li>ns: U32 val = 0</li> </ul>"},{"location":"net-TCPListener/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListener/#_spawn","title":"_spawn","text":"<p>[Source]</p> <p>Spawn a new connection.</p> <pre><code>fun ref _spawn(\nns: U32 val)\n: None val\n</code></pre>"},{"location":"net-TCPListener/#parameters_6","title":"Parameters","text":"<ul> <li>ns: U32 val</li> </ul>"},{"location":"net-TCPListener/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-TCPListener/#_notify_listening","title":"_notify_listening","text":"<p>[Source]</p> <p>Inform the notifier that we're listening.</p> <pre><code>fun ref _notify_listening()\n: None val\n</code></pre>"},{"location":"net-TCPListener/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPAuth/","title":"UDPAuth","text":"<p>[Source] <pre><code>primitive val UDPAuth\n</code></pre></p>"},{"location":"net-UDPAuth/#constructors","title":"Constructors","text":""},{"location":"net-UDPAuth/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nfrom: (AmbientAuth val | NetAuth val))\n: UDPAuth val^\n</code></pre>"},{"location":"net-UDPAuth/#parameters","title":"Parameters","text":"<ul> <li>from: (AmbientAuth val | NetAuth val)</li> </ul>"},{"location":"net-UDPAuth/#returns","title":"Returns","text":"<ul> <li>UDPAuth val^</li> </ul>"},{"location":"net-UDPAuth/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPAuth/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UDPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-UDPAuth/#parameters_1","title":"Parameters","text":"<ul> <li>that: UDPAuth val</li> </ul>"},{"location":"net-UDPAuth/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-UDPAuth/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UDPAuth val)\n: Bool val\n</code></pre>"},{"location":"net-UDPAuth/#parameters_2","title":"Parameters","text":"<ul> <li>that: UDPAuth val</li> </ul>"},{"location":"net-UDPAuth/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-UDPNotify/","title":"UDPNotify","text":"<p>[Source]</p> <p>Notifications for UDP connections.</p> <p>For an example of using this class please see the documentatoin for the <code>UDPSocket</code> actor.</p> <pre><code>interface ref UDPNotify\n</code></pre>"},{"location":"net-UDPNotify/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPNotify/#listening","title":"listening","text":"<p>[Source]</p> <p>Called when the socket has been bound to an address.</p> <pre><code>fun ref listening(\nsock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#not_listening","title":"not_listening","text":"<p>[Source]</p> <p>Called if it wasn't possible to bind the socket to an address.</p> <p>It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this:</p> <pre><code>fun ref not_listening(sock: UDPSocket ref) =&gt;\nNone\n</code></pre> <pre><code>fun ref not_listening(\nsock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_1","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#received","title":"received","text":"<p>[Source]</p> <p>Called when new data is received on the socket.</p> <pre><code>fun ref received(\nsock: UDPSocket ref,\ndata: Array[U8 val] iso,\nfrom: NetAddress val)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_2","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> <li>data: Array[U8 val] iso</li> <li>from: NetAddress val</li> </ul>"},{"location":"net-UDPNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPNotify/#closed","title":"closed","text":"<p>[Source]</p> <p>Called when the socket is closed.</p> <pre><code>fun ref closed(\nsock: UDPSocket ref)\n: None val\n</code></pre>"},{"location":"net-UDPNotify/#parameters_3","title":"Parameters","text":"<ul> <li>sock: UDPSocket ref</li> </ul>"},{"location":"net-UDPNotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/","title":"UDPSocket","text":"<p>[Source]</p> <p>Creates a UDP socket that can be used for sending and receiving UDP messages.</p> <p>The following examples create:</p> <ul> <li>an echo server that listens for connections and returns whatever message it   receives</li> <li>a client that connects to the server, sends a message, and prints the   message it receives in response</li> </ul> <p>The server is implemented like this:</p> <pre><code>use \"net\"\nclass MyUDPNotify is UDPNotify\nfun ref received(\nsock: UDPSocket ref,\ndata: Array[U8] iso,\nfrom: NetAddress)\n=&gt;\nsock.write(consume data, from)\nfun ref not_listening(sock: UDPSocket ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\nUDPSocket(UDPAuth(env.root),\nMyUDPNotify, \"\", \"8989\")\n</code></pre> <p>The client is implemented like this:</p> <pre><code>use \"net\"\nclass MyUDPNotify is UDPNotify\nlet _out: OutStream\nlet _destination: NetAddress\nnew create(\nout: OutStream,\ndestination: NetAddress)\n=&gt;\n_out = out\n_destination = destination\nfun ref listening(sock: UDPSocket ref) =&gt;\nsock.write(\"hello world\", _destination)\nfun ref received(\nsock: UDPSocket ref,\ndata: Array[U8] iso,\nfrom: NetAddress)\n=&gt;\n_out.print(\"GOT:\" + String.from_array(consume data))\nsock.dispose()\nfun ref not_listening(sock: UDPSocket ref) =&gt;\nNone\nactor Main\nnew create(env: Env) =&gt;\ntry\nlet destination =\nDNS.ip4(DNSAuth(env.root), \"localhost\", \"8989\")(0)?\nUDPSocket(UDPAuth(env.root),\nrecover MyUDPNotify(env.out, consume destination) end)\nend\n</code></pre> <pre><code>actor tag UDPSocket is\nAsioEventNotify tag\n</code></pre>"},{"location":"net-UDPSocket/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"net-UDPSocket/#constructors","title":"Constructors","text":""},{"location":"net-UDPSocket/#create","title":"create","text":"<p>[Source]</p> <p>Listens for both IPv4 and IPv6 datagrams.</p> <pre><code>new tag create(\nauth: UDPAuth val,\nnotify: UDPNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nsize: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#ip4","title":"ip4","text":"<p>[Source]</p> <p>Listens for IPv4 datagrams.</p> <pre><code>new tag ip4(\nauth: UDPAuth val,\nnotify: UDPNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nsize: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters_1","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns_1","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#ip6","title":"ip6","text":"<p>[Source]</p> <p>Listens for IPv6 datagrams.</p> <pre><code>new tag ip6(\nauth: UDPAuth val,\nnotify: UDPNotify iso,\nhost: String val = \"\",\nservice: String val = \"0\",\nsize: USize val = 1024)\n: UDPSocket tag^\n</code></pre>"},{"location":"net-UDPSocket/#parameters_2","title":"Parameters","text":"<ul> <li>auth: UDPAuth val</li> <li>notify: UDPNotify iso</li> <li>host: String val = \"\"</li> <li>service: String val = \"0\"</li> <li>size: USize val = 1024</li> </ul>"},{"location":"net-UDPSocket/#returns_2","title":"Returns","text":"<ul> <li>UDPSocket tag^</li> </ul>"},{"location":"net-UDPSocket/#public-behaviours","title":"Public Behaviours","text":""},{"location":"net-UDPSocket/#write","title":"write","text":"<p>[Source]</p> <p>Write a single sequence of bytes.</p> <pre><code>be write(\ndata: (String val | Array[U8 val] val),\nto: NetAddress val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_3","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> <li>to: NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#writev","title":"writev","text":"<p>[Source]</p> <p>Write a sequence of sequences of bytes.</p> <pre><code>be writev(\ndata: ByteSeqIter val,\nto: NetAddress val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_4","title":"Parameters","text":"<ul> <li>data: ByteSeqIter val</li> <li>to: NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#set_notify","title":"set_notify","text":"<p>[Source]</p> <p>Change the notifier.</p> <pre><code>be set_notify(\nnotify: UDPNotify iso)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_5","title":"Parameters","text":"<ul> <li>notify: UDPNotify iso</li> </ul>"},{"location":"net-UDPSocket/#set_broadcast","title":"set_broadcast","text":"<p>[Source]</p> <p>Enable or disable broadcasting from this socket.</p> <pre><code>be set_broadcast(\nstate: Bool val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_6","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_interface","title":"set_multicast_interface","text":"<p>[Source]</p> <p>By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string.</p> <pre><code>be set_multicast_interface(\nfrom: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_7","title":"Parameters","text":"<ul> <li>from: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_loopback","title":"set_multicast_loopback","text":"<p>[Source]</p> <p>By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this.</p> <pre><code>be set_multicast_loopback(\nloopback: Bool val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_8","title":"Parameters","text":"<ul> <li>loopback: Bool val</li> </ul>"},{"location":"net-UDPSocket/#set_multicast_ttl","title":"set_multicast_ttl","text":"<p>[Source]</p> <p>Set the TTL for multicast sends. Defaults to 1.</p> <pre><code>be set_multicast_ttl(\nttl: U8 val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_9","title":"Parameters","text":"<ul> <li>ttl: U8 val</li> </ul>"},{"location":"net-UDPSocket/#multicast_join","title":"multicast_join","text":"<p>[Source]</p> <p>Add a multicast group. This can be limited to packets arriving on a specific interface.</p> <pre><code>be multicast_join(\ngroup: String val,\nto: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_10","title":"Parameters","text":"<ul> <li>group: String val</li> <li>to: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#multicast_leave","title":"multicast_leave","text":"<p>[Source]</p> <p>Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group.</p> <pre><code>be multicast_leave(\ngroup: String val,\nto: String val = \"\")\n</code></pre>"},{"location":"net-UDPSocket/#parameters_11","title":"Parameters","text":"<ul> <li>group: String val</li> <li>to: String val = \"\"</li> </ul>"},{"location":"net-UDPSocket/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop listening.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"net-UDPSocket/#public-functions","title":"Public Functions","text":""},{"location":"net-UDPSocket/#local_address","title":"local_address","text":"<p>[Source]</p> <p>Return the bound IP address.</p> <pre><code>fun box local_address()\n: NetAddress val\n</code></pre>"},{"location":"net-UDPSocket/#returns_3","title":"Returns","text":"<ul> <li>NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <p>General wrapper for UDP sockets to the <code>getsockopt(2)</code> system call.</p> <p>The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <p>Usage example:</p> <pre><code>// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =&gt;\nmatch sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n| (0, let gbytes: Array[U8] iso) =&gt;\ntry\nlet br = Reader.create().&gt;append(consume gbytes)\nifdef littleendian then\nlet buffer_size = br.u32_le()?\nelse\nlet buffer_size = br.u32_be()?\nend\nend\n| (let errno: U32, _) =&gt;\n// System call failed\nend\n</code></pre> <pre><code>fun ref getsockopt(\nlevel: I32 val,\noption_name: I32 val,\noption_max_size: USize val = 4)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_12","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val = 4</li> </ul>"},{"location":"net-UDPSocket/#returns_4","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-UDPSocket/#getsockopt_u32","title":"getsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for UDP sockets to the <code>getsockopt(2)</code> system call where the kernel's returned option value is a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. The <code>*option_value</code> returned by the kernel converted to a Pony <code>U32</code>.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun ref getsockopt_u32(\nlevel: I32 val,\noption_name: I32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_13","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_5","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <p>General wrapper for UDP sockets to the <code>setsockopt(2)</code> system call.</p> <p>The caller is responsible for the correct size and byte contents of the <code>option</code> array for the requested <code>level</code> and <code>option_name</code>, including using the appropriate CPU endian byte order.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <p>Usage example:</p> <pre><code>// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =&gt;\nlet sb = Writer\nsb.u32_le(7744)             // Our desired socket buffer size\nlet sbytes = Array[U8]\nfor bs in sb.done().values() do\nsbytes.append(bs)\nend\nmatch sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n| 0 =&gt;\n// System call was successful\n| let errno: U32 =&gt;\n// System call failed\nend\n</code></pre> <pre><code>fun ref setsockopt(\nlevel: I32 val,\noption_name: I32 val,\noption: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_14","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-UDPSocket/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#setsockopt_u32","title":"setsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for UDP sockets to the <code>setsockopt(2)</code> system call where the kernel expects an option value of a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun ref setsockopt_u32(\nlevel: I32 val,\noption_name: I32 val,\noption: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_15","title":"Parameters","text":"<ul> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#get_so_error","title":"get_so_error","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)</code></p> <pre><code>fun ref get_so_error()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_8","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#get_so_rcvbuf","title":"get_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_9","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#get_so_sndbuf","title":"get_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref get_so_sndbuf()\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#returns_10","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-UDPSocket/#set_ip_multicast_loop","title":"set_ip_multicast_loop","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)</code></p> <pre><code>fun ref set_ip_multicast_loop(\nloopback: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_16","title":"Parameters","text":"<ul> <li>loopback: Bool val</li> </ul>"},{"location":"net-UDPSocket/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_ip_multicast_ttl","title":"set_ip_multicast_ttl","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)</code></p> <pre><code>fun ref set_ip_multicast_ttl(\nttl: U8 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_17","title":"Parameters","text":"<ul> <li>ttl: U8 val</li> </ul>"},{"location":"net-UDPSocket/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_broadcast","title":"set_so_broadcast","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)</code></p> <pre><code>fun ref set_so_broadcast(\nstate: Bool val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_18","title":"Parameters","text":"<ul> <li>state: Bool val</li> </ul>"},{"location":"net-UDPSocket/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_rcvbuf","title":"set_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun ref set_so_rcvbuf(\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_19","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#set_so_sndbuf","title":"set_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun ref set_so_sndbuf(\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_20","title":"Parameters","text":"<ul> <li>bufsize: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-UDPSocket/#private-behaviours","title":"Private Behaviours","text":""},{"location":"net-UDPSocket/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>When we are readable, we accept new connections until none remain.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"net-UDPSocket/#parameters_21","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"net-UDPSocket/#_read_again","title":"_read_again","text":"<p>[Source]</p> <p>Resume reading.</p> <pre><code>be _read_again()\n</code></pre>"},{"location":"net-UDPSocket/#private-functions","title":"Private Functions","text":""},{"location":"net-UDPSocket/#_pending_reads","title":"_pending_reads","text":"<p>[Source]</p> <p>Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors.</p> <pre><code>fun ref _pending_reads()\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/#_complete_reads","title":"_complete_reads","text":"<p>[Source]</p> <p>The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows.</p> <pre><code>fun ref _complete_reads(\nlen: U32 val)\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_22","title":"Parameters","text":"<ul> <li>len: U32 val</li> </ul>"},{"location":"net-UDPSocket/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/#_start_next_read","title":"_start_next_read","text":"<p>[Source]</p> <p>Start our next receive. This is used only with IOCP on Windows.</p> <pre><code>fun ref _start_next_read()\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/#_write","title":"_write","text":"<p>[Source]</p> <p>Write the datagram to the socket.</p> <pre><code>fun ref _write(\ndata: (String val | Array[U8 val] val),\nto: NetAddress val)\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#parameters_23","title":"Parameters","text":"<ul> <li>data: (String val | Array[U8 val] val)</li> <li>to: NetAddress val</li> </ul>"},{"location":"net-UDPSocket/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/#_notify_listening","title":"_notify_listening","text":"<p>[Source]</p> <p>Inform the notifier that we're listening.</p> <pre><code>fun ref _notify_listening()\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-UDPSocket/#_close","title":"_close","text":"<p>[Source]</p> <p>Inform the notifier that we've closed.</p> <pre><code>fun ref _close()\n: None val\n</code></pre>"},{"location":"net-UDPSocket/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"net-_OSSocket/","title":"_OSSocket","text":"<p>[Source]</p> <p>Socket type-independent wrapper functions for <code>getsockopt(2)</code> and <code>setsockopt(2)</code> system calls for internal <code>net</code> package use.</p> <pre><code>primitive val _OSSocket\n</code></pre>"},{"location":"net-_OSSocket/#constructors","title":"Constructors","text":""},{"location":"net-_OSSocket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _OSSocket val^\n</code></pre>"},{"location":"net-_OSSocket/#returns","title":"Returns","text":"<ul> <li>_OSSocket val^</li> </ul>"},{"location":"net-_OSSocket/#public-functions","title":"Public Functions","text":""},{"location":"net-_OSSocket/#get_so_error","title":"get_so_error","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)</code></p> <pre><code>fun box get_so_error(\nfd: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-_OSSocket/#parameters","title":"Parameters","text":"<ul> <li>fd: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_1","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-_OSSocket/#get_so_rcvbuf","title":"get_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun box get_so_rcvbuf(\nfd: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_1","title":"Parameters","text":"<ul> <li>fd: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_2","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-_OSSocket/#get_so_sndbuf","title":"get_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun box get_so_sndbuf(\nfd: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_2","title":"Parameters","text":"<ul> <li>fd: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_3","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-_OSSocket/#get_so_connect_time","title":"get_so_connect_time","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>getsockopt(fd, SOL_SOCKET, SO_CONNECT_TIME, ...)</code></p> <pre><code>fun box get_so_connect_time(\nfd: U32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_3","title":"Parameters","text":"<ul> <li>fd: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_4","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-_OSSocket/#set_so_rcvbuf","title":"set_so_rcvbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)</code></p> <pre><code>fun box set_so_rcvbuf(\nfd: U32 val,\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_4","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>bufsize: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-_OSSocket/#set_so_sndbuf","title":"set_so_sndbuf","text":"<p>[Source]</p> <p>Wrapper for the FFI call <code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)</code></p> <pre><code>fun box set_so_sndbuf(\nfd: U32 val,\nbufsize: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_5","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>bufsize: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-_OSSocket/#getsockopt","title":"getsockopt","text":"<p>[Source]</p> <p>General wrapper for sockets to the <code>getsockopt(2)</code> system call.</p> <p>The <code>option_max_size</code> argument is the maximum number of bytes that the caller expects the kernel to return via the system call's <code>void *</code> 4th argument.  This function will allocate a Pony <code>Array[U8]</code> array of size <code>option_max_size</code> prior to calling <code>getsockopt(2)</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun box getsockopt(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val,\noption_max_size: USize val = 4)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_6","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val = 4</li> </ul>"},{"location":"net-_OSSocket/#returns_7","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-_OSSocket/#getsockopt_u32","title":"getsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for sockets to the <code>getsockopt(2)</code> system call where the kernel's returned option value is a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. The <code>*option_value</code> returned by the kernel converted to a Pony <code>U32</code>.</p> <p>In case of system call failure, this function returns the 2-tuple: 1. The value of <code>errno</code>. 2. An undefined value that must be ignored.</p> <pre><code>fun box getsockopt_u32(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val)\n: (U32 val , U32 val)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_7","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_8","title":"Returns","text":"<ul> <li>(U32 val , U32 val)</li> </ul>"},{"location":"net-_OSSocket/#setsockopt","title":"setsockopt","text":"<p>[Source]</p> <p>General wrapper for sockets to the <code>setsockopt(2)</code> system call.</p> <p>The caller is responsible for the correct size and byte contents of the <code>option</code> array for the requested <code>level</code> and <code>option_name</code>, including using the appropriate CPU endian byte order.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun box setsockopt(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val,\noption: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_8","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-_OSSocket/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-_OSSocket/#setsockopt_u32","title":"setsockopt_u32","text":"<p>[Source]</p> <p>Wrapper for sockets to the <code>setsockopt(2)</code> system call where the kernel expects an option value of a C <code>uint32_t</code> type / Pony type <code>U32</code>.</p> <p>This function returns <code>0</code> on success, else the value of <code>errno</code> on failure.</p> <pre><code>fun box setsockopt_u32(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val,\noption: U32 val)\n: U32 val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_9","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-_OSSocket/#get_so","title":"get_so","text":"<p>[Source]</p> <p>Low-level interface to <code>getsockopt(2)</code>.</p> <p>In case of system call success, this function returns the 2-tuple: 1. The integer <code>0</code>. 2. An <code>Array[U8]</code> of data returned by the system call's <code>void *</code>    4th argument.  Its size is specified by the kernel via the    system call's <code>sockopt_len_t *</code> 5th argument.</p> <p>In case of system call failure, <code>errno</code> is returned in the first element of the 2-tuple, and the second element's value is junk.</p> <pre><code>fun box get_so(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val,\noption_max_size: USize val)\n: (U32 val , Array[U8 val] iso^)\n</code></pre>"},{"location":"net-_OSSocket/#parameters_10","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option_max_size: USize val</li> </ul>"},{"location":"net-_OSSocket/#returns_11","title":"Returns","text":"<ul> <li>(U32 val , Array[U8 val] iso^)</li> </ul>"},{"location":"net-_OSSocket/#set_so","title":"set_so","text":"<p>[Source]</p> <pre><code>fun box set_so(\nfd: U32 val,\nlevel: I32 val,\noption_name: I32 val,\noption: Array[U8 val] ref)\n: U32 val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_11","title":"Parameters","text":"<ul> <li>fd: U32 val</li> <li>level: I32 val</li> <li>option_name: I32 val</li> <li>option: Array[U8 val] ref</li> </ul>"},{"location":"net-_OSSocket/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"net-_OSSocket/#bytes4_to_u32","title":"bytes4_to_u32","text":"<p>[Source]</p> <pre><code>fun box bytes4_to_u32(\nb: Array[U8 val] ref)\n: U32 val ?\n</code></pre>"},{"location":"net-_OSSocket/#parameters_12","title":"Parameters","text":"<ul> <li>b: Array[U8 val] ref</li> </ul>"},{"location":"net-_OSSocket/#returns_13","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"net-_OSSocket/#u32_to_bytes4","title":"u32_to_bytes4","text":"<p>[Source]</p> <pre><code>fun box u32_to_bytes4(\noption: U32 val)\n: Array[U8 val] ref\n</code></pre>"},{"location":"net-_OSSocket/#parameters_13","title":"Parameters","text":"<ul> <li>option: U32 val</li> </ul>"},{"location":"net-_OSSocket/#returns_14","title":"Returns","text":"<ul> <li>Array[U8 val] ref</li> </ul>"},{"location":"net-_OSSocket/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _OSSocket val)\n: Bool val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_14","title":"Parameters","text":"<ul> <li>that: _OSSocket val</li> </ul>"},{"location":"net-_OSSocket/#returns_15","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"net-_OSSocket/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _OSSocket val)\n: Bool val\n</code></pre>"},{"location":"net-_OSSocket/#parameters_15","title":"Parameters","text":"<ul> <li>that: _OSSocket val</li> </ul>"},{"location":"net-_OSSocket/#returns_16","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test--index/","title":"PonyTest package","text":"<p>The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests.</p> <p>To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are:</p> <ul> <li>builtin</li> <li>time</li> <li>collections</li> </ul> <p>Each unit test is a class, with a single test function. By default all tests run concurrently.</p> <p>Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail.</p> <p>When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.</p>"},{"location":"pony_test--index/#example-program","title":"Example program","text":"<p>To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package.</p> <p>The following is a complete program with 2 trivial tests.</p> <pre><code>use \"pony_test\"\nactor Main is TestList\nnew create(env: Env) =&gt;\nPonyTest(env, this)\nnew make() =&gt;\nNone\nfun tag tests(test: PonyTest) =&gt;\ntest(_TestAdd)\ntest(_TestSub)\nclass iso _TestAdd is UnitTest\nfun name():String =&gt; \"addition\"\nfun apply(h: TestHelper) =&gt;\nh.assert_eq[U32](4, 2 + 2)\nclass iso _TestSub is UnitTest\nfun name():String =&gt; \"subtraction\"\nfun apply(h: TestHelper) =&gt;\nh.assert_eq[U32](2, 4 - 2)\n</code></pre> <p>The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it.</p> <p>Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.</p>"},{"location":"pony_test--index/#test-names","title":"Test names","text":"<p>Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code.</p> <p>Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests.</p> <p>You can skip any tests whose names start with a given string by using the <code>--exclude=[prefix]</code> command line option.</p> <p>You can run only tests whose names start with a given string by using the <code>--only=[prefix]</code> command line option.</p>"},{"location":"pony_test--index/#aggregation","title":"Aggregation","text":"<p>Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together.</p> <p>This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages <code>foo</code> and <code>bar</code>.</p> <pre><code>use \"pony_test\"\nuse bar = \"bar\"\nuse foo = \"foo\"\nactor Main is TestList\nnew create(env: Env) =&gt;\nPonyTest(env, this)\nnew make() =&gt;\nNone\nfun tag tests(test: PonyTest) =&gt;\nbar.Main.make().tests(test)\nfoo.Main.make().tests(test)\n</code></pre> <p>Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.</p>"},{"location":"pony_test--index/#long-tests","title":"Long tests","text":"<p>Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors.</p> <p>Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper.</p> <p>The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called.</p> <p>Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported.</p> <p>On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so.</p> <p>Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful.</p> <p>Timeouts should not be used as the standard method of detecting if a test has failed.</p>"},{"location":"pony_test--index/#exclusion-groups","title":"Exclusion groups","text":"<p>By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group.</p> <p>No tests that are in the same exclusion group will be run concurrently.</p> <p>Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests.</p> <p>The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.</p>"},{"location":"pony_test--index/#labels","title":"Labels","text":"<p>Test can have label. Labels are used to filter which tests are run, by setting command line argument <code>--label=[some custom label]</code>. It can be used to separate unit tests from integration tests.</p> <p>By default label is empty. You can set it up by overriding <code>label(): String</code> method in unit test.</p> <pre><code>use \"pony_test\"\nclass iso _I8AddTest is UnitTest\nfun name(): String =&gt; \"_I8AddTest\"\nfun label(): String =&gt; \"simple\"\nfun apply(h: TestHelper) =&gt;\nh.assert_eq[I8](1, 1)\n</code></pre>"},{"location":"pony_test--index/#setting-up-and-tearing-down-a-test-environment","title":"Setting up and tearing down a test environment","text":""},{"location":"pony_test--index/#set-up","title":"Set Up","text":"<p>Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up().</p> <p>set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env.</p>"},{"location":"pony_test--index/#tear-down","title":"Tear Down","text":"<p>Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test.</p> <p>The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns.</p> <p>When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test.</p> <p>The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.</p>"},{"location":"pony_test--index/#example","title":"Example","text":"<p>The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself:</p> <pre><code>use \"pony_test\"\nuse \"files\"\nclass iso TempDirTest\nvar tmp_dir: (FilePath | None) = None\nfun name(): String =&gt; \"temp-dir\"\nfun ref set_up(h: TestHelper)? =&gt;\ntmp_dir = FilePath.mkdtemp(FileAuth(h.env.root), \"temp-dir\")?\nfun ref tear_down(h: TestHelper) =&gt;\ntry\n(tmp_dir as FilePath).remove()\nend\nfun apply(h: TestHelper)? =&gt;\nlet dir = tmp_dir as FilePath\n// do something inside the temporary directory\n</code></pre>"},{"location":"pony_test--index/#public-types","title":"Public Types","text":"<ul> <li>interface ITest</li> <li>actor PonyTest</li> <li>class TestHelper</li> <li>trait TestList</li> <li>trait UnitTest</li> </ul>"},{"location":"pony_test--index/#private-types","title":"Private Types","text":"<ul> <li>primitive _Color</li> <li>actor _ExclusiveGroup</li> <li>trait _Group</li> <li>actor _SimultaneousGroup</li> <li>class _TestRecord</li> <li>actor _TestRunner</li> </ul>"},{"location":"pony_test-ITest/","title":"ITest","text":"<p>[Source] <pre><code>interface ref ITest\n</code></pre></p>"},{"location":"pony_test-ITest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-ITest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: None val ?\n</code></pre>"},{"location":"pony_test-ITest/#returns","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-PonyTest/","title":"PonyTest","text":"<p>[Source]</p> <p>Main test framework actor that organises tests, collates information and prints results.</p> <pre><code>actor tag PonyTest\n</code></pre>"},{"location":"pony_test-PonyTest/#constructors","title":"Constructors","text":""},{"location":"pony_test-PonyTest/#create","title":"create","text":"<p>[Source]</p> <p>Create a PonyTest object and use it to run the tests from the given TestList</p> <pre><code>new tag create(\nenv: Env val,\nlist: TestList tag)\n: PonyTest tag^\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>list: TestList tag</li> </ul>"},{"location":"pony_test-PonyTest/#returns","title":"Returns","text":"<ul> <li>PonyTest tag^</li> </ul>"},{"location":"pony_test-PonyTest/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-PonyTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the given test, subject to our filters and options.</p> <pre><code>be apply(\ntest: UnitTest iso)\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_1","title":"Parameters","text":"<ul> <li>test: UnitTest iso</li> </ul>"},{"location":"pony_test-PonyTest/#private-behaviours","title":"Private Behaviours","text":""},{"location":"pony_test-PonyTest/#_test_started","title":"_test_started","text":"<p>[Source]</p> <p>A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper.</p> <pre><code>be _test_started(\nid: USize val)\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_2","title":"Parameters","text":"<ul> <li>id: USize val</li> </ul>"},{"location":"pony_test-PonyTest/#_test_complete","title":"_test_complete","text":"<p>[Source]</p> <p>A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper.</p> <pre><code>be _test_complete(\nid: USize val,\npass: Bool val,\nlog: Array[String val] val)\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_3","title":"Parameters","text":"<ul> <li>id: USize val</li> <li>pass: Bool val</li> <li>log: Array[String val] val</li> </ul>"},{"location":"pony_test-PonyTest/#_all_tests_applied","title":"_all_tests_applied","text":"<p>[Source]</p> <p>All our tests have been handed to apply(), setup for finishing</p> <pre><code>be _all_tests_applied()\n</code></pre>"},{"location":"pony_test-PonyTest/#private-functions","title":"Private Functions","text":""},{"location":"pony_test-PonyTest/#_find_group","title":"_find_group","text":"<p>[Source]</p> <p>Find the group to use for the given group name, subject to the --sequential flag.</p> <pre><code>fun ref _find_group(\ngroup_name: String val)\n: _Group tag\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_4","title":"Parameters","text":"<ul> <li>group_name: String val</li> </ul>"},{"location":"pony_test-PonyTest/#returns_1","title":"Returns","text":"<ul> <li>_Group tag</li> </ul>"},{"location":"pony_test-PonyTest/#_process_opts","title":"_process_opts","text":"<p>[Source]</p> <p>Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies.</p> <pre><code>fun ref _process_opts()\n: None val\n</code></pre>"},{"location":"pony_test-PonyTest/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-PonyTest/#_print_report","title":"_print_report","text":"<p>[Source]</p> <p>The tests are all complete, print out the results.</p> <pre><code>fun box _print_report()\n: None val\n</code></pre>"},{"location":"pony_test-PonyTest/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-PonyTest/#_plural","title":"_plural","text":"<p>[Source]</p> <p>Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\".</p> <pre><code>fun box _plural(\nn: USize val)\n: String val\n</code></pre>"},{"location":"pony_test-PonyTest/#parameters_5","title":"Parameters","text":"<ul> <li>n: USize val</li> </ul>"},{"location":"pony_test-PonyTest/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-TestHelper/","title":"TestHelper","text":"<p>[Source]</p> <p>Per unit test class that provides control, logging and assertion functions.</p> <p>Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction.</p> <p>The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails.</p> <p>All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed.</p> <pre><code>class val TestHelper\n</code></pre>"},{"location":"pony_test-TestHelper/#constructors","title":"Constructors","text":""},{"location":"pony_test-TestHelper/#_create","title":"_create","text":"<p>[Source]</p> <p>Create a new TestHelper.</p> <pre><code>new val _create(\nrunner: _TestRunner tag,\nenv': Env val)\n: TestHelper val^\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> <li>env': Env val</li> </ul>"},{"location":"pony_test-TestHelper/#returns","title":"Returns","text":"<ul> <li>TestHelper val^</li> </ul>"},{"location":"pony_test-TestHelper/#public-fields","title":"Public fields","text":""},{"location":"pony_test-TestHelper/#let-env-env-val","title":"let env: Env val","text":"<p>[Source]</p> <p>The process environment.</p> <p>This is useful for getting the root authority in order to access the filesystem (See files) or the network (See net) in your tests.</p>"},{"location":"pony_test-TestHelper/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestHelper/#log","title":"log","text":"<p>[Source]</p> <p>Log the given message.</p> <p>The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported.</p> <p>Logs are printed one test at a time to avoid interleaving log lines from concurrent tests.</p> <pre><code>fun box log(\nmsg: String val,\nverbose: Bool val = false)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_1","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>verbose: Bool val = false</li> </ul>"},{"location":"pony_test-TestHelper/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail","title":"fail","text":"<p>[Source]</p> <p>Flag the test as having failed.</p> <pre><code>fun box fail(\nmsg: String val = \"Test failed\")\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_2","title":"Parameters","text":"<ul> <li>msg: String val = \"Test failed\"</li> </ul>"},{"location":"pony_test-TestHelper/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_true","title":"assert_true","text":"<p>[Source]</p> <p>Assert that the given expression is true.</p> <pre><code>fun box assert_true(\nactual: Bool val,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_3","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_false","title":"assert_false","text":"<p>[Source]</p> <p>Assert that the given expression is false.</p> <pre><code>fun box assert_false(\nactual: Bool val,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_4","title":"Parameters","text":"<ul> <li>actual: Bool val</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_error","title":"assert_error","text":"<p>[Source]</p> <p>Assert that the given test function throws an error when run.</p> <pre><code>fun box assert_error(\ntest: ITest box,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_5","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_no_error","title":"assert_no_error","text":"<p>[Source]</p> <p>Assert that the gived test function does not throw an error when run.</p> <pre><code>fun box assert_no_error(\ntest: ITest box,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_6","title":"Parameters","text":"<ul> <li>test: ITest box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isa-a","title":"assert_is[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to the same instance</p> <pre><code>fun box assert_is[A: A](\nexpect: A,\nactual: A,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_7","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_eqa-equatablea-read-stringable-read","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are equal.</p> <pre><code>fun box assert_eq[A: (Equatable[A] #read &amp; Stringable #read)](\nexpect: A,\nactual: A,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_8","title":"Parameters","text":"<ul> <li>expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_isnta-a","title":"assert_isnt[A: A]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions resolve to different instances.</p> <pre><code>fun box assert_isnt[A: A](\nnot_expect: A,\nactual: A,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_9","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_nea-equatablea-read-stringable-read","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the 2 given expressions are not equal.</p> <pre><code>fun box assert_ne[A: (Equatable[A] #read &amp; Stringable #read)](\nnot_expect: A,\nactual: A,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_10","title":"Parameters","text":"<ul> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eqa-equatablea-read-stringable-read","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\nlet a: Array[U8] = [1; 2; 3]\nlet b: Array[U8] = [1; 2; 3]\nh.assert_array_eq[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)](\nexpect: ReadSeq[A] box,\nactual: ReadSeq[A] box,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_11","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_11","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#assert_array_eq_unordereda-equatablea-read-stringable-read","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]","text":"<p>[Source]</p> <p>Assert that the contents of the 2 given ReadSeqs are equal ignoring order.</p> <p>The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two <code>Array[U8]</code>, you should call this method as follows:</p> <pre><code>fun apply(h: TestHelper) =&gt;\nlet a: Array[U8] = [1; 2; 3]\nlet b: Array[U8] = [1; 3; 2]\nh.assert_array_eq_unordered[U8](a, b)\n</code></pre> <pre><code>fun box assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)](\nexpect: ReadSeq[A] box,\nactual: ReadSeq[A] box,\nmsg: String val = \"\",\nloc: SourceLoc val = __loc)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_12","title":"Parameters","text":"<ul> <li>expect: ReadSeq[A] box</li> <li>actual: ReadSeq[A] box</li> <li>msg: String val = \"\"</li> <li>loc: SourceLoc val = __loc</li> </ul>"},{"location":"pony_test-TestHelper/#returns_12","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#long_test","title":"long_test","text":"<p>[Source]</p> <p>Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds.</p> <pre><code>fun box long_test(\ntimeout: U64 val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_13","title":"Parameters","text":"<ul> <li>timeout: U64 val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete","title":"complete","text":"<p>[Source]</p> <p>MUST be called by each long test to indicate the test has finished, unless a timeout occurs. If you are using expect_action() then complete(true) will be called once the last expected action has been completed via complete_action().</p> <p>The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter.</p> <p>Once this is called tear_down() may be called at any time.</p> <pre><code>fun box complete(\nsuccess: Bool val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_14","title":"Parameters","text":"<ul> <li>success: Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#expect_action","title":"expect_action","text":"<p>[Source]</p> <p>Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test.</p> <p>This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method.</p> <p>The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test.</p> <pre><code>fun box expect_action(\nname: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_15","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#complete_action","title":"complete_action","text":"<p>[Source]</p> <p>MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails.</p> <p>Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished.</p> <p>Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed.</p> <pre><code>fun box complete_action(\nname: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_16","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#fail_action","title":"fail_action","text":"<p>[Source]</p> <p>Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions.</p> <p>The name of the failed action will be included in the failure output.</p> <p>Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test.</p> <pre><code>fun box fail_action(\nname: String val)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_17","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#dispose_when_done","title":"dispose_when_done","text":"<p>[Source]</p> <p>Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails.</p> <p>If the test is already tearing down, the actor will be disposed immediately.</p> <pre><code>fun box dispose_when_done(\ndisposable: DisposableActor tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_18","title":"Parameters","text":"<ul> <li>disposable: DisposableActor tag</li> </ul>"},{"location":"pony_test-TestHelper/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-TestHelper/#private-functions","title":"Private Functions","text":""},{"location":"pony_test-TestHelper/#_check_isa-a","title":"_check_is[A: A]","text":"<p>[Source]</p> <p>Check that the 2 given expressions resolve to the same instance</p> <pre><code>fun box _check_is[A: A](\ncheck: String val,\nexpect: A,\nactual: A,\nmsg: String val,\nloc: SourceLoc val)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_19","title":"Parameters","text":"<ul> <li>check: String val</li> <li>expect: A</li> <li>actual: A</li> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_19","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#_check_eqa-equatablea-read-stringable","title":"_check_eq[A: (Equatable[A] #read &amp; Stringable)]","text":"<p>[Source]</p> <p>Check that the 2 given expressions are equal.</p> <pre><code>fun box _check_eq[A: (Equatable[A] #read &amp; Stringable)](\ncheck: String val,\nexpect: A,\nactual: A,\nmsg: String val,\nloc: SourceLoc val)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_20","title":"Parameters","text":"<ul> <li>check: String val</li> <li>expect: A</li> <li>actual: A</li> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_20","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#_check_isnta-a","title":"_check_isnt[A: A]","text":"<p>[Source]</p> <p>Check that the 2 given expressions resolve to different instances.</p> <pre><code>fun box _check_isnt[A: A](\ncheck: String val,\nnot_expect: A,\nactual: A,\nmsg: String val,\nloc: SourceLoc val)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_21","title":"Parameters","text":"<ul> <li>check: String val</li> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_21","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#_check_nea-equatablea-read-stringable","title":"_check_ne[A: (Equatable[A] #read &amp; Stringable)]","text":"<p>[Source]</p> <p>Check that the 2 given expressions are not equal.</p> <pre><code>fun box _check_ne[A: (Equatable[A] #read &amp; Stringable)](\ncheck: String val,\nnot_expect: A,\nactual: A,\nmsg: String val,\nloc: SourceLoc val)\n: Bool val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_22","title":"Parameters","text":"<ul> <li>check: String val</li> <li>not_expect: A</li> <li>actual: A</li> <li>msg: String val</li> <li>loc: SourceLoc val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_22","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-TestHelper/#_format_loc","title":"_format_loc","text":"<p>[Source]</p> <pre><code>fun box _format_loc(\nloc: SourceLoc val)\n: String val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_23","title":"Parameters","text":"<ul> <li>loc: SourceLoc val</li> </ul>"},{"location":"pony_test-TestHelper/#returns_23","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-TestHelper/#_print_arraya-stringable-read","title":"_print_array[A: Stringable #read]","text":"<p>[Source]</p> <p>Generate a printable string of the contents of the given readseq to use in error messages.</p> <p>The type parameter of this function is the type parameter of the elements in the ReadSeq.</p> <pre><code>fun box _print_array[A: Stringable #read](\narray: ReadSeq[A] box)\n: String val\n</code></pre>"},{"location":"pony_test-TestHelper/#parameters_24","title":"Parameters","text":"<ul> <li>array: ReadSeq[A] box</li> </ul>"},{"location":"pony_test-TestHelper/#returns_24","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-TestList/","title":"TestList","text":"<p>[Source]</p> <p>Source of unit tests for a PonyTest object. See package doc string for further information and example use.</p> <pre><code>trait ref TestList\n</code></pre>"},{"location":"pony_test-TestList/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-TestList/#tests","title":"tests","text":"<p>[Source]</p> <p>Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: <pre><code>fun tests(test: PonyTest) =&gt;\ntest(_TestClass1)\ntest(_TestClass2)\ntest(_TestClass3)\n</code></pre></p> <pre><code>fun tag tests(\ntest: PonyTest tag)\n: None val\n</code></pre>"},{"location":"pony_test-TestList/#parameters","title":"Parameters","text":"<ul> <li>test: PonyTest tag</li> </ul>"},{"location":"pony_test-TestList/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/","title":"UnitTest","text":"<p>[Source]</p> <p>Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options.</p> <pre><code>trait ref UnitTest\n</code></pre>"},{"location":"pony_test-UnitTest/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-UnitTest/#name","title":"name","text":"<p>[Source]</p> <p>Report the test name, which is used when printing test results and on the command line to select tests to run.</p> <pre><code>fun box name()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#exclusion_group","title":"exclusion_group","text":"<p>[Source]</p> <p>Report the test exclusion group, returning an empty string for none. The default body returns an empty string.</p> <pre><code>fun box exclusion_group()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-UnitTest/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the test. Raising an error is interpreted as a test failure.</p> <pre><code>fun ref apply(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_2","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#timed_out","title":"timed_out","text":"<p>[Source]</p> <p>Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing.</p> <pre><code>fun ref timed_out(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_1","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#set_up","title":"set_up","text":"<p>[Source]</p> <p>Set up the testing environment before a test method is called. Default is to do nothing.</p> <pre><code>fun ref set_up(\nh: TestHelper val)\n: None val ?\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_2","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_4","title":"Returns","text":"<ul> <li>None val ?</li> </ul>"},{"location":"pony_test-UnitTest/#tear_down","title":"tear_down","text":"<p>[Source]</p> <p>Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing.</p> <pre><code>fun ref tear_down(\nh: TestHelper val)\n: None val\n</code></pre>"},{"location":"pony_test-UnitTest/#parameters_3","title":"Parameters","text":"<ul> <li>h: TestHelper val</li> </ul>"},{"location":"pony_test-UnitTest/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-UnitTest/#label","title":"label","text":"<p>[Source]</p> <p>Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels.</p> <pre><code>fun box label()\n: String val\n</code></pre>"},{"location":"pony_test-UnitTest/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-_Color/","title":"_Color","text":"<p>[Source]</p> <p>Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency.</p> <pre><code>primitive val _Color\n</code></pre>"},{"location":"pony_test-_Color/#constructors","title":"Constructors","text":""},{"location":"pony_test-_Color/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _Color val^\n</code></pre>"},{"location":"pony_test-_Color/#returns","title":"Returns","text":"<ul> <li>_Color val^</li> </ul>"},{"location":"pony_test-_Color/#public-functions","title":"Public Functions","text":""},{"location":"pony_test-_Color/#reset","title":"reset","text":"<p>[Source]</p> <p>Resets all colours and text styles to the default.</p> <pre><code>fun box reset()\n: String val\n</code></pre>"},{"location":"pony_test-_Color/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-_Color/#red","title":"red","text":"<p>[Source]</p> <p>Bright red text.</p> <pre><code>fun box red()\n: String val\n</code></pre>"},{"location":"pony_test-_Color/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-_Color/#green","title":"green","text":"<p>[Source]</p> <p>Bright green text.</p> <pre><code>fun box green()\n: String val\n</code></pre>"},{"location":"pony_test-_Color/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"pony_test-_Color/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _Color val)\n: Bool val\n</code></pre>"},{"location":"pony_test-_Color/#parameters","title":"Parameters","text":"<ul> <li>that: _Color val</li> </ul>"},{"location":"pony_test-_Color/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-_Color/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _Color val)\n: Bool val\n</code></pre>"},{"location":"pony_test-_Color/#parameters_1","title":"Parameters","text":"<ul> <li>that: _Color val</li> </ul>"},{"location":"pony_test-_Color/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-_ExclusiveGroup/","title":"_ExclusiveGroup","text":"<p>[Source]</p> <p>Test group in which we only ever have one test running at a time.</p> <pre><code>actor tag _ExclusiveGroup is\n_Group tag\n</code></pre>"},{"location":"pony_test-_ExclusiveGroup/#implements","title":"Implements","text":"<ul> <li>_Group tag</li> </ul>"},{"location":"pony_test-_ExclusiveGroup/#constructors","title":"Constructors","text":""},{"location":"pony_test-_ExclusiveGroup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: _ExclusiveGroup tag^\n</code></pre>"},{"location":"pony_test-_ExclusiveGroup/#returns","title":"Returns","text":"<ul> <li>_ExclusiveGroup tag^</li> </ul>"},{"location":"pony_test-_ExclusiveGroup/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-_ExclusiveGroup/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>be apply(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_ExclusiveGroup/#parameters","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_ExclusiveGroup/#private-behaviours","title":"Private Behaviours","text":""},{"location":"pony_test-_ExclusiveGroup/#_test_complete","title":"_test_complete","text":"<p>[Source]</p> <pre><code>be _test_complete(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_ExclusiveGroup/#parameters_1","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_Group/","title":"_Group","text":"<p>[Source]</p> <p>Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently.</p> <pre><code>trait tag _Group\n</code></pre>"},{"location":"pony_test-_Group/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-_Group/#apply","title":"apply","text":"<p>[Source]</p> <p>Run the given test, or queue it and run later, as appropriate.</p> <pre><code>be apply(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_Group/#parameters","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_Group/#private-behaviours","title":"Private Behaviours","text":""},{"location":"pony_test-_Group/#_test_complete","title":"_test_complete","text":"<p>[Source]</p> <p>The specified test has completed.</p> <pre><code>be _test_complete(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_Group/#parameters_1","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_SimultaneousGroup/","title":"_SimultaneousGroup","text":"<p>[Source]</p> <p>Test group in which all tests can run concurrently.</p> <pre><code>actor tag _SimultaneousGroup is\n_Group tag\n</code></pre>"},{"location":"pony_test-_SimultaneousGroup/#implements","title":"Implements","text":"<ul> <li>_Group tag</li> </ul>"},{"location":"pony_test-_SimultaneousGroup/#constructors","title":"Constructors","text":""},{"location":"pony_test-_SimultaneousGroup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: _SimultaneousGroup tag^\n</code></pre>"},{"location":"pony_test-_SimultaneousGroup/#returns","title":"Returns","text":"<ul> <li>_SimultaneousGroup tag^</li> </ul>"},{"location":"pony_test-_SimultaneousGroup/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-_SimultaneousGroup/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>be apply(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_SimultaneousGroup/#parameters","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_SimultaneousGroup/#private-behaviours","title":"Private Behaviours","text":""},{"location":"pony_test-_SimultaneousGroup/#_test_complete","title":"_test_complete","text":"<p>[Source]</p> <pre><code>be _test_complete(\nrunner: _TestRunner tag)\n</code></pre>"},{"location":"pony_test-_SimultaneousGroup/#parameters_1","title":"Parameters","text":"<ul> <li>runner: _TestRunner tag</li> </ul>"},{"location":"pony_test-_TestRecord/","title":"_TestRecord","text":"<p>[Source]</p> <p>Store and report the result and log from a single test.</p> <pre><code>class ref _TestRecord\n</code></pre>"},{"location":"pony_test-_TestRecord/#constructors","title":"Constructors","text":""},{"location":"pony_test-_TestRecord/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nname': String val)\n: _TestRecord ref^\n</code></pre>"},{"location":"pony_test-_TestRecord/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>name': String val</li> </ul>"},{"location":"pony_test-_TestRecord/#returns","title":"Returns","text":"<ul> <li>_TestRecord ref^</li> </ul>"},{"location":"pony_test-_TestRecord/#public-fields","title":"Public fields","text":""},{"location":"pony_test-_TestRecord/#let-name-string-val","title":"let name: String val","text":"<p>[Source]</p>"},{"location":"pony_test-_TestRecord/#private-functions","title":"Private Functions","text":""},{"location":"pony_test-_TestRecord/#_result","title":"_result","text":"<p>[Source]</p> <p>Our test has completed, store the result.</p> <pre><code>fun ref _result(\npass: Bool val,\nlog: Array[String val] val)\n: None val\n</code></pre>"},{"location":"pony_test-_TestRecord/#parameters_1","title":"Parameters","text":"<ul> <li>pass: Bool val</li> <li>log: Array[String val] val</li> </ul>"},{"location":"pony_test-_TestRecord/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-_TestRecord/#_report","title":"_report","text":"<p>[Source]</p> <p>Print our test summary, including the log if appropriate. The log_all parameter indicates whether we've been told to print logs for all tests. The default is to only print logs for tests that fail. Returns our pass / fail status.</p> <pre><code>fun box _report(\nlog_all: Bool val)\n: Bool val\n</code></pre>"},{"location":"pony_test-_TestRecord/#parameters_2","title":"Parameters","text":"<ul> <li>log_all: Bool val</li> </ul>"},{"location":"pony_test-_TestRecord/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"pony_test-_TestRecord/#_list_failed","title":"_list_failed","text":"<p>[Source]</p> <p>Print our test name out in the list of failed test, if we failed.</p> <pre><code>fun box _list_failed()\n: None val\n</code></pre>"},{"location":"pony_test-_TestRecord/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-_TestRunner/","title":"_TestRunner","text":"<p>[Source]</p> <p>Per unit test actor that runs the test and keeps the log for it.</p> <pre><code>actor tag _TestRunner\n</code></pre>"},{"location":"pony_test-_TestRunner/#constructors","title":"Constructors","text":""},{"location":"pony_test-_TestRunner/#create","title":"create","text":"<p>[Source]</p> <p>Create a new TestHelper. ponytest - The authority we report everything to. id - Test identifier needed when reporting to ponytest. test - The test to run. group - The group this test is in, which must be notified when we finish. env - The system environment, which is made available to tests. timers - The timer group we use to set long test timeouts.</p> <pre><code>new tag create(\nponytest: PonyTest tag,\nid: USize val,\ntest: UnitTest iso,\ngroup: _Group tag,\nverbose: Bool val,\nenv: Env val,\ntimers: Timers tag)\n: _TestRunner tag^\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters","title":"Parameters","text":"<ul> <li>ponytest: PonyTest tag</li> <li>id: USize val</li> <li>test: UnitTest iso</li> <li>group: _Group tag</li> <li>verbose: Bool val</li> <li>env: Env val</li> <li>timers: Timers tag</li> </ul>"},{"location":"pony_test-_TestRunner/#returns","title":"Returns","text":"<ul> <li>_TestRunner tag^</li> </ul>"},{"location":"pony_test-_TestRunner/#public-behaviours","title":"Public Behaviours","text":""},{"location":"pony_test-_TestRunner/#run","title":"run","text":"<p>[Source]</p> <p>Run our test.</p> <pre><code>be run()\n</code></pre>"},{"location":"pony_test-_TestRunner/#log","title":"log","text":"<p>[Source]</p> <p>Log the given message.</p> <p>The verbose parameter allows messages to be printed only when the --verbose command line option is used.</p> <p>Logs are printed one test at a time to avoid interleaving log lines from concurrent tests.</p> <pre><code>be log(\nmsg: String val,\nverbose: Bool val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_1","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>verbose: Bool val</li> </ul>"},{"location":"pony_test-_TestRunner/#fail","title":"fail","text":"<p>[Source]</p> <p>Flag the test as having failed.</p> <pre><code>be fail(\nmsg: String val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_2","title":"Parameters","text":"<ul> <li>msg: String val</li> </ul>"},{"location":"pony_test-_TestRunner/#complete","title":"complete","text":"<p>[Source]</p> <p>MUST be called by each long test to indicate the test has finished, unless a timeout occurs.</p> <p>The \"success\" parameter specifies whether the test succeeded. However if the test has already been flagged as failing, then the test is considered a failure, regardless of the value of this parameter.</p> <p>Once this is called tear_down() may be called at any time.</p> <pre><code>be complete(\nsuccess: Bool val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_3","title":"Parameters","text":"<ul> <li>success: Bool val</li> </ul>"},{"location":"pony_test-_TestRunner/#expect_action","title":"expect_action","text":"<p>[Source]</p> <p>Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test.</p> <p>This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method.</p> <pre><code>be expect_action(\nname: String val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_4","title":"Parameters","text":"<ul> <li>name: String val</li> </ul>"},{"location":"pony_test-_TestRunner/#complete_action","title":"complete_action","text":"<p>[Source]</p> <p>MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails.</p> <p>Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished.</p> <p>Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed.</p> <p>Completing an action with success = false will cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output.</p> <pre><code>be complete_action(\nname: String val,\nsuccess: Bool val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_5","title":"Parameters","text":"<ul> <li>name: String val</li> <li>success: Bool val</li> </ul>"},{"location":"pony_test-_TestRunner/#dispose_when_done","title":"dispose_when_done","text":"<p>[Source]</p> <p>Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails.</p> <p>If the test is already tearing down, the actor will be disposed immediately.</p> <pre><code>be dispose_when_done(\ndisposable: DisposableActor tag)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_6","title":"Parameters","text":"<ul> <li>disposable: DisposableActor tag</li> </ul>"},{"location":"pony_test-_TestRunner/#long_test","title":"long_test","text":"<p>[Source]</p> <p>The test has been flagged as a long test.</p> <pre><code>be long_test(\ntimeout: U64 val)\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_7","title":"Parameters","text":"<ul> <li>timeout: U64 val</li> </ul>"},{"location":"pony_test-_TestRunner/#private-behaviours","title":"Private Behaviours","text":""},{"location":"pony_test-_TestRunner/#_finished","title":"_finished","text":"<p>[Source]</p> <p>Called when the test function completes. If long_test() is going to be called, it must have been by now.</p> <pre><code>be _finished()\n</code></pre>"},{"location":"pony_test-_TestRunner/#_timeout","title":"_timeout","text":"<p>[Source]</p> <p>Called when the long test timeout expires.</p> <pre><code>be _timeout()\n</code></pre>"},{"location":"pony_test-_TestRunner/#_close","title":"_close","text":"<p>[Source]</p> <p>Close down this test and send a report.</p> <pre><code>be _close()\n</code></pre>"},{"location":"pony_test-_TestRunner/#private-functions","title":"Private Functions","text":""},{"location":"pony_test-_TestRunner/#_log","title":"_log","text":"<p>[Source]</p> <p>Write the given message direct to our log.</p> <pre><code>fun ref _log(\nmsg: String val,\nverbose: Bool val)\n: None val\n</code></pre>"},{"location":"pony_test-_TestRunner/#parameters_8","title":"Parameters","text":"<ul> <li>msg: String val</li> <li>verbose: Bool val</li> </ul>"},{"location":"pony_test-_TestRunner/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"pony_test-_TestRunner/#_tear_down","title":"_tear_down","text":"<p>[Source]</p> <p>Check if the test has finished and tear it down if necessary.</p> <pre><code>fun ref _tear_down()\n: None val\n</code></pre>"},{"location":"pony_test-_TestRunner/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises--index/","title":"Promises Package","text":"<p>A <code>Promise</code> represents a value that will be available at a later time. <code>Promise</code>s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the <code>Promise</code>, to be called when the <code>Promise</code> is fulfilled or rejected. These handlers themselves are also wrapped in <code>Promise</code>s so that they can be chained together in order for the fulfilled value of one <code>Promise</code> to be used to compute a value which will be used to fulfill the next <code>Promise</code> in the chain, or so that if the <code>Promise</code> is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new.</p> <p>Fulfill and reject handlers can either be specified as classes that implment the <code>Fulfill</code> and <code>Reject</code> interfaces, or as functions with the same signatures as the <code>apply</code> methods in <code>Fulfill</code> and <code>Reject</code>.</p> <p>In the following code, the fulfillment of the <code>Promise</code> causes the execution of several fulfillment functions. The output is:</p> <pre><code>fulfilled + foo\nfulfilled + bar\nfulfilled + baz\n</code></pre> <pre><code>use \"promises\"\nclass PrintFulfill is Fulfill[String, String]\nlet _env: Env\nlet _msg: String\nnew create(env: Env, msg: String) =&gt;\n_env = env\n_msg = msg\nfun apply(s: String): String =&gt;\n_env.out.print(\" + \".join([s; _msg].values()))\ns\nactor Main\nnew create(env: Env) =&gt;\nlet promise = Promise[String]\npromise.next[String](recover PrintFulfill(env, \"foo\") end)\npromise.next[String](recover PrintFulfill(env, \"bar\") end)\npromise.next[String](recover PrintFulfill(env, \"baz\") end)\npromise(\"fulfilled\")\n</code></pre> <p>In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or <code>0</code> if there are no command line arguments.</p> <pre><code>use \"promises\"\nprimitive Computation\nfun tag string_to_strings(s: String): Array[String] val =&gt;\nrecover s.split() end\nfun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =&gt;\nrecover\nlet len = Array[USize]\nfor s in sa.values() do\nlen.push(s.size())\nend\nlen\nend\nfun tag sizes_to_avg(sza: Array[USize] val): USize =&gt;\nvar acc = USize(0)\nfor sz in sza.values() do\nacc = acc + sz\nend\nacc / sza.size()\nfun tag output(env: Env, sz: USize): None =&gt;\nenv.out.print(sz.string())\nactor Main\nnew create(env: Env) =&gt;\nlet promise = Promise[String]\npromise.next[Array[String] val](recover Computation~string_to_strings() end)\n.next[Array[USize] val](recover Computation~strings_to_sizes() end)\n.next[USize](recover Computation~sizes_to_avg() end)\n.next[None](recover Computation~output(env) end)\npromise(\" \".join(env.args.slice(1).values()))\n</code></pre>"},{"location":"promises--index/#public-types","title":"Public Types","text":"<ul> <li>interface Fulfill</li> <li>class FulfillIdentity</li> <li>actor Promise</li> <li>primitive Promises</li> <li>interface Reject</li> <li>class RejectAlways</li> </ul>"},{"location":"promises--index/#private-types","title":"Private Types","text":"<ul> <li>interface _IThen</li> <li>actor _Join</li> <li>primitive _None</li> <li>primitive _Pending</li> <li>class _PromiseFulFill</li> <li>primitive _Reject</li> <li>class _Then</li> </ul>"},{"location":"promises-Fulfill/","title":"Fulfill[A: Any #share, B: Any #share]","text":"<p>[Source]</p> <p>A function from A to B that is called when a promise is fulfilled.</p> <pre><code>interface iso Fulfill[A: Any #share, B: Any #share]\n</code></pre>"},{"location":"promises-Fulfill/#public-functions","title":"Public Functions","text":""},{"location":"promises-Fulfill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nvalue: A)\n: B ?\n</code></pre>"},{"location":"promises-Fulfill/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-Fulfill/#returns","title":"Returns","text":"<ul> <li>B ?</li> </ul>"},{"location":"promises-FulfillIdentity/","title":"FulfillIdentity[A: Any #share]","text":"<p>[Source]</p> <p>An identity function for fulfilling promises.</p> <pre><code>class iso FulfillIdentity[A: Any #share]\n</code></pre>"},{"location":"promises-FulfillIdentity/#constructors","title":"Constructors","text":""},{"location":"promises-FulfillIdentity/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FulfillIdentity[A] iso^\n</code></pre>"},{"location":"promises-FulfillIdentity/#returns","title":"Returns","text":"<ul> <li>FulfillIdentity[A] iso^</li> </ul>"},{"location":"promises-FulfillIdentity/#public-functions","title":"Public Functions","text":""},{"location":"promises-FulfillIdentity/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nvalue: A)\n: A\n</code></pre>"},{"location":"promises-FulfillIdentity/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-FulfillIdentity/#returns_1","title":"Returns","text":"<ul> <li>A</li> </ul>"},{"location":"promises-Promise/","title":"Promise[A: Any #share]","text":"<p>[Source]</p> <p>A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected.</p> <p>Any number of promises can be chained after this one.</p> <pre><code>actor tag Promise[A: Any #share]\n</code></pre>"},{"location":"promises-Promise/#constructors","title":"Constructors","text":""},{"location":"promises-Promise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create()\n: Promise[A] tag^\n</code></pre>"},{"location":"promises-Promise/#returns","title":"Returns","text":"<ul> <li>Promise[A] tag^</li> </ul>"},{"location":"promises-Promise/#public-behaviours","title":"Public Behaviours","text":""},{"location":"promises-Promise/#apply","title":"apply","text":"<p>[Source]</p> <p>Fulfill the promise.</p> <pre><code>be apply(\nvalue: A)\n</code></pre>"},{"location":"promises-Promise/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-Promise/#reject","title":"reject","text":"<p>[Source]</p> <p>Reject the promise.</p> <pre><code>be reject()\n</code></pre>"},{"location":"promises-Promise/#public-functions","title":"Public Functions","text":""},{"location":"promises-Promise/#nextb-any-share","title":"next[B: Any #share]","text":"<p>[Source]</p> <p>Chain a promise after this one.</p> <p>When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain.</p> <p>If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected.</p> <p>If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain.</p> <p>If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected.</p> <pre><code>fun tag next[B: Any #share](\nfulfill: Fulfill[A, B] iso,\nrejected: Reject[B] iso = qualify)\n: Promise[B] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_1","title":"Parameters","text":"<ul> <li>fulfill: Fulfill[A, B] iso</li> <li>rejected: Reject[B] iso = qualify</li> </ul>"},{"location":"promises-Promise/#returns_1","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#flatten_nextb-any-share","title":"flatten_next[B: Any #share]","text":"<p>[Source]</p> <p>Chain a promise after this one and unwrap the promise returned from this one.</p> <p><code>flatten_next</code> is a companion to <code>next</code>. It operates in an identical fashion except for the type of the fulfilled promise. Whereas <code>next</code> takes a function that returns a type <code>B</code>, <code>flatten_next</code> takes a function that returns <code>Promise[B]</code>.</p> <p>Why is <code>flatten_next</code> valuable given that next could take a <code>B</code> that is of a type like <code>Promise[String]</code>? Let's start with some code to demonstrate the problem that arises when returning <code>Promise[Promise[B]]</code> from <code>next</code>.</p> <p>Let's say we have a library for accessing the GitHub REST API:</p> <pre><code>class GitHub\nnew create(personal_access_token: String)\nfun get_repo(repo: String): Promise[Repository]\nclass Repository\nfun get_issue(number: I64): Promise[Issue]\nclass Issue\nfun title(): String\n</code></pre> <p>And we want to use this promise based API to look up the title of an issue. Without <code>flatten_next</code>, we could attempt to do the following using <code>next</code>:</p> <pre><code>actor Main\nnew create(env: Env) =&gt;\nlet repo: Promise[Repository] =\nGitHub(\"my token\").get_repo(\"ponylang/ponyc\")\n//\n// do something with the repo once the promise is fulfilled\n// in our case, get the issue\n//\nlet issue = Promise[Promise[Issue]] =\nrepo.next[Promise[Issue]](FetchIssue~apply(1))\n// once we get the issue, print the title\nissue.next[None](PrintIssueTitle~apply(env.out))\nprimitive FetchIssue\nfun apply(number: I64, repo: Repository): Promise[Issue] =&gt;\nrepo.get_issue(number)\nprimitive PrintIssueTitle\nfun apply(out: OutStream, issue: Promise[Issue]) =&gt;\n// O NO! We can't print the title\n// We don't have an issue, we have a promise for an issue\n</code></pre> <p>Take a look at what happens in the example, when we get to <code>PrintIssueTitle</code>, we can't print anything because we \"don't have anything\". In order to print the issue title, we need an <code>Issue</code> not a <code>Promise[Issue]</code>.</p> <p>We could solve this by doing something like this:</p> <pre><code>primitive PrintIssueTitle\nfun apply(out: OutStream, issue: Promise[Issue]) =&gt;\nissue.next[None](ActuallyPrintIssueTitle~apply(out))\nprimitive ActuallyPrintIssueTitle\nfun apply(out: OutStream, issue: Issue) =&gt;\nout.print(issue.title())\n</code></pre> <p>That will work, however, it is kind of awful. When looking at:</p> <pre><code>    let repo: Promise[Repoository] =\nGitHub(\"my token\").get_repo(\"ponylang/ponyc\")\nlet issue = Promise[Promise[Issue]] =\nrepo.next[Promise[Issue]](FetchIssue~apply(1))\nissue.next[None](PrintIssueTitle~apply(env.out))\n</code></pre> <p>it can be hard to follow what is going on. We can only tell what is happening because we gave <code>PrintIssueTitle</code> a very misleading name; it doesn't print an issue title.</p> <p><code>flatten_next</code> addresses the problem of \"we want the <code>Issue</code>, not the intermediate <code>Promise</code>\". <code>flatten_next</code> takes an intermediate promise and unwraps it into the fulfilled type. You get to write your promise chain without having to worry about intermediate promises.</p> <p>Updated to use <code>flatten_next</code>, our API example becomes:</p> <pre><code>actor Main\nnew create(env: Env) =&gt;\nlet repo: Promise[Repository] =\nGitHub(\"my token\").get_repo(\"ponylang/ponyc\")\nlet issue = Promise[Issue] =\nrepo.flatten_next[Issue](FetchIssue~apply(1))\nissue.next[None](PrintIssueTitle~apply(env.out))\nprimitive FetchIssue\nfun apply(number: I64, repo: Repository): Promise[Issue] =&gt;\nrepo.get_issue(number)\nprimitive PrintIssueTitle\nfun apply(out: OutStream, issue: Issue) =&gt;\nout.print(issue.title())\n</code></pre> <p>Our promise <code>Issue</code>, is no longer a <code>Promise[Promise[Issue]]</code>. By using <code>flatten_next</code>, we have a much more manageable <code>Promise[Issue]</code> instead.</p> <p>Other than unwrapping promises for you, <code>flatten_next</code> otherwise acts the same as <code>next</code> so all the same rules apply to fulfillment and rejection.</p> <pre><code>fun tag flatten_next[B: Any #share](\nfulfill: Fulfill[A, Promise[B] tag] iso,\nrejected: Reject[Promise[B] tag] iso = qualify)\n: Promise[B] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_2","title":"Parameters","text":"<ul> <li>fulfill: Fulfill[A, Promise[B] tag] iso</li> <li>rejected: Reject[Promise[B] tag] iso = qualify</li> </ul>"},{"location":"promises-Promise/#returns_2","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#addoptional-b-any-share","title":"add[optional B: Any #share]","text":"<p>[Source]</p> <p>Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected.</p> <pre><code>fun tag add[optional B: Any #share](\np: Promise[B] tag)\n: Promise[(A , B)] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_3","title":"Parameters","text":"<ul> <li>p: Promise[B] tag</li> </ul>"},{"location":"promises-Promise/#returns_3","title":"Returns","text":"<ul> <li>Promise[(A , B)] tag</li> </ul>"},{"location":"promises-Promise/#join","title":"join","text":"<p>[Source]</p> <p>Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected.</p> <p>Join <code>p1</code> and <code>p2</code> with an existing promise, <code>p3</code>. <pre><code>use \"promises\"\nactor Main\nnew create(env: Env) =&gt;\nlet p1 = Promise[String val]\nlet p2 = Promise[String val]\nlet p3 = Promise[String val]\np3.join([p1; p2].values())\n.next[None]({(a: Array[String val] val) =&gt;\nfor s in a.values() do\nenv.out.print(s)\nend\n})\np2(\"second\")\np3(\"third\")\np1(\"first\")\n</code></pre></p> <pre><code>fun tag join(\nps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_4","title":"Parameters","text":"<ul> <li>ps: Iterator[Promise[A] tag] ref</li> </ul>"},{"location":"promises-Promise/#returns_4","title":"Returns","text":"<ul> <li>Promise[Array[A] val] tag</li> </ul>"},{"location":"promises-Promise/#select","title":"select","text":"<p>[Source]</p> <p>Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise.</p> <pre><code>fun tag select(\np: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag\n</code></pre>"},{"location":"promises-Promise/#parameters_5","title":"Parameters","text":"<ul> <li>p: Promise[A] tag</li> </ul>"},{"location":"promises-Promise/#returns_5","title":"Returns","text":"<ul> <li>Promise[(A , Promise[A] tag)] tag</li> </ul>"},{"location":"promises-Promise/#timeout","title":"timeout","text":"<p>[Source]</p> <p>Reject the promise after the given expiration in nanoseconds.</p> <pre><code>fun tag timeout(\nexpiration: U64 val)\n: None val\n</code></pre>"},{"location":"promises-Promise/#parameters_6","title":"Parameters","text":"<ul> <li>expiration: U64 val</li> </ul>"},{"location":"promises-Promise/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises-Promise/#private-behaviours","title":"Private Behaviours","text":""},{"location":"promises-Promise/#_attach","title":"_attach","text":"<p>[Source]</p> <p>Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list.</p> <pre><code>be _attach(\nattach: _IThen[A] iso)\n</code></pre>"},{"location":"promises-Promise/#parameters_7","title":"Parameters","text":"<ul> <li>attach: _IThen[A] iso</li> </ul>"},{"location":"promises-Promises/","title":"Promises[A: Any #share]","text":"<p>[Source] <pre><code>primitive val Promises[A: Any #share]\n</code></pre></p>"},{"location":"promises-Promises/#constructors","title":"Constructors","text":""},{"location":"promises-Promises/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Promises[A] val^\n</code></pre>"},{"location":"promises-Promises/#returns","title":"Returns","text":"<ul> <li>Promises[A] val^</li> </ul>"},{"location":"promises-Promises/#public-functions","title":"Public Functions","text":""},{"location":"promises-Promises/#join","title":"join","text":"<p>[Source]</p> <p>Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given.</p> <p>Join three existing promises to make a fourth. <pre><code>use \"promises\"\nactor Main\nnew create(env: Env) =&gt;\nlet p1 = Promise[String val]\nlet p2 = Promise[String val]\nlet p3 = Promise[String val]\nPromises[String val].join([p1; p2; p3].values())\n.next[None]({(a: Array[String val] val) =&gt;\nfor s in a.values() do\nenv.out.print(s)\nend\n})\np2(\"second\")\np3(\"third\")\np1(\"first\")\n</code></pre></p> <pre><code>fun box join(\nps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n</code></pre>"},{"location":"promises-Promises/#parameters","title":"Parameters","text":"<ul> <li>ps: Iterator[Promise[A] tag] ref</li> </ul>"},{"location":"promises-Promises/#returns_1","title":"Returns","text":"<ul> <li>Promise[Array[A] val] tag</li> </ul>"},{"location":"promises-Promises/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Promises[A] val)\n: Bool val\n</code></pre>"},{"location":"promises-Promises/#parameters_1","title":"Parameters","text":"<ul> <li>that: Promises[A] val</li> </ul>"},{"location":"promises-Promises/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-Promises/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Promises[A] val)\n: Bool val\n</code></pre>"},{"location":"promises-Promises/#parameters_2","title":"Parameters","text":"<ul> <li>that: Promises[A] val</li> </ul>"},{"location":"promises-Promises/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-Reject/","title":"Reject[A: Any #share]","text":"<p>[Source]</p> <p>A function on A that is called when a promise is rejected.</p> <pre><code>interface iso Reject[A: Any #share]\n</code></pre>"},{"location":"promises-Reject/#public-functions","title":"Public Functions","text":""},{"location":"promises-Reject/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply()\n: A ?\n</code></pre>"},{"location":"promises-Reject/#returns","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"promises-RejectAlways/","title":"RejectAlways[A: Any #share]","text":"<p>[Source]</p> <p>A reject that always raises an error.</p> <pre><code>class iso RejectAlways[A: Any #share]\n</code></pre>"},{"location":"promises-RejectAlways/#constructors","title":"Constructors","text":""},{"location":"promises-RejectAlways/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: RejectAlways[A] iso^\n</code></pre>"},{"location":"promises-RejectAlways/#returns","title":"Returns","text":"<ul> <li>RejectAlways[A] iso^</li> </ul>"},{"location":"promises-RejectAlways/#public-functions","title":"Public Functions","text":""},{"location":"promises-RejectAlways/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply()\n: A ?\n</code></pre>"},{"location":"promises-RejectAlways/#returns_1","title":"Returns","text":"<ul> <li>A ?</li> </ul>"},{"location":"promises-_IThen/","title":"_IThen[A: Any #share]","text":"<p>[Source]</p> <p>An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type.</p> <pre><code>interface ref _IThen[A: Any #share]\n</code></pre>"},{"location":"promises-_IThen/#public-functions","title":"Public Functions","text":""},{"location":"promises-_IThen/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nvalue: A)\n: None val\n</code></pre>"},{"location":"promises-_IThen/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-_IThen/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises-_IThen/#reject","title":"reject","text":"<p>[Source]</p> <pre><code>fun ref reject()\n: None val\n</code></pre>"},{"location":"promises-_IThen/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises-_Join/","title":"_Join[A: Any #share]","text":"<p>[Source] <pre><code>actor tag _Join[A: Any #share]\n</code></pre></p>"},{"location":"promises-_Join/#constructors","title":"Constructors","text":""},{"location":"promises-_Join/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\np: Promise[Array[A] val] tag,\nspace: USize val)\n: _Join[A] tag^\n</code></pre>"},{"location":"promises-_Join/#parameters","title":"Parameters","text":"<ul> <li>p: Promise[Array[A] val] tag</li> <li>space: USize val</li> </ul>"},{"location":"promises-_Join/#returns","title":"Returns","text":"<ul> <li>_Join[A] tag^</li> </ul>"},{"location":"promises-_Join/#public-behaviours","title":"Public Behaviours","text":""},{"location":"promises-_Join/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>be apply(\na: A)\n</code></pre>"},{"location":"promises-_Join/#parameters_1","title":"Parameters","text":"<ul> <li>a: A</li> </ul>"},{"location":"promises-_None/","title":"_None","text":"<p>[Source] <pre><code>primitive val _None\n</code></pre></p>"},{"location":"promises-_None/#constructors","title":"Constructors","text":""},{"location":"promises-_None/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _None val^\n</code></pre>"},{"location":"promises-_None/#returns","title":"Returns","text":"<ul> <li>_None val^</li> </ul>"},{"location":"promises-_None/#public-functions","title":"Public Functions","text":""},{"location":"promises-_None/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _None val)\n: Bool val\n</code></pre>"},{"location":"promises-_None/#parameters","title":"Parameters","text":"<ul> <li>that: _None val</li> </ul>"},{"location":"promises-_None/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_None/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _None val)\n: Bool val\n</code></pre>"},{"location":"promises-_None/#parameters_1","title":"Parameters","text":"<ul> <li>that: _None val</li> </ul>"},{"location":"promises-_None/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_Pending/","title":"_Pending","text":"<p>[Source] <pre><code>primitive val _Pending\n</code></pre></p>"},{"location":"promises-_Pending/#constructors","title":"Constructors","text":""},{"location":"promises-_Pending/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _Pending val^\n</code></pre>"},{"location":"promises-_Pending/#returns","title":"Returns","text":"<ul> <li>_Pending val^</li> </ul>"},{"location":"promises-_Pending/#public-functions","title":"Public Functions","text":""},{"location":"promises-_Pending/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _Pending val)\n: Bool val\n</code></pre>"},{"location":"promises-_Pending/#parameters","title":"Parameters","text":"<ul> <li>that: _Pending val</li> </ul>"},{"location":"promises-_Pending/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_Pending/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _Pending val)\n: Bool val\n</code></pre>"},{"location":"promises-_Pending/#parameters_1","title":"Parameters","text":"<ul> <li>that: _Pending val</li> </ul>"},{"location":"promises-_Pending/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_PromiseFulFill/","title":"_PromiseFulFill[A: Any #share, B: Any #share]","text":"<p>[Source]</p> <p>Fulfill discarding its input value of <code>A</code> and returning a promise of type <code>B</code>.</p> <pre><code>class iso _PromiseFulFill[A: Any #share, B: Any #share] is\nFulfill[A, Promise[B] tag] iso\n</code></pre>"},{"location":"promises-_PromiseFulFill/#implements","title":"Implements","text":"<ul> <li>Fulfill[A, Promise[B] tag] iso</li> </ul>"},{"location":"promises-_PromiseFulFill/#constructors","title":"Constructors","text":""},{"location":"promises-_PromiseFulFill/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _PromiseFulFill[A, B] iso^\n</code></pre>"},{"location":"promises-_PromiseFulFill/#returns","title":"Returns","text":"<ul> <li>_PromiseFulFill[A, B] iso^</li> </ul>"},{"location":"promises-_PromiseFulFill/#public-functions","title":"Public Functions","text":""},{"location":"promises-_PromiseFulFill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nvalue: A)\n: Promise[B] tag\n</code></pre>"},{"location":"promises-_PromiseFulFill/#parameters","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-_PromiseFulFill/#returns_1","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-_Reject/","title":"_Reject","text":"<p>[Source] <pre><code>primitive val _Reject\n</code></pre></p>"},{"location":"promises-_Reject/#constructors","title":"Constructors","text":""},{"location":"promises-_Reject/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _Reject val^\n</code></pre>"},{"location":"promises-_Reject/#returns","title":"Returns","text":"<ul> <li>_Reject val^</li> </ul>"},{"location":"promises-_Reject/#public-functions","title":"Public Functions","text":""},{"location":"promises-_Reject/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _Reject val)\n: Bool val\n</code></pre>"},{"location":"promises-_Reject/#parameters","title":"Parameters","text":"<ul> <li>that: _Reject val</li> </ul>"},{"location":"promises-_Reject/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_Reject/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _Reject val)\n: Bool val\n</code></pre>"},{"location":"promises-_Reject/#parameters_1","title":"Parameters","text":"<ul> <li>that: _Reject val</li> </ul>"},{"location":"promises-_Reject/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"promises-_Then/","title":"_Then[A: Any #share, B: Any #share]","text":"<p>[Source]</p> <p>A step in a promise pipeline.</p> <pre><code>class ref _Then[A: Any #share, B: Any #share]\n</code></pre>"},{"location":"promises-_Then/#constructors","title":"Constructors","text":""},{"location":"promises-_Then/#create","title":"create","text":"<p>[Source]</p> <p>A step is represented by a fulfill function and a reject function.</p> <pre><code>new iso create(\nfulfill: Fulfill[A, B] iso,\nrejected: Reject[B] iso)\n: _Then[A, B] iso^\n</code></pre>"},{"location":"promises-_Then/#parameters","title":"Parameters","text":"<ul> <li>fulfill: Fulfill[A, B] iso</li> <li>rejected: Reject[B] iso</li> </ul>"},{"location":"promises-_Then/#returns","title":"Returns","text":"<ul> <li>_Then[A, B] iso^</li> </ul>"},{"location":"promises-_Then/#public-functions","title":"Public Functions","text":""},{"location":"promises-_Then/#promise","title":"promise","text":"<p>[Source]</p> <p>Returns the next promise in the chain.</p> <pre><code>fun box promise()\n: Promise[B] tag\n</code></pre>"},{"location":"promises-_Then/#returns_1","title":"Returns","text":"<ul> <li>Promise[B] tag</li> </ul>"},{"location":"promises-_Then/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the result of the previous promise when it is fulfilled.</p> <pre><code>fun ref apply(\nvalue: A)\n: None val\n</code></pre>"},{"location":"promises-_Then/#parameters_1","title":"Parameters","text":"<ul> <li>value: A</li> </ul>"},{"location":"promises-_Then/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"promises-_Then/#reject","title":"reject","text":"<p>[Source]</p> <p>Called when the previous promise is rejected.</p> <pre><code>fun ref reject()\n: None val\n</code></pre>"},{"location":"promises-_Then/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random--index/","title":"Random package","text":"<p>The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator.</p> <p>If your application does not require a specific generator, use Rand.</p> <p>Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with <code>Time.now</code>.</p> <pre><code>let rand = Rand\nlet n = rand.next()\n</code></pre>"},{"location":"random--index/#public-types","title":"Public Types","text":"<ul> <li>class Dice</li> <li>class MT</li> <li>type Rand</li> <li>trait Random</li> <li>class SplitMix64</li> <li>class XorOshiro128Plus</li> <li>class XorOshiro128StarStar</li> <li>class XorShift128Plus</li> </ul>"},{"location":"random-Dice/","title":"Dice","text":"<p>[Source]</p> <p>A simple dice roller.</p> <pre><code>class ref Dice\n</code></pre>"},{"location":"random-Dice/#constructors","title":"Constructors","text":""},{"location":"random-Dice/#create","title":"create","text":"<p>[Source]</p> <p>Initialise with a random number generator.</p> <pre><code>new ref create(\nfrom: Random ref)\n: Dice ref^\n</code></pre>"},{"location":"random-Dice/#parameters","title":"Parameters","text":"<ul> <li>from: Random ref</li> </ul>"},{"location":"random-Dice/#returns","title":"Returns","text":"<ul> <li>Dice ref^</li> </ul>"},{"location":"random-Dice/#public-fields","title":"Public fields","text":""},{"location":"random-Dice/#var-r-random-ref","title":"var r: Random ref","text":"<p>[Source]</p>"},{"location":"random-Dice/#public-functions","title":"Public Functions","text":""},{"location":"random-Dice/#apply","title":"apply","text":"<p>[Source]</p> <p>Return the sum of <code>count</code> rolls of a die with the given number of <code>sides</code>. The die is numbered from 1 to <code>sides</code>. For example, count = 2 and sides = 6 will return a value between 2 and 12.</p> <pre><code>fun ref apply(\ncount: U64 val,\nsides: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-Dice/#parameters_1","title":"Parameters","text":"<ul> <li>count: U64 val</li> <li>sides: U64 val</li> </ul>"},{"location":"random-Dice/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/","title":"MT","text":"<p>[Source]</p> <p>A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand.</p> <pre><code>class ref MT is\nRandom ref\n</code></pre>"},{"location":"random-MT/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-MT/#constructors","title":"Constructors","text":""},{"location":"random-MT/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: MT ref^\n</code></pre>"},{"location":"random-MT/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-MT/#returns","title":"Returns","text":"<ul> <li>MT ref^</li> </ul>"},{"location":"random-MT/#public-functions","title":"Public Functions","text":""},{"location":"random-MT/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#has_next","title":"has_next","text":"<pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-MT/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-MT/#u8","title":"u8","text":"<pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-MT/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-MT/#u16","title":"u16","text":"<pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-MT/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-MT/#u32","title":"u32","text":"<pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-MT/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-MT/#u64","title":"u64","text":"<pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-MT/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#u128","title":"u128","text":"<pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-MT/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-MT/#ulong","title":"ulong","text":"<pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-MT/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-MT/#usize","title":"usize","text":"<pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#i8","title":"i8","text":"<pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-MT/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-MT/#i16","title":"i16","text":"<pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-MT/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-MT/#i32","title":"i32","text":"<pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-MT/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-MT/#i64","title":"i64","text":"<pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-MT/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-MT/#i128","title":"i128","text":"<pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-MT/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-MT/#ilong","title":"ilong","text":"<pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-MT/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-MT/#isize","title":"isize","text":"<pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-MT/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-MT/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-MT/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-MT/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-MT/#real","title":"real","text":"<pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-MT/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-MT/#shufflea-a","title":"shuffle[A: A]","text":"<pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-MT/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-MT/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-MT/#private-functions","title":"Private Functions","text":""},{"location":"random-MT/#_populate","title":"_populate","text":"<p>[Source]</p> <p>Repopulates the state array.</p> <pre><code>fun ref _populate()\n: None val\n</code></pre>"},{"location":"random-MT/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-MT/#_n","title":"_n","text":"<p>[Source]</p> <pre><code>fun tag _n()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_23","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#_m","title":"_m","text":"<p>[Source]</p> <pre><code>fun tag _m()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_24","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#_n1","title":"_n1","text":"<p>[Source]</p> <pre><code>fun tag _n1()\n: USize val\n</code></pre>"},{"location":"random-MT/#returns_25","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-MT/#_mask","title":"_mask","text":"<p>[Source]</p> <pre><code>fun tag _mask(\nx: U64 val,\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-MT/#parameters_5","title":"Parameters","text":"<ul> <li>x: U64 val</li> <li>y: U64 val</li> </ul>"},{"location":"random-MT/#returns_26","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#_matrix","title":"_matrix","text":"<p>[Source]</p> <pre><code>fun tag _matrix(\nx: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-MT/#parameters_6","title":"Parameters","text":"<ul> <li>x: U64 val</li> </ul>"},{"location":"random-MT/#returns_27","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#_mix","title":"_mix","text":"<p>[Source]</p> <pre><code>fun tag _mix(\nx: U64 val,\ny: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-MT/#parameters_7","title":"Parameters","text":"<ul> <li>x: U64 val</li> <li>y: U64 val</li> </ul>"},{"location":"random-MT/#returns_28","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-MT/#_lower","title":"_lower","text":"<p>[Source]</p> <pre><code>fun ref _lower(\ni: USize val,\nx: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"random-MT/#parameters_8","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>x: U64 val</li> </ul>"},{"location":"random-MT/#returns_29","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"random-MT/#_upper","title":"_upper","text":"<p>[Source]</p> <pre><code>fun ref _upper(\ni: USize val,\nx: U64 val)\n: U64 val ?\n</code></pre>"},{"location":"random-MT/#parameters_9","title":"Parameters","text":"<ul> <li>i: USize val</li> <li>x: U64 val</li> </ul>"},{"location":"random-MT/#returns_30","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"random-MT/#_wrap","title":"_wrap","text":"<p>[Source]</p> <pre><code>fun ref _wrap()\n: U64 val ?\n</code></pre>"},{"location":"random-MT/#returns_31","title":"Returns","text":"<ul> <li>U64 val ?</li> </ul>"},{"location":"random-MT/#_u64_unbiased","title":"_u64_unbiased","text":"<pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-MT/#parameters_10","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-MT/#returns_32","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Rand/","title":"Rand","text":"<p>[Source] <pre><code>type Rand is\nXorOshiro128Plus ref\n</code></pre></p>"},{"location":"random-Rand/#type-alias-for","title":"Type Alias For","text":"<ul> <li>XorOshiro128Plus ref</li> </ul>"},{"location":"random-Random/","title":"Random","text":"<p>[Source]</p> <p>The <code>Random</code> trait should be implemented by all random number generators. The only method you need to implement is <code>fun ref next(): 64</code>. Once that method has been implemented, the <code>Random</code> trait provides default implementations of conversions to other number types.</p> <pre><code>trait ref Random\n</code></pre>"},{"location":"random-Random/#constructors","title":"Constructors","text":""},{"location":"random-Random/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: Random ref^\n</code></pre>"},{"location":"random-Random/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-Random/#returns","title":"Returns","text":"<ul> <li>Random ref^</li> </ul>"},{"location":"random-Random/#public-functions","title":"Public Functions","text":""},{"location":"random-Random/#has_next","title":"has_next","text":"<p>[Source]</p> <p>If used as an iterator, this always has another value.</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-Random/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-Random/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u8","title":"u8","text":"<p>[Source]</p> <p>A random integer in [0, 2^8)</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-Random/#returns_3","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-Random/#u16","title":"u16","text":"<p>[Source]</p> <p>A random integer in [0, 2^16)</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-Random/#returns_4","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-Random/#u32","title":"u32","text":"<p>[Source]</p> <p>A random integer in [0, 2^32)</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-Random/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-Random/#u64","title":"u64","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-Random/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-Random/#u128","title":"u128","text":"<p>[Source]</p> <p>A random integer in [0, 2^128)</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-Random/#returns_7","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-Random/#ulong","title":"ulong","text":"<p>[Source]</p> <p>A random integer in [0, ULong.max_value()]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-Random/#returns_8","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-Random/#usize","title":"usize","text":"<p>[Source]</p> <p>A random integer in [0, USize.max_value()]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-Random/#returns_9","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-Random/#i8","title":"i8","text":"<p>[Source]</p> <p>A random integer in [-2^7, 2^7)</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-Random/#returns_10","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-Random/#i16","title":"i16","text":"<p>[Source]</p> <p>A random integer in [-2^15, 2^15)</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-Random/#returns_11","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-Random/#i32","title":"i32","text":"<p>[Source]</p> <p>A random integer in [-2^31, 2^31)</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-Random/#returns_12","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-Random/#i64","title":"i64","text":"<p>[Source]</p> <p>A random integer in [-2^63, 2^63)</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-Random/#returns_13","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-Random/#i128","title":"i128","text":"<p>[Source]</p> <p>A random integer in [-2^127, 2^127)</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-Random/#returns_14","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-Random/#ilong","title":"ilong","text":"<p>[Source]</p> <p>A random integer in [ILong.min_value(), ILong.max_value()]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-Random/#returns_15","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-Random/#isize","title":"isize","text":"<p>[Source]</p> <p>A random integer in [ISize.min_value(), ISize.max_value()]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-Random/#returns_16","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-Random/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_1","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_17","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication.</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <p>A random integer in [0, n)</p> <p>Not biased with small values of <code>n</code> like <code>int</code>.</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-Random/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-Random/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-Random/#real","title":"real","text":"<p>[Source]</p> <p>A random number in [0, 1)</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-Random/#returns_20","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-Random/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <p>Shuffle the elements of the array into a random order, mutating the array.</p> <pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-Random/#parameters_4","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-Random/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-Random/#private-functions","title":"Private Functions","text":""},{"location":"random-Random/#_u64_unbiased","title":"_u64_unbiased","text":"<p>[Source]</p> <p>Generates a U64 in the range <code>[0, n)</code> while avoiding bias.</p> <p>See: - https://arxiv.org/abs/1805.10941 - http://www.pcg-random.org/posts/bounded-rands.html</p> <pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-Random/#parameters_5","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-Random/#returns_22","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/","title":"SplitMix64","text":"<p>[Source]</p> <p>Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at:</p> <p>http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf</p> <p>Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement.</p> <pre><code>class ref SplitMix64 is\nRandom ref\n</code></pre>"},{"location":"random-SplitMix64/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-SplitMix64/#constructors","title":"Constructors","text":""},{"location":"random-SplitMix64/#from_u64","title":"from_u64","text":"<p>[Source]</p> <pre><code>new ref from_u64(\nx: U64 val = 5489)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-SplitMix64/#returns","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#create","title":"create","text":"<p>[Source]</p> <p>Only x is used, y is discarded.</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: SplitMix64 ref^\n</code></pre>"},{"location":"random-SplitMix64/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-SplitMix64/#returns_1","title":"Returns","text":"<ul> <li>SplitMix64 ref^</li> </ul>"},{"location":"random-SplitMix64/#public-functions","title":"Public Functions","text":""},{"location":"random-SplitMix64/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-SplitMix64/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-SplitMix64/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-SplitMix64/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-SplitMix64/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-SplitMix64/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-SplitMix64/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-SplitMix64/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-SplitMix64/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-SplitMix64/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-SplitMix64/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-SplitMix64/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-SplitMix64/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-SplitMix64/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-SplitMix64/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-SplitMix64/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-SplitMix64/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-SplitMix64/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-SplitMix64/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-SplitMix64/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-SplitMix64/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-SplitMix64/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-SplitMix64/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-SplitMix64/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-SplitMix64/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-SplitMix64/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-SplitMix64/#private-functions","title":"Private Functions","text":""},{"location":"random-SplitMix64/#_u64_unbiased","title":"_u64_unbiased","text":"<p>[Source]</p> <pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-SplitMix64/#parameters_6","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-SplitMix64/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/","title":"XorOshiro128Plus","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This is currently the default Rand implementation.</p> <pre><code>class ref XorOshiro128Plus is\nRandom ref\n</code></pre>"},{"location":"random-XorOshiro128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\nx: U64 val = 5489)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: XorOshiro128Plus ref^\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128Plus ref^</li> </ul>"},{"location":"random-XorOshiro128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128Plus/#private-functions","title":"Private Functions","text":""},{"location":"random-XorOshiro128Plus/#_u64_unbiased","title":"_u64_unbiased","text":"<p>[Source]</p> <pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128Plus/#parameters_6","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-XorOshiro128Plus/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/","title":"XorOshiro128StarStar","text":"<p>[Source]</p> <p>This is an implementation of xoroshiro128**, as detailed at:</p> <p>http://xoshiro.di.unimi.it/</p> <p>This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests).</p> <pre><code>class ref XorOshiro128StarStar is\nRandom ref\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#constructors","title":"Constructors","text":""},{"location":"random-XorOshiro128StarStar/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\nx: U64 val = 5489)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: XorOshiro128StarStar ref^\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_1","title":"Returns","text":"<ul> <li>XorOshiro128StarStar ref^</li> </ul>"},{"location":"random-XorOshiro128StarStar/#public-functions","title":"Public Functions","text":""},{"location":"random-XorOshiro128StarStar/#next","title":"next","text":"<p>[Source]</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorOshiro128StarStar/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#private-functions","title":"Private Functions","text":""},{"location":"random-XorOshiro128StarStar/#_u64_unbiased","title":"_u64_unbiased","text":"<p>[Source]</p> <pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-XorOshiro128StarStar/#parameters_6","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-XorOshiro128StarStar/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/","title":"XorShift128Plus","text":"<p>[Source]</p> <p>This is an implementation of xorshift+, as detailed at:</p> <p>http://xoroshiro.di.unimi.it</p> <p>This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand.</p> <pre><code>class ref XorShift128Plus is\nRandom ref\n</code></pre>"},{"location":"random-XorShift128Plus/#implements","title":"Implements","text":"<ul> <li>Random ref</li> </ul>"},{"location":"random-XorShift128Plus/#constructors","title":"Constructors","text":""},{"location":"random-XorShift128Plus/#from_u64","title":"from_u64","text":"<p>[Source]</p> <p>Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state.</p> <pre><code>new ref from_u64(\nx: U64 val = 5489)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> </ul>"},{"location":"random-XorShift128Plus/#returns","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#create","title":"create","text":"<p>[Source]</p> <p>Create with the specified seed. Returned values are deterministic for a given seed.</p> <pre><code>new ref create(\nx: U64 val = 5489,\ny: U64 val = 0)\n: XorShift128Plus ref^\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_1","title":"Parameters","text":"<ul> <li>x: U64 val = 5489</li> <li>y: U64 val = 0</li> </ul>"},{"location":"random-XorShift128Plus/#returns_1","title":"Returns","text":"<ul> <li>XorShift128Plus ref^</li> </ul>"},{"location":"random-XorShift128Plus/#public-functions","title":"Public Functions","text":""},{"location":"random-XorShift128Plus/#next","title":"next","text":"<p>[Source]</p> <p>A random integer in [0, 2^64)</p> <pre><code>fun ref next()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#has_next","title":"has_next","text":"<p>[Source]</p> <pre><code>fun tag has_next()\n: Bool val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"random-XorShift128Plus/#u8","title":"u8","text":"<p>[Source]</p> <pre><code>fun ref u8()\n: U8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"random-XorShift128Plus/#u16","title":"u16","text":"<p>[Source]</p> <pre><code>fun ref u16()\n: U16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_5","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"random-XorShift128Plus/#u32","title":"u32","text":"<p>[Source]</p> <pre><code>fun ref u32()\n: U32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"random-XorShift128Plus/#u64","title":"u64","text":"<p>[Source]</p> <pre><code>fun ref u64()\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#u128","title":"u128","text":"<p>[Source]</p> <pre><code>fun ref u128()\n: U128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_8","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ulong","title":"ulong","text":"<p>[Source]</p> <pre><code>fun ref ulong()\n: ULong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_9","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"random-XorShift128Plus/#usize","title":"usize","text":"<p>[Source]</p> <pre><code>fun ref usize()\n: USize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_10","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"random-XorShift128Plus/#i8","title":"i8","text":"<p>[Source]</p> <pre><code>fun ref i8()\n: I8 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_11","title":"Returns","text":"<ul> <li>I8 val</li> </ul>"},{"location":"random-XorShift128Plus/#i16","title":"i16","text":"<p>[Source]</p> <pre><code>fun ref i16()\n: I16 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_12","title":"Returns","text":"<ul> <li>I16 val</li> </ul>"},{"location":"random-XorShift128Plus/#i32","title":"i32","text":"<p>[Source]</p> <pre><code>fun ref i32()\n: I32 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_13","title":"Returns","text":"<ul> <li>I32 val</li> </ul>"},{"location":"random-XorShift128Plus/#i64","title":"i64","text":"<p>[Source]</p> <pre><code>fun ref i64()\n: I64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_14","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"random-XorShift128Plus/#i128","title":"i128","text":"<p>[Source]</p> <pre><code>fun ref i128()\n: I128 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_15","title":"Returns","text":"<ul> <li>I128 val</li> </ul>"},{"location":"random-XorShift128Plus/#ilong","title":"ilong","text":"<p>[Source]</p> <pre><code>fun ref ilong()\n: ILong val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_16","title":"Returns","text":"<ul> <li>ILong val</li> </ul>"},{"location":"random-XorShift128Plus/#isize","title":"isize","text":"<p>[Source]</p> <pre><code>fun ref isize()\n: ISize val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_17","title":"Returns","text":"<ul> <li>ISize val</li> </ul>"},{"location":"random-XorShift128Plus/#int_fp_multoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_2","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_18","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#intoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_3","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_19","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#int_unbiasedoptional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-realn-val","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]","text":"<p>[Source]</p> <pre><code>fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | \nU64 val | U128 val | ULong val | \nUSize val) &amp; Real[N] val)](\nn: N)\n: N\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_4","title":"Parameters","text":"<ul> <li>n: N</li> </ul>"},{"location":"random-XorShift128Plus/#returns_20","title":"Returns","text":"<ul> <li>N</li> </ul>"},{"location":"random-XorShift128Plus/#real","title":"real","text":"<p>[Source]</p> <pre><code>fun ref real()\n: F64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#returns_21","title":"Returns","text":"<ul> <li>F64 val</li> </ul>"},{"location":"random-XorShift128Plus/#shufflea-a","title":"shuffle[A: A]","text":"<p>[Source]</p> <pre><code>fun ref shuffle[A: A](\narray: Array[A] ref)\n: None val\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_5","title":"Parameters","text":"<ul> <li>array: Array[A] ref</li> </ul>"},{"location":"random-XorShift128Plus/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"random-XorShift128Plus/#private-functions","title":"Private Functions","text":""},{"location":"random-XorShift128Plus/#_u64_unbiased","title":"_u64_unbiased","text":"<p>[Source]</p> <pre><code>fun ref _u64_unbiased(\nrange: U64 val)\n: U64 val\n</code></pre>"},{"location":"random-XorShift128Plus/#parameters_6","title":"Parameters","text":"<ul> <li>range: U64 val</li> </ul>"},{"location":"random-XorShift128Plus/#returns_23","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"signals--index/","title":"Signals package","text":"<p>The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a <code>SignalHandler</code> and a corresponding <code>SignalNotify</code> object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding <code>SignalNotify</code>'s apply method.</p>"},{"location":"signals--index/#example-program","title":"Example program","text":"<p>The following program will listen for the TERM signal and output a message to standard out if it is received.</p> <pre><code>use \"signals\"\nactor Main\nnew create(env: Env) =&gt;\n// Create a TERM handler\nlet signal = SignalHandler(TermHandler(env), Sig.term())\n// Raise TERM signal\nsignal.raise()\nclass TermHandler is SignalNotify\nlet _env: Env\nnew iso create(env: Env) =&gt;\n_env = env\nfun ref apply(count: U32): Bool =&gt;\n_env.out.print(\"TERM signal received\")\ntrue\n</code></pre>"},{"location":"signals--index/#signal-portability","title":"Signal portability","text":"<p>The <code>Sig</code> primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error.</p>"},{"location":"signals--index/#shutting-down-handlers","title":"Shutting down handlers","text":"<p>Unlike a <code>TCPConnection</code> and other forms of input receiving, creating a <code>SignalHandler</code> will not keep your program running. As such, you are not required to call <code>dispose</code> on your signal handlers in order to shutdown your program.</p>"},{"location":"signals--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Sig</li> <li>actor SignalHandler</li> <li>interface SignalNotify</li> <li>primitive SignalRaise</li> </ul>"},{"location":"signals-Sig/","title":"Sig","text":"<p>[Source]</p> <p>Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable.</p> <pre><code>primitive val Sig\n</code></pre>"},{"location":"signals-Sig/#constructors","title":"Constructors","text":""},{"location":"signals-Sig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sig val^\n</code></pre>"},{"location":"signals-Sig/#returns","title":"Returns","text":"<ul> <li>Sig val^</li> </ul>"},{"location":"signals-Sig/#public-functions","title":"Public Functions","text":""},{"location":"signals-Sig/#hup","title":"hup","text":"<p>[Source]</p> <pre><code>fun box hup()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#int","title":"int","text":"<p>[Source]</p> <pre><code>fun box int()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_2","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#quit","title":"quit","text":"<p>[Source]</p> <pre><code>fun box quit()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_3","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ill","title":"ill","text":"<p>[Source]</p> <pre><code>fun box ill()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_4","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#trap","title":"trap","text":"<p>[Source]</p> <pre><code>fun box trap()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_5","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#abrt","title":"abrt","text":"<p>[Source]</p> <pre><code>fun box abrt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_6","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#emt","title":"emt","text":"<p>[Source]</p> <pre><code>fun box emt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_7","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#fpe","title":"fpe","text":"<p>[Source]</p> <pre><code>fun box fpe()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_8","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#kill","title":"kill","text":"<p>[Source]</p> <pre><code>fun box kill()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_9","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#bus","title":"bus","text":"<p>[Source]</p> <pre><code>fun box bus()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_10","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#segv","title":"segv","text":"<p>[Source]</p> <pre><code>fun box segv()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_11","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#sys","title":"sys","text":"<p>[Source]</p> <pre><code>fun box sys()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_12","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#pipe","title":"pipe","text":"<p>[Source]</p> <pre><code>fun box pipe()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_13","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#alrm","title":"alrm","text":"<p>[Source]</p> <pre><code>fun box alrm()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_14","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#term","title":"term","text":"<p>[Source]</p> <pre><code>fun box term()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_15","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#urg","title":"urg","text":"<p>[Source]</p> <pre><code>fun box urg()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_16","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#stkflt","title":"stkflt","text":"<p>[Source]</p> <pre><code>fun box stkflt()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_17","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#stop","title":"stop","text":"<p>[Source]</p> <pre><code>fun box stop()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_18","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#tstp","title":"tstp","text":"<p>[Source]</p> <pre><code>fun box tstp()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_19","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#cont","title":"cont","text":"<p>[Source]</p> <pre><code>fun box cont()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_20","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#chld","title":"chld","text":"<p>[Source]</p> <pre><code>fun box chld()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_21","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ttin","title":"ttin","text":"<p>[Source]</p> <pre><code>fun box ttin()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_22","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#ttou","title":"ttou","text":"<p>[Source]</p> <pre><code>fun box ttou()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_23","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#io","title":"io","text":"<p>[Source]</p> <pre><code>fun box io()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_24","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#xcpu","title":"xcpu","text":"<p>[Source]</p> <pre><code>fun box xcpu()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_25","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#xfsz","title":"xfsz","text":"<p>[Source]</p> <pre><code>fun box xfsz()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_26","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#vtalrm","title":"vtalrm","text":"<p>[Source]</p> <pre><code>fun box vtalrm()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_27","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#prof","title":"prof","text":"<p>[Source]</p> <pre><code>fun box prof()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_28","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#winch","title":"winch","text":"<p>[Source]</p> <pre><code>fun box winch()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_29","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#info","title":"info","text":"<p>[Source]</p> <pre><code>fun box info()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_30","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#pwr","title":"pwr","text":"<p>[Source]</p> <pre><code>fun box pwr()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_31","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#usr1","title":"usr1","text":"<p>[Source]</p> <pre><code>fun box usr1()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_32","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#usr2","title":"usr2","text":"<p>[Source]</p> <pre><code>fun box usr2()\n: U32 val\n</code></pre>"},{"location":"signals-Sig/#returns_33","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"signals-Sig/#rt","title":"rt","text":"<p>[Source]</p> <pre><code>fun box rt(\nn: U32 val)\n: U32 val ?\n</code></pre>"},{"location":"signals-Sig/#parameters","title":"Parameters","text":"<ul> <li>n: U32 val</li> </ul>"},{"location":"signals-Sig/#returns_34","title":"Returns","text":"<ul> <li>U32 val ?</li> </ul>"},{"location":"signals-Sig/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Sig val)\n: Bool val\n</code></pre>"},{"location":"signals-Sig/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sig val</li> </ul>"},{"location":"signals-Sig/#returns_35","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-Sig/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Sig val)\n: Bool val\n</code></pre>"},{"location":"signals-Sig/#parameters_2","title":"Parameters","text":"<ul> <li>that: Sig val</li> </ul>"},{"location":"signals-Sig/#returns_36","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalHandler/","title":"SignalHandler","text":"<p>[Source]</p> <p>Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it.</p> <pre><code>actor tag SignalHandler is\nAsioEventNotify tag\n</code></pre>"},{"location":"signals-SignalHandler/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"signals-SignalHandler/#constructors","title":"Constructors","text":""},{"location":"signals-SignalHandler/#create","title":"create","text":"<p>[Source]</p> <p>Create a signal handler.</p> <pre><code>new tag create(\nnotify: SignalNotify iso,\nsig: U32 val,\nwait: Bool val = false)\n: SignalHandler tag^\n</code></pre>"},{"location":"signals-SignalHandler/#parameters","title":"Parameters","text":"<ul> <li>notify: SignalNotify iso</li> <li>sig: U32 val</li> <li>wait: Bool val = false</li> </ul>"},{"location":"signals-SignalHandler/#returns","title":"Returns","text":"<ul> <li>SignalHandler tag^</li> </ul>"},{"location":"signals-SignalHandler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"signals-SignalHandler/#raise","title":"raise","text":"<p>[Source]</p> <p>Raise the signal.</p> <pre><code>be raise()\n</code></pre>"},{"location":"signals-SignalHandler/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of the signal handler.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"signals-SignalHandler/#private-behaviours","title":"Private Behaviours","text":""},{"location":"signals-SignalHandler/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>Called when the signal is received, or when the AsioEventID can be destroyed.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"signals-SignalHandler/#parameters_1","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"signals-SignalHandler/#private-functions","title":"Private Functions","text":""},{"location":"signals-SignalHandler/#_dispose","title":"_dispose","text":"<p>[Source]</p> <p>Dispose of the AsioEventID.</p> <pre><code>fun ref _dispose()\n: None val\n</code></pre>"},{"location":"signals-SignalHandler/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals-SignalNotify/","title":"SignalNotify","text":"<p>[Source]</p> <p>Notifications for a signal.</p> <pre><code>interface ref SignalNotify\n</code></pre>"},{"location":"signals-SignalNotify/#public-functions","title":"Public Functions","text":""},{"location":"signals-SignalNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal.</p> <pre><code>fun ref apply(\ncount: U32 val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalNotify/#parameters","title":"Parameters","text":"<ul> <li>count: U32 val</li> </ul>"},{"location":"signals-SignalNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Called if the signal is disposed. This is also called if the notifier returns false.</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"signals-SignalNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals-SignalRaise/","title":"SignalRaise","text":"<p>[Source]</p> <p>Raise a signal.</p> <pre><code>primitive val SignalRaise\n</code></pre>"},{"location":"signals-SignalRaise/#constructors","title":"Constructors","text":""},{"location":"signals-SignalRaise/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SignalRaise val^\n</code></pre>"},{"location":"signals-SignalRaise/#returns","title":"Returns","text":"<ul> <li>SignalRaise val^</li> </ul>"},{"location":"signals-SignalRaise/#public-functions","title":"Public Functions","text":""},{"location":"signals-SignalRaise/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nsig: U32 val)\n: None val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters","title":"Parameters","text":"<ul> <li>sig: U32 val</li> </ul>"},{"location":"signals-SignalRaise/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"signals-SignalRaise/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SignalRaise val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters_1","title":"Parameters","text":"<ul> <li>that: SignalRaise val</li> </ul>"},{"location":"signals-SignalRaise/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"signals-SignalRaise/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SignalRaise val)\n: Bool val\n</code></pre>"},{"location":"signals-SignalRaise/#parameters_2","title":"Parameters","text":"<ul> <li>that: SignalRaise val</li> </ul>"},{"location":"signals-SignalRaise/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"strings--index/","title":"Strings package","text":"<p>The Strings package provides utilities for working with sequences of strings.</p>"},{"location":"strings--index/#public-types","title":"Public Types","text":"<ul> <li>primitive CommonPrefix</li> </ul>"},{"location":"strings-CommonPrefix/","title":"CommonPrefix","text":"<p>[Source]</p> <p>Creates a string that is the common prefix of the supplied strings, possibly empty.</p> <pre><code>primitive val CommonPrefix\n</code></pre>"},{"location":"strings-CommonPrefix/#constructors","title":"Constructors","text":""},{"location":"strings-CommonPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CommonPrefix val^\n</code></pre>"},{"location":"strings-CommonPrefix/#returns","title":"Returns","text":"<ul> <li>CommonPrefix val^</li> </ul>"},{"location":"strings-CommonPrefix/#public-functions","title":"Public Functions","text":""},{"location":"strings-CommonPrefix/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: ReadSeq[Stringable box] box)\n: String iso^\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters","title":"Parameters","text":"<ul> <li>data: ReadSeq[Stringable box] box</li> </ul>"},{"location":"strings-CommonPrefix/#returns_1","title":"Returns","text":"<ul> <li>String iso^</li> </ul>"},{"location":"strings-CommonPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CommonPrefix val)\n: Bool val\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: CommonPrefix val</li> </ul>"},{"location":"strings-CommonPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"strings-CommonPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CommonPrefix val)\n: Bool val\n</code></pre>"},{"location":"strings-CommonPrefix/#parameters_2","title":"Parameters","text":"<ul> <li>that: CommonPrefix val</li> </ul>"},{"location":"strings-CommonPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term--index/","title":"Term package","text":"<p>The Term package provides support for building text-based user interfaces in ANSI terminals.</p>"},{"location":"term--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ANSI</li> <li>interface ANSINotify</li> <li>actor ANSITerm</li> <li>primitive EraseLeft</li> <li>primitive EraseLine</li> <li>primitive EraseRight</li> <li>class Readline</li> <li>interface ReadlineNotify</li> </ul>"},{"location":"term--index/#private-types","title":"Private Types","text":"<ul> <li>type _EraseDirection</li> <li>primitive _EscapeCSI</li> <li>primitive _EscapeMod</li> <li>primitive _EscapeNone</li> <li>primitive _EscapeSS3</li> <li>primitive _EscapeStart</li> <li>type _EscapeState</li> <li>primitive _TIOCGWINSZ</li> <li>class _TermResizeNotify</li> <li>struct _TermSize</li> </ul>"},{"location":"term-ANSI/","title":"ANSI","text":"<p>[Source]</p> <p>These strings can be embedded in text when writing to a StdStream to create a text-based UI.</p> <pre><code>primitive val ANSI\n</code></pre>"},{"location":"term-ANSI/#constructors","title":"Constructors","text":""},{"location":"term-ANSI/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ANSI val^\n</code></pre>"},{"location":"term-ANSI/#returns","title":"Returns","text":"<ul> <li>ANSI val^</li> </ul>"},{"location":"term-ANSI/#public-functions","title":"Public Functions","text":""},{"location":"term-ANSI/#up","title":"up","text":"<p>[Source]</p> <p>Move the cursor up n lines. 0 is the same as 1.</p> <pre><code>fun box up(\nn: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#down","title":"down","text":"<p>[Source]</p> <p>Move the cursor down n lines. 0 is the same as 1.</p> <pre><code>fun box down(\nn: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_1","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#right","title":"right","text":"<p>[Source]</p> <p>Move the cursor right n columns. 0 is the same as 1.</p> <pre><code>fun box right(\nn: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_2","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#left","title":"left","text":"<p>[Source]</p> <p>Move the cursor left n columns. 0 is the same as 1.</p> <pre><code>fun box left(\nn: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_3","title":"Parameters","text":"<ul> <li>n: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cursor","title":"cursor","text":"<p>[Source]</p> <p>Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen.</p> <pre><code>fun box cursor(\nx: U32 val = 0,\ny: U32 val = 0)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_4","title":"Parameters","text":"<ul> <li>x: U32 val = 0</li> <li>y: U32 val = 0</li> </ul>"},{"location":"term-ANSI/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#clear","title":"clear","text":"<p>[Source]</p> <p>Clear the screen and move the cursor to the top left corner.</p> <pre><code>fun box clear()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#erase","title":"erase","text":"<p>[Source]</p> <p>Erases content. The direction to erase is dictated by the <code>direction</code> parameter. Use <code>EraseLeft</code> to erase everything from the cursor to the beginning of the line. Use <code>EraseLine</code> to erase the entire line. Use <code>EraseRight</code> to erase everything from the cursor to the end of the line. The default direction is <code>EraseRight</code>.</p> <pre><code>fun box erase(\ndirection: (EraseLeft val | EraseLine val | EraseRight val) = reference)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_5","title":"Parameters","text":"<ul> <li>direction: (EraseLeft val | EraseLine val | EraseRight val) = reference</li> </ul>"},{"location":"term-ANSI/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#reset","title":"reset","text":"<p>[Source]</p> <p>Resets all colours and text styles to the default.</p> <pre><code>fun box reset()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bold","title":"bold","text":"<p>[Source]</p> <p>Bold text. Does nothing on Windows.</p> <pre><code>fun box bold(\nstate: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_6","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#underline","title":"underline","text":"<p>[Source]</p> <p>Underlined text. Does nothing on Windows.</p> <pre><code>fun box underline(\nstate: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_7","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blink","title":"blink","text":"<p>[Source]</p> <p>Blinking text. Does nothing on Windows.</p> <pre><code>fun box blink(\nstate: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_8","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_11","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#reverse","title":"reverse","text":"<p>[Source]</p> <p>Swap foreground and background colour.</p> <pre><code>fun box reverse(\nstate: Bool val = true)\n: String val\n</code></pre>"},{"location":"term-ANSI/#parameters_9","title":"Parameters","text":"<ul> <li>state: Bool val = true</li> </ul>"},{"location":"term-ANSI/#returns_12","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#black","title":"black","text":"<p>[Source]</p> <p>Black text.</p> <pre><code>fun box black()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_13","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#red","title":"red","text":"<p>[Source]</p> <p>Red text.</p> <pre><code>fun box red()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_14","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#green","title":"green","text":"<p>[Source]</p> <p>Green text.</p> <pre><code>fun box green()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_15","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#yellow","title":"yellow","text":"<p>[Source]</p> <p>Yellow text.</p> <pre><code>fun box yellow()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_16","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blue","title":"blue","text":"<p>[Source]</p> <p>Blue text.</p> <pre><code>fun box blue()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_17","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#magenta","title":"magenta","text":"<p>[Source]</p> <p>Magenta text.</p> <pre><code>fun box magenta()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_18","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cyan","title":"cyan","text":"<p>[Source]</p> <p>Cyan text.</p> <pre><code>fun box cyan()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_19","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#grey","title":"grey","text":"<p>[Source]</p> <p>Grey text.</p> <pre><code>fun box grey()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_20","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#white","title":"white","text":"<p>[Source]</p> <p>White text.</p> <pre><code>fun box white()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_21","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_red","title":"bright_red","text":"<p>[Source]</p> <p>Bright red text.</p> <pre><code>fun box bright_red()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_22","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_green","title":"bright_green","text":"<p>[Source]</p> <p>Bright green text.</p> <pre><code>fun box bright_green()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_23","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_yellow","title":"bright_yellow","text":"<p>[Source]</p> <p>Bright yellow text.</p> <pre><code>fun box bright_yellow()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_24","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_blue","title":"bright_blue","text":"<p>[Source]</p> <p>Bright blue text.</p> <pre><code>fun box bright_blue()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_25","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_magenta","title":"bright_magenta","text":"<p>[Source]</p> <p>Bright magenta text.</p> <pre><code>fun box bright_magenta()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_26","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_cyan","title":"bright_cyan","text":"<p>[Source]</p> <p>Bright cyan text.</p> <pre><code>fun box bright_cyan()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_27","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_grey","title":"bright_grey","text":"<p>[Source]</p> <p>Bright grey text.</p> <pre><code>fun box bright_grey()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_28","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#black_bg","title":"black_bg","text":"<p>[Source]</p> <p>Black background.</p> <pre><code>fun box black_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_29","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#red_bg","title":"red_bg","text":"<p>[Source]</p> <p>Red background.</p> <pre><code>fun box red_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_30","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#green_bg","title":"green_bg","text":"<p>[Source]</p> <p>Green background.</p> <pre><code>fun box green_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_31","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#yellow_bg","title":"yellow_bg","text":"<p>[Source]</p> <p>Yellow background.</p> <pre><code>fun box yellow_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_32","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#blue_bg","title":"blue_bg","text":"<p>[Source]</p> <p>Blue background.</p> <pre><code>fun box blue_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_33","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#magenta_bg","title":"magenta_bg","text":"<p>[Source]</p> <p>Magenta background.</p> <pre><code>fun box magenta_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_34","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#cyan_bg","title":"cyan_bg","text":"<p>[Source]</p> <p>Cyan background.</p> <pre><code>fun box cyan_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_35","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#grey_bg","title":"grey_bg","text":"<p>[Source]</p> <p>Grey background.</p> <pre><code>fun box grey_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_36","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#white_bg","title":"white_bg","text":"<p>[Source]</p> <p>White background.</p> <pre><code>fun box white_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_37","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_red_bg","title":"bright_red_bg","text":"<p>[Source]</p> <p>Bright red background.</p> <pre><code>fun box bright_red_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_38","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_green_bg","title":"bright_green_bg","text":"<p>[Source]</p> <p>Bright green background.</p> <pre><code>fun box bright_green_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_39","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_yellow_bg","title":"bright_yellow_bg","text":"<p>[Source]</p> <p>Bright yellow background.</p> <pre><code>fun box bright_yellow_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_40","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_blue_bg","title":"bright_blue_bg","text":"<p>[Source]</p> <p>Bright blue background.</p> <pre><code>fun box bright_blue_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_41","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_magenta_bg","title":"bright_magenta_bg","text":"<p>[Source]</p> <p>Bright magenta background.</p> <pre><code>fun box bright_magenta_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_42","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_cyan_bg","title":"bright_cyan_bg","text":"<p>[Source]</p> <p>Bright cyan background.</p> <pre><code>fun box bright_cyan_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_43","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#bright_grey_bg","title":"bright_grey_bg","text":"<p>[Source]</p> <p>Bright grey background.</p> <pre><code>fun box bright_grey_bg()\n: String val\n</code></pre>"},{"location":"term-ANSI/#returns_44","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"term-ANSI/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ANSI val)\n: Bool val\n</code></pre>"},{"location":"term-ANSI/#parameters_10","title":"Parameters","text":"<ul> <li>that: ANSI val</li> </ul>"},{"location":"term-ANSI/#returns_45","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-ANSI/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ANSI val)\n: Bool val\n</code></pre>"},{"location":"term-ANSI/#parameters_11","title":"Parameters","text":"<ul> <li>that: ANSI val</li> </ul>"},{"location":"term-ANSI/#returns_46","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-ANSINotify/","title":"ANSINotify","text":"<p>[Source]</p> <p>Receive input from an ANSITerm.</p> <pre><code>interface ref ANSINotify\n</code></pre>"},{"location":"term-ANSINotify/#public-functions","title":"Public Functions","text":""},{"location":"term-ANSINotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nterm: ANSITerm ref,\ninput: U8 val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"term-ANSINotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#up","title":"up","text":"<p>[Source]</p> <pre><code>fun ref up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_1","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#down","title":"down","text":"<p>[Source]</p> <pre><code>fun ref down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_2","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#left","title":"left","text":"<p>[Source]</p> <pre><code>fun ref left(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_3","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#right","title":"right","text":"<p>[Source]</p> <pre><code>fun ref right(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_4","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#delete","title":"delete","text":"<p>[Source]</p> <pre><code>fun ref delete(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#home","title":"home","text":"<p>[Source]</p> <pre><code>fun ref home(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#end_key","title":"end_key","text":"<p>[Source]</p> <pre><code>fun ref end_key(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\ni: U8 val,\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_11","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-ANSINotify/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#prompt","title":"prompt","text":"<p>[Source]</p> <pre><code>fun ref prompt(\nterm: ANSITerm ref,\nvalue: String val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_12","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"term-ANSINotify/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\nrows: U16 val,\ncols: U16 val)\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#parameters_13","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"term-ANSINotify/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSINotify/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"term-ANSINotify/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/","title":"ANSITerm","text":"<p>[Source]</p> <p>Handles ANSI escape codes from stdin.</p> <pre><code>actor tag ANSITerm\n</code></pre>"},{"location":"term-ANSITerm/#constructors","title":"Constructors","text":""},{"location":"term-ANSITerm/#create","title":"create","text":"<p>[Source]</p> <p>Create a new ANSI term.</p> <pre><code>new tag create(\nnotify: ANSINotify iso,\nsource: DisposableActor tag,\ntimers: Timers tag = reference)\n: ANSITerm tag^\n</code></pre>"},{"location":"term-ANSITerm/#parameters","title":"Parameters","text":"<ul> <li>notify: ANSINotify iso</li> <li>source: DisposableActor tag</li> <li>timers: Timers tag = reference</li> </ul>"},{"location":"term-ANSITerm/#returns","title":"Returns","text":"<ul> <li>ANSITerm tag^</li> </ul>"},{"location":"term-ANSITerm/#public-behaviours","title":"Public Behaviours","text":""},{"location":"term-ANSITerm/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives input from stdin.</p> <pre><code>be apply(\ndata: Array[U8 val] iso)\n</code></pre>"},{"location":"term-ANSITerm/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"term-ANSITerm/#prompt","title":"prompt","text":"<p>[Source]</p> <p>Pass a prompt along to the notifier.</p> <pre><code>be prompt(\nvalue: String val)\n</code></pre>"},{"location":"term-ANSITerm/#parameters_2","title":"Parameters","text":"<ul> <li>value: String val</li> </ul>"},{"location":"term-ANSITerm/#size","title":"size","text":"<p>[Source]</p> <pre><code>be size()\n</code></pre>"},{"location":"term-ANSITerm/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Stop accepting input, inform the notifier we have closed, and dispose of our source.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"term-ANSITerm/#private-behaviours","title":"Private Behaviours","text":""},{"location":"term-ANSITerm/#_timeout","title":"_timeout","text":"<p>[Source]</p> <p>Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence.</p> <pre><code>be _timeout()\n</code></pre>"},{"location":"term-ANSITerm/#private-functions","title":"Private Functions","text":""},{"location":"term-ANSITerm/#_size","title":"_size","text":"<p>[Source]</p> <p>Pass the window size to the notifier.</p> <pre><code>fun ref _size()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_mod","title":"_mod","text":"<p>[Source]</p> <p>Set the modifier bools.</p> <pre><code>fun ref _mod()\n: (Bool val , Bool val , Bool val)\n</code></pre>"},{"location":"term-ANSITerm/#returns_2","title":"Returns","text":"<ul> <li>(Bool val , Bool val , Bool val)</li> </ul>"},{"location":"term-ANSITerm/#_keypad","title":"_keypad","text":"<p>[Source]</p> <p>An extended key.</p> <pre><code>fun ref _keypad()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_up","title":"_up","text":"<p>[Source]</p> <p>Up arrow.</p> <pre><code>fun ref _up()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_down","title":"_down","text":"<p>[Source]</p> <p>Down arrow.</p> <pre><code>fun ref _down()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_left","title":"_left","text":"<p>[Source]</p> <p>Left arrow.</p> <pre><code>fun ref _left()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_right","title":"_right","text":"<p>[Source]</p> <p>Right arrow.</p> <pre><code>fun ref _right()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_delete","title":"_delete","text":"<p>[Source]</p> <p>Delete key.</p> <pre><code>fun ref _delete()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_insert","title":"_insert","text":"<p>[Source]</p> <p>Insert key.</p> <pre><code>fun ref _insert()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_home","title":"_home","text":"<p>[Source]</p> <p>Home key.</p> <pre><code>fun ref _home()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_end","title":"_end","text":"<p>[Source]</p> <p>End key.</p> <pre><code>fun ref _end()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_page_up","title":"_page_up","text":"<p>[Source]</p> <p>Page up key.</p> <pre><code>fun ref _page_up()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_page_down","title":"_page_down","text":"<p>[Source]</p> <p>Page down key.</p> <pre><code>fun ref _page_down()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_fn_key","title":"_fn_key","text":"<p>[Source]</p> <p>Function key.</p> <pre><code>fun ref _fn_key(\ni: U8 val)\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#parameters_3","title":"Parameters","text":"<ul> <li>i: U8 val</li> </ul>"},{"location":"term-ANSITerm/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_esc_flush","title":"_esc_flush","text":"<p>[Source]</p> <p>Pass a partial or unrecognised escape sequence to the notifier.</p> <pre><code>fun ref _esc_flush()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ANSITerm/#_esc_clear","title":"_esc_clear","text":"<p>[Source]</p> <p>Clear the escape state.</p> <pre><code>fun ref _esc_clear()\n: None val\n</code></pre>"},{"location":"term-ANSITerm/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-EraseLeft/","title":"EraseLeft","text":"<p>[Source] <pre><code>primitive val EraseLeft\n</code></pre></p>"},{"location":"term-EraseLeft/#constructors","title":"Constructors","text":""},{"location":"term-EraseLeft/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseLeft val^\n</code></pre>"},{"location":"term-EraseLeft/#returns","title":"Returns","text":"<ul> <li>EraseLeft val^</li> </ul>"},{"location":"term-EraseLeft/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseLeft/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: EraseLeft val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLeft/#parameters","title":"Parameters","text":"<ul> <li>that: EraseLeft val</li> </ul>"},{"location":"term-EraseLeft/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLeft/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: EraseLeft val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLeft/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseLeft val</li> </ul>"},{"location":"term-EraseLeft/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLine/","title":"EraseLine","text":"<p>[Source] <pre><code>primitive val EraseLine\n</code></pre></p>"},{"location":"term-EraseLine/#constructors","title":"Constructors","text":""},{"location":"term-EraseLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseLine val^\n</code></pre>"},{"location":"term-EraseLine/#returns","title":"Returns","text":"<ul> <li>EraseLine val^</li> </ul>"},{"location":"term-EraseLine/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseLine/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: EraseLine val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLine/#parameters","title":"Parameters","text":"<ul> <li>that: EraseLine val</li> </ul>"},{"location":"term-EraseLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseLine/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: EraseLine val)\n: Bool val\n</code></pre>"},{"location":"term-EraseLine/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseLine val</li> </ul>"},{"location":"term-EraseLine/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseRight/","title":"EraseRight","text":"<p>[Source] <pre><code>primitive val EraseRight\n</code></pre></p>"},{"location":"term-EraseRight/#constructors","title":"Constructors","text":""},{"location":"term-EraseRight/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: EraseRight val^\n</code></pre>"},{"location":"term-EraseRight/#returns","title":"Returns","text":"<ul> <li>EraseRight val^</li> </ul>"},{"location":"term-EraseRight/#public-functions","title":"Public Functions","text":""},{"location":"term-EraseRight/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: EraseRight val)\n: Bool val\n</code></pre>"},{"location":"term-EraseRight/#parameters","title":"Parameters","text":"<ul> <li>that: EraseRight val</li> </ul>"},{"location":"term-EraseRight/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-EraseRight/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: EraseRight val)\n: Bool val\n</code></pre>"},{"location":"term-EraseRight/#parameters_1","title":"Parameters","text":"<ul> <li>that: EraseRight val</li> </ul>"},{"location":"term-EraseRight/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-Readline/","title":"Readline","text":"<p>[Source]</p> <p>Line editing, history, and tab completion.</p> <pre><code>class ref Readline is\nANSINotify ref\n</code></pre>"},{"location":"term-Readline/#implements","title":"Implements","text":"<ul> <li>ANSINotify ref</li> </ul>"},{"location":"term-Readline/#constructors","title":"Constructors","text":""},{"location":"term-Readline/#create","title":"create","text":"<p>[Source]</p> <p>Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing.</p> <pre><code>new iso create(\nnotify: ReadlineNotify iso,\nout: OutStream tag,\npath: (FilePath val | None val) = reference,\nmaxlen: USize val = 0)\n: Readline iso^\n</code></pre>"},{"location":"term-Readline/#parameters","title":"Parameters","text":"<ul> <li>notify: ReadlineNotify iso</li> <li>out: OutStream tag</li> <li>path: (FilePath val | None val) = reference</li> <li>maxlen: USize val = 0</li> </ul>"},{"location":"term-Readline/#returns","title":"Returns","text":"<ul> <li>Readline iso^</li> </ul>"},{"location":"term-Readline/#public-functions","title":"Public Functions","text":""},{"location":"term-Readline/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives input.</p> <pre><code>fun ref apply(\nterm: ANSITerm ref,\ninput: U8 val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_1","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"term-Readline/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#prompt","title":"prompt","text":"<p>[Source]</p> <p>Set a new prompt, unblock, and handle the pending queue.</p> <pre><code>fun ref prompt(\nterm: ANSITerm ref,\nvalue: String val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_2","title":"Parameters","text":"<ul> <li>term: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"term-Readline/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#closed","title":"closed","text":"<p>[Source]</p> <p>No more input is available.</p> <pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#up","title":"up","text":"<p>[Source]</p> <p>Previous line.</p> <pre><code>fun ref up(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_3","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#down","title":"down","text":"<p>[Source]</p> <p>Next line.</p> <pre><code>fun ref down(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_4","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#left","title":"left","text":"<p>[Source]</p> <p>Move left.</p> <pre><code>fun ref left(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#right","title":"right","text":"<p>[Source]</p> <p>Move right.</p> <pre><code>fun ref right(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#home","title":"home","text":"<p>[Source]</p> <p>Beginning of the line.</p> <pre><code>fun ref home(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#end_key","title":"end_key","text":"<p>[Source]</p> <p>End of the line.</p> <pre><code>fun ref end_key(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#delete","title":"delete","text":"<p>[Source]</p> <p>Forward delete.</p> <pre><code>fun ref delete(\nctrl: Bool val = false,\nalt: Bool val = false,\nshift: Bool val = false)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val = false</li> <li>alt: Bool val = false</li> <li>shift: Bool val = false</li> </ul>"},{"location":"term-Readline/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_11","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_12","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\ni: U8 val,\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_13","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"term-Readline/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\nrows: U16 val,\ncols: U16 val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_14","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"term-Readline/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#private-functions","title":"Private Functions","text":""},{"location":"term-Readline/#_backspace","title":"_backspace","text":"<p>[Source]</p> <p>Backward delete.</p> <pre><code>fun ref _backspace()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_clear","title":"_clear","text":"<p>[Source]</p> <p>Clear the screen.</p> <pre><code>fun ref _clear()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_17","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_swap","title":"_swap","text":"<p>[Source]</p> <p>Swap the previous character with the current one.</p> <pre><code>fun ref _swap()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_18","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_delete_prev_word","title":"_delete_prev_word","text":"<p>[Source]</p> <p>Delete the previous word.</p> <pre><code>fun ref _delete_prev_word()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_19","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_tab","title":"_tab","text":"<p>[Source]</p> <p>Tab completion.</p> <p>TODO: Improve this.</p> <pre><code>fun ref _tab()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_20","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_dispatch","title":"_dispatch","text":"<p>[Source]</p> <p>Send a finished line to the notifier.</p> <pre><code>fun ref _dispatch(\nterm: ANSITerm tag)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_15","title":"Parameters","text":"<ul> <li>term: ANSITerm tag</li> </ul>"},{"location":"term-Readline/#returns_21","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_handle_line","title":"_handle_line","text":"<p>[Source]</p> <p>Dispatch a single line.</p> <pre><code>fun ref _handle_line(\nterm: ANSITerm tag,\nline: String val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_16","title":"Parameters","text":"<ul> <li>term: ANSITerm tag</li> <li>line: String val</li> </ul>"},{"location":"term-Readline/#returns_22","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_refresh_line","title":"_refresh_line","text":"<p>[Source]</p> <p>Refresh the line on screen.</p> <pre><code>fun ref _refresh_line()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_23","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_add_history","title":"_add_history","text":"<p>[Source]</p> <p>Add a line to the history, trimming an earlier line if necessary.</p> <pre><code>fun ref _add_history(\nline: String val)\n: None val\n</code></pre>"},{"location":"term-Readline/#parameters_17","title":"Parameters","text":"<ul> <li>line: String val</li> </ul>"},{"location":"term-Readline/#returns_24","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_load_history","title":"_load_history","text":"<p>[Source]</p> <p>Load the history from a file.</p> <pre><code>fun ref _load_history()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_25","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-Readline/#_save_history","title":"_save_history","text":"<p>[Source]</p> <p>Write the history back to a file.</p> <pre><code>fun box _save_history()\n: None val\n</code></pre>"},{"location":"term-Readline/#returns_26","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ReadlineNotify/","title":"ReadlineNotify","text":"<p>[Source]</p> <p>Notifier for readline.</p> <pre><code>interface ref ReadlineNotify\n</code></pre>"},{"location":"term-ReadlineNotify/#public-functions","title":"Public Functions","text":""},{"location":"term-ReadlineNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input.</p> <pre><code>fun ref apply(\nline: String val,\nprompt: Promise[String val] tag)\n: None val\n</code></pre>"},{"location":"term-ReadlineNotify/#parameters","title":"Parameters","text":"<ul> <li>line: String val</li> <li>prompt: Promise[String val] tag</li> </ul>"},{"location":"term-ReadlineNotify/#returns","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-ReadlineNotify/#tab","title":"tab","text":"<p>[Source]</p> <p>Return tab completion possibilities.</p> <pre><code>fun ref tab(\nline: String val)\n: Seq[String val] box\n</code></pre>"},{"location":"term-ReadlineNotify/#parameters_1","title":"Parameters","text":"<ul> <li>line: String val</li> </ul>"},{"location":"term-ReadlineNotify/#returns_1","title":"Returns","text":"<ul> <li>Seq[String val] box</li> </ul>"},{"location":"term-_EraseDirection/","title":"_EraseDirection","text":"<p>[Source] <pre><code>type _EraseDirection is\n(EraseLeft val | EraseLine val | EraseRight val)\n</code></pre></p>"},{"location":"term-_EraseDirection/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(EraseLeft val | EraseLine val | EraseRight val)</li> </ul>"},{"location":"term-_EscapeCSI/","title":"_EscapeCSI","text":"<p>[Source] <pre><code>primitive val _EscapeCSI\n</code></pre></p>"},{"location":"term-_EscapeCSI/#constructors","title":"Constructors","text":""},{"location":"term-_EscapeCSI/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EscapeCSI val^\n</code></pre>"},{"location":"term-_EscapeCSI/#returns","title":"Returns","text":"<ul> <li>_EscapeCSI val^</li> </ul>"},{"location":"term-_EscapeCSI/#public-functions","title":"Public Functions","text":""},{"location":"term-_EscapeCSI/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EscapeCSI val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeCSI/#parameters","title":"Parameters","text":"<ul> <li>that: _EscapeCSI val</li> </ul>"},{"location":"term-_EscapeCSI/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeCSI/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EscapeCSI val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeCSI/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EscapeCSI val</li> </ul>"},{"location":"term-_EscapeCSI/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeMod/","title":"_EscapeMod","text":"<p>[Source] <pre><code>primitive val _EscapeMod\n</code></pre></p>"},{"location":"term-_EscapeMod/#constructors","title":"Constructors","text":""},{"location":"term-_EscapeMod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EscapeMod val^\n</code></pre>"},{"location":"term-_EscapeMod/#returns","title":"Returns","text":"<ul> <li>_EscapeMod val^</li> </ul>"},{"location":"term-_EscapeMod/#public-functions","title":"Public Functions","text":""},{"location":"term-_EscapeMod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EscapeMod val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeMod/#parameters","title":"Parameters","text":"<ul> <li>that: _EscapeMod val</li> </ul>"},{"location":"term-_EscapeMod/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeMod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EscapeMod val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeMod/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EscapeMod val</li> </ul>"},{"location":"term-_EscapeMod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeNone/","title":"_EscapeNone","text":"<p>[Source] <pre><code>primitive val _EscapeNone\n</code></pre></p>"},{"location":"term-_EscapeNone/#constructors","title":"Constructors","text":""},{"location":"term-_EscapeNone/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EscapeNone val^\n</code></pre>"},{"location":"term-_EscapeNone/#returns","title":"Returns","text":"<ul> <li>_EscapeNone val^</li> </ul>"},{"location":"term-_EscapeNone/#public-functions","title":"Public Functions","text":""},{"location":"term-_EscapeNone/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EscapeNone val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeNone/#parameters","title":"Parameters","text":"<ul> <li>that: _EscapeNone val</li> </ul>"},{"location":"term-_EscapeNone/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeNone/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EscapeNone val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeNone/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EscapeNone val</li> </ul>"},{"location":"term-_EscapeNone/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeSS3/","title":"_EscapeSS3","text":"<p>[Source] <pre><code>primitive val _EscapeSS3\n</code></pre></p>"},{"location":"term-_EscapeSS3/#constructors","title":"Constructors","text":""},{"location":"term-_EscapeSS3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EscapeSS3 val^\n</code></pre>"},{"location":"term-_EscapeSS3/#returns","title":"Returns","text":"<ul> <li>_EscapeSS3 val^</li> </ul>"},{"location":"term-_EscapeSS3/#public-functions","title":"Public Functions","text":""},{"location":"term-_EscapeSS3/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EscapeSS3 val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeSS3/#parameters","title":"Parameters","text":"<ul> <li>that: _EscapeSS3 val</li> </ul>"},{"location":"term-_EscapeSS3/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeSS3/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EscapeSS3 val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeSS3/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EscapeSS3 val</li> </ul>"},{"location":"term-_EscapeSS3/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeStart/","title":"_EscapeStart","text":"<p>[Source] <pre><code>primitive val _EscapeStart\n</code></pre></p>"},{"location":"term-_EscapeStart/#constructors","title":"Constructors","text":""},{"location":"term-_EscapeStart/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _EscapeStart val^\n</code></pre>"},{"location":"term-_EscapeStart/#returns","title":"Returns","text":"<ul> <li>_EscapeStart val^</li> </ul>"},{"location":"term-_EscapeStart/#public-functions","title":"Public Functions","text":""},{"location":"term-_EscapeStart/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _EscapeStart val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeStart/#parameters","title":"Parameters","text":"<ul> <li>that: _EscapeStart val</li> </ul>"},{"location":"term-_EscapeStart/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeStart/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _EscapeStart val)\n: Bool val\n</code></pre>"},{"location":"term-_EscapeStart/#parameters_1","title":"Parameters","text":"<ul> <li>that: _EscapeStart val</li> </ul>"},{"location":"term-_EscapeStart/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_EscapeState/","title":"_EscapeState","text":"<p>[Source] <pre><code>type _EscapeState is\n(_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)\n</code></pre></p>"},{"location":"term-_EscapeState/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)</li> </ul>"},{"location":"term-_TIOCGWINSZ/","title":"_TIOCGWINSZ","text":"<p>[Source] <pre><code>primitive val _TIOCGWINSZ\n</code></pre></p>"},{"location":"term-_TIOCGWINSZ/#constructors","title":"Constructors","text":""},{"location":"term-_TIOCGWINSZ/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _TIOCGWINSZ val^\n</code></pre>"},{"location":"term-_TIOCGWINSZ/#returns","title":"Returns","text":"<ul> <li>_TIOCGWINSZ val^</li> </ul>"},{"location":"term-_TIOCGWINSZ/#public-functions","title":"Public Functions","text":""},{"location":"term-_TIOCGWINSZ/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: ULong val\n</code></pre>"},{"location":"term-_TIOCGWINSZ/#returns_1","title":"Returns","text":"<ul> <li>ULong val</li> </ul>"},{"location":"term-_TIOCGWINSZ/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _TIOCGWINSZ val)\n: Bool val\n</code></pre>"},{"location":"term-_TIOCGWINSZ/#parameters","title":"Parameters","text":"<ul> <li>that: _TIOCGWINSZ val</li> </ul>"},{"location":"term-_TIOCGWINSZ/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_TIOCGWINSZ/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _TIOCGWINSZ val)\n: Bool val\n</code></pre>"},{"location":"term-_TIOCGWINSZ/#parameters_1","title":"Parameters","text":"<ul> <li>that: _TIOCGWINSZ val</li> </ul>"},{"location":"term-_TIOCGWINSZ/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_TermResizeNotify/","title":"_TermResizeNotify","text":"<p>[Source] <pre><code>class ref _TermResizeNotify is\nSignalNotify ref\n</code></pre></p>"},{"location":"term-_TermResizeNotify/#implements","title":"Implements","text":"<ul> <li>SignalNotify ref</li> </ul>"},{"location":"term-_TermResizeNotify/#constructors","title":"Constructors","text":""},{"location":"term-_TermResizeNotify/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nterm: ANSITerm tag)\n: _TermResizeNotify ref^\n</code></pre>"},{"location":"term-_TermResizeNotify/#parameters","title":"Parameters","text":"<ul> <li>term: ANSITerm tag</li> </ul>"},{"location":"term-_TermResizeNotify/#returns","title":"Returns","text":"<ul> <li>_TermResizeNotify ref^</li> </ul>"},{"location":"term-_TermResizeNotify/#public-functions","title":"Public Functions","text":""},{"location":"term-_TermResizeNotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ntimes: U32 val)\n: Bool val\n</code></pre>"},{"location":"term-_TermResizeNotify/#parameters_1","title":"Parameters","text":"<ul> <li>times: U32 val</li> </ul>"},{"location":"term-_TermResizeNotify/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"term-_TermResizeNotify/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"term-_TermResizeNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"term-_TermSize/","title":"_TermSize","text":"<p>[Source] <pre><code>struct ref _TermSize\n</code></pre></p>"},{"location":"term-_TermSize/#constructors","title":"Constructors","text":""},{"location":"term-_TermSize/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: _TermSize iso^\n</code></pre>"},{"location":"term-_TermSize/#returns","title":"Returns","text":"<ul> <li>_TermSize iso^</li> </ul>"},{"location":"term-_TermSize/#public-fields","title":"Public fields","text":""},{"location":"term-_TermSize/#var-row-u16-val","title":"var row: U16 val","text":"<p>[Source]</p>"},{"location":"term-_TermSize/#var-col-u16-val","title":"var col: U16 val","text":"<p>[Source]</p>"},{"location":"term-_TermSize/#var-xpixel-u16-val","title":"var xpixel: U16 val","text":"<p>[Source]</p>"},{"location":"term-_TermSize/#var-ypixel-u16-val","title":"var ypixel: U16 val","text":"<p>[Source]</p>"},{"location":"time--index/","title":"Time Package","text":"<p>The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.</p>"},{"location":"time--index/#public-types","title":"Public Types","text":"<ul> <li>primitive Nanos</li> <li>class PosixDate</li> <li>primitive Time</li> <li>class Timer</li> <li>interface TimerNotify</li> <li>actor Timers</li> </ul>"},{"location":"time--index/#private-types","title":"Private Types","text":"<ul> <li>type _Clock</li> <li>primitive _ClockMonotonic</li> <li>primitive _ClockRealtime</li> <li>primitive _ClockUptimeRaw</li> <li>class _TimingWheel</li> </ul>"},{"location":"time-Nanos/","title":"Nanos","text":"<p>[Source]</p> <p>Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package.</p> <pre><code>primitive val Nanos\n</code></pre>"},{"location":"time-Nanos/#constructors","title":"Constructors","text":""},{"location":"time-Nanos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Nanos val^\n</code></pre>"},{"location":"time-Nanos/#returns","title":"Returns","text":"<ul> <li>Nanos val^</li> </ul>"},{"location":"time-Nanos/#public-functions","title":"Public Functions","text":""},{"location":"time-Nanos/#from_seconds","title":"from_seconds","text":"<p>[Source]</p> <pre><code>fun box from_seconds(\nt: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis","title":"from_millis","text":"<p>[Source]</p> <pre><code>fun box from_millis(\nt: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_1","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_2","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros","title":"from_micros","text":"<p>[Source]</p> <pre><code>fun box from_micros(\nt: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_2","title":"Parameters","text":"<ul> <li>t: U64 val</li> </ul>"},{"location":"time-Nanos/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_seconds_f","title":"from_seconds_f","text":"<p>[Source]</p> <pre><code>fun box from_seconds_f(\nt: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_3","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_millis_f","title":"from_millis_f","text":"<p>[Source]</p> <pre><code>fun box from_millis_f(\nt: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_4","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_micros_f","title":"from_micros_f","text":"<p>[Source]</p> <pre><code>fun box from_micros_f(\nt: F64 val)\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_5","title":"Parameters","text":"<ul> <li>t: F64 val</li> </ul>"},{"location":"time-Nanos/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#from_wall_clock","title":"from_wall_clock","text":"<p>[Source]</p> <pre><code>fun box from_wall_clock(\nwall: (I64 val , I64 val))\n: U64 val\n</code></pre>"},{"location":"time-Nanos/#parameters_6","title":"Parameters","text":"<ul> <li>wall: (I64 val , I64 val)</li> </ul>"},{"location":"time-Nanos/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Nanos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_7","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Nanos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Nanos val)\n: Bool val\n</code></pre>"},{"location":"time-Nanos/#parameters_8","title":"Parameters","text":"<ul> <li>that: Nanos val</li> </ul>"},{"location":"time-Nanos/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-PosixDate/","title":"PosixDate","text":"<p>[Source]</p> <p>Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1.</p> <pre><code>class ref PosixDate\n</code></pre>"},{"location":"time-PosixDate/#constructors","title":"Constructors","text":""},{"location":"time-PosixDate/#create","title":"create","text":"<p>[Source]</p> <p>Create a date from a POSIX time. Negative arguments will be changed to zero.</p> <pre><code>new ref create(\nseconds: I64 val = 0,\nnanoseconds: I64 val = 0)\n: PosixDate ref^\n</code></pre>"},{"location":"time-PosixDate/#parameters","title":"Parameters","text":"<ul> <li>seconds: I64 val = 0</li> <li>nanoseconds: I64 val = 0</li> </ul>"},{"location":"time-PosixDate/#returns","title":"Returns","text":"<ul> <li>PosixDate ref^</li> </ul>"},{"location":"time-PosixDate/#public-fields","title":"Public fields","text":""},{"location":"time-PosixDate/#var-nsec-i32-val","title":"var nsec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-sec-i32-val","title":"var sec: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-min-i32-val","title":"var min: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-hour-i32-val","title":"var hour: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_month-i32-val","title":"var day_of_month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-month-i32-val","title":"var month: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-year-i32-val","title":"var year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_week-i32-val","title":"var day_of_week: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#var-day_of_year-i32-val","title":"var day_of_year: I32 val","text":"<p>[Source]</p>"},{"location":"time-PosixDate/#public-functions","title":"Public Functions","text":""},{"location":"time-PosixDate/#time","title":"time","text":"<p>[Source]</p> <p>Return a POSIX time. Treats the date as UTC.</p> <pre><code>fun box time()\n: I64 val\n</code></pre>"},{"location":"time-PosixDate/#returns_1","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-PosixDate/#normal","title":"normal","text":"<p>[Source]</p> <p>Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date.</p> <pre><code>fun ref normal()\n: None val\n</code></pre>"},{"location":"time-PosixDate/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-PosixDate/#format","title":"format","text":"<p>[Source]</p> <p>Format the time as for strftime.</p> <pre><code>fun box format(\nfmt: String val)\n: String val ?\n</code></pre>"},{"location":"time-PosixDate/#parameters_1","title":"Parameters","text":"<ul> <li>fmt: String val</li> </ul>"},{"location":"time-PosixDate/#returns_3","title":"Returns","text":"<ul> <li>String val ?</li> </ul>"},{"location":"time-PosixDate/#private-functions","title":"Private Functions","text":""},{"location":"time-PosixDate/#_negative_to_zero","title":"_negative_to_zero","text":"<p>[Source]</p> <pre><code>fun box _negative_to_zero(\nvalue: I64 val)\n: I64 val\n</code></pre>"},{"location":"time-PosixDate/#parameters_2","title":"Parameters","text":"<ul> <li>value: I64 val</li> </ul>"},{"location":"time-PosixDate/#returns_4","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-Time/","title":"Time","text":"<p>[Source]</p> <p>A collection of ways to fetch the current time.</p> <pre><code>primitive val Time\n</code></pre>"},{"location":"time-Time/#constructors","title":"Constructors","text":""},{"location":"time-Time/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Time val^\n</code></pre>"},{"location":"time-Time/#returns","title":"Returns","text":"<ul> <li>Time val^</li> </ul>"},{"location":"time-Time/#public-functions","title":"Public Functions","text":""},{"location":"time-Time/#now","title":"now","text":"<p>[Source]</p> <p>The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds)</p> <pre><code>fun box now()\n: (I64 val , I64 val)\n</code></pre>"},{"location":"time-Time/#returns_1","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"time-Time/#seconds","title":"seconds","text":"<p>[Source]</p> <p>The wall-clock adjusted system time.</p> <pre><code>fun box seconds()\n: I64 val\n</code></pre>"},{"location":"time-Time/#returns_2","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"time-Time/#millis","title":"millis","text":"<p>[Source]</p> <p>Monotonic unadjusted milliseconds.</p> <pre><code>fun box millis()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#micros","title":"micros","text":"<p>[Source]</p> <p>Monotonic unadjusted microseconds.</p> <pre><code>fun box micros()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#nanos","title":"nanos","text":"<p>[Source]</p> <p>Monotonic unadjusted nanoseconds.</p> <pre><code>fun box nanos()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#cycles","title":"cycles","text":"<p>[Source]</p> <p>Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution.</p> <pre><code>fun box cycles()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_begin","title":"perf_begin","text":"<p>[Source]</p> <p>Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier.</p> <pre><code>fun box perf_begin()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#perf_end","title":"perf_end","text":"<p>[Source]</p> <p>Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later.</p> <pre><code>fun box perf_end()\n: U64 val\n</code></pre>"},{"location":"time-Time/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Time/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Time val)\n: Bool val\n</code></pre>"},{"location":"time-Time/#parameters_1","title":"Parameters","text":"<ul> <li>that: Time val</li> </ul>"},{"location":"time-Time/#returns_10","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Time/#private-functions","title":"Private Functions","text":""},{"location":"time-Time/#_clock_gettime","title":"_clock_gettime","text":"<p>[Source]</p> <p>Return a clock time on linux and bsd.</p> <pre><code>fun box _clock_gettime(\nclock: (_ClockRealtime val | _ClockMonotonic val))\n: (I64 val , I64 val)\n</code></pre>"},{"location":"time-Time/#parameters_2","title":"Parameters","text":"<ul> <li>clock: (_ClockRealtime val | _ClockMonotonic val)</li> </ul>"},{"location":"time-Time/#returns_11","title":"Returns","text":"<ul> <li>(I64 val , I64 val)</li> </ul>"},{"location":"time-Time/#_subseconds_from_query_performance_counter","title":"_subseconds_from_query_performance_counter","text":"<p>[Source]</p> <pre><code>fun box _subseconds_from_query_performance_counter(\nsubseconds: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-Time/#parameters_3","title":"Parameters","text":"<ul> <li>subseconds: U64 val</li> </ul>"},{"location":"time-Time/#returns_12","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Time/#_query_performance_counter","title":"_query_performance_counter","text":"<p>[Source]</p> <p>Return QPC and QPF.</p> <pre><code>fun box _query_performance_counter()\n: (U64 val , U64 val)\n</code></pre>"},{"location":"time-Time/#returns_13","title":"Returns","text":"<ul> <li>(U64 val , U64 val)</li> </ul>"},{"location":"time-Timer/","title":"Timer","text":"<p>[Source]</p> <p>The <code>Timer</code> class represents a timer that fires after an expiration time, and then fires at an interval. When a <code>Timer</code> fires, it calls the <code>apply</code> method of the <code>TimerNotify</code> object that was passed to it when it was created.</p> <p>The following example waits 5 seconds and then fires every 2 seconds, and when it fires the <code>TimerNotify</code> object prints how many times it has been called:</p> <pre><code>use \"time\"\nactor Main\nnew create(env: Env) =&gt;\nlet timers = Timers\nlet timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\ntimers(consume timer)\nclass Notify is TimerNotify\nlet _env: Env\nvar _counter: U32 = 0\nnew iso create(env: Env) =&gt;\n_env = env\nfun ref apply(timer: Timer, count: U64): Bool =&gt;\n_env.out.print(_counter.string())\n_counter = _counter + 1\ntrue\n</code></pre> <pre><code>class ref Timer\n</code></pre>"},{"location":"time-Timer/#constructors","title":"Constructors","text":""},{"location":"time-Timer/#create","title":"create","text":"<p>[Source]</p> <p>Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds.</p> <pre><code>new iso create(\nnotify: TimerNotify iso,\nexpiration: U64 val,\ninterval: U64 val = 0)\n: Timer iso^\n</code></pre>"},{"location":"time-Timer/#parameters","title":"Parameters","text":"<ul> <li>notify: TimerNotify iso</li> <li>expiration: U64 val</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns","title":"Returns","text":"<ul> <li>Timer iso^</li> </ul>"},{"location":"time-Timer/#abs","title":"abs","text":"<p>[Source]</p> <p>Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time.</p> <pre><code>new ref abs(\nnotify: TimerNotify ref,\nexpiration: (I64 val , I64 val),\ninterval: U64 val = 0)\n: Timer ref^\n</code></pre>"},{"location":"time-Timer/#parameters_1","title":"Parameters","text":"<ul> <li>notify: TimerNotify ref</li> <li>expiration: (I64 val , I64 val)</li> <li>interval: U64 val = 0</li> </ul>"},{"location":"time-Timer/#returns_1","title":"Returns","text":"<ul> <li>Timer ref^</li> </ul>"},{"location":"time-Timer/#private-functions","title":"Private Functions","text":""},{"location":"time-Timer/#_cancel","title":"_cancel","text":"<p>[Source]</p> <p>Remove the timer from any list.</p> <pre><code>fun ref _cancel()\n: None val\n</code></pre>"},{"location":"time-Timer/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timer/#_get_node","title":"_get_node","text":"<p>[Source]</p> <p>Returns the list node pointing to the timer. Used to schedule the timer in a queue.</p> <pre><code>fun ref _get_node()\n: ListNode[Timer ref] ref\n</code></pre>"},{"location":"time-Timer/#returns_3","title":"Returns","text":"<ul> <li>ListNode[Timer ref] ref</li> </ul>"},{"location":"time-Timer/#_slop","title":"_slop","text":"<p>[Source]</p> <p>Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time.</p> <pre><code>fun ref _slop(\nbits: USize val)\n: None val\n</code></pre>"},{"location":"time-Timer/#parameters_2","title":"Parameters","text":"<ul> <li>bits: USize val</li> </ul>"},{"location":"time-Timer/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timer/#_fire","title":"_fire","text":"<p>[Source]</p> <p>A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise.</p> <pre><code>fun ref _fire(\ncurrent: U64 val)\n: Bool val\n</code></pre>"},{"location":"time-Timer/#parameters_3","title":"Parameters","text":"<ul> <li>current: U64 val</li> </ul>"},{"location":"time-Timer/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-Timer/#_next","title":"_next","text":"<p>[Source]</p> <p>Returns the next expiration time.</p> <pre><code>fun box _next()\n: U64 val\n</code></pre>"},{"location":"time-Timer/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Timer/#_abs_expiration_time","title":"_abs_expiration_time","text":"<p>[Source]</p> <p>Converts a wall-clock adjusted system time to absolute expiration time</p> <pre><code>fun tag _abs_expiration_time(\nwall: (I64 val , I64 val))\n: U64 val\n</code></pre>"},{"location":"time-Timer/#parameters_4","title":"Parameters","text":"<ul> <li>wall: (I64 val , I64 val)</li> </ul>"},{"location":"time-Timer/#returns_7","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-TimerNotify/","title":"TimerNotify","text":"<p>[Source]</p> <p>Notifications for timer.</p> <pre><code>interface ref TimerNotify\n</code></pre>"},{"location":"time-TimerNotify/#public-functions","title":"Public Functions","text":""},{"location":"time-TimerNotify/#apply","title":"apply","text":"<p>[Source]</p> <p>Called with the the number of times the timer has fired since this was last called. Usually, the value of <code>count</code> will be 1. If it is not 1, it means that the timer isn't firing on schedule.</p> <p>For example, if your timer is set to fire every 10 milliseconds, and <code>count</code> is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load.</p> <p>Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval).</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"time-TimerNotify/#parameters","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"time-TimerNotify/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-TimerNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Called if the timer is cancelled. This is also called if the notifier returns false from its <code>apply</code> method.</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"time-TimerNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"time-TimerNotify/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timers/","title":"Timers","text":"<p>[Source]</p> <p>A hierarchical set of timing wheels.</p> <pre><code>actor tag Timers is\nAsioEventNotify tag\n</code></pre>"},{"location":"time-Timers/#implements","title":"Implements","text":"<ul> <li>AsioEventNotify tag</li> </ul>"},{"location":"time-Timers/#constructors","title":"Constructors","text":""},{"location":"time-Timers/#create","title":"create","text":"<p>[Source]</p> <p>Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution.</p> <pre><code>new tag create(\nslop: USize val = 20)\n: Timers tag^\n</code></pre>"},{"location":"time-Timers/#parameters","title":"Parameters","text":"<ul> <li>slop: USize val = 20</li> </ul>"},{"location":"time-Timers/#returns","title":"Returns","text":"<ul> <li>Timers tag^</li> </ul>"},{"location":"time-Timers/#public-behaviours","title":"Public Behaviours","text":""},{"location":"time-Timers/#apply","title":"apply","text":"<p>[Source]</p> <p>Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer.</p> <pre><code>be apply(\ntimer: Timer iso)\n</code></pre>"},{"location":"time-Timers/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer iso</li> </ul>"},{"location":"time-Timers/#cancel","title":"cancel","text":"<p>[Source]</p> <p>Cancels a timer.</p> <pre><code>be cancel(\ntimer: Timer tag)\n</code></pre>"},{"location":"time-Timers/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer tag</li> </ul>"},{"location":"time-Timers/#dispose","title":"dispose","text":"<p>[Source]</p> <p>Dispose of this set of timing wheels.</p> <pre><code>be dispose()\n</code></pre>"},{"location":"time-Timers/#private-behaviours","title":"Private Behaviours","text":""},{"location":"time-Timers/#_event_notify","title":"_event_notify","text":"<p>[Source]</p> <p>When the event fires, advance the timing wheels.</p> <pre><code>be _event_notify(\nevent: Pointer[AsioEvent val] tag,\nflags: U32 val,\narg: U32 val)\n</code></pre>"},{"location":"time-Timers/#parameters_3","title":"Parameters","text":"<ul> <li>event: Pointer[AsioEvent val] tag</li> <li>flags: U32 val</li> <li>arg: U32 val</li> </ul>"},{"location":"time-Timers/#private-functions","title":"Private Functions","text":""},{"location":"time-Timers/#_advance","title":"_advance","text":"<p>[Source]</p> <p>Update the current time, process all the timing wheels, and set the event for the next time we need to advance.</p> <pre><code>fun ref _advance()\n: None val\n</code></pre>"},{"location":"time-Timers/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timers/#_fire","title":"_fire","text":"<p>[Source]</p> <p>Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires.</p> <pre><code>fun ref _fire(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"time-Timers/#parameters_4","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"time-Timers/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-Timers/#_next","title":"_next","text":"<p>[Source]</p> <p>Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1.</p> <pre><code>fun box _next()\n: U64 val\n</code></pre>"},{"location":"time-Timers/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Timers/#_set_time","title":"_set_time","text":"<p>[Source]</p> <p>Set the current time with precision reduced by the slop bits. Return the elapsed time.</p> <pre><code>fun ref _set_time()\n: U64 val\n</code></pre>"},{"location":"time-Timers/#returns_4","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Timers/#_get_wheel","title":"_get_wheel","text":"<p>[Source]</p> <p>Get the hierarchical timing wheel for the given time until expiration.</p> <pre><code>fun ref _get_wheel(\nrem: U64 val)\n: _TimingWheel ref ?\n</code></pre>"},{"location":"time-Timers/#parameters_5","title":"Parameters","text":"<ul> <li>rem: U64 val</li> </ul>"},{"location":"time-Timers/#returns_5","title":"Returns","text":"<ul> <li>_TimingWheel ref ?</li> </ul>"},{"location":"time-Timers/#_expiration_max","title":"_expiration_max","text":"<p>[Source]</p> <p>Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel.</p> <pre><code>fun tag _expiration_max()\n: U64 val\n</code></pre>"},{"location":"time-Timers/#returns_6","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-Timers/#_wheels","title":"_wheels","text":"<p>[Source]</p> <pre><code>fun tag _wheels()\n: USize val\n</code></pre>"},{"location":"time-Timers/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"time-Timers/#_bits","title":"_bits","text":"<p>[Source]</p> <pre><code>fun tag _bits()\n: USize val\n</code></pre>"},{"location":"time-Timers/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"time-_Clock/","title":"_Clock","text":"<p>[Source] <pre><code>type _Clock is\n(_ClockRealtime val | _ClockMonotonic val)\n</code></pre></p>"},{"location":"time-_Clock/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(_ClockRealtime val | _ClockMonotonic val)</li> </ul>"},{"location":"time-_ClockMonotonic/","title":"_ClockMonotonic","text":"<p>[Source] <pre><code>primitive val _ClockMonotonic\n</code></pre></p>"},{"location":"time-_ClockMonotonic/#constructors","title":"Constructors","text":""},{"location":"time-_ClockMonotonic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _ClockMonotonic val^\n</code></pre>"},{"location":"time-_ClockMonotonic/#returns","title":"Returns","text":"<ul> <li>_ClockMonotonic val^</li> </ul>"},{"location":"time-_ClockMonotonic/#public-functions","title":"Public Functions","text":""},{"location":"time-_ClockMonotonic/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"time-_ClockMonotonic/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"time-_ClockMonotonic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _ClockMonotonic val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockMonotonic/#parameters","title":"Parameters","text":"<ul> <li>that: _ClockMonotonic val</li> </ul>"},{"location":"time-_ClockMonotonic/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_ClockMonotonic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _ClockMonotonic val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockMonotonic/#parameters_1","title":"Parameters","text":"<ul> <li>that: _ClockMonotonic val</li> </ul>"},{"location":"time-_ClockMonotonic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_ClockRealtime/","title":"_ClockRealtime","text":"<p>[Source] <pre><code>primitive val _ClockRealtime\n</code></pre></p>"},{"location":"time-_ClockRealtime/#constructors","title":"Constructors","text":""},{"location":"time-_ClockRealtime/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _ClockRealtime val^\n</code></pre>"},{"location":"time-_ClockRealtime/#returns","title":"Returns","text":"<ul> <li>_ClockRealtime val^</li> </ul>"},{"location":"time-_ClockRealtime/#public-functions","title":"Public Functions","text":""},{"location":"time-_ClockRealtime/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"time-_ClockRealtime/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"time-_ClockRealtime/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _ClockRealtime val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockRealtime/#parameters","title":"Parameters","text":"<ul> <li>that: _ClockRealtime val</li> </ul>"},{"location":"time-_ClockRealtime/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_ClockRealtime/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _ClockRealtime val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockRealtime/#parameters_1","title":"Parameters","text":"<ul> <li>that: _ClockRealtime val</li> </ul>"},{"location":"time-_ClockRealtime/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_ClockUptimeRaw/","title":"_ClockUptimeRaw","text":"<p>[Source] <pre><code>primitive val _ClockUptimeRaw\n</code></pre></p>"},{"location":"time-_ClockUptimeRaw/#constructors","title":"Constructors","text":""},{"location":"time-_ClockUptimeRaw/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: _ClockUptimeRaw val^\n</code></pre>"},{"location":"time-_ClockUptimeRaw/#returns","title":"Returns","text":"<ul> <li>_ClockUptimeRaw val^</li> </ul>"},{"location":"time-_ClockUptimeRaw/#public-functions","title":"Public Functions","text":""},{"location":"time-_ClockUptimeRaw/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U32 val\n</code></pre>"},{"location":"time-_ClockUptimeRaw/#returns_1","title":"Returns","text":"<ul> <li>U32 val</li> </ul>"},{"location":"time-_ClockUptimeRaw/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: _ClockUptimeRaw val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockUptimeRaw/#parameters","title":"Parameters","text":"<ul> <li>that: _ClockUptimeRaw val</li> </ul>"},{"location":"time-_ClockUptimeRaw/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_ClockUptimeRaw/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: _ClockUptimeRaw val)\n: Bool val\n</code></pre>"},{"location":"time-_ClockUptimeRaw/#parameters_1","title":"Parameters","text":"<ul> <li>that: _ClockUptimeRaw val</li> </ul>"},{"location":"time-_ClockUptimeRaw/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_TimingWheel/","title":"_TimingWheel","text":"<p>[Source]</p> <p>A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision.</p> <pre><code>class ref _TimingWheel\n</code></pre>"},{"location":"time-_TimingWheel/#constructors","title":"Constructors","text":""},{"location":"time-_TimingWheel/#create","title":"create","text":"<p>[Source]</p> <p>Create a timing wheel at the given hierarchical level.</p> <pre><code>new ref create(\nindex: USize val)\n: _TimingWheel ref^\n</code></pre>"},{"location":"time-_TimingWheel/#parameters","title":"Parameters","text":"<ul> <li>index: USize val</li> </ul>"},{"location":"time-_TimingWheel/#returns","title":"Returns","text":"<ul> <li>_TimingWheel ref^</li> </ul>"},{"location":"time-_TimingWheel/#public-functions","title":"Public Functions","text":""},{"location":"time-_TimingWheel/#schedule","title":"schedule","text":"<p>[Source]</p> <p>Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list.</p> <pre><code>fun ref schedule(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"time-_TimingWheel/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"time-_TimingWheel/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-_TimingWheel/#advance","title":"advance","text":"<p>[Source]</p> <p>Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced.</p> <pre><code>fun ref advance(\nlist: List[Timer ref] ref,\ncurrent: U64 val,\nelapsed: U64 val)\n: Bool val\n</code></pre>"},{"location":"time-_TimingWheel/#parameters_2","title":"Parameters","text":"<ul> <li>list: List[Timer ref] ref</li> <li>current: U64 val</li> <li>elapsed: U64 val</li> </ul>"},{"location":"time-_TimingWheel/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"time-_TimingWheel/#next","title":"next","text":"<p>[Source]</p> <p>Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel.</p> <pre><code>fun box next(\ncurrent: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-_TimingWheel/#parameters_3","title":"Parameters","text":"<ul> <li>current: U64 val</li> </ul>"},{"location":"time-_TimingWheel/#returns_3","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-_TimingWheel/#clear","title":"clear","text":"<p>[Source]</p> <p>Cancels all pending timers.</p> <pre><code>fun ref clear()\n: None val\n</code></pre>"},{"location":"time-_TimingWheel/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"time-_TimingWheel/#private-functions","title":"Private Functions","text":""},{"location":"time-_TimingWheel/#_slot","title":"_slot","text":"<p>[Source]</p> <p>Return the slot for a given time.</p> <pre><code>fun box _slot(\ntime: U64 val)\n: U64 val\n</code></pre>"},{"location":"time-_TimingWheel/#parameters_4","title":"Parameters","text":"<ul> <li>time: U64 val</li> </ul>"},{"location":"time-_TimingWheel/#returns_5","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"time-_TimingWheel/#_bits","title":"_bits","text":"<p>[Source]</p> <pre><code>fun tag _bits()\n: USize val\n</code></pre>"},{"location":"time-_TimingWheel/#returns_6","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"time-_TimingWheel/#_max","title":"_max","text":"<p>[Source]</p> <pre><code>fun tag _max()\n: USize val\n</code></pre>"},{"location":"time-_TimingWheel/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"time-_TimingWheel/#_mask","title":"_mask","text":"<p>[Source]</p> <pre><code>fun tag _mask()\n: U64 val\n</code></pre>"},{"location":"time-_TimingWheel/#returns_8","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"}]}