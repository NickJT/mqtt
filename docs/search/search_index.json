{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"mqtt--index/","title":"Package","text":"<p>No package doc string provided for mqtt.</p>"},{"location":"mqtt--index/#public-types","title":"Public Types","text":"<ul> <li>actor Main</li> </ul>"},{"location":"mqtt-Main/","title":"Main","text":"<p>[Source]</p> <p>Minimal example of an application to connect, subscribe, publish and disconnect. An application or actor must implement the following trait (defined in the mqtt package):</p> <pre><code>trait MqttApplication\nbe onConnection(connected : Bool)\nbe onSubscribed(topic: String val, qos: (String val | None))\nbe onMessage(topic: String val, content: Array[U8] val)\nbe onStatus(content: String val)\n</code></pre> <pre><code>actor tag Main is\nMqttApplication ref\n</code></pre>"},{"location":"mqtt-Main/#implements","title":"Implements","text":"<ul> <li>MqttApplication ref</li> </ul>"},{"location":"mqtt-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-Main/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-Main/#onconnection","title":"onConnection","text":"<p>[Source]</p> <pre><code>be onConnection(\nconnected: Bool val)\n</code></pre>"},{"location":"mqtt-Main/#parameters_1","title":"Parameters","text":"<ul> <li>connected: Bool val</li> </ul>"},{"location":"mqtt-Main/#onsubscribed","title":"onSubscribed","text":"<p>[Source]</p> <pre><code>be onSubscribed(\ntopic: String val,\nqos: (String val | None val))\n</code></pre>"},{"location":"mqtt-Main/#parameters_2","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (String val | None val)</li> </ul>"},{"location":"mqtt-Main/#onmessage","title":"onMessage","text":"<p>[Source]</p> <pre><code>be onMessage(\ntopic: String val,\ncontent: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-Main/#parameters_3","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: Array[U8 val] val</li> </ul>"},{"location":"mqtt-Main/#onstatus","title":"onStatus","text":"<p>[Source]</p> <pre><code>be onStatus(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-Main/#parameters_4","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-Main/#datestamp","title":"dateStamp","text":"<p>[Source]</p> <p>An aribtrary function to generate some changing data to publish. Not part of the  Mqtt trait</p> <pre><code>fun box dateStamp()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-Main/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-Main/#parameters_5","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-Main/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-assembler--index/","title":"Package","text":"<p>Assembler accepts an array of bytes of arbitrary length received from the TCP buffer. It assembles these into MQTT packets, wraps them in the BasePacket class and passes them on to the router. Incomming TCP buffers may contain: 1.  one or more complete MQTT packets or 2.  one or more complete MQTT packets followed by a partial packet  3.  the trailing end of a packet, followed by zero or more complete or partial packets</p> <p>The only guarantee we assume is that the first buffer of data starts with the fixed header of a valid MQTT packet</p>"},{"location":"mqtt-assembler--index/#public-types","title":"Public Types","text":"<ul> <li>actor Assembler</li> <li>type Stream</li> </ul>"},{"location":"mqtt-assembler-Assembler/","title":"Assembler","text":"<p>[Source]</p> <p>We're using a ring buffer for packet assembly because: - it implies copying on and copying off individual bytes - packets would need to be assembled by appending every byte individually - the value of the RL bytes would need to be either calculated on the fly (which is complex  for an inner loop and would mean we have RL calculations in two places) or would mean composing a five byte array to send to the primitive (more copying)  - the _split/chop approach provides a fast path for the 99.9?% of packets that arrive  single and complete TODO - Benchmark the two approaches  the performance release (maybe)  Assembler should be the only actor that needs to deal with raw Array[U8],  other than when router extracts the data in its send behaviour.</p> <pre><code>actor tag Assembler\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#constructors","title":"Constructors","text":""},{"location":"mqtt-assembler-Assembler/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag)\n: Assembler tag^\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> </ul>"},{"location":"mqtt-assembler-Assembler/#returns","title":"Returns","text":"<ul> <li>Assembler tag^</li> </ul>"},{"location":"mqtt-assembler-Assembler/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-assembler-Assembler/#assemble","title":"assemble","text":"<p>[Source]</p> <p>We need to handle the case where we receive only the first byte of the packet OR where we don't have enough data to calculate the packet length. If byte n has bit 7 set then byte n+1 is also a remaining length byte so the minimum  viable fixed header is control byte + bytes until we get to a byte with bit 7 == 0</p> <pre><code>be assemble(\ninput: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters_1","title":"Parameters","text":"<ul> <li>input: Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Assembler/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-assembler-Assembler/#_split","title":"_split","text":"<p>[Source]</p> <pre><code>fun ref _split(\ninput: Array[U8 val] val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-assembler-Assembler/#parameters_2","title":"Parameters","text":"<ul> <li>input: Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Assembler/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-assembler-Stream/","title":"Stream","text":"<p>[Source] <pre><code>type Stream is\nArray[Array[U8 val] val] ref\n</code></pre></p>"},{"location":"mqtt-assembler-Stream/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Array[Array[U8 val] val] ref</li> </ul>"},{"location":"mqtt-configurator--index/","title":"Package","text":"<p>Configurator reads a .ini file containing details of the broker, client credentials, connection options and initial subscriptions. If no config file is provided (or found) an anonymous connection will be attempted to localhost:1883. The config file <code>config.ini</code> is located in the same directory as main. The .ini files located in the  configurator package directory are for test purposes. </p>"},{"location":"mqtt-configurator--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ConfigFile</li> <li>primitive DefaultBroker</li> <li>primitive FullConfigParams</li> <li>primitive IniAddress</li> <li>primitive IniCleansession</li> <li>primitive IniId</li> <li>primitive IniKeepalive</li> <li>primitive IniMessage</li> <li>primitive IniName</li> <li>primitive IniPassword</li> <li>primitive IniPort</li> <li>primitive IniQos</li> <li>class IniReader</li> <li>primitive IniSectionBroker</li> <li>primitive IniSectionClient</li> <li>primitive IniSectionCredentials</li> <li>primitive IniSectionSubscriptions</li> <li>primitive IniSectionWill</li> <li>primitive IniTopic</li> <li>primitive IsValidQos</li> <li>primitive MinConfigParams</li> <li>class MqttConfig</li> <li>primitive QosPrefix</li> <li>primitive SupportedQos</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/","title":"ConfigFile","text":"<p>[Source] <pre><code>primitive val ConfigFile\n</code></pre></p>"},{"location":"mqtt-configurator-ConfigFile/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-ConfigFile/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConfigFile val^\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#returns","title":"Returns","text":"<ul> <li>ConfigFile val^</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-ConfigFile/#apply","title":"apply","text":"<p>[Source]</p> <p>The name of the config file - currently assumed to be in the main source directory</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#parameters","title":"Parameters","text":"<ul> <li>that: ConfigFile val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConfigFile val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-ConfigFile/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConfigFile val</li> </ul>"},{"location":"mqtt-configurator-ConfigFile/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/","title":"DefaultBroker","text":"<p>[Source] <pre><code>primitive val DefaultBroker\n</code></pre></p>"},{"location":"mqtt-configurator-DefaultBroker/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-DefaultBroker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DefaultBroker val^\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#returns","title":"Returns","text":"<ul> <li>DefaultBroker val^</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-DefaultBroker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DefaultBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#parameters","title":"Parameters","text":"<ul> <li>that: DefaultBroker val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DefaultBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-DefaultBroker/#parameters_1","title":"Parameters","text":"<ul> <li>that: DefaultBroker val</li> </ul>"},{"location":"mqtt-configurator-DefaultBroker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/","title":"FullConfigParams","text":"<p>[Source] <pre><code>primitive val FullConfigParams\n</code></pre></p>"},{"location":"mqtt-configurator-FullConfigParams/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-FullConfigParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FullConfigParams val^\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#returns","title":"Returns","text":"<ul> <li>FullConfigParams val^</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-FullConfigParams/#apply","title":"apply","text":"<p>[Source]</p> <p>Add strings to this literal array to read them from an ini file. Any strings  added here which are not represented as non-zero length strings in the ini file will cause the overall ini read to fail (by design).</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FullConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#parameters","title":"Parameters","text":"<ul> <li>that: FullConfigParams val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FullConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-FullConfigParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: FullConfigParams val</li> </ul>"},{"location":"mqtt-configurator-FullConfigParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/","title":"IniAddress","text":"<p>[Source] <pre><code>primitive val IniAddress\n</code></pre></p>"},{"location":"mqtt-configurator-IniAddress/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniAddress/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniAddress val^\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#returns","title":"Returns","text":"<ul> <li>IniAddress val^</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniAddress/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniAddress val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#parameters","title":"Parameters","text":"<ul> <li>that: IniAddress val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniAddress val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniAddress/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniAddress val</li> </ul>"},{"location":"mqtt-configurator-IniAddress/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/","title":"IniCleansession","text":"<p>[Source] <pre><code>primitive val IniCleansession\n</code></pre></p>"},{"location":"mqtt-configurator-IniCleansession/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniCleansession/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniCleansession val^\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#returns","title":"Returns","text":"<ul> <li>IniCleansession val^</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniCleansession/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniCleansession val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#parameters","title":"Parameters","text":"<ul> <li>that: IniCleansession val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniCleansession val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniCleansession/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniCleansession val</li> </ul>"},{"location":"mqtt-configurator-IniCleansession/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniId/","title":"IniId","text":"<p>[Source] <pre><code>primitive val IniId\n</code></pre></p>"},{"location":"mqtt-configurator-IniId/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniId/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniId val^\n</code></pre>"},{"location":"mqtt-configurator-IniId/#returns","title":"Returns","text":"<ul> <li>IniId val^</li> </ul>"},{"location":"mqtt-configurator-IniId/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniId/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniId/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniId val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#parameters","title":"Parameters","text":"<ul> <li>that: IniId val</li> </ul>"},{"location":"mqtt-configurator-IniId/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniId/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniId val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniId/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniId val</li> </ul>"},{"location":"mqtt-configurator-IniId/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/","title":"IniKeepalive","text":"<p>[Source] <pre><code>primitive val IniKeepalive\n</code></pre></p>"},{"location":"mqtt-configurator-IniKeepalive/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniKeepalive/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniKeepalive val^\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#returns","title":"Returns","text":"<ul> <li>IniKeepalive val^</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniKeepalive/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniKeepalive val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#parameters","title":"Parameters","text":"<ul> <li>that: IniKeepalive val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniKeepalive val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniKeepalive/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniKeepalive val</li> </ul>"},{"location":"mqtt-configurator-IniKeepalive/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/","title":"IniMessage","text":"<p>[Source] <pre><code>primitive val IniMessage\n</code></pre></p>"},{"location":"mqtt-configurator-IniMessage/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniMessage/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniMessage val^\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#returns","title":"Returns","text":"<ul> <li>IniMessage val^</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniMessage/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniMessage val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#parameters","title":"Parameters","text":"<ul> <li>that: IniMessage val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniMessage val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniMessage/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniMessage val</li> </ul>"},{"location":"mqtt-configurator-IniMessage/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniName/","title":"IniName","text":"<p>[Source] <pre><code>primitive val IniName\n</code></pre></p>"},{"location":"mqtt-configurator-IniName/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniName/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniName val^\n</code></pre>"},{"location":"mqtt-configurator-IniName/#returns","title":"Returns","text":"<ul> <li>IniName val^</li> </ul>"},{"location":"mqtt-configurator-IniName/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniName/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniName/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#parameters","title":"Parameters","text":"<ul> <li>that: IniName val</li> </ul>"},{"location":"mqtt-configurator-IniName/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniName/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniName/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniName val</li> </ul>"},{"location":"mqtt-configurator-IniName/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/","title":"IniPassword","text":"<p>[Source] <pre><code>primitive val IniPassword\n</code></pre></p>"},{"location":"mqtt-configurator-IniPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniPassword val^\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#returns","title":"Returns","text":"<ul> <li>IniPassword val^</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#parameters","title":"Parameters","text":"<ul> <li>that: IniPassword val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniPassword val</li> </ul>"},{"location":"mqtt-configurator-IniPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPort/","title":"IniPort","text":"<p>[Source] <pre><code>primitive val IniPort\n</code></pre></p>"},{"location":"mqtt-configurator-IniPort/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniPort/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniPort val^\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#returns","title":"Returns","text":"<ul> <li>IniPort val^</li> </ul>"},{"location":"mqtt-configurator-IniPort/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniPort/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniPort val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#parameters","title":"Parameters","text":"<ul> <li>that: IniPort val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniPort val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniPort/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniPort val</li> </ul>"},{"location":"mqtt-configurator-IniPort/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniQos/","title":"IniQos","text":"<p>[Source] <pre><code>primitive val IniQos\n</code></pre></p>"},{"location":"mqtt-configurator-IniQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniQos val^\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#returns","title":"Returns","text":"<ul> <li>IniQos val^</li> </ul>"},{"location":"mqtt-configurator-IniQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#parameters","title":"Parameters","text":"<ul> <li>that: IniQos val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniQos val</li> </ul>"},{"location":"mqtt-configurator-IniQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/","title":"IniReader","text":"<p>[Source]</p> <p>Called once for each line in the .ini file. Currently written to terminate on the first error. Uses primitive SupportedQos to determine whether subscriptions are valild</p> <pre><code>class ref IniReader is\nIniNotify ref\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#implements","title":"Implements","text":"<ul> <li>IniNotify ref</li> </ul>"},{"location":"mqtt-configurator-IniReader/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniReader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nparams: Array[String val] val)\n: IniReader ref^\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters","title":"Parameters","text":"<ul> <li>params: Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns","title":"Returns","text":"<ul> <li>IniReader ref^</li> </ul>"},{"location":"mqtt-configurator-IniReader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniReader/#getconfig","title":"getConfig","text":"<p>[Source]</p> <p>Destructive read on new (unpopulated) map should return the old (populated) map but I can't get this to work, so resorting to copying</p> <pre><code>fun box getConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#returns_1","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#getsubs","title":"getSubs","text":"<p>[Source]</p> <p>Destructive read on new (unpopulated) map should return the old (populated) map</p> <pre><code>fun box getSubs()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nsection: String val,\nkey: String val,\nvalue: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_1","title":"Parameters","text":"<ul> <li>section: String val</li> <li>key: String val</li> <li>value: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#add_section","title":"add_section","text":"<p>[Source]</p> <p>Part of the interface but we don't need it here</p> <pre><code>fun box add_section(\nsection: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_2","title":"Parameters","text":"<ul> <li>section: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#errors","title":"errors","text":"<p>[Source]</p> <p>This is called for each error encountered. Returns false to halt processing.</p> <pre><code>fun ref errors(\nline: USize val,\nerr: (IniIncompleteSection val | IniNoDelimiter val))\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_3","title":"Parameters","text":"<ul> <li>line: USize val</li> <li>err: (IniIncompleteSection val | IniNoDelimiter val)</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-configurator-IniReader/#_isvalidparam","title":"_isValidParam","text":"<p>[Source]</p> <p>The validator for parameters. Checks that the key is in our list of  key strings and that the value is a non-empty string</p> <pre><code>fun box _isValidParam(\np: String val,\nv: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_4","title":"Parameters","text":"<ul> <li>p: String val</li> <li>v: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#_isvalidsub","title":"_isValidSub","text":"<p>[Source]</p> <p>The subscription validator function that checks a topic of a topic: qos pair for a topic length of least one character (size in bytes so UTF-8 only) </p> <pre><code>fun ref _isValidSub(\nsub: String val,\nqos: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniReader/#parameters_5","title":"Parameters","text":"<ul> <li>sub: String val</li> <li>qos: String val</li> </ul>"},{"location":"mqtt-configurator-IniReader/#returns_7","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/","title":"IniSectionBroker","text":"<p>[Source] <pre><code>primitive val IniSectionBroker\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionBroker/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionBroker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionBroker val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#returns","title":"Returns","text":"<ul> <li>IniSectionBroker val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionBroker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionBroker val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionBroker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionBroker/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionBroker val</li> </ul>"},{"location":"mqtt-configurator-IniSectionBroker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/","title":"IniSectionClient","text":"<p>[Source] <pre><code>primitive val IniSectionClient\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionClient/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionClient/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionClient val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#returns","title":"Returns","text":"<ul> <li>IniSectionClient val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionClient/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionClient val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionClient val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionClient val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionClient/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionClient val</li> </ul>"},{"location":"mqtt-configurator-IniSectionClient/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/","title":"IniSectionCredentials","text":"<p>[Source] <pre><code>primitive val IniSectionCredentials\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionCredentials/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionCredentials/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionCredentials val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns","title":"Returns","text":"<ul> <li>IniSectionCredentials val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionCredentials/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionCredentials val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionCredentials val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionCredentials val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionCredentials/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionCredentials val</li> </ul>"},{"location":"mqtt-configurator-IniSectionCredentials/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/","title":"IniSectionSubscriptions","text":"<p>[Source] <pre><code>primitive val IniSectionSubscriptions\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionSubscriptions/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionSubscriptions val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns","title":"Returns","text":"<ul> <li>IniSectionSubscriptions val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionSubscriptions/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionSubscriptions val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionSubscriptions val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionSubscriptions val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionSubscriptions val</li> </ul>"},{"location":"mqtt-configurator-IniSectionSubscriptions/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/","title":"IniSectionWill","text":"<p>[Source] <pre><code>primitive val IniSectionWill\n</code></pre></p>"},{"location":"mqtt-configurator-IniSectionWill/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniSectionWill/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniSectionWill val^\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#returns","title":"Returns","text":"<ul> <li>IniSectionWill val^</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniSectionWill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniSectionWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#parameters","title":"Parameters","text":"<ul> <li>that: IniSectionWill val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniSectionWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniSectionWill/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniSectionWill val</li> </ul>"},{"location":"mqtt-configurator-IniSectionWill/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/","title":"IniTopic","text":"<p>[Source] <pre><code>primitive val IniTopic\n</code></pre></p>"},{"location":"mqtt-configurator-IniTopic/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IniTopic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IniTopic val^\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#returns","title":"Returns","text":"<ul> <li>IniTopic val^</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IniTopic/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IniTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#parameters","title":"Parameters","text":"<ul> <li>that: IniTopic val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IniTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IniTopic/#parameters_1","title":"Parameters","text":"<ul> <li>that: IniTopic val</li> </ul>"},{"location":"mqtt-configurator-IniTopic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/","title":"IsValidQos","text":"<p>[Source] <pre><code>primitive val IsValidQos\n</code></pre></p>"},{"location":"mqtt-configurator-IsValidQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-IsValidQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsValidQos val^\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#returns","title":"Returns","text":"<ul> <li>IsValidQos val^</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-IsValidQos/#apply","title":"apply","text":"<p>[Source]</p> <p>The subscription validator function that checks the qos field</p> <pre><code>fun box apply(\nqosString: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters","title":"Parameters","text":"<ul> <li>qosString: String val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsValidQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsValidQos val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsValidQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-IsValidQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsValidQos val</li> </ul>"},{"location":"mqtt-configurator-IsValidQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/","title":"MinConfigParams","text":"<p>[Source] <pre><code>primitive val MinConfigParams\n</code></pre></p>"},{"location":"mqtt-configurator-MinConfigParams/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MinConfigParams/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MinConfigParams val^\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#returns","title":"Returns","text":"<ul> <li>MinConfigParams val^</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MinConfigParams/#apply","title":"apply","text":"<p>[Source]</p> <p>Add strings to this literal array to read them from an ini file. Any strings  added here which are not represented as non-zero length strings in the ini file will cause the overall ini read to fail (by design).</p> <pre><code>fun box apply()\n: Array[String val] val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#returns_1","title":"Returns","text":"<ul> <li>Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MinConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#parameters","title":"Parameters","text":"<ul> <li>that: MinConfigParams val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MinConfigParams val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MinConfigParams/#parameters_1","title":"Parameters","text":"<ul> <li>that: MinConfigParams val</li> </ul>"},{"location":"mqtt-configurator-MinConfigParams/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/","title":"MqttConfig","text":"<p>[Source]</p> <p>All we are doing here is reading from a config.ini file and compositing two maps of key value pairs.  The first is the set of MQTT configuraton values that are used to make the initial user connection to the Broker. The format of these is parameter = argument. The parameters considered valid are defined below in the _configParams array. If the params in the config file don't match these the read terminates. The second map is a set of topics and QoS values representing the subscriptions to be requested from the  Broker on connection. The format of these is topic = QoS. If any subscriptions are not valid they are simply ignored and the conenction proceeds with no initial subscriptions (unlike for parameter reads)</p> <pre><code>class ref MqttConfig\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-MqttConfig/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nfileName: String val,\nparams: Array[String val] val)\n: MqttConfig ref^\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>fileName: String val</li> <li>params: Array[String val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#returns","title":"Returns","text":"<ul> <li>MqttConfig ref^</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-MqttConfig/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>The ini file is read when the class is constructed and the _configOK flag is set if all the parameters have been found and no invalid subscriptions are present. This method should be called before calling getConfig or getSubscriptions We do a belt and braces check for empty maps (if the file couldn't be opened for example)  and zero length params and then return the result of the read we did in the constructor.  </p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#getconfig","title":"getConfig","text":"<p>[Source]</p> <p>Returns a map of key value pairs or keys with zero length strings if there were any errors in the ini file</p> <pre><code>fun ref getConfig()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_2","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#getsubscriptions","title":"getSubscriptions","text":"<p>[Source]</p> <p>Returns an empty (but valid) array if no subscriptions were present or if there was an error in the ini file</p> <pre><code>fun ref getSubscriptions()\n: HashMap[String val, String val, HashEq[String val] val] val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_3","title":"Returns","text":"<ul> <li>HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#hassubscriptions","title":"hasSubscriptions","text":"<p>[Source]</p> <p>Convenience method that returns true is the ini file contained any initial  subscriptions </p> <pre><code>fun box hasSubscriptions()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#fileerror","title":"fileError","text":"<p>[Source]</p> <p>Converts file error codes to strings and sends to the debug printer is all</p> <pre><code>fun box fileError(\nerrNo: (FileOK val | FileError val | FileEOF val | \nFileBadFileNumber val | FileExists val | FilePermissionDenied val))\n: String val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#parameters_1","title":"Parameters","text":"<ul> <li>errNo: (FileOK val | FileError val | FileEOF val |      FileBadFileNumber val | FileExists val | FilePermissionDenied val)</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-MqttConfig/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-configurator-MqttConfig/#_readconfig","title":"_readConfig","text":"<p>[Source]</p> <p>Read the config values from the ini file and return true if they are all  found and are all non-zero length strings</p> <pre><code>fun ref _readConfig()\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-MqttConfig/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/","title":"QosPrefix","text":"<p>[Source] <pre><code>primitive val QosPrefix\n</code></pre></p>"},{"location":"mqtt-configurator-QosPrefix/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-QosPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: QosPrefix val^\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#returns","title":"Returns","text":"<ul> <li>QosPrefix val^</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-QosPrefix/#apply","title":"apply","text":"<p>[Source]</p> <p>In case we decide to change the case later (or something)</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: QosPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#parameters","title":"Parameters","text":"<ul> <li>that: QosPrefix val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: QosPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-QosPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: QosPrefix val</li> </ul>"},{"location":"mqtt-configurator-QosPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/","title":"SupportedQos","text":"<p>[Source] <pre><code>primitive val SupportedQos\n</code></pre></p>"},{"location":"mqtt-configurator-SupportedQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-configurator-SupportedQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SupportedQos val^\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#returns","title":"Returns","text":"<ul> <li>SupportedQos val^</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-configurator-SupportedQos/#apply","title":"apply","text":"<p>[Source]</p> <p>01</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SupportedQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#parameters","title":"Parameters","text":"<ul> <li>that: SupportedQos val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SupportedQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-configurator-SupportedQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: SupportedQos val</li> </ul>"},{"location":"mqtt-configurator-SupportedQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector--index/","title":"Package","text":"<p>Responsible for: 1. building the connection packet and sending it to the Broker via router.send 2. receiving and interpreting the returned ConnAck packet 3. telling router whether to start a new session or to restore an established session.</p> <p>If we are not accepted then we call the onBrokerRefusal behavior on the router and  exit. The app needs to sort it out.</p> <p>If we are accepted and requested a clean session the Broker will always give us one so we can just call the onBrokerConnect() behaviour.</p> <p>If we asked for a session restore (cleansession == 0) then we need to check whether we got one - and if we did then call _router.onBrokerRestore().</p> <p>If we asked for a restore and the Broker couldn't oblige then we can't do a disconnect and reconnect here because as soon as we send a disconnect the Broker will drop the network connection. Hence we must inform the app and let it go back through the network connection process. We do this by calling onBrokerStateNotFound() on router.</p> <p>Note - Because we are still early in the connection process we will pass connector a tag to router when it is created and let it call the router behaviours directly instead of going through the registrar.</p>"},{"location":"mqtt-connector--index/#public-types","title":"Public Types","text":"<ul> <li>primitive ConnAckAccepted</li> <li>class ConnAckPacket</li> <li>primitive ConnAckRefusedBadUserNameOrPassword</li> <li>primitive ConnAckRefusedIdentifierRejected</li> <li>primitive ConnAckRefusedNotAuthorised</li> <li>primitive ConnAckRefusedProtocolVersion</li> <li>primitive ConnAckRefusedServerUnavailable</li> <li>type ConnAckReturnCode</li> <li>primitive ConnectClean</li> <li>type ConnectFlags</li> <li>class ConnectPacket</li> <li>primitive ConnectPassword</li> <li>primitive ConnectQMask</li> <li>primitive ConnectUserName</li> <li>primitive ConnectWQos0</li> <li>primitive ConnectWQos1</li> <li>primitive ConnectWQos2</li> <li>primitive ConnectWRetain</li> <li>primitive ConnectWill</li> <li>actor Connector</li> <li>primitive DefaultConnectFlags</li> <li>class DisconnectPacket</li> <li>primitive RejectionCode</li> <li>primitive RestoreConnectFlags</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/","title":"ConnAckAccepted","text":"<p>[Source] <pre><code>primitive val ConnAckAccepted\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckAccepted/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckAccepted/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckAccepted val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns","title":"Returns","text":"<ul> <li>ConnAckAccepted val^</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckAccepted/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckAccepted val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckAccepted val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckAccepted val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckAccepted/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckAccepted val</li> </ul>"},{"location":"mqtt-connector-ConnAckAccepted/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/","title":"ConnAckPacket","text":"<p>[Source]</p> <p>ConnAckPacket represents a ConnACK message from the Broker. It is receive only so it is  never generated by the client. The purpose of this class is to interpret a ConnAck packet and hide the internal workings of interpretation from the router</p> <p>CONNACK Packet Fixed Header  B0  - Control Byte = 2 B1  - Remaining Length = 2</p> <p>Variable Header B2  - Connect Acknowledge Flags (Only Bit 0 is used: 1 = session present) B3  - Connect Return Code </p> <p>\"\"\"</p> <pre><code>class ref ConnAckPacket\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nbasePacket: BasePacket val)\n: ConnAckPacket ref^\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#returns","title":"Returns","text":"<ul> <li>ConnAckPacket ref^</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckPacket/#sessionaccepted","title":"sessionAccepted","text":"<p>[Source]</p> <pre><code>fun box sessionAccepted()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#sessionpresent","title":"sessionPresent","text":"<p>[Source]</p> <pre><code>fun box sessionPresent()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckPacket/#returncode","title":"returnCode","text":"<p>[Source]</p> <pre><code>fun box returnCode()\n: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | \nConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)\n</code></pre>"},{"location":"mqtt-connector-ConnAckPacket/#returns_3","title":"Returns","text":"<ul> <li>(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val |      ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/","title":"ConnAckRefusedBadUserNameOrPassword","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedBadUserNameOrPassword\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedBadUserNameOrPassword val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedBadUserNameOrPassword val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedBadUserNameOrPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedBadUserNameOrPassword val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedBadUserNameOrPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedBadUserNameOrPassword val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedBadUserNameOrPassword/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/","title":"ConnAckRefusedIdentifierRejected","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedIdentifierRejected\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedIdentifierRejected val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedIdentifierRejected val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedIdentifierRejected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedIdentifierRejected val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedIdentifierRejected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedIdentifierRejected val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedIdentifierRejected/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/","title":"ConnAckRefusedNotAuthorised","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedNotAuthorised\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedNotAuthorised val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedNotAuthorised val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedNotAuthorised val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedNotAuthorised val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedNotAuthorised val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedNotAuthorised val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedNotAuthorised/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/","title":"ConnAckRefusedProtocolVersion","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedProtocolVersion\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedProtocolVersion val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedProtocolVersion val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedProtocolVersion val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedProtocolVersion val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedProtocolVersion val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedProtocolVersion val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedProtocolVersion/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/","title":"ConnAckRefusedServerUnavailable","text":"<p>[Source] <pre><code>primitive val ConnAckRefusedServerUnavailable\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnAckRefusedServerUnavailable val^\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns","title":"Returns","text":"<ul> <li>ConnAckRefusedServerUnavailable val^</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnAckRefusedServerUnavailable val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#parameters","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedServerUnavailable val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnAckRefusedServerUnavailable val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnAckRefusedServerUnavailable val</li> </ul>"},{"location":"mqtt-connector-ConnAckRefusedServerUnavailable/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnAckReturnCode/","title":"ConnAckReturnCode","text":"<p>[Source] <pre><code>type ConnAckReturnCode is\n(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)\n</code></pre></p>"},{"location":"mqtt-connector-ConnAckReturnCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-connector-ConnectClean/","title":"ConnectClean","text":"<p>[Source] <pre><code>primitive val ConnectClean\n</code></pre></p>"},{"location":"mqtt-connector-ConnectClean/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectClean/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectClean val^\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#returns","title":"Returns","text":"<ul> <li>ConnectClean val^</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectClean/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectClean val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectClean val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectClean val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectClean/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectClean val</li> </ul>"},{"location":"mqtt-connector-ConnectClean/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectFlags/","title":"ConnectFlags","text":"<p>[Source] <pre><code>type ConnectFlags is\n(ConnectUserName val | ConnectPassword val | ConnectWill val | ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | ConnectWRetain val | ConnectClean val)\n</code></pre></p>"},{"location":"mqtt-connector-ConnectFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ConnectUserName val | ConnectPassword val | ConnectWill val | ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | ConnectWRetain val | ConnectClean val)</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/","title":"ConnectPacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b00010000) B2  Remaining Length - This is the length of variable header (10) plus the  length of the payload (string length + 2).  </p> <p>Variable header B1 - B6   Protocol name (must be 0,4,M,Q,T,T) B7 -      Protocol Level (must be 0x04) B8 -      Connect Flags (see below) B9 - B10  Keep Alive (MSB, LSB)  </p> <p>Payload The payload of the CONNECT Packet contains one or more length-prefixed fields as determined by the flags in the variable header.  These fields, if present, MUST appear in the order - Client Identifier - Will Topic - Will Message - User Name - Password </p> <pre><code>class ref ConnectPacket\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectPacket/#create","title":"create","text":"<p>[Source]</p> <p>Create an instance of a connect packet using the passed config parameters</p> <pre><code>new ref create(\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: ConnectPacket ref^\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns","title":"Returns","text":"<ul> <li>ConnectPacket ref^</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#public-fields","title":"Public fields","text":""},{"location":"mqtt-connector-ConnectPacket/#let-defaultkeepalive-u8-val","title":"let defaultKeepAlive: U8 val","text":"<p>[Source]</p> <p>This is a default value of the _keepAlive LSB which is used in the event we can't retrieve the  the string in the .ini file or convert it into a valid 16 bit number.</p>"},{"location":"mqtt-connector-ConnectPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectPacket/#getpacket","title":"getPacket","text":"<p>[Source]</p> <p>Return a connect packet ready to send to the broker</p> <pre><code>fun box getPacket()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>This is set false on instantiation and only set true if we have valid data</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#isset","title":"isSet","text":"<p>[Source]</p> <p>Test the value of the passed flag in the class field and returns true if it is set</p> <pre><code>fun box isSet(\nflag: (ConnectUserName val | ConnectPassword val | ConnectWill val | \nConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val | \nConnectWRetain val | ConnectClean val))\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_1","title":"Parameters","text":"<ul> <li>flag: (ConnectUserName val | ConnectPassword val | ConnectWill val |      ConnectWQos0 val | ConnectWQos1 val | ConnectWQos2 val |      ConnectWRetain val | ConnectClean val)</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-connector-ConnectPacket/#_assemble","title":"_assemble","text":"<p>[Source]</p> <p>Build a connect packet based on the current state of the local variables for each field</p> <pre><code>fun box _assemble()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_makekeepalive","title":"_makeKeepAlive","text":"<p>[Source]</p> <p>Sets the class variable _keepAlive that determines the keep alive time is seconds If we fail any of the validation tests we do not set the class variable and leave the packet builder to use a default value of 60 seconds</p> <pre><code>fun ref _makeKeepAlive(\nkaString: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_2","title":"Parameters","text":"<ul> <li>kaString: String val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_5","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_makesession","title":"_makeSession","text":"<p>[Source]</p> <p>Sets the field controling whether we start with a clean session or restore a past  session. If it is true then client and broker delete the old session. If it is false then the client and the Broker must restore from disc and save the session after the  network disconnect.</p> <pre><code>fun ref _makeSession(\ncsString: String val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_3","title":"Parameters","text":"<ul> <li>csString: String val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#_setwill","title":"_setWill","text":"<p>[Source]</p> <p>Sets the will topic, message and handling flags  </p> <pre><code>fun ref _setWill(\ntopic: String val,\nmsg: String val,\nqos: String val,\nretain: Bool val = true)\n: None val\n</code></pre>"},{"location":"mqtt-connector-ConnectPacket/#parameters_4","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>msg: String val</li> <li>qos: String val</li> <li>retain: Bool val = true</li> </ul>"},{"location":"mqtt-connector-ConnectPacket/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/","title":"ConnectPassword","text":"<p>[Source] <pre><code>primitive val ConnectPassword\n</code></pre></p>"},{"location":"mqtt-connector-ConnectPassword/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectPassword/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectPassword val^\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#returns","title":"Returns","text":"<ul> <li>ConnectPassword val^</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectPassword/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectPassword val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectPassword val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectPassword/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectPassword val</li> </ul>"},{"location":"mqtt-connector-ConnectPassword/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/","title":"ConnectQMask","text":"<p>[Source] <pre><code>primitive val ConnectQMask\n</code></pre></p>"},{"location":"mqtt-connector-ConnectQMask/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectQMask/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectQMask val^\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#returns","title":"Returns","text":"<ul> <li>ConnectQMask val^</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectQMask/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectQMask val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectQMask val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectQMask val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectQMask/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectQMask val</li> </ul>"},{"location":"mqtt-connector-ConnectQMask/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/","title":"ConnectUserName","text":"<p>[Source] <pre><code>primitive val ConnectUserName\n</code></pre></p>"},{"location":"mqtt-connector-ConnectUserName/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectUserName/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectUserName val^\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#returns","title":"Returns","text":"<ul> <li>ConnectUserName val^</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectUserName/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectUserName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectUserName val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectUserName val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectUserName/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectUserName val</li> </ul>"},{"location":"mqtt-connector-ConnectUserName/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/","title":"ConnectWQos0","text":"<p>[Source] <pre><code>primitive val ConnectWQos0\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos0 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#returns","title":"Returns","text":"<ul> <li>ConnectWQos0 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos0 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos0 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/","title":"ConnectWQos1","text":"<p>[Source] <pre><code>primitive val ConnectWQos1\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos1 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#returns","title":"Returns","text":"<ul> <li>ConnectWQos1 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos1 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos1 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/","title":"ConnectWQos2","text":"<p>[Source] <pre><code>primitive val ConnectWQos2\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWQos2 val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#returns","title":"Returns","text":"<ul> <li>ConnectWQos2 val^</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWQos2 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWQos2 val</li> </ul>"},{"location":"mqtt-connector-ConnectWQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/","title":"ConnectWRetain","text":"<p>[Source] <pre><code>primitive val ConnectWRetain\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWRetain val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#returns","title":"Returns","text":"<ul> <li>ConnectWRetain val^</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWRetain/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWRetain val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWRetain val</li> </ul>"},{"location":"mqtt-connector-ConnectWRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/","title":"ConnectWill","text":"<p>[Source] <pre><code>primitive val ConnectWill\n</code></pre></p>"},{"location":"mqtt-connector-ConnectWill/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-ConnectWill/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectWill val^\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#returns","title":"Returns","text":"<ul> <li>ConnectWill val^</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-ConnectWill/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectWill val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectWill val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-ConnectWill/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectWill val</li> </ul>"},{"location":"mqtt-connector-ConnectWill/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-Connector/","title":"Connector","text":"<p>[Source]</p> <p>Responsible for: 1. building the connection packet and sending it to the Broker via router.send 2. receiving and interpreting the returned ConnAck packet 3. telling router whether to start a new session or to restore an established session.</p> <pre><code>actor tag Connector\n</code></pre>"},{"location":"mqtt-connector-Connector/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-Connector/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag)\n: Connector tag^\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> </ul>"},{"location":"mqtt-connector-Connector/#returns","title":"Returns","text":"<ul> <li>Connector tag^</li> </ul>"},{"location":"mqtt-connector-Connector/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-connector-Connector/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>be connect(\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters_1","title":"Parameters","text":"<ul> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-connector-Connector/#onack","title":"onAck","text":"<p>[Source]</p> <pre><code>be onAck(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-connector-Connector/#parameters_2","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/","title":"DefaultConnectFlags","text":"<p>[Source] <pre><code>primitive val DefaultConnectFlags\n</code></pre></p>"},{"location":"mqtt-connector-DefaultConnectFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-DefaultConnectFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DefaultConnectFlags val^\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns","title":"Returns","text":"<ul> <li>DefaultConnectFlags val^</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-DefaultConnectFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DefaultConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#parameters","title":"Parameters","text":"<ul> <li>that: DefaultConnectFlags val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DefaultConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-DefaultConnectFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: DefaultConnectFlags val</li> </ul>"},{"location":"mqtt-connector-DefaultConnectFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-DisconnectPacket/","title":"DisconnectPacket","text":"<p>[Source]</p> <p>Respresents the DISCONNECT Packet, which has only two bytes B1: Control Byte ControlDisconnect B2: Remaining Length (always zero)</p> <p>After sending a DISCONNECT Packet the Client MUST close the  Network Connection and MUST NOT send any more Control Packets.</p> <p>Hardly worth building a class for two bytes, but just for consistency of approach...</p> <pre><code>class ref DisconnectPacket\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-DisconnectPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: DisconnectPacket iso^\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#returns","title":"Returns","text":"<ul> <li>DisconnectPacket iso^</li> </ul>"},{"location":"mqtt-connector-DisconnectPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-DisconnectPacket/#compose","title":"compose","text":"<p>[Source]</p> <pre><code>fun box compose()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-connector-DisconnectPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/","title":"RejectionCode","text":"<p>[Source] <pre><code>primitive val RejectionCode\n</code></pre></p>"},{"location":"mqtt-connector-RejectionCode/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-RejectionCode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RejectionCode val^\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#returns","title":"Returns","text":"<ul> <li>RejectionCode val^</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-RejectionCode/#apply","title":"apply","text":"<p>[Source]</p> <p>Decodes the Connection rejection code from the Broker and add some text to the returned string</p> <pre><code>fun box apply(\nflags: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters","title":"Parameters","text":"<ul> <li>flags: U8 val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RejectionCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters_1","title":"Parameters","text":"<ul> <li>that: RejectionCode val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RejectionCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RejectionCode/#parameters_2","title":"Parameters","text":"<ul> <li>that: RejectionCode val</li> </ul>"},{"location":"mqtt-connector-RejectionCode/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/","title":"RestoreConnectFlags","text":"<p>[Source] <pre><code>primitive val RestoreConnectFlags\n</code></pre></p>"},{"location":"mqtt-connector-RestoreConnectFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-connector-RestoreConnectFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RestoreConnectFlags val^\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns","title":"Returns","text":"<ul> <li>RestoreConnectFlags val^</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-connector-RestoreConnectFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RestoreConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#parameters","title":"Parameters","text":"<ul> <li>that: RestoreConnectFlags val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RestoreConnectFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-connector-RestoreConnectFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: RestoreConnectFlags val</li> </ul>"},{"location":"mqtt-connector-RestoreConnectFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-idIssuer--index/","title":"Package","text":"<p>IdIssuer is responsible for managing the issuing and reissuing of message ids. Ids must be unique for  in-flight messages so we need a check-in/check-out system so we don't overflow the U16.</p> <p>SUBSCRIBE, UNSUBSCRIBE, and PUBLISH (in cases where QoS &gt; 0) Control Packets contain a non-zero 16-bit Packet Identifier in big endian format. If a Client re-sends a particular Control Packet, then it MUST use the same Packet Identifier in subsequent re-sends of that packet.The Packet Identifier becomes available for reuse after the Client has processed the corresponding acknowledgement packet. In the case of a QoS 1 PUBLISH this is the corresponding PUBACK In the case of QoS 2 it is PUBCOMP. For SUBSCRIBE or UNSUBSCRIBE it is the corresponding SUBACK or UNSUBACK.  </p>"},{"location":"mqtt-idIssuer--index/#public-types","title":"Public Types","text":"<ul> <li>class IdIssuer</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/","title":"IdIssuer","text":"<p>[Source]</p> <p>Our approach for reissuing returned ids:   - create an array of returned numbers (empty on creation)  - when a request is received try to pop a number out of the array - if the list is empty issue a new number - when a number is returned push it back into the list - check that the list doesn't contain the returned number to prevent any duplicates  </p> <pre><code>class ref IdIssuer\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#constructors","title":"Constructors","text":""},{"location":"mqtt-idIssuer-IdIssuer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: IdIssuer iso^\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#returns","title":"Returns","text":"<ul> <li>IdIssuer iso^</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-idIssuer-IdIssuer/#checkout","title":"checkOut","text":"<p>[Source]</p> <p>Returns the next available Id. Because ids are returned and reassigned subsequent  calls to checkOutSub may not return consecutive values</p> <pre><code>fun ref checkOut()\n: U16 val\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#returns_1","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#checkin","title":"checkIn","text":"<p>[Source]</p> <p>Called when the transaction the id was used for has been completed and the  id can be re-used</p> <pre><code>fun ref checkIn(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#parameters","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-idIssuer-IdIssuer/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-idIssuer-IdIssuer/#_nextid","title":"_nextId","text":"<p>[Source]</p> <p>Returns the next available id from the array of returned Ids and if there are no returned Ids in the list issues a new one</p> <pre><code>fun ref _nextId()\n: U16 val\n</code></pre>"},{"location":"mqtt-idIssuer-IdIssuer/#returns_3","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-mqtt--index/","title":"Pony MQTT Client","text":""},{"location":"mqtt-mqtt--index/#release-objectives","title":"Release Objectives","text":""},{"location":"mqtt-mqtt--index/#release-1","title":"Release .1","text":"<ol> <li>100% coverage of the protocol for happy path with expected i/o</li> <li>QoS 0, 1 &amp; 2 cleansession only - no message re-transmission after disconnect</li> <li>Wide use of guards, debug checks and error tracing</li> <li>Separate classes for each packet type so we don't miss any variations</li> <li>Consistent api to avoid programming errors while things stabiliise  </li> <li>Minimal Main application to demonstrate connect, subscribe, publish and disconnect</li> </ol>"},{"location":"mqtt-mqtt--index/#release-2","title":"Release .2","text":"<ol> <li>Consider edge cases and errors</li> <li>Refine the api (public: simple, private: efficient)  </li> <li>Add session restoration </li> <li>Consolidate similar classes into factory classes</li> <li>Remove unnecessary intermediate variable, guards and debug checks</li> <li>Simple text terminal for testing</li> </ol>"},{"location":"mqtt-mqtt--index/#release-3","title":"Release .3","text":"<ol> <li>Performance  </li> <li>Load and memory usage  </li> <li>Optimise</li> <li>Build as library</li> <li>Terminal app for benchmarking</li> </ol>"},{"location":"mqtt-mqtt--index/#architecture","title":"Architecture","text":"<p>The architecture of the R.1 is highly decomposed: 1  to help understanding how the protocol works 2  to facilitate perf testing each component later</p> <p>This is probably not the most effective approach for performance so expect to see components  being consolidated later. The main purpose of each of the packages (in order of typical programe flow) is as follows.</p>"},{"location":"mqtt-mqtt--index/#main","title":"Main","text":"<p>Uses a configurator actor to reads the configuration from config.ini. Passes the config to  the other actors it creates and then starts the terminal handler. Actors are stored in a  Registrar so then can be disposed later - when main's onExit behaviour is called.</p>"},{"location":"mqtt-mqtt--index/#network","title":"Network","text":"<p>Connects to the server in the config.ini file (or localhost:1883 a default). Creates a Client as a callback for events.</p>"},{"location":"mqtt-mqtt--index/#client","title":"Client","text":"<p>The TCP class that tells Router when the network is connected (not the MQTT broker yet, just the TCP connection). The Client received method is called when data is available and send this data to Assembler.</p>"},{"location":"mqtt-mqtt--index/#assembler","title":"Assembler","text":"<p>TCP knows nothing of MQTT messages so we may receive multiple MQTT messages in a TCP packet, or fractions of a message, or any combination thereof. Assembler is responsible for assembling valid MQTT messages from these TCP packets. If you were expecting sections of the code to be written in assembler, I am sorry to disappoint...</p>"},{"location":"mqtt-mqtt--index/#router","title":"Router","text":"<p>The hub of the library - carries out minimal interpretation of the incomming message and send it to the appropriate handlers. Keeps track of the incomming and outgoing message ids as acks are only tied to messages by id.</p>"},{"location":"mqtt-mqtt--index/#public-types","title":"Public Types","text":"<ul> <li>actor Mqtt</li> <li>trait MqttApplication</li> <li>trait MqttService</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/","title":"Mqtt","text":"<p>[Source]</p> <p>Provides message access to the MQTT broker identified in config.ini or, if no config.ini can be found, to localhost:1883.</p> <pre><code>actor tag Mqtt\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#constructors","title":"Constructors","text":""},{"location":"mqtt-mqtt-Mqtt/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val,\nmqttApplication: MqttApplication tag)\n: Mqtt tag^\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>mqttApplication: MqttApplication tag</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#returns","title":"Returns","text":"<ul> <li>Mqtt tag^</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-mqtt-Mqtt/#connect","title":"connect","text":"<p>[Source]</p> <p>cmd: true - Connect to the Broker initialised during instantiation. Takes a callback that is called with  a status flag when the Broker is ready to accept subscribe and publish messages or when the Broker connection does not succeed. We connect by calling connect() on the network actor and the router gets a call once we have  a confirmed TCP connection. cmd: false - Gracefully disconnect from the Broker so that the last will and testament message is not sent. If disconnect is not called before the Mqtt actor terminates the Broker will send the LW&amp;T message as configured in config.ini. </p> <p>Calling .disconnectBroker() on the router send the disconnect packet and cancels the ping timer. The tcp client calls router.cleanup() once the network has disconnected so there is no need to call any other router behaviours here.</p> <p>Router calls onConnection(false) once it has finished its clean-up and we can safely start to exit the app</p> <p>DISCONNECT must be the last message sent by the client to the server. The client must close the TCP  connection after sending DISCONNECT.</p> <pre><code>be connect(\ncmd: Bool val)\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_1","title":"Parameters","text":"<ul> <li>cmd: Bool val</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#publish","title":"publish","text":"<p>[Source]</p> <p>This is just a passthrough to the router.</p> <pre><code>be publish(\ntopic: String val,\npayload: Array[U8 val] val,\nqos: String val = \"qos0\")\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_2","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>payload: Array[U8 val] val</li> <li>qos: String val = \"qos0\"</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#subscribe","title":"subscribe","text":"<p>[Source]</p> <p>Subscribe or unsubscribe to the passed topic, requesting messages be returned with the passed qos.  This is just a passthrough to the router.</p> <pre><code>be subscribe(\ntopic: String val,\nqos: (String val | None val))\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_3","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (String val | None val)</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#onconnection","title":"onConnection","text":"<p>[Source]</p> <pre><code>be onConnection(\nconnected: Bool val)\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_4","title":"Parameters","text":"<ul> <li>connected: Bool val</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#onsubscribed","title":"onSubscribed","text":"<p>[Source]</p> <pre><code>be onSubscribed(\ntopic: String val,\nqos: (String val | None val))\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_5","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (String val | None val)</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#onmessage","title":"onMessage","text":"<p>[Source]</p> <pre><code>be onMessage(\ntopic: String val,\ncontent: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_6","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: Array[U8 val] val</li> </ul>"},{"location":"mqtt-mqtt-Mqtt/#onstatus","title":"onStatus","text":"<p>[Source]</p> <pre><code>be onStatus(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-mqtt-Mqtt/#parameters_7","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-mqtt-MqttApplication/","title":"MqttApplication","text":"<p>[Source] <pre><code>trait ref MqttApplication\n</code></pre></p>"},{"location":"mqtt-mqtt-MqttApplication/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-mqtt-MqttApplication/#onconnection","title":"onConnection","text":"<p>[Source]</p> <pre><code>be onConnection(\nconnected: Bool val)\n</code></pre>"},{"location":"mqtt-mqtt-MqttApplication/#parameters","title":"Parameters","text":"<ul> <li>connected: Bool val</li> </ul>"},{"location":"mqtt-mqtt-MqttApplication/#onsubscribed","title":"onSubscribed","text":"<p>[Source]</p> <pre><code>be onSubscribed(\ntopic: String val,\nqos: (String val | None val))\n</code></pre>"},{"location":"mqtt-mqtt-MqttApplication/#parameters_1","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (String val | None val)</li> </ul>"},{"location":"mqtt-mqtt-MqttApplication/#onmessage","title":"onMessage","text":"<p>[Source]</p> <pre><code>be onMessage(\ntopic: String val,\ncontent: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-mqtt-MqttApplication/#parameters_2","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: Array[U8 val] val</li> </ul>"},{"location":"mqtt-mqtt-MqttApplication/#onstatus","title":"onStatus","text":"<p>[Source]</p> <pre><code>be onStatus(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-mqtt-MqttApplication/#parameters_3","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-mqtt-MqttService/","title":"MqttService","text":"<p>[Source] <pre><code>trait ref MqttService\n</code></pre></p>"},{"location":"mqtt-mqtt-MqttService/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-mqtt-MqttService/#onresponse","title":"onResponse","text":"<p>[Source]</p> <pre><code>be onResponse(\ntopic: String val,\npayload: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-mqtt-MqttService/#parameters","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>payload: Array[U8 val] val</li> </ul>"},{"location":"mqtt-mqtt-MqttService/#onexit","title":"onExit","text":"<p>[Source]</p> <pre><code>be onExit()\n</code></pre>"},{"location":"mqtt-network--index/","title":"Package","text":"<p>The OsNetwork actor provides the default (localhost:1883) settings if the config.ini file isn't provided. It is also our interface to DNS in the event that the provided broker address isn't numeric. We can probably combine this with the client actor at a later stage. I still haven't quite worked out how the DNS call works - because it looks synchronous and I'd have thought it would need to be async...</p>"},{"location":"mqtt-network--index/#public-types","title":"Public Types","text":"<ul> <li>class Client</li> <li>actor OsNetwork</li> </ul>"},{"location":"mqtt-network-Client/","title":"Client","text":"<p>[Source]</p> <p>This class manages the TCP level connection and any set-up or tear-down necessary on network connection and  disconnection. It doesn't get involved in Broker level connections.</p> <p>Assume that the TCP buffers returned by received() are of arbitrary size and may have: 1. One or more MQTT packets 2. A trailing fragment of an MQTT packet  3. Both of the above</p> <p>Client constructs the Router with the config details from main and then adds the router to the registrar. Once Client gets an established TCP connection Router is passed this in its OnTcpConnect behaviour. Router can then start the Broker connection process. This is a bit of a long way around but we need to be sure  we don't generate any incomming messages before the connection is available. </p> <p>Assembler is constructed and passed the tag of the router so that it knows where to send the  assembled packets. Assembler is not added to registrar because only client needs to access it.</p> <p>Otherwise, the client contains the callbacks called by TCPConnection when the connection state changes.</p> <pre><code>class ref Client is\nTCPConnectionNotify ref\n</code></pre>"},{"location":"mqtt-network-Client/#implements","title":"Implements","text":"<ul> <li>TCPConnectionNotify ref</li> </ul>"},{"location":"mqtt-network-Client/#constructors","title":"Constructors","text":""},{"location":"mqtt-network-Client/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nenv: Env val,\nrouter: Router tag)\n: Client iso^\n</code></pre>"},{"location":"mqtt-network-Client/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>router: Router tag</li> </ul>"},{"location":"mqtt-network-Client/#returns","title":"Returns","text":"<ul> <li>Client iso^</li> </ul>"},{"location":"mqtt-network-Client/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-network-Client/#connecting","title":"connecting","text":"<p>[Source]</p> <pre><code>fun ref connecting(\nconn: TCPConnection ref,\ncount: U32 val)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_1","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>count: U32 val</li> </ul>"},{"location":"mqtt-network-Client/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#accepted","title":"accepted","text":"<p>[Source]</p> <pre><code>fun ref accepted(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_2","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#connected","title":"connected","text":"<p>[Source]</p> <pre><code>fun ref connected(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_3","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#received","title":"received","text":"<p>[Source]</p> <pre><code>fun ref received(\nconn: TCPConnection ref,\ndata: Array[U8 val] iso,\ntimes: USize val)\n: Bool val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_4","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: Array[U8 val] iso</li> <li>times: USize val</li> </ul>"},{"location":"mqtt-network-Client/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-network-Client/#connect_failed","title":"connect_failed","text":"<p>[Source]</p> <pre><code>fun ref connect_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_5","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#closed","title":"closed","text":"<p>[Source]</p> <pre><code>fun ref closed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_6","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#proxy_via","title":"proxy_via","text":"<pre><code>fun ref proxy_via(\nhost: String val,\nservice: String val)\n: (String val , String val)\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_7","title":"Parameters","text":"<ul> <li>host: String val</li> <li>service: String val</li> </ul>"},{"location":"mqtt-network-Client/#returns_7","title":"Returns","text":"<ul> <li>(String val , String val)</li> </ul>"},{"location":"mqtt-network-Client/#auth_failed","title":"auth_failed","text":"<pre><code>fun ref auth_failed(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_8","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#sent","title":"sent","text":"<pre><code>fun ref sent(\nconn: TCPConnection ref,\ndata: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_9","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: (String val | Array[U8 val] val)</li> </ul>"},{"location":"mqtt-network-Client/#returns_9","title":"Returns","text":"<ul> <li>(String val | Array[U8 val] val)</li> </ul>"},{"location":"mqtt-network-Client/#sentv","title":"sentv","text":"<pre><code>fun ref sentv(\nconn: TCPConnection ref,\ndata: ByteSeqIter val)\n: ByteSeqIter val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_10","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>data: ByteSeqIter val</li> </ul>"},{"location":"mqtt-network-Client/#returns_10","title":"Returns","text":"<ul> <li>ByteSeqIter val</li> </ul>"},{"location":"mqtt-network-Client/#expect","title":"expect","text":"<pre><code>fun ref expect(\nconn: TCPConnection ref,\nqty: USize val)\n: USize val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_11","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> <li>qty: USize val</li> </ul>"},{"location":"mqtt-network-Client/#returns_11","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-network-Client/#throttled","title":"throttled","text":"<pre><code>fun ref throttled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_12","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-Client/#unthrottled","title":"unthrottled","text":"<pre><code>fun ref unthrottled(\nconn: TCPConnection ref)\n: None val\n</code></pre>"},{"location":"mqtt-network-Client/#parameters_13","title":"Parameters","text":"<ul> <li>conn: TCPConnection ref</li> </ul>"},{"location":"mqtt-network-Client/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-network-OsNetwork/","title":"OsNetwork","text":"<p>[Source] <pre><code>actor tag OsNetwork\n</code></pre></p>"},{"location":"mqtt-network-OsNetwork/#constructors","title":"Constructors","text":""},{"location":"mqtt-network-OsNetwork/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val,\nrouter: Router tag,\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: OsNetwork tag^\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>router: Router tag</li> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-network-OsNetwork/#returns","title":"Returns","text":"<ul> <li>OsNetwork tag^</li> </ul>"},{"location":"mqtt-network-OsNetwork/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-network-OsNetwork/#connect","title":"connect","text":"<p>[Source]</p> <pre><code>be connect()\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#disconnect","title":"disconnect","text":"<p>[Source]</p> <pre><code>be disconnect()\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-network-OsNetwork/#toipv4","title":"toIPv4","text":"<p>[Source]</p> <p>Convert a string to an ip4 address or None if it is not valid</p> <pre><code>fun box toIPv4(\nenv: Env val,\narg: String val)\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-network-OsNetwork/#parameters_1","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>arg: String val</li> </ul>"},{"location":"mqtt-network-OsNetwork/#returns_1","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-pinger--index/","title":"Package","text":"<p>A simple Timer/TimerNotify package to provide timing for Keep Alive pings from the client to the Broker. Also provide the keepalive packet class used by router to generate the message.  Both of these are so simple that they could be combined in router but we will keep then here until  optimisation time.</p>"},{"location":"mqtt-pinger--index/#public-types","title":"Public Types","text":"<ul> <li>class Ping</li> <li>class PingReqPacket</li> <li>actor Pinger</li> </ul>"},{"location":"mqtt-pinger-Ping/","title":"Ping","text":"<p>[Source]</p> <p>Simple timerNotify class to provide a keepalive ping </p> <pre><code>class ref Ping is\nTimerNotify ref\n</code></pre>"},{"location":"mqtt-pinger-Ping/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-pinger-Ping/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-Ping/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nrouter: Router tag)\n: Ping iso^\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns","title":"Returns","text":"<ul> <li>Ping iso^</li> </ul>"},{"location":"mqtt-pinger-Ping/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-Ping/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-pinger-Ping/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-pinger-Ping/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-pinger-Ping/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-pinger-PingReqPacket/","title":"PingReqPacket","text":"<p>[Source]</p> <p>Respresents the PINGREQ Packet, which has only two bytes B1: Control Byte ControlPingReq B2: Remaining Length (always zero)</p> <p>Hardly worth building a class for two bytes, but just for consistency of approach...</p> <pre><code>class ref PingReqPacket\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-PingReqPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: PingReqPacket iso^\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#returns","title":"Returns","text":"<ul> <li>PingReqPacket iso^</li> </ul>"},{"location":"mqtt-pinger-PingReqPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-pinger-PingReqPacket/#compose","title":"compose","text":"<p>[Source]</p> <pre><code>fun box compose()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-pinger-PingReqPacket/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-pinger-Pinger/","title":"Pinger","text":"<p>[Source]</p> <p>Keep alive pinger. Starts a timer that calls .doPing() on the router tag stored in _reg.  </p> <pre><code>actor tag Pinger\n</code></pre>"},{"location":"mqtt-pinger-Pinger/#constructors","title":"Constructors","text":""},{"location":"mqtt-pinger-Pinger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag,\nperiod: U64 val,\nrepetitions: U64 val = 0)\n: Pinger tag^\n</code></pre>"},{"location":"mqtt-pinger-Pinger/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> <li>period: U64 val</li> <li>repetitions: U64 val = 0</li> </ul>"},{"location":"mqtt-pinger-Pinger/#returns","title":"Returns","text":"<ul> <li>Pinger tag^</li> </ul>"},{"location":"mqtt-pinger-Pinger/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-pinger-Pinger/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>be cancel()\n</code></pre>"},{"location":"mqtt-primitives--index/","title":"Package","text":"<p>A collection of definitions, flags and error codes.</p>"},{"location":"mqtt-primitives--index/#public-types","title":"Public Types","text":"<ul> <li>type ArrayVal</li> <li>primitive BrokerDisconnect</li> <li>primitive CPFlags</li> <li>type CPNoFlags</li> <li>type CPWithFlags</li> <li>primitive CleanSessionRequired</li> <li>primitive Clear</li> <li>type Command</li> <li>primitive Commands</li> <li>primitive ConfigurationError</li> <li>primitive Connect</li> <li>primitive ConnectionClosed</li> <li>primitive ConnectionRefused</li> <li>type ControlArrayVal</li> <li>primitive ControlConnAck</li> <li>primitive ControlConnect</li> <li>primitive ControlDisconnect</li> <li>primitive ControlPingReq</li> <li>primitive ControlPingResp</li> <li>primitive ControlPubAck</li> <li>primitive ControlPubComp</li> <li>primitive ControlPubRec</li> <li>primitive ControlPubRel</li> <li>primitive ControlPublish</li> <li>primitive ControlSubAck</li> <li>primitive ControlSubscribe</li> <li>primitive ControlUnsubAck</li> <li>primitive ControlUnsubscribe</li> <li>primitive DecodeErr</li> <li>primitive Discon</li> <li>type ErrorCode</li> <li>primitive ForbiddenCode</li> <li>primitive ForbiddenFlags</li> <li>primitive ForbiddenQos</li> <li>primitive ForbiddenType</li> <li>primitive ForbiddenWillQos</li> <li>type IdType</li> <li>primitive InvalidControl</li> <li>primitive InvalidFlags</li> <li>primitive InvalidRemainingLength</li> <li>primitive InvalidType</li> <li>primitive KeyDisplay</li> <li>primitive KeyIssuer</li> <li>primitive KeyNetwork</li> <li>primitive KeyPerf</li> <li>primitive KeyPersistor</li> <li>primitive KeyPinger</li> <li>primitive KeyRouter</li> <li>primitive KeySpawner</li> <li>primitive KeyTicker</li> <li>primitive LoadTest</li> <li>type MQTTPublishFlags</li> <li>primitive MalformedRequest</li> <li>primitive MalformedResponse</li> <li>trait MqActor</li> <li>primitive Mute</li> <li>primitive NoError</li> <li>primitive NotConnected</li> <li>primitive NotImplemented</li> <li>trait Packet</li> <li>type PacketIdentifierType</li> <li>type PacketNoIdentifierType</li> <li>type PacketWithTopicType</li> <li>class PublishArgs</li> <li>primitive PublishDUP</li> <li>primitive PublishQos0</li> <li>primitive PublishQos1</li> <li>primitive PublishQos2</li> <li>primitive PublishRetain</li> <li>type Qos</li> <li>primitive Qos0</li> <li>primitive Qos1</li> <li>primitive Qos2</li> <li>primitive Quit</li> <li>primitive ReconnectFailed</li> <li>primitive Service</li> <li>primitive SocketError</li> <li>primitive Sub</li> <li>type SubControl</li> <li>primitive SubscribeFailed</li> <li>primitive SubscribeStats</li> <li>primitive SubscribeTest</li> <li>primitive TestInterval</li> <li>primitive TestLength</li> <li>primitive TestPrefix</li> <li>primitive TestTopic</li> <li>primitive UnSub</li> <li>primitive UnSubscribe</li> <li>primitive UnknownError</li> </ul>"},{"location":"mqtt-primitives-ArrayVal/","title":"ArrayVal","text":"<p>[Source]</p> <p>A basic typedef for the type we use to construct packets for sending over the socket  to the broker</p> <pre><code>type ArrayVal is\nArray[U8 val] val\n</code></pre>"},{"location":"mqtt-primitives-ArrayVal/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/","title":"BrokerDisconnect","text":"<p>[Source] <pre><code>primitive val BrokerDisconnect\n</code></pre></p>"},{"location":"mqtt-primitives-BrokerDisconnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-BrokerDisconnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BrokerDisconnect val^\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns","title":"Returns","text":"<ul> <li>BrokerDisconnect val^</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-BrokerDisconnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BrokerDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#parameters","title":"Parameters","text":"<ul> <li>that: BrokerDisconnect val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BrokerDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-BrokerDisconnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: BrokerDisconnect val</li> </ul>"},{"location":"mqtt-primitives-BrokerDisconnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/","title":"CPFlags","text":"<p>[Source] <pre><code>primitive val CPFlags\n</code></pre></p>"},{"location":"mqtt-primitives-CPFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-CPFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CPFlags val^\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#returns","title":"Returns","text":"<ul> <li>CPFlags val^</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-CPFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CPFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#parameters","title":"Parameters","text":"<ul> <li>that: CPFlags val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CPFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CPFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: CPFlags val</li> </ul>"},{"location":"mqtt-primitives-CPFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CPNoFlags/","title":"CPNoFlags","text":"<p>[Source] <pre><code>type CPNoFlags is\n(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubComp val | ControlSubAck val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-CPNoFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubComp val | ControlSubAck val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-CPWithFlags/","title":"CPWithFlags","text":"<p>[Source] <pre><code>type CPWithFlags is\n(ControlPubRel val | ControlSubscribe val | ControlUnsubscribe val)\n</code></pre></p>"},{"location":"mqtt-primitives-CPWithFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPubRel val | ControlSubscribe val | ControlUnsubscribe val)</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/","title":"CleanSessionRequired","text":"<p>[Source] <pre><code>primitive val CleanSessionRequired\n</code></pre></p>"},{"location":"mqtt-primitives-CleanSessionRequired/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-CleanSessionRequired/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CleanSessionRequired val^\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns","title":"Returns","text":"<ul> <li>CleanSessionRequired val^</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-CleanSessionRequired/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CleanSessionRequired val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#parameters","title":"Parameters","text":"<ul> <li>that: CleanSessionRequired val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CleanSessionRequired val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-CleanSessionRequired/#parameters_1","title":"Parameters","text":"<ul> <li>that: CleanSessionRequired val</li> </ul>"},{"location":"mqtt-primitives-CleanSessionRequired/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Clear/","title":"Clear","text":"<p>[Source] <pre><code>primitive val Clear\n</code></pre></p>"},{"location":"mqtt-primitives-Clear/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Clear/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Clear val^\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns","title":"Returns","text":"<ul> <li>Clear val^</li> </ul>"},{"location":"mqtt-primitives-Clear/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Clear/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Clear/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Clear/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Clear val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#parameters","title":"Parameters","text":"<ul> <li>that: Clear val</li> </ul>"},{"location":"mqtt-primitives-Clear/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Clear/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Clear val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Clear/#parameters_1","title":"Parameters","text":"<ul> <li>that: Clear val</li> </ul>"},{"location":"mqtt-primitives-Clear/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Command/","title":"Command","text":"<p>[Source] <pre><code>type Command is\n(Connect val | SubscribeTest val | SubscribeStats val | UnSubscribe val | Service val | LoadTest val | Mute val | Clear val | Discon val | Quit val)\n</code></pre></p>"},{"location":"mqtt-primitives-Command/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Connect val | SubscribeTest val | SubscribeStats val | UnSubscribe val | Service val | LoadTest val | Mute val | Clear val | Discon val | Quit val)</li> </ul>"},{"location":"mqtt-primitives-Commands/","title":"Commands","text":"<p>[Source] <pre><code>primitive val Commands\n</code></pre></p>"},{"location":"mqtt-primitives-Commands/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Commands/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Commands val^\n</code></pre>"},{"location":"mqtt-primitives-Commands/#returns","title":"Returns","text":"<ul> <li>Commands val^</li> </ul>"},{"location":"mqtt-primitives-Commands/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Commands/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Commands/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Commands val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#parameters","title":"Parameters","text":"<ul> <li>that: Commands val</li> </ul>"},{"location":"mqtt-primitives-Commands/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Commands/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Commands val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Commands/#parameters_1","title":"Parameters","text":"<ul> <li>that: Commands val</li> </ul>"},{"location":"mqtt-primitives-Commands/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/","title":"ConfigurationError","text":"<p>[Source] <pre><code>primitive val ConfigurationError\n</code></pre></p>"},{"location":"mqtt-primitives-ConfigurationError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConfigurationError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConfigurationError val^\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns","title":"Returns","text":"<ul> <li>ConfigurationError val^</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConfigurationError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConfigurationError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#parameters","title":"Parameters","text":"<ul> <li>that: ConfigurationError val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConfigurationError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConfigurationError/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConfigurationError val</li> </ul>"},{"location":"mqtt-primitives-ConfigurationError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Connect/","title":"Connect","text":"<p>[Source] <pre><code>primitive val Connect\n</code></pre></p>"},{"location":"mqtt-primitives-Connect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Connect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Connect val^\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns","title":"Returns","text":"<ul> <li>Connect val^</li> </ul>"},{"location":"mqtt-primitives-Connect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Connect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Connect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Connect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Connect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#parameters","title":"Parameters","text":"<ul> <li>that: Connect val</li> </ul>"},{"location":"mqtt-primitives-Connect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Connect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Connect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Connect/#parameters_1","title":"Parameters","text":"<ul> <li>that: Connect val</li> </ul>"},{"location":"mqtt-primitives-Connect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/","title":"ConnectionClosed","text":"<p>[Source] <pre><code>primitive val ConnectionClosed\n</code></pre></p>"},{"location":"mqtt-primitives-ConnectionClosed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConnectionClosed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectionClosed val^\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns","title":"Returns","text":"<ul> <li>ConnectionClosed val^</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConnectionClosed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectionClosed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectionClosed val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectionClosed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionClosed/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectionClosed val</li> </ul>"},{"location":"mqtt-primitives-ConnectionClosed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/","title":"ConnectionRefused","text":"<p>[Source] <pre><code>primitive val ConnectionRefused\n</code></pre></p>"},{"location":"mqtt-primitives-ConnectionRefused/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ConnectionRefused/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ConnectionRefused val^\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns","title":"Returns","text":"<ul> <li>ConnectionRefused val^</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ConnectionRefused/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ConnectionRefused val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#parameters","title":"Parameters","text":"<ul> <li>that: ConnectionRefused val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ConnectionRefused val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ConnectionRefused/#parameters_1","title":"Parameters","text":"<ul> <li>that: ConnectionRefused val</li> </ul>"},{"location":"mqtt-primitives-ConnectionRefused/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlArrayVal/","title":"ControlArrayVal","text":"<p>[Source] <pre><code>type ControlArrayVal is\n(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubRel val | ControlPubComp val | ControlSubscribe val | ControlSubAck val | ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-ControlArrayVal/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val | ControlPubAck val | ControlPubRec val | ControlPubRel val | ControlPubComp val | ControlSubscribe val | ControlSubAck val | ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/","title":"ControlConnAck","text":"<p>[Source] <pre><code>primitive val ControlConnAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlConnAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlConnAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlConnAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns","title":"Returns","text":"<ul> <li>ControlConnAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlConnAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlConnAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlConnAck val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlConnAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlConnAck val</li> </ul>"},{"location":"mqtt-primitives-ControlConnAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/","title":"ControlConnect","text":"<p>[Source] <pre><code>primitive val ControlConnect\n</code></pre></p>"},{"location":"mqtt-primitives-ControlConnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlConnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlConnect val^\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns","title":"Returns","text":"<ul> <li>ControlConnect val^</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlConnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlConnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#parameters","title":"Parameters","text":"<ul> <li>that: ControlConnect val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlConnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlConnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlConnect val</li> </ul>"},{"location":"mqtt-primitives-ControlConnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/","title":"ControlDisconnect","text":"<p>[Source] <pre><code>primitive val ControlDisconnect\n</code></pre></p>"},{"location":"mqtt-primitives-ControlDisconnect/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlDisconnect/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlDisconnect val^\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns","title":"Returns","text":"<ul> <li>ControlDisconnect val^</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlDisconnect/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#parameters","title":"Parameters","text":"<ul> <li>that: ControlDisconnect val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlDisconnect val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlDisconnect/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlDisconnect val</li> </ul>"},{"location":"mqtt-primitives-ControlDisconnect/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/","title":"ControlPingReq","text":"<p>[Source] <pre><code>primitive val ControlPingReq\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPingReq/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPingReq/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPingReq val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns","title":"Returns","text":"<ul> <li>ControlPingReq val^</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPingReq/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPingReq val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPingReq val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPingReq val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingReq/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPingReq val</li> </ul>"},{"location":"mqtt-primitives-ControlPingReq/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/","title":"ControlPingResp","text":"<p>[Source] <pre><code>primitive val ControlPingResp\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPingResp/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPingResp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPingResp val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns","title":"Returns","text":"<ul> <li>ControlPingResp val^</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPingResp/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPingResp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPingResp val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPingResp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPingResp/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPingResp val</li> </ul>"},{"location":"mqtt-primitives-ControlPingResp/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/","title":"ControlPubAck","text":"<p>[Source] <pre><code>primitive val ControlPubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns","title":"Returns","text":"<ul> <li>ControlPubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlPubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/","title":"ControlPubComp","text":"<p>[Source] <pre><code>primitive val ControlPubComp\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubComp/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubComp/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubComp val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns","title":"Returns","text":"<ul> <li>ControlPubComp val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubComp/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubComp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubComp val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubComp val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubComp/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubComp val</li> </ul>"},{"location":"mqtt-primitives-ControlPubComp/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/","title":"ControlPubRec","text":"<p>[Source] <pre><code>primitive val ControlPubRec\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubRec/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubRec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubRec val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns","title":"Returns","text":"<ul> <li>ControlPubRec val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubRec/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubRec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubRec val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubRec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRec/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubRec val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRec/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/","title":"ControlPubRel","text":"<p>[Source] <pre><code>primitive val ControlPubRel\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPubRel/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPubRel/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPubRel val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns","title":"Returns","text":"<ul> <li>ControlPubRel val^</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPubRel/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPubRel val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPubRel val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPubRel val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPubRel/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPubRel val</li> </ul>"},{"location":"mqtt-primitives-ControlPubRel/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/","title":"ControlPublish","text":"<p>[Source] <pre><code>primitive val ControlPublish\n</code></pre></p>"},{"location":"mqtt-primitives-ControlPublish/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlPublish/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlPublish val^\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns","title":"Returns","text":"<ul> <li>ControlPublish val^</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlPublish/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlPublish val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#parameters","title":"Parameters","text":"<ul> <li>that: ControlPublish val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlPublish val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlPublish/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlPublish val</li> </ul>"},{"location":"mqtt-primitives-ControlPublish/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/","title":"ControlSubAck","text":"<p>[Source] <pre><code>primitive val ControlSubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlSubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlSubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlSubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns","title":"Returns","text":"<ul> <li>ControlSubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlSubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlSubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlSubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlSubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlSubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlSubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/","title":"ControlSubscribe","text":"<p>[Source] <pre><code>primitive val ControlSubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-ControlSubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlSubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlSubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns","title":"Returns","text":"<ul> <li>ControlSubscribe val^</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlSubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: ControlSubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlSubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlSubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlSubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/","title":"ControlUnsubAck","text":"<p>[Source] <pre><code>primitive val ControlUnsubAck\n</code></pre></p>"},{"location":"mqtt-primitives-ControlUnsubAck/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlUnsubAck/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlUnsubAck val^\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns","title":"Returns","text":"<ul> <li>ControlUnsubAck val^</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlUnsubAck/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlUnsubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#parameters","title":"Parameters","text":"<ul> <li>that: ControlUnsubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlUnsubAck val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubAck/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlUnsubAck val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubAck/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/","title":"ControlUnsubscribe","text":"<p>[Source] <pre><code>primitive val ControlUnsubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-ControlUnsubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ControlUnsubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ControlUnsubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns","title":"Returns","text":"<ul> <li>ControlUnsubscribe val^</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ControlUnsubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ControlUnsubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: ControlUnsubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ControlUnsubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ControlUnsubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: ControlUnsubscribe val</li> </ul>"},{"location":"mqtt-primitives-ControlUnsubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/","title":"DecodeErr","text":"<p>[Source] <pre><code>primitive val DecodeErr\n</code></pre></p>"},{"location":"mqtt-primitives-DecodeErr/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-DecodeErr/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DecodeErr val^\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#returns","title":"Returns","text":"<ul> <li>DecodeErr val^</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-DecodeErr/#apply","title":"apply","text":"<p>[Source]</p> <p>Compiles an information string from an error code</p> <pre><code>fun box apply(\nerr: (NoError val | ForbiddenType val | ForbiddenFlags val | \nForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | \nInvalidType val | InvalidControl val | InvalidFlags val | \nInvalidRemainingLength val | MalformedRequest val | MalformedResponse val | \nCleanSessionRequired val | SubscribeFailed val | NotConnected val | \nSocketError val | ConnectionClosed val | ReconnectFailed val | \nConnectionRefused val | UnknownError val),\ntext: String val = \"\")\n: None val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters","title":"Parameters","text":"<ul> <li>err: (NoError val | ForbiddenType val | ForbiddenFlags val |      ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val |      InvalidType val | InvalidControl val | InvalidFlags val |      InvalidRemainingLength val | MalformedRequest val | MalformedResponse val |      CleanSessionRequired val | SubscribeFailed val | NotConnected val |      SocketError val | ConnectionClosed val | ReconnectFailed val |      ConnectionRefused val | UnknownError val)</li> <li>text: String val = \"\"</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DecodeErr val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters_1","title":"Parameters","text":"<ul> <li>that: DecodeErr val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DecodeErr val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-DecodeErr/#parameters_2","title":"Parameters","text":"<ul> <li>that: DecodeErr val</li> </ul>"},{"location":"mqtt-primitives-DecodeErr/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Discon/","title":"Discon","text":"<p>[Source] <pre><code>primitive val Discon\n</code></pre></p>"},{"location":"mqtt-primitives-Discon/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Discon/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Discon val^\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns","title":"Returns","text":"<ul> <li>Discon val^</li> </ul>"},{"location":"mqtt-primitives-Discon/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Discon/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Discon/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Discon/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Discon val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#parameters","title":"Parameters","text":"<ul> <li>that: Discon val</li> </ul>"},{"location":"mqtt-primitives-Discon/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Discon/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Discon val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Discon/#parameters_1","title":"Parameters","text":"<ul> <li>that: Discon val</li> </ul>"},{"location":"mqtt-primitives-Discon/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ErrorCode/","title":"ErrorCode","text":"<p>[Source] <pre><code>type ErrorCode is\n(NoError val | ForbiddenType val | ForbiddenFlags val | ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | InvalidType val | InvalidControl val | InvalidFlags val | InvalidRemainingLength val | MalformedRequest val | MalformedResponse val | CleanSessionRequired val | SubscribeFailed val | NotConnected val | SocketError val | ConnectionClosed val | ReconnectFailed val | ConnectionRefused val | UnknownError val)\n</code></pre></p>"},{"location":"mqtt-primitives-ErrorCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(NoError val | ForbiddenType val | ForbiddenFlags val | ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | InvalidType val | InvalidControl val | InvalidFlags val | InvalidRemainingLength val | MalformedRequest val | MalformedResponse val | CleanSessionRequired val | SubscribeFailed val | NotConnected val | SocketError val | ConnectionClosed val | ReconnectFailed val | ConnectionRefused val | UnknownError val)</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/","title":"ForbiddenCode","text":"<p>[Source] <pre><code>primitive val ForbiddenCode\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenCode/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenCode/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenCode val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns","title":"Returns","text":"<ul> <li>ForbiddenCode val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenCode/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenCode val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenCode val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenCode/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenCode val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenCode/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/","title":"ForbiddenFlags","text":"<p>[Source] <pre><code>primitive val ForbiddenFlags\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenFlags val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns","title":"Returns","text":"<ul> <li>ForbiddenFlags val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenFlags val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenFlags val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenFlags/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/","title":"ForbiddenQos","text":"<p>[Source] <pre><code>primitive val ForbiddenQos\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenQos val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns","title":"Returns","text":"<ul> <li>ForbiddenQos val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenQos/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/","title":"ForbiddenType","text":"<p>[Source] <pre><code>primitive val ForbiddenType\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenType/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenType/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenType val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns","title":"Returns","text":"<ul> <li>ForbiddenType val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenType/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenType val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenType/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenType val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenType/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/","title":"ForbiddenWillQos","text":"<p>[Source] <pre><code>primitive val ForbiddenWillQos\n</code></pre></p>"},{"location":"mqtt-primitives-ForbiddenWillQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ForbiddenWillQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ForbiddenWillQos val^\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns","title":"Returns","text":"<ul> <li>ForbiddenWillQos val^</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ForbiddenWillQos/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ForbiddenWillQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#parameters","title":"Parameters","text":"<ul> <li>that: ForbiddenWillQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ForbiddenWillQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ForbiddenWillQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ForbiddenWillQos val</li> </ul>"},{"location":"mqtt-primitives-ForbiddenWillQos/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-IdType/","title":"IdType","text":"<p>[Source]</p> <p>The type of the packet id as defined by the protocol specification</p> <pre><code>type IdType is\nU16 val\n</code></pre>"},{"location":"mqtt-primitives-IdType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/","title":"InvalidControl","text":"<p>[Source] <pre><code>primitive val InvalidControl\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidControl/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidControl/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidControl val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns","title":"Returns","text":"<ul> <li>InvalidControl val^</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidControl/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidControl val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidControl val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidControl val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidControl/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidControl val</li> </ul>"},{"location":"mqtt-primitives-InvalidControl/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/","title":"InvalidFlags","text":"<p>[Source] <pre><code>primitive val InvalidFlags\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidFlags val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns","title":"Returns","text":"<ul> <li>InvalidFlags val^</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidFlags/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidFlags val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidFlags val</li> </ul>"},{"location":"mqtt-primitives-InvalidFlags/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/","title":"InvalidRemainingLength","text":"<p>[Source] <pre><code>primitive val InvalidRemainingLength\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidRemainingLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidRemainingLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidRemainingLength val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns","title":"Returns","text":"<ul> <li>InvalidRemainingLength val^</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidRemainingLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidRemainingLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidRemainingLength val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidRemainingLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidRemainingLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidRemainingLength val</li> </ul>"},{"location":"mqtt-primitives-InvalidRemainingLength/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/","title":"InvalidType","text":"<p>[Source] <pre><code>primitive val InvalidType\n</code></pre></p>"},{"location":"mqtt-primitives-InvalidType/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-InvalidType/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: InvalidType val^\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns","title":"Returns","text":"<ul> <li>InvalidType val^</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-InvalidType/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: InvalidType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#parameters","title":"Parameters","text":"<ul> <li>that: InvalidType val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: InvalidType val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-InvalidType/#parameters_1","title":"Parameters","text":"<ul> <li>that: InvalidType val</li> </ul>"},{"location":"mqtt-primitives-InvalidType/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/","title":"KeyDisplay","text":"<p>[Source] <pre><code>primitive val KeyDisplay\n</code></pre></p>"},{"location":"mqtt-primitives-KeyDisplay/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyDisplay/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyDisplay val^\n</code></pre>"},{"location":"mqtt-primitives-KeyDisplay/#returns","title":"Returns","text":"<ul> <li>KeyDisplay val^</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyDisplay/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyDisplay/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyDisplay val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyDisplay/#parameters","title":"Parameters","text":"<ul> <li>that: KeyDisplay val</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyDisplay val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyDisplay/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyDisplay val</li> </ul>"},{"location":"mqtt-primitives-KeyDisplay/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/","title":"KeyIssuer","text":"<p>[Source] <pre><code>primitive val KeyIssuer\n</code></pre></p>"},{"location":"mqtt-primitives-KeyIssuer/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyIssuer/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyIssuer val^\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#returns","title":"Returns","text":"<ul> <li>KeyIssuer val^</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyIssuer/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyIssuer val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#parameters","title":"Parameters","text":"<ul> <li>that: KeyIssuer val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyIssuer val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyIssuer/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyIssuer val</li> </ul>"},{"location":"mqtt-primitives-KeyIssuer/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/","title":"KeyNetwork","text":"<p>[Source] <pre><code>primitive val KeyNetwork\n</code></pre></p>"},{"location":"mqtt-primitives-KeyNetwork/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyNetwork/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyNetwork val^\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#returns","title":"Returns","text":"<ul> <li>KeyNetwork val^</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyNetwork/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyNetwork val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#parameters","title":"Parameters","text":"<ul> <li>that: KeyNetwork val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyNetwork val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyNetwork/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyNetwork val</li> </ul>"},{"location":"mqtt-primitives-KeyNetwork/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/","title":"KeyPerf","text":"<p>[Source] <pre><code>primitive val KeyPerf\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPerf/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPerf/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPerf val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#returns","title":"Returns","text":"<ul> <li>KeyPerf val^</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPerf/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPerf val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPerf val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPerf val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPerf/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPerf val</li> </ul>"},{"location":"mqtt-primitives-KeyPerf/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/","title":"KeyPersistor","text":"<p>[Source] <pre><code>primitive val KeyPersistor\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPersistor/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPersistor/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPersistor val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#returns","title":"Returns","text":"<ul> <li>KeyPersistor val^</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPersistor/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPersistor val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPersistor val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPersistor val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPersistor/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPersistor val</li> </ul>"},{"location":"mqtt-primitives-KeyPersistor/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/","title":"KeyPinger","text":"<p>[Source] <pre><code>primitive val KeyPinger\n</code></pre></p>"},{"location":"mqtt-primitives-KeyPinger/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyPinger/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyPinger val^\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#returns","title":"Returns","text":"<ul> <li>KeyPinger val^</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyPinger/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyPinger val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#parameters","title":"Parameters","text":"<ul> <li>that: KeyPinger val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyPinger val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyPinger/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyPinger val</li> </ul>"},{"location":"mqtt-primitives-KeyPinger/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/","title":"KeyRouter","text":"<p>[Source] <pre><code>primitive val KeyRouter\n</code></pre></p>"},{"location":"mqtt-primitives-KeyRouter/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyRouter/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyRouter val^\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#returns","title":"Returns","text":"<ul> <li>KeyRouter val^</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyRouter/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyRouter val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#parameters","title":"Parameters","text":"<ul> <li>that: KeyRouter val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyRouter val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyRouter/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyRouter val</li> </ul>"},{"location":"mqtt-primitives-KeyRouter/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/","title":"KeySpawner","text":"<p>[Source] <pre><code>primitive val KeySpawner\n</code></pre></p>"},{"location":"mqtt-primitives-KeySpawner/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeySpawner/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeySpawner val^\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#returns","title":"Returns","text":"<ul> <li>KeySpawner val^</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeySpawner/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeySpawner val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#parameters","title":"Parameters","text":"<ul> <li>that: KeySpawner val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeySpawner val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeySpawner/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeySpawner val</li> </ul>"},{"location":"mqtt-primitives-KeySpawner/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/","title":"KeyTicker","text":"<p>[Source] <pre><code>primitive val KeyTicker\n</code></pre></p>"},{"location":"mqtt-primitives-KeyTicker/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-KeyTicker/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: KeyTicker val^\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#returns","title":"Returns","text":"<ul> <li>KeyTicker val^</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-KeyTicker/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: KeyTicker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#parameters","title":"Parameters","text":"<ul> <li>that: KeyTicker val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: KeyTicker val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-KeyTicker/#parameters_1","title":"Parameters","text":"<ul> <li>that: KeyTicker val</li> </ul>"},{"location":"mqtt-primitives-KeyTicker/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/","title":"LoadTest","text":"<p>[Source] <pre><code>primitive val LoadTest\n</code></pre></p>"},{"location":"mqtt-primitives-LoadTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-LoadTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: LoadTest val^\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns","title":"Returns","text":"<ul> <li>LoadTest val^</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-LoadTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: LoadTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#parameters","title":"Parameters","text":"<ul> <li>that: LoadTest val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: LoadTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-LoadTest/#parameters_1","title":"Parameters","text":"<ul> <li>that: LoadTest val</li> </ul>"},{"location":"mqtt-primitives-LoadTest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MQTTPublishFlags/","title":"MQTTPublishFlags","text":"<p>[Source] <pre><code>type MQTTPublishFlags is\n(PublishDUP val | PublishQos0 val | PublishQos1 val | PublishQos2 val | PublishRetain val)\n</code></pre></p>"},{"location":"mqtt-primitives-MQTTPublishFlags/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(PublishDUP val | PublishQos0 val | PublishQos1 val | PublishQos2 val | PublishRetain val)</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/","title":"MalformedRequest","text":"<p>[Source] <pre><code>primitive val MalformedRequest\n</code></pre></p>"},{"location":"mqtt-primitives-MalformedRequest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-MalformedRequest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MalformedRequest val^\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns","title":"Returns","text":"<ul> <li>MalformedRequest val^</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-MalformedRequest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MalformedRequest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#parameters","title":"Parameters","text":"<ul> <li>that: MalformedRequest val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MalformedRequest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedRequest/#parameters_1","title":"Parameters","text":"<ul> <li>that: MalformedRequest val</li> </ul>"},{"location":"mqtt-primitives-MalformedRequest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/","title":"MalformedResponse","text":"<p>[Source] <pre><code>primitive val MalformedResponse\n</code></pre></p>"},{"location":"mqtt-primitives-MalformedResponse/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-MalformedResponse/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MalformedResponse val^\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns","title":"Returns","text":"<ul> <li>MalformedResponse val^</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-MalformedResponse/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MalformedResponse val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#parameters","title":"Parameters","text":"<ul> <li>that: MalformedResponse val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MalformedResponse val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-MalformedResponse/#parameters_1","title":"Parameters","text":"<ul> <li>that: MalformedResponse val</li> </ul>"},{"location":"mqtt-primitives-MalformedResponse/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-MqActor/","title":"MqActor","text":"<p>[Source]</p> <p>This type def allows us to combine publishers and subscribers into one map of open transactions. The map is indexed by client allocated id (cid) and cids are unique  while checked-out so we know that we can't have clashing cids even if an actor  has multiple transactions underway. A transaction finishing is denoted by the  removal of the actor from the map and then the check-in of the cid.  TODO - consider whether we need to add some safeguards for this (e.g. a single router private function that atomically removes first and then checks-in)</p> <pre><code>trait ref MqActor\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-primitives-MqActor/#ondata","title":"onData","text":"<p>[Source]</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-primitives-MqActor/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-primitives-MqActor/#parameters_1","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-primitives-Mute/","title":"Mute","text":"<p>[Source] <pre><code>primitive val Mute\n</code></pre></p>"},{"location":"mqtt-primitives-Mute/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Mute/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Mute val^\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns","title":"Returns","text":"<ul> <li>Mute val^</li> </ul>"},{"location":"mqtt-primitives-Mute/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Mute/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Mute/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Mute/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Mute val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#parameters","title":"Parameters","text":"<ul> <li>that: Mute val</li> </ul>"},{"location":"mqtt-primitives-Mute/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Mute/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Mute val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Mute/#parameters_1","title":"Parameters","text":"<ul> <li>that: Mute val</li> </ul>"},{"location":"mqtt-primitives-Mute/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NoError/","title":"NoError","text":"<p>[Source] <pre><code>primitive val NoError\n</code></pre></p>"},{"location":"mqtt-primitives-NoError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NoError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NoError val^\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns","title":"Returns","text":"<ul> <li>NoError val^</li> </ul>"},{"location":"mqtt-primitives-NoError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NoError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NoError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NoError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NoError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#parameters","title":"Parameters","text":"<ul> <li>that: NoError val</li> </ul>"},{"location":"mqtt-primitives-NoError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NoError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NoError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NoError/#parameters_1","title":"Parameters","text":"<ul> <li>that: NoError val</li> </ul>"},{"location":"mqtt-primitives-NoError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/","title":"NotConnected","text":"<p>[Source] <pre><code>primitive val NotConnected\n</code></pre></p>"},{"location":"mqtt-primitives-NotConnected/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NotConnected/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NotConnected val^\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns","title":"Returns","text":"<ul> <li>NotConnected val^</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NotConnected/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NotConnected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#parameters","title":"Parameters","text":"<ul> <li>that: NotConnected val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NotConnected val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotConnected/#parameters_1","title":"Parameters","text":"<ul> <li>that: NotConnected val</li> </ul>"},{"location":"mqtt-primitives-NotConnected/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/","title":"NotImplemented","text":"<p>[Source] <pre><code>primitive val NotImplemented\n</code></pre></p>"},{"location":"mqtt-primitives-NotImplemented/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-NotImplemented/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: NotImplemented val^\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns","title":"Returns","text":"<ul> <li>NotImplemented val^</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-NotImplemented/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: NotImplemented val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#parameters","title":"Parameters","text":"<ul> <li>that: NotImplemented val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: NotImplemented val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-NotImplemented/#parameters_1","title":"Parameters","text":"<ul> <li>that: NotImplemented val</li> </ul>"},{"location":"mqtt-primitives-NotImplemented/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/","title":"Packet","text":"<p>[Source]</p> <p>The minimum set of functions needed to extract the information in the fixed header and enable the packet to be interpreted correctly</p> <pre><code>trait ref Packet\n</code></pre>"},{"location":"mqtt-primitives-Packet/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Packet/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>True if the packet has been validated</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/#isa","title":"isA","text":"<p>[Source]</p> <p>True if the top four bits in the byte passed as value match the ControlArrayVal passed as controlType or false otherwise.</p> <pre><code>fun box isA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#parameters","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Packet/#controltype","title":"controlType","text":"<p>[Source]</p> <p>The MQTT message type which should only be None if isValid() returns false</p> <pre><code>fun box controlType()\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_2","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#controlbyte","title":"controlByte","text":"<p>[Source]</p> <p>The control byte which should only be None if isValid() returns false</p> <pre><code>fun box controlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_3","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-primitives-Packet/#fixedheaderlength","title":"fixedHeaderLength","text":"<p>[Source]</p> <p>The sum of the control byte and the number of bytes in the remaining length field.</p> <pre><code>fun box fixedHeaderLength()\n: USize val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_4","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-primitives-Packet/#remaininglength","title":"remainingLength","text":"<p>[Source]</p> <p>The decoded value of the remaining length field. </p> <pre><code>fun box remainingLength()\n: USize val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_5","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-primitives-Packet/#data","title":"data","text":"<p>[Source]</p> <p>Returns the raw bytes of the packet as a sendable array of U8 (ArrayVal)</p> <pre><code>fun box data()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-primitives-Packet/#returns_6","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-primitives-PacketIdentifierType/","title":"PacketIdentifierType","text":"<p>[Source] <pre><code>type PacketIdentifierType is\n(ControlPubAck val | ControlPubRec val | ControlPubComp val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketIdentifierType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPubAck val | ControlPubRec val | ControlPubComp val)</li> </ul>"},{"location":"mqtt-primitives-PacketNoIdentifierType/","title":"PacketNoIdentifierType","text":"<p>[Source] <pre><code>type PacketNoIdentifierType is\n(ControlConnect val | ControlConnAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketNoIdentifierType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPingReq val | ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-primitives-PacketWithTopicType/","title":"PacketWithTopicType","text":"<p>[Source] <pre><code>type PacketWithTopicType is\n(ControlPublish val | ControlSubscribe val | ControlUnsubscribe val)\n</code></pre></p>"},{"location":"mqtt-primitives-PacketWithTopicType/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(ControlPublish val | ControlSubscribe val | ControlUnsubscribe val)</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/","title":"PublishArgs","text":"<p>[Source]</p> <p>A simple class to enable a set of args for a publish behaviour to be created with sensible defaults</p> <pre><code>class ref PublishArgs\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishArgs/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\ntopic': String val,\npayload': Array[U8 val] val,\nqos': (Qos0 val | Qos1 val | Qos2 val) = reference,\nd': Bool val = false,\nr': Bool val = false,\ncid': U16 val = 0)\n: PublishArgs val^\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#parameters","title":"Parameters","text":"<ul> <li>topic': String val</li> <li>payload': Array[U8 val] val</li> <li>qos': (Qos0 val | Qos1 val | Qos2 val) = reference</li> <li>d': Bool val = false</li> <li>r': Bool val = false</li> <li>cid': U16 val = 0</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#returns","title":"Returns","text":"<ul> <li>PublishArgs val^</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#createwithid","title":"createWithId","text":"<p>[Source]</p> <pre><code>new val createWithId(\nargs: PublishArgs val,\nnewId: U16 val)\n: PublishArgs val^\n</code></pre>"},{"location":"mqtt-primitives-PublishArgs/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> <li>newId: U16 val</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#returns_1","title":"Returns","text":"<ul> <li>PublishArgs val^</li> </ul>"},{"location":"mqtt-primitives-PublishArgs/#public-fields","title":"Public fields","text":""},{"location":"mqtt-primitives-PublishArgs/#var-cid-u16-val","title":"var cid: U16 val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-topic-string-val","title":"let topic: String val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-payload-arrayu8-val-val","title":"let payload: Array[U8 val] val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-qos-qos0-val-qos1-val-qos2-val","title":"let qos: (Qos0 val | Qos1 val | Qos2 val)","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-retain-bool-val","title":"let retain: Bool val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishArgs/#let-dup-bool-val","title":"let dup: Bool val","text":"<p>[Source]</p>"},{"location":"mqtt-primitives-PublishDUP/","title":"PublishDUP","text":"<p>[Source] <pre><code>primitive val PublishDUP\n</code></pre></p>"},{"location":"mqtt-primitives-PublishDUP/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishDUP/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishDUP val^\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#returns","title":"Returns","text":"<ul> <li>PublishDUP val^</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishDUP/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishDUP val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#parameters","title":"Parameters","text":"<ul> <li>that: PublishDUP val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishDUP val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishDUP/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishDUP val</li> </ul>"},{"location":"mqtt-primitives-PublishDUP/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/","title":"PublishQos0","text":"<p>[Source] <pre><code>primitive val PublishQos0\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos0 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#returns","title":"Returns","text":"<ul> <li>PublishQos0 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos0 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos0 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/","title":"PublishQos1","text":"<p>[Source] <pre><code>primitive val PublishQos1\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos1 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#returns","title":"Returns","text":"<ul> <li>PublishQos1 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos1 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos1 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/","title":"PublishQos2","text":"<p>[Source] <pre><code>primitive val PublishQos2\n</code></pre></p>"},{"location":"mqtt-primitives-PublishQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishQos2 val^\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#returns","title":"Returns","text":"<ul> <li>PublishQos2 val^</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#parameters","title":"Parameters","text":"<ul> <li>that: PublishQos2 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishQos2 val</li> </ul>"},{"location":"mqtt-primitives-PublishQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/","title":"PublishRetain","text":"<p>[Source] <pre><code>primitive val PublishRetain\n</code></pre></p>"},{"location":"mqtt-primitives-PublishRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-PublishRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: PublishRetain val^\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#returns","title":"Returns","text":"<ul> <li>PublishRetain val^</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-PublishRetain/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: PublishRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#parameters","title":"Parameters","text":"<ul> <li>that: PublishRetain val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: PublishRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-PublishRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: PublishRetain val</li> </ul>"},{"location":"mqtt-primitives-PublishRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos/","title":"Qos","text":"<p>[Source]</p> <p>A typeDef for the three quality of service flags </p> <pre><code>type Qos is\n(Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-primitives-Qos/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-primitives-Qos0/","title":"Qos0","text":"<p>[Source] <pre><code>primitive val Qos0\n</code></pre></p>"},{"location":"mqtt-primitives-Qos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos0 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns","title":"Returns","text":"<ul> <li>Qos0 val^</li> </ul>"},{"location":"mqtt-primitives-Qos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#parameters","title":"Parameters","text":"<ul> <li>that: Qos0 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos0 val</li> </ul>"},{"location":"mqtt-primitives-Qos0/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos1/","title":"Qos1","text":"<p>[Source] <pre><code>primitive val Qos1\n</code></pre></p>"},{"location":"mqtt-primitives-Qos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos1 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns","title":"Returns","text":"<ul> <li>Qos1 val^</li> </ul>"},{"location":"mqtt-primitives-Qos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#parameters","title":"Parameters","text":"<ul> <li>that: Qos1 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos1 val</li> </ul>"},{"location":"mqtt-primitives-Qos1/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos2/","title":"Qos2","text":"<p>[Source] <pre><code>primitive val Qos2\n</code></pre></p>"},{"location":"mqtt-primitives-Qos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Qos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Qos2 val^\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns","title":"Returns","text":"<ul> <li>Qos2 val^</li> </ul>"},{"location":"mqtt-primitives-Qos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Qos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Qos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#parameters","title":"Parameters","text":"<ul> <li>that: Qos2 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Qos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Qos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: Qos2 val</li> </ul>"},{"location":"mqtt-primitives-Qos2/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Quit/","title":"Quit","text":"<p>[Source] <pre><code>primitive val Quit\n</code></pre></p>"},{"location":"mqtt-primitives-Quit/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Quit/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Quit val^\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns","title":"Returns","text":"<ul> <li>Quit val^</li> </ul>"},{"location":"mqtt-primitives-Quit/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Quit/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Quit/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Quit/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Quit val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#parameters","title":"Parameters","text":"<ul> <li>that: Quit val</li> </ul>"},{"location":"mqtt-primitives-Quit/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Quit/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Quit val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Quit/#parameters_1","title":"Parameters","text":"<ul> <li>that: Quit val</li> </ul>"},{"location":"mqtt-primitives-Quit/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/","title":"ReconnectFailed","text":"<p>[Source] <pre><code>primitive val ReconnectFailed\n</code></pre></p>"},{"location":"mqtt-primitives-ReconnectFailed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-ReconnectFailed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ReconnectFailed val^\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns","title":"Returns","text":"<ul> <li>ReconnectFailed val^</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-ReconnectFailed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ReconnectFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#parameters","title":"Parameters","text":"<ul> <li>that: ReconnectFailed val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ReconnectFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-ReconnectFailed/#parameters_1","title":"Parameters","text":"<ul> <li>that: ReconnectFailed val</li> </ul>"},{"location":"mqtt-primitives-ReconnectFailed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Service/","title":"Service","text":"<p>[Source] <pre><code>primitive val Service\n</code></pre></p>"},{"location":"mqtt-primitives-Service/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Service/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Service val^\n</code></pre>"},{"location":"mqtt-primitives-Service/#returns","title":"Returns","text":"<ul> <li>Service val^</li> </ul>"},{"location":"mqtt-primitives-Service/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Service/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-Service/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-Service/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-Service/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-Service/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Service val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Service/#parameters","title":"Parameters","text":"<ul> <li>that: Service val</li> </ul>"},{"location":"mqtt-primitives-Service/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Service/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Service val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Service/#parameters_1","title":"Parameters","text":"<ul> <li>that: Service val</li> </ul>"},{"location":"mqtt-primitives-Service/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SocketError/","title":"SocketError","text":"<p>[Source] <pre><code>primitive val SocketError\n</code></pre></p>"},{"location":"mqtt-primitives-SocketError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SocketError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SocketError val^\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns","title":"Returns","text":"<ul> <li>SocketError val^</li> </ul>"},{"location":"mqtt-primitives-SocketError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SocketError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SocketError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#parameters","title":"Parameters","text":"<ul> <li>that: SocketError val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SocketError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SocketError/#parameters_1","title":"Parameters","text":"<ul> <li>that: SocketError val</li> </ul>"},{"location":"mqtt-primitives-SocketError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Sub/","title":"Sub","text":"<p>[Source] <pre><code>primitive val Sub\n</code></pre></p>"},{"location":"mqtt-primitives-Sub/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-Sub/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Sub val^\n</code></pre>"},{"location":"mqtt-primitives-Sub/#returns","title":"Returns","text":"<ul> <li>Sub val^</li> </ul>"},{"location":"mqtt-primitives-Sub/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-Sub/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Sub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Sub/#parameters","title":"Parameters","text":"<ul> <li>that: Sub val</li> </ul>"},{"location":"mqtt-primitives-Sub/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-Sub/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Sub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-Sub/#parameters_1","title":"Parameters","text":"<ul> <li>that: Sub val</li> </ul>"},{"location":"mqtt-primitives-Sub/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubControl/","title":"SubControl","text":"<p>[Source] <pre><code>type SubControl is\n(Sub val | UnSub val)\n</code></pre></p>"},{"location":"mqtt-primitives-SubControl/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(Sub val | UnSub val)</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/","title":"SubscribeFailed","text":"<p>[Source] <pre><code>primitive val SubscribeFailed\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeFailed/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeFailed/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeFailed val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns","title":"Returns","text":"<ul> <li>SubscribeFailed val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeFailed/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeFailed val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeFailed val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeFailed/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeFailed val</li> </ul>"},{"location":"mqtt-primitives-SubscribeFailed/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/","title":"SubscribeStats","text":"<p>[Source] <pre><code>primitive val SubscribeStats\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeStats/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeStats/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeStats val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns","title":"Returns","text":"<ul> <li>SubscribeStats val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeStats/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeStats val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeStats val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeStats val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeStats/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeStats val</li> </ul>"},{"location":"mqtt-primitives-SubscribeStats/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/","title":"SubscribeTest","text":"<p>[Source] <pre><code>primitive val SubscribeTest\n</code></pre></p>"},{"location":"mqtt-primitives-SubscribeTest/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-SubscribeTest/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubscribeTest val^\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns","title":"Returns","text":"<ul> <li>SubscribeTest val^</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-SubscribeTest/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubscribeTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#parameters","title":"Parameters","text":"<ul> <li>that: SubscribeTest val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubscribeTest val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-SubscribeTest/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubscribeTest val</li> </ul>"},{"location":"mqtt-primitives-SubscribeTest/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/","title":"TestInterval","text":"<p>[Source] <pre><code>primitive val TestInterval\n</code></pre></p>"},{"location":"mqtt-primitives-TestInterval/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestInterval/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestInterval val^\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#returns","title":"Returns","text":"<ul> <li>TestInterval val^</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestInterval/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestInterval val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#parameters","title":"Parameters","text":"<ul> <li>that: TestInterval val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestInterval val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestInterval/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestInterval val</li> </ul>"},{"location":"mqtt-primitives-TestInterval/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestLength/","title":"TestLength","text":"<p>[Source] <pre><code>primitive val TestLength\n</code></pre></p>"},{"location":"mqtt-primitives-TestLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestLength val^\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#returns","title":"Returns","text":"<ul> <li>TestLength val^</li> </ul>"},{"location":"mqtt-primitives-TestLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#parameters","title":"Parameters","text":"<ul> <li>that: TestLength val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestLength val</li> </ul>"},{"location":"mqtt-primitives-TestLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/","title":"TestPrefix","text":"<p>[Source] <pre><code>primitive val TestPrefix\n</code></pre></p>"},{"location":"mqtt-primitives-TestPrefix/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestPrefix/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestPrefix val^\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#returns","title":"Returns","text":"<ul> <li>TestPrefix val^</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestPrefix/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#parameters","title":"Parameters","text":"<ul> <li>that: TestPrefix val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestPrefix val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestPrefix/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestPrefix val</li> </ul>"},{"location":"mqtt-primitives-TestPrefix/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/","title":"TestTopic","text":"<p>[Source] <pre><code>primitive val TestTopic\n</code></pre></p>"},{"location":"mqtt-primitives-TestTopic/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-TestTopic/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TestTopic val^\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#returns","title":"Returns","text":"<ul> <li>TestTopic val^</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-TestTopic/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TestTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#parameters","title":"Parameters","text":"<ul> <li>that: TestTopic val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TestTopic val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-TestTopic/#parameters_1","title":"Parameters","text":"<ul> <li>that: TestTopic val</li> </ul>"},{"location":"mqtt-primitives-TestTopic/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSub/","title":"UnSub","text":"<p>[Source] <pre><code>primitive val UnSub\n</code></pre></p>"},{"location":"mqtt-primitives-UnSub/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnSub/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnSub val^\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#returns","title":"Returns","text":"<ul> <li>UnSub val^</li> </ul>"},{"location":"mqtt-primitives-UnSub/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnSub/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnSub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#parameters","title":"Parameters","text":"<ul> <li>that: UnSub val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnSub val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSub/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnSub val</li> </ul>"},{"location":"mqtt-primitives-UnSub/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/","title":"UnSubscribe","text":"<p>[Source] <pre><code>primitive val UnSubscribe\n</code></pre></p>"},{"location":"mqtt-primitives-UnSubscribe/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnSubscribe/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnSubscribe val^\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns","title":"Returns","text":"<ul> <li>UnSubscribe val^</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnSubscribe/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#parameters","title":"Parameters","text":"<ul> <li>that: UnSubscribe val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnSubscribe val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnSubscribe/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnSubscribe val</li> </ul>"},{"location":"mqtt-primitives-UnSubscribe/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/","title":"UnknownError","text":"<p>[Source] <pre><code>primitive val UnknownError\n</code></pre></p>"},{"location":"mqtt-primitives-UnknownError/#constructors","title":"Constructors","text":""},{"location":"mqtt-primitives-UnknownError/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: UnknownError val^\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns","title":"Returns","text":"<ul> <li>UnknownError val^</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-primitives-UnknownError/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: UnknownError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#parameters","title":"Parameters","text":"<ul> <li>that: UnknownError val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: UnknownError val)\n: Bool val\n</code></pre>"},{"location":"mqtt-primitives-UnknownError/#parameters_1","title":"Parameters","text":"<ul> <li>that: UnknownError val</li> </ul>"},{"location":"mqtt-primitives-UnknownError/#returns_4","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher--index/","title":"Package","text":"<p>The actor and classes needed to publish messages to the broker and handle the QoS 1 and QoS 2 handshakes.  Publish messages have their own set of flags so these are included here as well.</p>"},{"location":"mqtt-publisher--index/#public-types","title":"Public Types","text":"<ul> <li>primitive FlagsToQos</li> <li>primitive IsDup</li> <li>primitive IsRetain</li> <li>class PubAckPacket</li> <li>class PubCompPacket</li> <li>class PubRecPacket</li> <li>class PubRelPacket</li> <li>class PublishPacket</li> <li>actor Publisher</li> <li>primitive QosToFlags</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/","title":"FlagsToQos","text":"<p>[Source] <pre><code>primitive val FlagsToQos\n</code></pre></p>"},{"location":"mqtt-publisher-FlagsToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-FlagsToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FlagsToQos val^\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#returns","title":"Returns","text":"<ul> <li>FlagsToQos val^</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-FlagsToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes an unmasked control byte and extracts the Qos from bits 1 and 2. Return QoS0 for invalid flags TODO - Combine with above once we have all the use cases surfaced</p> <pre><code>fun box apply(\nvalue: U8 val)\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FlagsToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: FlagsToQos val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FlagsToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-FlagsToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: FlagsToQos val</li> </ul>"},{"location":"mqtt-publisher-FlagsToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/","title":"IsDup","text":"<p>[Source] <pre><code>primitive val IsDup\n</code></pre></p>"},{"location":"mqtt-publisher-IsDup/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-IsDup/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsDup val^\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#returns","title":"Returns","text":"<ul> <li>IsDup val^</li> </ul>"},{"location":"mqtt-publisher-IsDup/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-IsDup/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the DUP flag is set in the control byte</p> <pre><code>fun box apply(\nvalue: U8 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsDup val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsDup val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsDup val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsDup/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsDup val</li> </ul>"},{"location":"mqtt-publisher-IsDup/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/","title":"IsRetain","text":"<p>[Source] <pre><code>primitive val IsRetain\n</code></pre></p>"},{"location":"mqtt-publisher-IsRetain/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-IsRetain/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsRetain val^\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#returns","title":"Returns","text":"<ul> <li>IsRetain val^</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-IsRetain/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns true if the retain flag is set in the control bytes</p> <pre><code>fun box apply(\nvalue: U8 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsRetain val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsRetain val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-IsRetain/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsRetain val</li> </ul>"},{"location":"mqtt-publisher-IsRetain/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/","title":"PubAckPacket","text":"<p>[Source]</p> <p>A PUBACK Packet is the response to a PUBLISH Packet with QoS level 1.</p> <p>Fixed header B1  Control byte (must be 0b01000000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubAck has no payload</p> <pre><code>class ref PubAckPacket\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubAckPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns","title":"Returns","text":"<ul> <li>PubAckPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubAckPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#returns_1","title":"Returns","text":"<ul> <li>PubAckPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubAckPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubAckPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubAckPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/","title":"PubCompPacket","text":"<p>[Source]</p> <p>The PUBCOMP Packet is the response to a PUBREL Packet. It is the fourth and final packet of the QoS 2 protocol exchange.</p> <p>Fixed header B1  Control byte (must be 0b01110000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubComp has no payload</p> <pre><code>class ref PubCompPacket\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubCompPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubCompPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns","title":"Returns","text":"<ul> <li>PubCompPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubCompPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#returns_1","title":"Returns","text":"<ul> <li>PubCompPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubCompPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubCompPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubCompPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/","title":"PubRecPacket","text":"<p>[Source]</p> <p>A PUBREC Packet is the response to a PUBLISH Packet with QoS 2. It is the  second packet of the QoS 2 protocol exchange</p> <p>Fixed header B1  Control byte (must be 0b01010000) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubRec has no payload</p> <pre><code>class ref PubRecPacket\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubRecPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubRecPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns","title":"Returns","text":"<ul> <li>PubRecPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubRecPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#returns_1","title":"Returns","text":"<ul> <li>PubRecPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubRecPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubAckPacket for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency.</p> <pre><code>fun box compose(\nid': U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubRecPacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRecPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/","title":"PubRelPacket","text":"<p>[Source]</p> <p>A PUBREL Packet is the response to a PUBREC Packet. It is the third packet of the QoS 2 protocol  exchange</p> <p>Fixed header B1  Control byte (must be 0b01100010) B2  Remaining Length - This is a single byte containing 0x02   </p> <p>Variable header - Always bytes 2 and 3 of the packet B1 Packet id MSB B2 Packet id LSB </p> <p>Payload PubRel has no payload</p> <p>Create a PubRel packet from a passed BasePacket and provide a public function to retrieve the id. TODO - Once all the ack packets are done, check for consistency. It may be better to  simply check for a valid packet and return the id, or zero if not valid</p> <pre><code>class ref PubRelPacket\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PubRelPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: PubRelPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns","title":"Returns","text":"<ul> <li>PubRelPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <pre><code>new val createFromPacket(\npkt: BasePacket val)\n: PubRelPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#parameters","title":"Parameters","text":"<ul> <li>pkt: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#returns_1","title":"Returns","text":"<ul> <li>PubRelPacket val^</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PubRelPacket/#id","title":"id","text":"<p>[Source]</p> <p>A public function to retrieve the id. isValid is false if id == 0</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns_2","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet was fully constructed and _id is not zero</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Compose a PubRel packet for a give id and return directly as a ArrayVal  TODO - Once all the ack packets are done, check for consistency. Do we need a id != 0 check?</p> <pre><code>fun box compose(\npktId: U16 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PubRelPacket/#parameters_1","title":"Parameters","text":"<ul> <li>pktId: U16 val</li> </ul>"},{"location":"mqtt-publisher-PubRelPacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/","title":"PublishPacket","text":"<p>[Source]</p>"},{"location":"mqtt-publisher-PublishPacket/#packet-format","title":"Packet Format","text":""},{"location":"mqtt-publisher-PublishPacket/#fixed-header","title":"Fixed header","text":"<p>B1  Control byte - must be 0b0011DQQR where D:DUP flag, QQ is QOS and R is Retain B2. Remaining Length - This is the length of variable header plus the length of  the payload. The remaining length field can include 1 to 4 bytes.</p> <p>DUP - If the DUP flag is set to 0, it indicates that this is the first occasion that the Client or Server has attempted to send this MQTT PUBLISH Packet. If the DUP flag is set to 1, it indicates that this might be re-delivery of an earlier attempt to send the Packet. The recipient of a Control Packet that contains the DUP flag set to 1 cannot assume that it has seen an earlier copy of this packet.</p> <p>QOS - The Packet Identifier field is only present in PUBLISH Packets where the QoS level is 1 or 2.</p> <p>Retain - When sending a PUBLISH Packet to a Client the Server MUST set the RETAIN flag to 1 if a message is sent as a result of a new subscription being made by a Client. It MUST set the RETAIN flag to 0 when a PUBLISH Packet is sent to a Client because it matches an established subscription regardless of how the flag was set in the message it received. If the RETAIN flag is set to 1, in a PUBLISH Packet sent by a CLIENT to a  SERVER, the Server MUST store the Application Message and its QoS, so that it can be delivered to future subscribers whose subscriptions match its topic name.</p>"},{"location":"mqtt-publisher-PublishPacket/#variable-header","title":"Variable header","text":"<p>Topic name B1 - Length MSB B2 - Length LSB B3-&gt; Topic Characters</p> <p>Packet Id Only present in PUBLISH Packets where the QoS level is 1 or 2. Bn    Packet id MSB Bn+1  Packet id LSB </p>"},{"location":"mqtt-publisher-PublishPacket/#payload","title":"Payload","text":"<p>The Payload contains the Application Message that is being published.  The content and format of the data is application specific. The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header. It is valid for a PUBLISH Packet to contain a zero length payload.</p>"},{"location":"mqtt-publisher-PublishPacket/#response","title":"Response","text":"<p>The receiver of a PUBLISH Packet MUST respond as follows: - QoS   None - QoS 1 PUBACK Packet - QoS 2 PUBREC Packet</p> <pre><code>class ref PublishPacket\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-PublishPacket/#create","title":"create","text":"<p>[Source]</p> <p>This creates a default initialised PublishPacket that can be used as a receiver for calls to compose. Not intended to be used to create PublishPackets. Use CreateFromPacket(BasePacket) to create PublishPackets.</p> <pre><code>new ref create()\n: PublishPacket ref^\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns","title":"Returns","text":"<ul> <li>PublishPacket ref^</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates a PublishPacket with the fields set from the passed BasePacket</p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: PublishPacket val^\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_1","title":"Returns","text":"<ul> <li>PublishPacket val^</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-PublishPacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Returns a publish packet ready to send to the broker. </p> <pre><code>fun box compose(\nargs: PublishArgs val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_2","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_4","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#qos","title":"qos","text":"<p>[Source]</p> <pre><code>fun box qos()\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_5","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#topic","title":"topic","text":"<p>[Source]</p> <pre><code>fun box topic()\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_6","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#payload_1","title":"payload","text":"<p>[Source]</p> <pre><code>fun box payload()\n: (Array[U8 val] val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_7","title":"Returns","text":"<ul> <li>(Array[U8 val] val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#payloadasstring","title":"payloadAsString","text":"<p>[Source]</p> <pre><code>fun box payloadAsString()\n: (String val | None val)\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#returns_8","title":"Returns","text":"<ul> <li>(String val | None val)</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-publisher-PublishPacket/#_build","title":"_build","text":"<p>[Source]</p> <p>An rather fiddly function to verify and decode a publish packet. Can be made look more simple by eliminating the intermediate variable - but we will wait until we have a little more confidence in using it first. TODO - Much of this is duplicated in BasePacket. Make BasePacket a Trait and have publishPacket as a decomposable</p> <pre><code>fun ref _build(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-PublishPacket/#parameters_2","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-PublishPacket/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/","title":"Publisher","text":"<p>[Source]</p> <p>Represents an application level publication topic. Provides a public Publish topic that: 1. takes the payload and qos 1. passes these arguments to router</p> <p>Publisher is responsible for managing its in-flight window. For 3.1.1 we will keep this to one packet for now but with a view to parameterizing this for MQTT 5 compliance.</p> <p>To manage the in-flight window we only allow n messages to be pending ack and queue any that arrive before the ack arrives. For 3.1.1 compliance we only need to do this for QoS 1.</p> <p>TODO - The classes for the Pub ack types are virtually identical and could all be  replaced by a factory class once we have all the functions coded</p> <pre><code>actor tag Publisher is\nMqActor ref\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#implements","title":"Implements","text":"<ul> <li>MqActor ref</li> </ul>"},{"location":"mqtt-publisher-Publisher/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-Publisher/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag,\ntopic': String val)\n: Publisher tag^\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> <li>topic': String val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns","title":"Returns","text":"<ul> <li>Publisher tag^</li> </ul>"},{"location":"mqtt-publisher-Publisher/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-publisher-Publisher/#publish","title":"publish","text":"<p>[Source]</p> <p>Called once we have a complete set of arguments to send and/or save to the queue. NextQosnArgs determines whether we: 1. continue to publish the current set of args 2. pull a different set of args of the pending queue and send those instead, queuing our current set 3. queue the current set and wait for a space to open in the in-flight window In the case of QoS 0, we have already sent the packet via the publish behaviour because there is no id </p> <pre><code>be publish(\nargs: PublishArgs val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_1","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#ondata","title":"onData","text":"<p>[Source]</p> <p>Called by router via the findPublisherById map [Cid,Published] when it receives one of the three publish acknowledge packets (PubAck for QoS1, PubRec or PubComp for Qos2)</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_2","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_3","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onduckandcover","title":"onDuckAndCover","text":"<p>[Source]</p> <p>We need to save state because the broker is disconnecting or something has gone awry.   </p> <pre><code>be onDuckAndCover()\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-Publisher/#nextqos1args","title":"nextQos1Args","text":"<p>[Source]</p> <p>Manages the in-flight window for QoS 1 messages and saves the packet in case we don't get a pubAck</p> <p>If we are passed args we push them onto the back of the pending queue. Then we  check whether the in-flight window is open. If it is we take the args at the head of the queue, send them to router and add the packet to the in-flight map.</p> <p>If we are passed None, we check whether the in-flight window is open. If it is we take the args at the head of the queue, if there are any, and send them to router,  addding the packet to the in-flight map.</p> <pre><code>fun ref nextQos1Args(\nargsOrNone: (PublishArgs val | None val))\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_4","title":"Parameters","text":"<ul> <li>argsOrNone: (PublishArgs val | None val)</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#inflightlimitreached","title":"inFlightLimitReached","text":"<p>[Source]</p> <p>Returns true if there are fewer messages in-flight than our in-flight limit</p> <pre><code>fun box inFlightLimitReached()\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#nextqos2args","title":"nextQos2Args","text":"<p>[Source]</p> <p>For protocol Vsn 3.1.1 there is no in-flight limit for QoS 2 messages. This means  the all we need to do is save the packet in case we don't get a pubRec. We're doing it like this though because protocol Vsn 5 has in-flight windows for all QoS. Only called from within publisher so must be using Cid</p> <pre><code>fun ref nextQos2Args(\nargsOrNone: (PublishArgs val | None val))\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_5","title":"Parameters","text":"<ul> <li>argsOrNone: (PublishArgs val | None val)</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#sendtorouter","title":"sendToRouter","text":"<p>[Source]</p> <p>Make a publish packet with the passed arguments and send it via the router</p> <pre><code>fun box sendToRouter(\nargs: PublishArgs val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_6","title":"Parameters","text":"<ul> <li>args: PublishArgs val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpuback","title":"onPubAck","text":"<p>[Source]</p> <p>The single ack packet for QoS 1 messages. Once we get this we can discard the  publish message. The onPubAck can only be called in response to a routed PubAck generated by the Broker in response to a Publish with a Cid. So id is Cid</p> <pre><code>fun ref onPubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_7","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpubrec","title":"onPubRec","text":"<p>[Source]</p> <p>The first of the two acknowledgements for a QoS 2 transaction. Once we get a PubRec we can discard the publish message then send (and store) a PubRel</p> <pre><code>fun ref onPubRec(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_8","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#dopubrel","title":"doPubRel","text":"<p>[Source]</p> <p>Send a PubRelPacket with the passed Cid to the router.</p> <pre><code>fun ref doPubRel(\ncid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_9","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#onpubcomp","title":"onPubComp","text":"<p>[Source]</p> <p>The second of the two acknowledgement messages of the QoS 2 transaction. Once we get a PubComp we can delete the saved PubRel message and check-in the id. Always called with a Cid</p> <pre><code>fun ref onPubComp(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_10","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#publishcomplete","title":"publishComplete","text":"<p>[Source]</p> <p>Called when we have received our last publish acknowledgement. We can now remove the pubRel message from the map and tell the router to do it's necessary cleanup before it releases the id.  This function should be preceded by deletion of the publish packet in the case of QoS 1 publication and by deletion of the PubRel packet in the case of QoS 2.</p> <pre><code>fun ref publishComplete(\ncid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-publisher-Publisher/#parameters_11","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-publisher-Publisher/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/","title":"QosToFlags","text":"<p>[Source] <pre><code>primitive val QosToFlags\n</code></pre></p>"},{"location":"mqtt-publisher-QosToFlags/#constructors","title":"Constructors","text":""},{"location":"mqtt-publisher-QosToFlags/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: QosToFlags val^\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#returns","title":"Returns","text":"<ul> <li>QosToFlags val^</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-publisher-QosToFlags/#apply","title":"apply","text":"<p>[Source]</p> <p>Take a Qos and return the Qos flags for bits 1 and 2 of the  Publish Packet Note - Combine with above once we have all the use cases surfaced</p> <pre><code>fun box apply(\nq: (Qos0 val | Qos1 val | Qos2 val))\n: U8 val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters","title":"Parameters","text":"<ul> <li>q: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: QosToFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters_1","title":"Parameters","text":"<ul> <li>that: QosToFlags val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: QosToFlags val)\n: Bool val\n</code></pre>"},{"location":"mqtt-publisher-QosToFlags/#parameters_2","title":"Parameters","text":"<ul> <li>that: QosToFlags val</li> </ul>"},{"location":"mqtt-publisher-QosToFlags/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-router--index/","title":"Package","text":"<p>Router is responsible for interpreting data packets from the broker sufficiently to be able to route them to the appropriate handler. The table below shows which  messages are expected in each direction.</p> <p>Each handler then onward routes the data to the actor instance that is dealing with  it.  </p>"},{"location":"mqtt-router--index/#bidirectional","title":"Bidirectional","text":"Message Value Usage PUBLISH 3 Publish message PUBACK 4 Publish acknowledgment PUBREC 5 Publish received (assured delivery part 1) PUBREL 6 Publish release (assured delivery part 2) PUBCOMP 7 Publish complete (assured delivery part 3)"},{"location":"mqtt-router--index/#client-to-server","title":"Client to Server","text":"Message Value Usage CONNECT 1 Client request to connect to Server SUBSCRIBE 8 Client subscribe request UNSUBSCRIBE 10 Unsubscribe request PINGREQ 12 PING request DISCONNECT 14 Client is disconnecting"},{"location":"mqtt-router--index/#server-to-client","title":"Server to Client","text":"Message Value Usage CONNACK 2 Connect acknowledgment SUBACK 9 Subscribe acknowledgment UNSUBACK 11 Unsubscribe acknowledgment PINGRESP 13 PING response"},{"location":"mqtt-router--index/#public-types","title":"Public Types","text":"<ul> <li>actor Router</li> </ul>"},{"location":"mqtt-router-Router/","title":"Router","text":"<p>[Source]</p> <p>Router accepts incomming MQTT packets and routes these by type to the appropriate  handler actor. Router is also responsible for writing bytes back out to the Broker via the TCP connection. </p> <p>Router is constructed by Client and passed the configuration details needed to  establish the Broker connection. </p> <p>When the TCP connection is available, Client calls the onTCPConnect behaviour. This  enables Router to start a Connector actor that is responsible for the connection and  interpreting the Connack packet that the Broker sends back.</p> <p>Router only deals with MQTT packet internals to the extent needed to route the packets to the right handler actor. This means it can limit its interest to the fixed header of the packet and not get involved in interpreting variable headers or payloads. This is  why we have the DataPacket class which is used for routing and then re-interpreted  according to its control byte on arrival.</p> <p>Router constructs the idIssuer and maintains a map of subscribers keyed by id and so  all subscription requests are sent via the router's subscribe behaviour.</p> <p>Router also starts the Pinger actor responsible for keepAlive pings to the Broker, and the  system ticker used for checking message timetouts.</p> <p>The Client and Server MUST store Session state for the entire duration of the Session [MQTT-4.1.0-1]. A Session MUST last at least as long it has an active Network Connection</p> <p>The implication of this is that if there is a network disconnection then the Session state  does not need to be stored. So the client can request any saved state from the Broker but the Broker cannot demand any saved state from a client unless CleanSession = 0. But if the client does set CleanSession = 0 then it must be prepared for resent Publish and PubRel packets.</p> <pre><code>actor tag Router\n</code></pre>"},{"location":"mqtt-router-Router/#constructors","title":"Constructors","text":""},{"location":"mqtt-router-Router/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nmqtt: Mqtt tag,\nconfig: HashMap[String val, String val, HashEq[String val] val] val)\n: Router tag^\n</code></pre>"},{"location":"mqtt-router-Router/#parameters","title":"Parameters","text":"<ul> <li>mqtt: Mqtt tag</li> <li>config: HashMap[String val, String val, HashEq[String val] val] val</li> </ul>"},{"location":"mqtt-router-Router/#returns","title":"Returns","text":"<ul> <li>Router tag^</li> </ul>"},{"location":"mqtt-router-Router/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-router-Router/#route","title":"route","text":"<p>[Source]</p> <p>This function demultiplexes the incomming packet stream according to packet type. In comming Publish and PubRel packets have Broker assigned Ids (bids) so these  use an id to subscriber map with Bid keys. Outgoing messages (from both publishers) and subscribers use client assigned ids (cids). The two ids need to be indexed separately  because the numeric ranges can overlap. TODO - refactor into subtypes to reduce the number of matches</p> <pre><code>be route(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_1","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#onpayloadcomplete","title":"onPayloadComplete","text":"<p>[Source]</p> <p>Called by a subscriber when it has completed processing of an incomming message This tells router to remove the link between the Bid and the subscriber. Note - This is called as the final step of an incomming message so it should  always receive a Bid and the Bid was issued by the Broker and should not be checked-in</p> <pre><code>be onPayloadComplete(\nbid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_2","title":"Parameters","text":"<ul> <li>bid: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#onpublish","title":"onPublish","text":"<p>[Source]</p> <p>Called by the MQTT actor to publish payload on topic. Requires a Client allocated id (Cid). So _actorById is indexed by Cid.  TODO - During dev we have a QoS0 check but this can be removed later</p> <pre><code>be onPublish(\ntopic: String val,\npayload: Array[U8 val] val,\nqos: (Qos0 val | Qos1 val | Qos2 val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_3","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>payload: Array[U8 val] val</li> <li>qos: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-router-Router/#onpublishqos0","title":"onPublishQos0","text":"<p>[Source]</p> <p>Called by a publisher to publish a QoS 0 packet on topic. Because there is no id and  ack processing we don't create a publisher actor for Qos0</p> <pre><code>be onPublishQos0(\ntopic: String val,\npayload: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_4","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>payload: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onpublishcomplete","title":"onPublishComplete","text":"<p>[Source]</p> <p>Called by a publisher when an id has completed its processing. This tells router to remove the link between the id and the publisher. Note that QoS0 packets never get into the _actorById map and do not result in a call to onPublishComplete</p> <pre><code>be onPublishComplete(\nid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_5","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#onsubscribe","title":"onSubscribe","text":"<p>[Source]</p> <p>Called by a subscriber to subscribe to a new topic. Comes through router so we have a central register of who is subscribed to what. Only called by a subscriber so we know the id will always be a Cid TODO - We should only add the subscriber to the subscriberByTopic map when we get a SubAck with an approval but consider these two scenarios: 1. We don't put the Subscriber in the map here but wait until we get an Ack: We get a publish  message before we have finished processing the ack and adding Subscriber to the map. The next incomming publish looks in _subscriberByTopic, can't find subscriber and so decides this is an allocated subscription... duplicate subscribers... bad things happen. 2. We put the Subscriber in the map here and then get rejected by the broker: The subscriber sits in the map but gets nothing, the Nack is reported to the App and the App must unsubscribe to remove it. No error but additional work for App</p> <p>Compromise - Put subscriber in map here but remove it from Map if we get a Nack. Worst  case is an unecessary insert/remove in the unlikely event of a rejection. This also matches unsub case where we have to continue to ack messages between unsub and unsub ack TODO - Duplicate id check can be removed after testing TODO - Decide what to do if we already have a subscription for a topic. This could be a duplicate application request or it could be because we have restored a session, got a message on one of the stored subscriptions and completed our assigned message behaviour.</p> <pre><code>be onSubscribe(\ntopic: String val,\nqos: (Qos0 val | Qos1 val | Qos2 val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_6","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-router-Router/#onsubscribecomplete","title":"onSubscribeComplete","text":"<p>[Source]</p> <p>Called by a subscriber to indicate that it has received a SubAck and so has finished processing its subscribe request. Subscribers can subscribe and unsubscribe  repeatedly throughout their lifetime but always to the same topic. We only get the Cid back from the Broker so we need to do a look-up to find the subscriber whose subscription processing has been completed. TODO - If accepted is false then remove the subscriber from the _subscriberByTopic map because we got a rejection (See comment to onSubscribe)</p> <pre><code>be onSubscribeComplete(\nsub: Subscriber tag,\ntopic: String val,\nid: U16 val,\nmsg: String val,\napprovedQos: (String val | None val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_7","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>topic: String val</li> <li>id: U16 val</li> <li>msg: String val</li> <li>approvedQos: (String val | None val)</li> </ul>"},{"location":"mqtt-router-Router/#onunsubscribe","title":"onUnsubscribe","text":"<p>[Source]</p> <p>Called by the mqtt actor to unsubscribe to a topic. Subscribers can subscribe and unsubscribe repeatedly throughout their lifetime. An unsubscribed subscriber is still alive but does not appear in the router's subscriber map Note - The spec states that clients must continue to acknowledge messages until an unsub request has been acknowledged - therefore we don't remove the subscriber here, only in the onUnsubAck behaviour</p> <pre><code>be onUnsubscribe(\ntopic: String val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_8","title":"Parameters","text":"<ul> <li>topic: String val</li> </ul>"},{"location":"mqtt-router-Router/#onunsubscribecomplete","title":"onUnsubscribeComplete","text":"<p>[Source]</p> <p>Called by a Subscriber when the subscriber has got confirmation that its Unsubscribe request has been acknowledged by the Broker. The id is a Cid because the Unsubscribe message can only be generated by the client.  At this point, router can remove the entry for the topic from the subscriberByTopic  map and remove the id from the subscriberById map and check-in the id. TODO - Note that this implies only one subscriber per topic</p> <pre><code>be onUnsubscribeComplete(\nsub: Subscriber tag,\nid: U16 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_9","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> <li>id: U16 val</li> </ul>"},{"location":"mqtt-router-Router/#ontick","title":"onTick","text":"<p>[Source]</p> <p>OnTick is called on every system tick by Ticker. Router then calls all of the Publishers and Subscribers who have transactions in-flight. Publishers and  Subscribers that don't have transactions in-flight don't need to be notified because they have no in-flight messages to time-out </p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_10","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-router-Router/#doping","title":"doPing","text":"<p>[Source]</p> <p>Ask the Broker for a pingResp and debit the number of times we have asked without a response. If we have asked three times with no response then assume the broker has gone away and start the clean-up process. We also send a disconnect packet just in case the Broker comes back in the meantime and wonders where we are.</p> <pre><code>be doPing()\n</code></pre>"},{"location":"mqtt-router-Router/#ontcpconnect","title":"onTcpConnect","text":"<p>[Source]</p> <p>Once we know that we have a TCP connection we can safely start the Connector  actor to ask the Broker for a session. The reponse (a CONNACK) will return  via a call to our .route behaviour from assemblr</p> <pre><code>be onTcpConnect(\ntcp: TCPConnection tag)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_11","title":"Parameters","text":"<ul> <li>tcp: TCPConnection tag</li> </ul>"},{"location":"mqtt-router-Router/#onbrokerconnect","title":"onBrokerConnect","text":"<p>[Source]</p> <p>When this is called we should have a valid Broker connection with our local  state reflecting the (potentially saved) state in Broker.</p> <pre><code>be onBrokerConnect()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerrestore","title":"onBrokerRestore","text":"<p>[Source]</p> <p>This behaviour is called by connector if the Broker has accepted a connection with CleanSession = 0 and has a saved session for this client. </p> <p>A Client with stored Session state will expect the Server to maintain its stored  Session state. In the event that the value of Session Present received by the Client from the Server is not as expected, the Client can choose whether to proceed with the Session or to disconnect. The Client can discard the Session state on both Client and Server by disconnecting, connecting with Clean Session set to 1 and then disconnecting again.</p> <p>This means that we should check here to see whether the value of cleansession returned from the Broker matches our request in config</p> <p>So, when this is behavior is called by connector: 1. we have a valid Broker connection 2. the Broker may send us unack'd Publish and PubRel messages 3. we need to save our state and persist it on disconnect (!)</p> <p>When a Client reconnects with CleanSession set to 0, both the Client and Server MUST re-send any  unacknowledged PUBLISH Packets (where QoS &gt; 0) and PUBREL Packets using their original Packet  Identifiers [MQTT-4.4.0-1]. This is the only circumstance where a Client or Server is REQUIRED to  redeliver messages.</p> <p>So: 1.  we may have unack'd Publish and pubRel messages with Cids to be re-sent,   2.  we may receive Publish messages with Bids for which we have no subscriber yet, and 3.  we may receive PubRel messages with Bids which we do not have in our map Yikes</p> <pre><code>be onBrokerRestore()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerstatenotfound","title":"onBrokerStateNotFound","text":"<p>[Source]</p> <p>This behaviour is called by connector if the Broker has accepted a connection with CleanSession = 0 and but cannot find a saved session for this client. In this event we must inform the app and await further instructions.  TODO - Add main method for handling session not found?</p> <pre><code>be onBrokerStateNotFound()\n</code></pre>"},{"location":"mqtt-router-Router/#onbrokerrefusal","title":"onBrokerRefusal","text":"<p>[Source]</p> <p>Called by Connector if the Broker has refused the connection</p> <pre><code>be onBrokerRefusal(\nreason: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val | \nConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_12","title":"Parameters","text":"<ul> <li>reason: (ConnAckAccepted val | ConnAckRefusedProtocolVersion val | ConnAckRefusedIdentifierRejected val |      ConnAckRefusedServerUnavailable val | ConnAckRefusedBadUserNameOrPassword val | ConnAckRefusedNotAuthorised val)</li> </ul>"},{"location":"mqtt-router-Router/#ontcpdisconnect","title":"onTCPDisconnect","text":"<p>[Source]</p> <p>Called if the TCP connection is closed in client</p> <pre><code>be onTCPDisconnect(\nerrorCode: (NoError val | ForbiddenType val | ForbiddenFlags val | \nForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val | \nInvalidType val | InvalidControl val | InvalidFlags val | \nInvalidRemainingLength val | MalformedRequest val | MalformedResponse val | \nCleanSessionRequired val | SubscribeFailed val | NotConnected val | \nSocketError val | ConnectionClosed val | ReconnectFailed val | \nConnectionRefused val | UnknownError val))\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_13","title":"Parameters","text":"<ul> <li>errorCode: (NoError val | ForbiddenType val | ForbiddenFlags val |      ForbiddenCode val | ForbiddenWillQos val | ForbiddenQos val |      InvalidType val | InvalidControl val | InvalidFlags val |      InvalidRemainingLength val | MalformedRequest val | MalformedResponse val |      CleanSessionRequired val | SubscribeFailed val | NotConnected val |      SocketError val | ConnectionClosed val | ReconnectFailed val |      ConnectionRefused val | UnknownError val)</li> </ul>"},{"location":"mqtt-router-Router/#disconnectbroker","title":"disconnectBroker","text":"<p>[Source]</p> <p>Most of the disconnect work is done by the Mqtt actor now. We'll keep this in just in case there is more to do later (e.g. saving state). Note that the tcp client calls _cleanup when it has disconnected so don't call it here</p> <pre><code>be disconnectBroker()\n</code></pre>"},{"location":"mqtt-router-Router/#cancelkeepalive","title":"cancelKeepAlive","text":"<p>[Source]</p> <p>We make this a behaviour so that main can cancel it in the event of an error. Otherwise router can terminate but leave pinger pinging - which means the process won't terminate.</p> <pre><code>be cancelKeepAlive()\n</code></pre>"},{"location":"mqtt-router-Router/#send","title":"send","text":"<p>[Source]</p> <p>Check the TCP connection is valid and use it to send our packet</p> <pre><code>be send(\ndata: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_14","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onmessage","title":"onMessage","text":"<p>[Source]</p> <p>The final message release behaviour that send the broker message to the client  application.</p> <pre><code>be onMessage(\ns1: String val,\ns2: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_15","title":"Parameters","text":"<ul> <li>s1: String val</li> <li>s2: Array[U8 val] val</li> </ul>"},{"location":"mqtt-router-Router/#onstatus","title":"onStatus","text":"<p>[Source]</p> <p>Provides an out of band channel for the library functions to notify the app of  staus or anything else that is not a broker message</p> <pre><code>be onStatus(\nstatus: String val)\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_16","title":"Parameters","text":"<ul> <li>status: String val</li> </ul>"},{"location":"mqtt-router-Router/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-router-Router/#savestate","title":"saveState","text":"<p>[Source]</p> <p>Called when we have lost connection with the Broker and need to save our state in the sure and certain hope of the ressurection</p> <pre><code>fun box saveState()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolconnect","title":"onControlConnect","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlConnect(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_17","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolsubscribe","title":"onControlSubscribe","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun ref onControlSubscribe(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_18","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolunsubscribe","title":"onControlUnsubscribe","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlUnsubscribe(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_19","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontrolpingreq","title":"onControlPingReq","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlPingReq(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_20","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#oncontroldisconnect","title":"onControlDisconnect","text":"<p>[Source]</p> <p>Mock Broker - for testing only</p> <pre><code>fun box onControlDisconnect(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_21","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-router-Router/#_findactorbyid","title":"_findActorById","text":"<p>[Source]</p> <p>Get the packet id from a PubAck, PubRel, PubRec, PubComp and UnsubAck packets. For these packet types the RL field is always one byte (=0x02) and the id bytes are always in bytes 2 and 3. Because we are not implementing multi-subscriber the suback id will also be in  bytes 2 and 3. We search the subscriber map by Id to find the subscriber who is working this id. Note - This will not work if we implement multi-subscribe</p> <pre><code>fun box _findActorById(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_22","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_findsubscriberbytopic","title":"_findSubscriberByTopic","text":"<p>[Source]</p> <p>Process a Publish Packet and route to the appropriate subscriber. All publish packets have a topic and this is how we locate the subscriber. There is always a 1:1 mapping between topics and subscribers (at least in spec 3.1.1) Note - From the specification:  </p> <p>The Client and Server assign Packet Identifiers independently of each other. As a result, Client Server pairs can participate in concurrent message exchanges using the same Packet Identifiers. It is possible for a Client to send a PUBLISH Packet with Packet  Identifier 0x1234 and then receive a different PUBLISH with Packet Identifier 0x1234 from its Server before it receives a PUBACK for the PUBLISH that it sent.</p> <p>So - our outgoing publish with Id=3 is not the same as an incomming publish with id=3 but this is OK because we are using the Broker allocated id (bid) for incomming publish  messages and the Client allocated id (cid) for outgoing messages.  _findSubscriberByTopic is only called in response to an incomming publish so uses Bid. TODO - The duplicate check on Broker id can probably be optimised out.</p> <pre><code>fun ref _findSubscriberByTopic(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_23","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_findpayloadbyid","title":"_findPayloadById","text":"<p>[Source]</p> <p>We search the payload map by Bid to find the subscriber who is working this Bid.</p> <pre><code>fun box _findPayloadById(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_24","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_doassignedsubscription","title":"_doAssignedSubscription","text":"<p>[Source]</p> <p>Only called if we receive a Publish message and we have no record of a Subscriber that has subscribed to that topic. Apparently, this is possible in Protocol 3.1.1. From the specification:  </p> <p>A Client could receive messages that do not match any of its explicit Subscriptions. This can happen if the Broker:  1. automatically assigned a subscription to the Client 2. sends a Publish or PubRel message while the unsubscribe message is in-flight 3. The client has connected with CleanSession=0 and is getting retransmissions </p> <p>The Client MUST acknowledge any Publish Packet it receives according to the applicable QoS rules regardless of whether it elects to process the message it contains.  </p> <p>Note - the receiver does not ack any Publish packets it received but hadn't ack'd at the time of the disconnect. Therefore don't save the incomming publication list because the sender will re-send anything we haven't ack'd.</p> <p>Case 1. We can include the subscription in the local subscriber map then re-route the packet to let nature take its course. We don't use router.subscribe() because we don't want subscriber to send a another subscription request to the Broker.  TODO - We need to remove this local only subscriber from the maps at some point in the _cleanup process</p> <p>Case 2. We don't remove Subscription from router tables until we get a sub-ack so we should be covered for 2 unless the broker continues to send pubRel after an unsubscribe (which it might?). TODO - Does the broker send a PubRel after getting an unsubscribe? If so, we probably have a potential error condition here. </p> <p>Case 3 is expected behaviour and can result in a Publish or PubRel for which we have no  subscriber. Publish messages will be caught by Case 1 but for PubRel all we will have is the Bid. </p> <p>If we implement Method A in 4.3.3 of the spec then we need to retrieve the payload by Bid, release it to the application and then send PubComp.  </p> <p>If we implement Method B in 4.3.3 of the spec (release the payload on receipt of the publish), then all we need to do is send a PubComp with the same Bid. But, note  that in Method B we are responsible for ensuring that duplicates are not sent  to the application. This means we need to save a list of Bids for which we have released the payload but not yet got a PubRel. </p> <p>So the choice is: a) persist the payload and the Bid and rely on the Broker to prevent duplicates, or b) persist only bid but check each incomming bid against this and filter any bids that appear in this list (i.e. where the Broker did not get the pubrec). Delete the Bid from the list when a PubRel is received for it </p> <p>In keeping with the spirit of QoS 2 we have implemented Method A. So Subscriber must persist messages in the event of a disconnect.</p> <p>Note - this section is synchronous so we know that the new subscriber is in the subscriber map before we call router.route(). Keep this in mind when changing this  function.  </p> <p>Also - during dev, this could be because are are a Mock Broker. In this event the  acks should just flow as required</p> <pre><code>fun ref _doAssignedSubscription(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_25","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-router-Router/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_removesubscriber","title":"_removeSubscriber","text":"<p>[Source]</p> <p>This function enables us to do a reverse lookup on the _subscriberByTopic map to determine which subscriber has been subscribed to or unsubscriber from. We need it  to remove a subscriber from the map in the event that it unsubscribes  </p> <pre><code>fun ref _removeSubscriber(\nsub: Subscriber tag)\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#parameters_26","title":"Parameters","text":"<ul> <li>sub: Subscriber tag</li> </ul>"},{"location":"mqtt-router-Router/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_onpingresp","title":"_onPingResp","text":"<p>[Source]</p> <p>When the broker responds to a ping response we credit the token count. This value  is debited by doPing() each time we ask for a ping and we quit when it reaches zero. TODO - Add a _pingTokenCount increment on mesage activity otherwise we could reach zero if ping messages get queued </p> <pre><code>fun ref _onPingResp()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-router-Router/#_cleanup","title":"_cleanup","text":"<p>[Source]</p> <pre><code>fun ref _cleanup()\n: None val\n</code></pre>"},{"location":"mqtt-router-Router/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-services--index/","title":"Package","text":"<p>A package for actors that implement the MqttService trait. These are generally programs that collect data and publish it to the Mqtt actor.</p>"},{"location":"mqtt-services--index/#public-types","title":"Public Types","text":"<ul> <li>actor Rtt</li> </ul>"},{"location":"mqtt-services-Rtt/","title":"Rtt","text":"<p>[Source]</p> <p>A simple service to measure the round-trip time with the configured broker. On creation we publish a message on the given topic and then wait for a response to be returned via the onResponse behaviour.</p> <pre><code>actor tag Rtt is\nMqttService ref\n</code></pre>"},{"location":"mqtt-services-Rtt/#implements","title":"Implements","text":"<ul> <li>MqttService ref</li> </ul>"},{"location":"mqtt-services-Rtt/#constructors","title":"Constructors","text":""},{"location":"mqtt-services-Rtt/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\ntopic: String val,\nmqtt: Mqtt tag,\nterminal: Terminal tag)\n: Rtt tag^\n</code></pre>"},{"location":"mqtt-services-Rtt/#parameters","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>mqtt: Mqtt tag</li> <li>terminal: Terminal tag</li> </ul>"},{"location":"mqtt-services-Rtt/#returns","title":"Returns","text":"<ul> <li>Rtt tag^</li> </ul>"},{"location":"mqtt-services-Rtt/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-services-Rtt/#onexit","title":"onExit","text":"<p>[Source]</p> <pre><code>be onExit()\n</code></pre>"},{"location":"mqtt-services-Rtt/#onresponse","title":"onResponse","text":"<p>[Source]</p> <pre><code>be onResponse(\ntopic: String val,\npayload: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-services-Rtt/#parameters_1","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>payload: Array[U8 val] val</li> </ul>"},{"location":"mqtt-services-Rtt/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-services-Rtt/#dopublish","title":"doPublish","text":"<p>[Source]</p> <pre><code>fun ref doPublish()\n: None val\n</code></pre>"},{"location":"mqtt-services-Rtt/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-services-Rtt/#docalc","title":"doCalc","text":"<p>[Source]</p> <pre><code>fun ref doCalc()\n: None val\n</code></pre>"},{"location":"mqtt-services-Rtt/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-services-Rtt/#asarray","title":"asArray","text":"<p>[Source]</p> <pre><code>fun ref asArray(\ni: U32 val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-services-Rtt/#parameters_2","title":"Parameters","text":"<ul> <li>i: U32 val</li> </ul>"},{"location":"mqtt-services-Rtt/#returns_3","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-subscriber--index/","title":"Package","text":"<p>The actor and classes needed to subscribe to messages from the Broker and handle the ensuing  handshakes. Note - This package includes suback codes on the basis that it may be better to interpret these within the library code and return a string to the app than to return a code. </p>"},{"location":"mqtt-subscriber--index/#public-types","title":"Public Types","text":"<ul> <li>primitive SubAckFailure</li> <li>class SubAckPacket</li> <li>primitive SubAckSuccessMaxQos0</li> <li>primitive SubAckSuccessMaxQos1</li> <li>primitive SubAckSuccessMaxQos2</li> <li>type SubackReturnCode</li> <li>class SubscribePacket</li> <li>actor Subscriber</li> <li>class UnsubscribePacket</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/","title":"SubAckFailure","text":"<p>[Source] <pre><code>primitive val SubAckFailure\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckFailure/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckFailure/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckFailure val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#returns","title":"Returns","text":"<ul> <li>SubAckFailure val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckFailure/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckFailure val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckFailure val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckFailure val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckFailure/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckFailure val</li> </ul>"},{"location":"mqtt-subscriber-SubAckFailure/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/","title":"SubAckPacket","text":"<p>[Source]</p>"},{"location":"mqtt-subscriber-SubAckPacket/#suback","title":"SubAck","text":"<p>A SUBACK Packet is sent by the Server to the Client to confirm receipt and processing of a SUBSCRIBE Packet. A SUBACK Packet contains a list of return codes that specify the maximum QoS level that was granted in each Subscription that was requested by the SUBSCRIBE.</p>"},{"location":"mqtt-subscriber-SubAckPacket/#fixed-header","title":"Fixed header","text":"<p>B1  Control byte (must be 0b10010000) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p>"},{"location":"mqtt-subscriber-SubAckPacket/#variable-header","title":"Variable header","text":"<p>B1 Packet id MSB B2 Packet id LSB </p>"},{"location":"mqtt-subscriber-SubAckPacket/#payload","title":"Payload ###","text":"<p>B1  Return Code - The payload contains a list of return codes. Each return code corresponds to a Topic Filter in the SUBSCRIBE Packet being acknowledged. The order of return codes in the SUBACK Packet will match the order of Topic  Filters in the SUBSCRIBE Packet Payload = 0x00 - Success - Maximum QoS 0 Payload = 0x01 - Success - Maximum QoS 1 Payload = 0x02 - Success - Maximum QoS 2 Payload = 0x80 - Failure</p>"},{"location":"mqtt-subscriber-SubAckPacket/#actions","title":"Actions ###","text":"<p>We're not implementing the multi-subscribe capability in the specification because  the saving in a few sub/unsub messages is outweighed by: 1. losing the \"one topic:one subscriber\" model 2. the additional complexity of an intermediate routing step to decompose the SubAck from the Broker into SubAcks for individual actors.</p> <p>Note: The Broker cannot conflate multiple acks into one SubAck unlessthe client subscribes to multiple topics in one subscribe message.</p> <pre><code>class ref SubAckPacket\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckPacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create(\nbasePacket: BasePacket val)\n: SubAckPacket val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#returns","title":"Returns","text":"<ul> <li>SubAckPacket val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckPacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#approvedqos","title":"approvedQos","text":"<p>[Source]</p> <pre><code>fun box approvedQos()\n: (Qos0 val | Qos1 val | Qos2 val | \nNone val)\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_2","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val |      None val)</li> </ul>"},{"location":"mqtt-subscriber-SubAckPacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: U16 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckPacket/#returns_3","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/","title":"SubAckSuccessMaxQos0","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos0\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos0 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos0 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos0 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos0 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos0 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos0/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/","title":"SubAckSuccessMaxQos1","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos1\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos1 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos1 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos1 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos1 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/","title":"SubAckSuccessMaxQos2","text":"<p>[Source] <pre><code>primitive val SubAckSuccessMaxQos2\n</code></pre></p>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: SubAckSuccessMaxQos2 val^\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns","title":"Returns","text":"<ul> <li>SubAckSuccessMaxQos2 val^</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U8 val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: SubAckSuccessMaxQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#parameters","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos2 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: SubAckSuccessMaxQos2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#parameters_1","title":"Parameters","text":"<ul> <li>that: SubAckSuccessMaxQos2 val</li> </ul>"},{"location":"mqtt-subscriber-SubAckSuccessMaxQos2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubackReturnCode/","title":"SubackReturnCode","text":"<p>[Source] <pre><code>type SubackReturnCode is\n(SubAckSuccessMaxQos0 val | SubAckSuccessMaxQos1 val | SubAckSuccessMaxQos2 val | SubAckFailure val)\n</code></pre></p>"},{"location":"mqtt-subscriber-SubackReturnCode/#type-alias-for","title":"Type Alias For","text":"<ul> <li>(SubAckSuccessMaxQos0 val | SubAckSuccessMaxQos1 val | SubAckSuccessMaxQos2 val | SubAckFailure val)</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/","title":"SubscribePacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b10000010 = Control Packet Type &amp; 0b00000010) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload B1  Payload Length MSB B2  Payload Length LSB</p> <p>String representation of topic name (length is NOT encoded as remaining length) B3  Length of topic filter in bytes - MSB B4  Length of topic filter in bytes - LSB B.. Characters of topic filter '$SYS/broker/load/bytes/sent/1min' B.. Requested Qos (0b000000xx) 0, 1 or 2</p> <pre><code>if topic is \"$SYS/#\" = qos0\nPacket =  130, 11, 0, 1, 0, 6, 36, 83, 89, 83, 47, 35, 0\n</code></pre> <pre><code>class ref SubscribePacket\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-SubscribePacket/#create","title":"create","text":"<p>[Source]</p> <p>Only intended to enable SubscribePacket.compose(&lt;&gt;)  <pre><code>new ref create()\n: SubscribePacket ref^\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns","title":"Returns","text":"<ul> <li>SubscribePacket ref^</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates a Subscribe Packet with the fields set from the passed BasePacket. Only used for Mock Broker </p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: SubscribePacket val^\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_1","title":"Returns","text":"<ul> <li>SubscribePacket val^</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-SubscribePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_3","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Return a subscribe packet ready to send to the broker</p> <pre><code>fun ref compose(\nid': U16 val,\ntopic: String val,\nqos: (Qos0 val | Qos1 val | Qos2 val))\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-subscriber-SubscribePacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> <li>topic: String val</li> <li>qos: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-subscriber-SubscribePacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/","title":"Subscriber","text":"<p>[Source]</p> <p>Represents an application level subscription to one topic.  Note - We're not implementing the multi-subscribe capability in the specification because the saving in a few sub/unsub messages is outweighed by losing the one topic: one subscriber model. The Broker cannot conflate multiple acks into one SubAck unless the client subscribes to multiple topics in one subscribe message so we are protected  from multiple unsub messages. Clients must continue to ack messages from the Broker while the unsubscribe process is underway so we don't have an unsubscribe behaviour. Instead we have a onUnsubAck  behaviour which is called when the Broker has acknowledged the unsubscirbe request.  Only then, when we know there will be no more messages, do we start our clean-up. TODO - Rather than implement timeouts here we should have router manage timeouts for all messages - so we don't hang the app if we don't get a response to a  subscribe or unsubscribe for example. Note: The ids for sub/unsub and publish can conflict so must be kept within  the relevant methods. Sub/unsub ids are issued by IdIssuer. Publish ids are issued by the Broker.</p> <pre><code>actor tag Subscriber is\nMqActor ref\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#implements","title":"Implements","text":"<ul> <li>MqActor ref</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-Subscriber/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nrouter: Router tag,\ntopic: String val,\nqos: (Qos0 val | Qos1 val | Qos2 val))\n: Subscriber tag^\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters","title":"Parameters","text":"<ul> <li>router: Router tag</li> <li>topic: String val</li> <li>qos: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns","title":"Returns","text":"<ul> <li>Subscriber tag^</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-subscriber-Subscriber/#subscribe","title":"subscribe","text":"<p>[Source]</p> <p>The packet id is the last piece of the jigsaw. Once we have this we can build our  subscribe packet and send it to the broker</p> <pre><code>be subscribe(\ncid: U16 val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_1","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#unsubscribe","title":"unsubscribe","text":"<p>[Source]</p> <p>The packet id is the last piece of the jigsaw. Once we have this we can build our  unsubscribe packet and send it to the broker</p> <pre><code>be unsubscribe(\ncid: U16 val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_2","title":"Parameters","text":"<ul> <li>cid: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#ontick","title":"onTick","text":"<p>[Source]</p> <p>This is the target for the TickListener trait that is called by the system tick tick timer. Each time we get this we scan the in-flight queue for expired messages</p> <pre><code>be onTick(\nsec: I64 val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_3","title":"Parameters","text":"<ul> <li>sec: I64 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onduckandcover","title":"onDuckAndCover","text":"<p>[Source]</p> <p>We need to save state because the broker is disconnecting or something has gone awry.   </p> <pre><code>be onDuckAndCover()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#ondisconnect","title":"onDisconnect","text":"<p>[Source]</p> <p>All Subscribers get informed of a broker disconnect with a call to the onDisconnect behaviour. This enables the Subscriber to take whatever application level action is to respond  to this externally (to the actor) generated break in data. Actions depend on QoS of messages: QoS 0 - Nothing to be done QoS 1 - Nothing to be done. If we haven't acked a received packet the Broker will re-send it QoS 2 - Save the _pktMap entries because the app may want to restore the session Note - Disconnect may be a result of an error so we can't assume there is a Broker connection at this point but we will try to unsubscribe anyway. If we have packets in _pktMap onDisconnect and CleanSession is false then they are awaiting PubRels from the Broker. We need to save these by sending them to main. </p> <pre><code>be onDisconnect()\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#ondata","title":"onData","text":"<p>[Source]</p> <p>The Router sends data packets from the Broker, to actors who have requested it, using the onData behaviour. Note that QoS 0 Publish messages don't have an id so we default this to 0. As a Subscriber the only messages we get from the Broker are: 1. A SubAck to confirm our subscription 2. A Publish packet containing a payload 3. A PubRel message forming part three of the QoS 2 handshake 4. A UnSubAck to confirm out unsubscription</p> <p>In response to a SubAck: 1. We notify the app of the result 2. We tell router we have finished processing the id of the subscribe packet 3. If the subscription is not accepted then we leave it to the app to take further action</p> <p>In response to a Publish: 1. If QoS is Qos1 then the Subscriber must respond with a PubAck packet containing the id of  the packet being acknowledged and then release the packet to the app 2. If QoS is Qos2 then Subscriber must respond with a PubRec and save the packet until  a PubRel is received. </p> <p>In reponse to a PubRel 1. Subscriber must respond with a PubComp  2. Subscriber must release the packet to the app</p> <p>In response to an UnsubAck: 1. We notify the app (via Main) of the result 2. We tell router we have finished processing the id of the subscribe packet</p> <pre><code>be onData(\nbasePacket: BasePacket val)\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_4","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-Subscriber/#onsuback","title":"onSubAck","text":"<p>[Source]</p> <p>Our subscription has been acknowledged so we need to notify the app of the result.</p> <pre><code>fun box onSubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_5","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onunsuback","title":"onUnsubAck","text":"<p>[Source]</p> <p>Our unsubscribe has been acknowledged so we need to tell router to remove us from the map of subscribers. TODO - Why don't we respond directly to main instead of going via router? TODO - We may also have some packets in our queue and we need to decide what to do about these</p> <pre><code>fun ref onUnsubAck(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_6","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onpayload","title":"onPayload","text":"<p>[Source]</p> <p>Note - We name this function onPayload to avoid confusion with message publication. We have received a publish message. The publish message is either: 1. A QoS 0 packet with no id 2. A QoS 1 or QoS2 packet with an id.</p> <p>If it is QoS 0 then just release the packet</p> <p>If it is QoS 1 then send a PubAck in return and release the message. Then tell router we have completed processing the id. The packet is never stored in _pktMap</p> <p>If it is QoS 2 then save the message, send a PubRec and wait for a PubRel</p> <pre><code>fun ref onPayload(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_7","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopuback","title":"doPubAck","text":"<p>[Source]</p> <p>All we have is an id, so make the pubAck packet and send it. No look-ups with id so we don't care whether it is Broker or Client assigned. Note that QoS 1 packets are never stored in _pktMap so there is no remove to do</p> <pre><code>fun box doPubAck(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_8","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopubrec","title":"doPubRec","text":"<p>[Source]</p> <p>We have received a publish message with QoS 2. We acknowledge this with a  PubRec message and wait for a PubRel in response. No id lookup so we don't  care whether this is a Bid or  Cid</p> <pre><code>fun ref doPubRec(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_9","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#onpubrel","title":"onPubRel","text":"<p>[Source]</p> <p>We have received a publish release message for a QoS 2 packet. Send a pubComp to ack this. The payload was stored when we received the publish message and  we need to retrieve this from the packetMap to release it.  Then we delete the message from the packet Map and tell router we have completed processing. Note - we do a lookup with id on _pktMap so we can't mix Bid and Cid in one subscriber instance. </p> <pre><code>fun ref onPubRel(\nbasePacket: BasePacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_10","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#dopubcomp","title":"doPubComp","text":"<p>[Source]</p> <p>We have received a PubRel from a sender so we acknowledge this with a PubComp  message. We only have the id at this stage so there is little else to do. No lookups on id so we don't care whether it is a Bid or a Cid.</p> <pre><code>fun box doPubComp(\nid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_11","title":"Parameters","text":"<ul> <li>id: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#releasepkt","title":"releasePkt","text":"<p>[Source]</p> <p>We are at an appropriate place in the protocol to release the message to the  application. This can be: 1. After receiving a ControlPublish with QoS 0 2. After receiving a ControlPublish with QoS 1 2. After receiving a ControlPubRel with QoS 2</p> <pre><code>fun box releasePkt(\npubPacket: PublishPacket val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_12","title":"Parameters","text":"<ul> <li>pubPacket: PublishPacket val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#payloadcomplete","title":"payloadComplete","text":"<p>[Source]</p> <p>Informs router that we have finished processing this id.</p> <pre><code>fun ref payloadComplete(\nbid: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-subscriber-Subscriber/#parameters_13","title":"Parameters","text":"<ul> <li>bid: U16 val</li> </ul>"},{"location":"mqtt-subscriber-Subscriber/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/","title":"UnsubscribePacket","text":"<p>[Source]</p> <p>Fixed header B1  Control byte (must be 0b10100010 = Control Packet Type &amp; 0b00000010) B2  Remaining Length - This is the length of variable header (2 bytes)  plus the length of the payload.   </p> <p>Variable header B1 Packet id MSB B2 Packet id LSB </p> <p>Payload B1  Payload Length MSB B2  Payload Length LSB</p> <p>String representation of topic name (length is NOT encoded as remaining length) B3  Length of topic filter in bytes - MSB B4  Length of topic filter in bytes - LSB B.. Characters of topic filter '$SYS/broker/load/bytes/sent/1min'</p> <pre><code>class ref UnsubscribePacket\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-subscriber-UnsubscribePacket/#create","title":"create","text":"<p>[Source]</p> <p>Only intended to enable UnsubscribePacket.compose(&lt;&gt;)  <pre><code>new ref create()\n: UnsubscribePacket ref^\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns","title":"Returns","text":"<ul> <li>UnsubscribePacket ref^</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#createfrompacket","title":"createFromPacket","text":"<p>[Source]</p> <p>Creates an Unsubscribe Packet with the fields set from the passed BasePacket. Only used for Mock Broker </p> <pre><code>new val createFromPacket(\nbasePacket: BasePacket val)\n: UnsubscribePacket val^\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#parameters","title":"Parameters","text":"<ul> <li>basePacket: BasePacket val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_1","title":"Returns","text":"<ul> <li>UnsubscribePacket val^</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-subscriber-UnsubscribePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#id","title":"id","text":"<p>[Source]</p> <pre><code>fun box id()\n: (U16 val | None val)\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_3","title":"Returns","text":"<ul> <li>(U16 val | None val)</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#compose","title":"compose","text":"<p>[Source]</p> <p>Build an unsubscribe packet based on the passed arguments</p> <pre><code>fun ref compose(\nid': U16 val,\ntopic: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-subscriber-UnsubscribePacket/#parameters_1","title":"Parameters","text":"<ul> <li>id': U16 val</li> <li>topic: String val</li> </ul>"},{"location":"mqtt-subscriber-UnsubscribePacket/#returns_4","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-terminal--index/","title":"Package","text":"<p>The terminal package provide a simple text based interface to the library. Mostly intended for testing but  could be used as a default demo application later. In release 0.1 the terminal package and the library code were intermixed so one of the objectives of R0.2 is to separate these. </p>"},{"location":"mqtt-terminal--index/#terminal","title":"Terminal","text":"<p>The keyboard handler actor - takes ownership of stdin and routes messages to the library code via the public api</p>"},{"location":"mqtt-terminal--index/#display","title":"Display","text":"<p>An ANSI character-based display that enables messages and status to be displayed. Note that the ANSI codes don't work on windows terminals.</p>"},{"location":"mqtt-terminal--index/#usage","title":"Usage","text":""},{"location":"mqtt-terminal--index/#public-types","title":"Public Types","text":"<ul> <li>type Areas</li> <li>class BoxLine</li> <li>primitive CMD</li> <li>actor Display</li> <li>primitive DisplayColour</li> <li>primitive FRM</li> <li>class Handler</li> <li>primitive HighlightPeriod</li> <li>class KbdInput</li> <li>primitive MSG</li> <li>actor Main</li> <li>primitive STS</li> <li>class StatusLine</li> <li>actor Terminal</li> <li>actor UIManager</li> <li>class UiNotify</li> </ul>"},{"location":"mqtt-terminal-Areas/","title":"Areas","text":"<p>[Source] <pre><code>type Areas is\nFlags[(MSG val | STS val | FRM val | CMD val), U64 val] ref\n</code></pre></p>"},{"location":"mqtt-terminal-Areas/#type-alias-for","title":"Type Alias For","text":"<ul> <li>Flags[(MSG val | STS val | FRM val | CMD val), U64 val] ref</li> </ul>"},{"location":"mqtt-terminal-BoxLine/","title":"BoxLine","text":"<p>[Source] <pre><code>class ref BoxLine\n</code></pre></p>"},{"location":"mqtt-terminal-BoxLine/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-BoxLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ntopic: String val,\ncontent': String val)\n: BoxLine ref^\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns","title":"Returns","text":"<ul> <li>BoxLine ref^</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-BoxLine/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun box paint()\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#deadline","title":"deadline","text":"<p>[Source]</p> <pre><code>fun ref deadline(\nseconds: I64 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_1","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#update","title":"update","text":"<p>[Source]</p> <pre><code>fun ref update(\ncontent': String val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_2","title":"Parameters","text":"<ul> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#ansi","title":"ansi","text":"<p>[Source]</p> <pre><code>fun ref ansi(\nleft: U32 val,\nright: U32 val,\ny: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-BoxLine/#parameters_3","title":"Parameters","text":"<ul> <li>left: U32 val</li> <li>right: U32 val</li> <li>y: U32 val</li> </ul>"},{"location":"mqtt-terminal-BoxLine/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-CMD/","title":"CMD","text":"<p>[Source] <pre><code>primitive val CMD\n</code></pre></p>"},{"location":"mqtt-terminal-CMD/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-CMD/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: CMD val^\n</code></pre>"},{"location":"mqtt-terminal-CMD/#returns","title":"Returns","text":"<ul> <li>CMD val^</li> </ul>"},{"location":"mqtt-terminal-CMD/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-CMD/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-CMD/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: CMD val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#parameters","title":"Parameters","text":"<ul> <li>that: CMD val</li> </ul>"},{"location":"mqtt-terminal-CMD/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-CMD/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: CMD val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-CMD/#parameters_1","title":"Parameters","text":"<ul> <li>that: CMD val</li> </ul>"},{"location":"mqtt-terminal-CMD/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-Display/","title":"Display","text":"<p>[Source] <pre><code>actor tag Display\n</code></pre></p>"},{"location":"mqtt-terminal-Display/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Display/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Display tag^\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns","title":"Returns","text":"<ul> <li>Display tag^</li> </ul>"},{"location":"mqtt-terminal-Display/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-Display/#message","title":"message","text":"<p>[Source]</p> <pre><code>be message(\ntopic: String val,\ncontent: String val)\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_1","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: String val</li> </ul>"},{"location":"mqtt-terminal-Display/#status","title":"status","text":"<p>[Source]</p> <pre><code>be status(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_2","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-terminal-Display/#clear","title":"clear","text":"<p>[Source]</p> <pre><code>be clear()\n</code></pre>"},{"location":"mqtt-terminal-Display/#size","title":"size","text":"<p>[Source]</p> <p>Called by ANSINotify to report the cmd window size</p> <pre><code>be size(\nrows: U16 val,\ncols: U16 val)\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_3","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"mqtt-terminal-Display/#ontick","title":"onTick","text":"<p>[Source]</p> <pre><code>be onTick(\nseconds: I64 val)\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_4","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-Display/#onexit","title":"onExit","text":"<p>[Source]</p> <pre><code>be onExit(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_5","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-terminal-Display/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Display/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun ref paint()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Display/#clearscreen","title":"clearScreen","text":"<p>[Source]</p> <pre><code>fun ref clearScreen()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Display/#composite","title":"composite","text":"<p>[Source]</p> <pre><code>fun ref composite()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#windowsize","title":"windowSize","text":"<p>[Source]</p> <pre><code>fun box windowSize(\nw: U32 val,\nh: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_6","title":"Parameters","text":"<ul> <li>w: U32 val</li> <li>h: U32 val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#cmdstring","title":"cmdString","text":"<p>[Source]</p> <pre><code>fun box cmdString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#boxstring","title":"boxString","text":"<p>[Source]</p> <pre><code>fun ref boxString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#statusstring","title":"statusString","text":"<p>[Source]</p> <pre><code>fun ref statusString()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#separatorline","title":"separatorLine","text":"<p>[Source]</p> <pre><code>fun box separatorLine(\ny: U32 val,\nwidth: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_7","title":"Parameters","text":"<ul> <li>y: U32 val</li> <li>width: U32 val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns_8","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#separator","title":"separator","text":"<p>[Source]</p> <pre><code>fun box separator(\nwidth: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_8","title":"Parameters","text":"<ul> <li>width: U32 val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns_9","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#border","title":"border","text":"<p>[Source]</p> <pre><code>fun box border(\nx: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_9","title":"Parameters","text":"<ul> <li>x: U32 val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns_10","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Display/#timeout","title":"timeout","text":"<p>[Source]</p> <pre><code>fun ref timeout(\nseconds: I64 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Display/#parameters_10","title":"Parameters","text":"<ul> <li>seconds: I64 val</li> </ul>"},{"location":"mqtt-terminal-Display/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/","title":"DisplayColour","text":"<p>[Source] <pre><code>primitive val DisplayColour\n</code></pre></p>"},{"location":"mqtt-terminal-DisplayColour/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-DisplayColour/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DisplayColour val^\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns","title":"Returns","text":"<ul> <li>DisplayColour val^</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-DisplayColour/#border","title":"border","text":"<p>[Source]</p> <pre><code>fun box border()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#separator","title":"separator","text":"<p>[Source]</p> <pre><code>fun box separator()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#cmd","title":"cmd","text":"<p>[Source]</p> <pre><code>fun box cmd()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#boxdormant","title":"boxDormant","text":"<p>[Source]</p> <pre><code>fun box boxDormant()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_4","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#boxnormal","title":"boxNormal","text":"<p>[Source]</p> <pre><code>fun box boxNormal()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_5","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#boxchange","title":"boxChange","text":"<p>[Source]</p> <pre><code>fun box boxChange()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_6","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#status","title":"status","text":"<p>[Source]</p> <pre><code>fun box status()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#returns_7","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DisplayColour val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#parameters","title":"Parameters","text":"<ul> <li>that: DisplayColour val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#returns_8","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DisplayColour val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-DisplayColour/#parameters_1","title":"Parameters","text":"<ul> <li>that: DisplayColour val</li> </ul>"},{"location":"mqtt-terminal-DisplayColour/#returns_9","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-FRM/","title":"FRM","text":"<p>[Source] <pre><code>primitive val FRM\n</code></pre></p>"},{"location":"mqtt-terminal-FRM/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-FRM/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FRM val^\n</code></pre>"},{"location":"mqtt-terminal-FRM/#returns","title":"Returns","text":"<ul> <li>FRM val^</li> </ul>"},{"location":"mqtt-terminal-FRM/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-FRM/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-FRM/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FRM val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#parameters","title":"Parameters","text":"<ul> <li>that: FRM val</li> </ul>"},{"location":"mqtt-terminal-FRM/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-FRM/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FRM val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-FRM/#parameters_1","title":"Parameters","text":"<ul> <li>that: FRM val</li> </ul>"},{"location":"mqtt-terminal-FRM/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/","title":"Handler","text":"<p>[Source]</p> <p>ANSINotify is the inner wrapper notifier. Apply is called by the ANSITerm when input is available. Closed is called when the window is closed.</p> <pre><code>class ref Handler is\nANSINotify ref\n</code></pre>"},{"location":"mqtt-terminal-Handler/#implements","title":"Implements","text":"<ul> <li>ANSINotify ref</li> </ul>"},{"location":"mqtt-terminal-Handler/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Handler/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nterminal: Terminal tag)\n: Handler ref^\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>terminal: Terminal tag</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns","title":"Returns","text":"<ul> <li>Handler ref^</li> </ul>"},{"location":"mqtt-terminal-Handler/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Handler/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\nansiTerm: ANSITerm ref,\ninput: U8 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_1","title":"Parameters","text":"<ul> <li>ansiTerm: ANSITerm ref</li> <li>input: U8 val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#fn_key","title":"fn_key","text":"<p>[Source]</p> <pre><code>fun ref fn_key(\ni: U8 val,\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_2","title":"Parameters","text":"<ul> <li>i: U8 val</li> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#size","title":"size","text":"<p>[Source]</p> <pre><code>fun ref size(\nrows: U16 val,\ncols: U16 val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_3","title":"Parameters","text":"<ul> <li>rows: U16 val</li> <li>cols: U16 val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_3","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#close","title":"close","text":"<p>[Source]</p> <pre><code>fun ref close()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#returns_4","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#prompt","title":"prompt","text":"<p>[Source]</p> <pre><code>fun ref prompt(\nansiTerm: ANSITerm ref,\nvalue: String val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_4","title":"Parameters","text":"<ul> <li>ansiTerm: ANSITerm ref</li> <li>value: String val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_5","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#home","title":"home","text":"<p>[Source]</p> <pre><code>fun ref home(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_5","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_6","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#up","title":"up","text":"<p>[Source]</p> <pre><code>fun ref up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_6","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_7","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#down","title":"down","text":"<p>[Source]</p> <pre><code>fun ref down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_7","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_8","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#left","title":"left","text":"<p>[Source]</p> <pre><code>fun ref left(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_8","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_9","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#right","title":"right","text":"<p>[Source]</p> <pre><code>fun ref right(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_9","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_10","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#delete","title":"delete","text":"<p>[Source]</p> <pre><code>fun ref delete(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_10","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_11","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#insert","title":"insert","text":"<p>[Source]</p> <pre><code>fun ref insert(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_11","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_12","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#end_key","title":"end_key","text":"<p>[Source]</p> <pre><code>fun ref end_key(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_12","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_13","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#page_up","title":"page_up","text":"<p>[Source]</p> <pre><code>fun ref page_up(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_13","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_14","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#page_down","title":"page_down","text":"<p>[Source]</p> <pre><code>fun ref page_down(\nctrl: Bool val,\nalt: Bool val,\nshift: Bool val)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#parameters_14","title":"Parameters","text":"<ul> <li>ctrl: Bool val</li> <li>alt: Bool val</li> <li>shift: Bool val</li> </ul>"},{"location":"mqtt-terminal-Handler/#returns_15","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-Handler/#closed","title":"closed","text":"<pre><code>fun ref closed()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Handler/#returns_16","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/","title":"HighlightPeriod","text":"<p>[Source] <pre><code>primitive val HighlightPeriod\n</code></pre></p>"},{"location":"mqtt-terminal-HighlightPeriod/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-HighlightPeriod/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: HighlightPeriod val^\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#returns","title":"Returns","text":"<ul> <li>HighlightPeriod val^</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-HighlightPeriod/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: HighlightPeriod val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#parameters","title":"Parameters","text":"<ul> <li>that: HighlightPeriod val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: HighlightPeriod val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-HighlightPeriod/#parameters_1","title":"Parameters","text":"<ul> <li>that: HighlightPeriod val</li> </ul>"},{"location":"mqtt-terminal-HighlightPeriod/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-KbdInput/","title":"KbdInput","text":"<p>[Source]</p> <p>InputNotify is the outer wrapper notifier. Apply is called by env.input when data is  available from the input stream. Apply then calls the ANSI terminal so that the data  can be interpreted </p> <pre><code>class ref KbdInput is\nInputNotify ref\n</code></pre>"},{"location":"mqtt-terminal-KbdInput/#implements","title":"Implements","text":"<ul> <li>InputNotify ref</li> </ul>"},{"location":"mqtt-terminal-KbdInput/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-KbdInput/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\nenv: Env val,\nansiTerm: ANSITerm tag)\n: KbdInput ref^\n</code></pre>"},{"location":"mqtt-terminal-KbdInput/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>ansiTerm: ANSITerm tag</li> </ul>"},{"location":"mqtt-terminal-KbdInput/#returns","title":"Returns","text":"<ul> <li>KbdInput ref^</li> </ul>"},{"location":"mqtt-terminal-KbdInput/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-KbdInput/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ndata: Array[U8 val] iso)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-KbdInput/#parameters_1","title":"Parameters","text":"<ul> <li>data: Array[U8 val] iso</li> </ul>"},{"location":"mqtt-terminal-KbdInput/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-KbdInput/#dispose","title":"dispose","text":"<p>[Source]</p> <pre><code>fun ref dispose()\n: None val\n</code></pre>"},{"location":"mqtt-terminal-KbdInput/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-MSG/","title":"MSG","text":"<p>[Source] <pre><code>primitive val MSG\n</code></pre></p>"},{"location":"mqtt-terminal-MSG/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-MSG/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MSG val^\n</code></pre>"},{"location":"mqtt-terminal-MSG/#returns","title":"Returns","text":"<ul> <li>MSG val^</li> </ul>"},{"location":"mqtt-terminal-MSG/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-MSG/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-MSG/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MSG val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#parameters","title":"Parameters","text":"<ul> <li>that: MSG val</li> </ul>"},{"location":"mqtt-terminal-MSG/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-MSG/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MSG val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-MSG/#parameters_1","title":"Parameters","text":"<ul> <li>that: MSG val</li> </ul>"},{"location":"mqtt-terminal-MSG/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-Main/","title":"Main","text":"<p>[Source] <pre><code>actor tag Main\n</code></pre></p>"},{"location":"mqtt-terminal-Main/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Main/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val)\n: Main tag^\n</code></pre>"},{"location":"mqtt-terminal-Main/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> </ul>"},{"location":"mqtt-terminal-Main/#returns","title":"Returns","text":"<ul> <li>Main tag^</li> </ul>"},{"location":"mqtt-terminal-Main/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-Main/#onexit","title":"onExit","text":"<p>[Source]</p> <p>Only called when we are exiting the program and all of the actors need to be cleanly terminated</p> <pre><code>be onExit(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-terminal-Main/#parameters_1","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-terminal-Main/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-Main/#runtime_override_defaults","title":"runtime_override_defaults","text":"<p>[Source]</p> <pre><code>fun runtime_override_defaults(\nrto: RuntimeOptions ref)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-Main/#parameters_2","title":"Parameters","text":"<ul> <li>rto: RuntimeOptions ref</li> </ul>"},{"location":"mqtt-terminal-Main/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-terminal-STS/","title":"STS","text":"<p>[Source] <pre><code>primitive val STS\n</code></pre></p>"},{"location":"mqtt-terminal-STS/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-STS/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: STS val^\n</code></pre>"},{"location":"mqtt-terminal-STS/#returns","title":"Returns","text":"<ul> <li>STS val^</li> </ul>"},{"location":"mqtt-terminal-STS/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-STS/#value","title":"value","text":"<p>[Source]</p> <pre><code>fun box value()\n: U64 val\n</code></pre>"},{"location":"mqtt-terminal-STS/#returns_1","title":"Returns","text":"<ul> <li>U64 val</li> </ul>"},{"location":"mqtt-terminal-STS/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: STS val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-STS/#parameters","title":"Parameters","text":"<ul> <li>that: STS val</li> </ul>"},{"location":"mqtt-terminal-STS/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-STS/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: STS val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-STS/#parameters_1","title":"Parameters","text":"<ul> <li>that: STS val</li> </ul>"},{"location":"mqtt-terminal-STS/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/","title":"StatusLine","text":"<p>[Source] <pre><code>class ref StatusLine\n</code></pre></p>"},{"location":"mqtt-terminal-StatusLine/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-StatusLine/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ncontent': String val)\n: StatusLine ref^\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#parameters","title":"Parameters","text":"<ul> <li>content': String val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#returns","title":"Returns","text":"<ul> <li>StatusLine ref^</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-StatusLine/#paint","title":"paint","text":"<p>[Source]</p> <pre><code>fun box paint()\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#ansi","title":"ansi","text":"<p>[Source]</p> <pre><code>fun box ansi(\nleft: U32 val,\ny: U32 val)\n: String val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#parameters_1","title":"Parameters","text":"<ul> <li>left: U32 val</li> <li>y: U32 val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#returns_2","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-StatusLine/#string","title":"string","text":"<p>[Source]</p> <pre><code>fun box string()\n: String val\n</code></pre>"},{"location":"mqtt-terminal-StatusLine/#returns_3","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-terminal-Terminal/","title":"Terminal","text":"<p>[Source] <pre><code>actor tag Terminal is\nMqttApplication ref\n</code></pre></p>"},{"location":"mqtt-terminal-Terminal/#implements","title":"Implements","text":"<ul> <li>MqttApplication ref</li> </ul>"},{"location":"mqtt-terminal-Terminal/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-Terminal/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nenv: Env val,\nexitMain: {(U8)} iso)\n: Terminal tag^\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters","title":"Parameters","text":"<ul> <li>env: Env val</li> <li>exitMain: {(U8)} iso</li> </ul>"},{"location":"mqtt-terminal-Terminal/#returns","title":"Returns","text":"<ul> <li>Terminal tag^</li> </ul>"},{"location":"mqtt-terminal-Terminal/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-Terminal/#connect","title":"connect","text":"<p>[Source]</p> <p>Tells the MQTT actor to connect to the Broker</p> <pre><code>be connect()\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#disconnect","title":"disconnect","text":"<p>[Source]</p> <p>Tells the MQTT actor to send a disconnect message to the Broker and then release the network connection</p> <pre><code>be disconnect()\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#startservice","title":"startService","text":"<p>[Source]</p> <pre><code>be startService(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_1","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#stopservice","title":"stopService","text":"<p>[Source]</p> <pre><code>be stopService(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_2","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#clear","title":"clear","text":"<p>[Source]</p> <p>Tells the display actor to clear the message section of the screen</p> <pre><code>be clear()\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#onexit","title":"onExit","text":"<p>[Source]</p> <p>Called by the terminal actor in response to a user request to exit. Releases the keyboard handler, calls _onExit on the display actor and then calls the callback provided by Main. TODO - We don't call disconnect here yet (so we can test the LW&amp;T) but change this once everything is working</p> <pre><code>be onExit(\ncode: U8 val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_3","title":"Parameters","text":"<ul> <li>code: U8 val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#onconnection","title":"onConnection","text":"<p>[Source]</p> <p>Called by the MQTT actor when the Broker is connected</p> <pre><code>be onConnection(\nconnected: Bool val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_4","title":"Parameters","text":"<ul> <li>connected: Bool val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#onsubscribed","title":"onSubscribed","text":"<p>[Source]</p> <p>Called by the MQTT actor with the result of a subscription request</p> <pre><code>be onSubscribed(\ntopic: String val,\nqos: (String val | None val))\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_5","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>qos: (String val | None val)</li> </ul>"},{"location":"mqtt-terminal-Terminal/#onmessage","title":"onMessage","text":"<p>[Source]</p> <p>Called by the MQTT actor when it has recieved a message on a subscribed channel or  an allocated channel</p> <pre><code>be onMessage(\ntopic: String val,\ncontent: Array[U8 val] val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_6","title":"Parameters","text":"<ul> <li>topic: String val</li> <li>content: Array[U8 val] val</li> </ul>"},{"location":"mqtt-terminal-Terminal/#onstatus","title":"onStatus","text":"<p>[Source]</p> <p>Called by the MQTT actor when it has recieved a status message</p> <pre><code>be onStatus(\ncontent: String val)\n</code></pre>"},{"location":"mqtt-terminal-Terminal/#parameters_7","title":"Parameters","text":"<ul> <li>content: String val</li> </ul>"},{"location":"mqtt-terminal-UIManager/","title":"UIManager","text":"<p>[Source] <pre><code>actor tag UIManager\n</code></pre></p>"},{"location":"mqtt-terminal-UIManager/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-UIManager/#create","title":"create","text":"<p>[Source]</p> <pre><code>new tag create(\nterm: Display tag)\n: UIManager tag^\n</code></pre>"},{"location":"mqtt-terminal-UIManager/#parameters","title":"Parameters","text":"<ul> <li>term: Display tag</li> </ul>"},{"location":"mqtt-terminal-UIManager/#returns","title":"Returns","text":"<ul> <li>UIManager tag^</li> </ul>"},{"location":"mqtt-terminal-UIManager/#public-behaviours","title":"Public Behaviours","text":""},{"location":"mqtt-terminal-UIManager/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>be cancel()\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/","title":"UiNotify","text":"<p>[Source] <pre><code>class ref UiNotify is\nTimerNotify ref\n</code></pre></p>"},{"location":"mqtt-terminal-UiNotify/#implements","title":"Implements","text":"<ul> <li>TimerNotify ref</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#constructors","title":"Constructors","text":""},{"location":"mqtt-terminal-UiNotify/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create(\nterm: Display tag)\n: UiNotify iso^\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters","title":"Parameters","text":"<ul> <li>term: Display tag</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns","title":"Returns","text":"<ul> <li>UiNotify iso^</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-terminal-UiNotify/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun ref apply(\ntimer: Timer ref,\ncount: U64 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters_1","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> <li>count: U64 val</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#cancel","title":"cancel","text":"<p>[Source]</p> <pre><code>fun ref cancel(\ntimer: Timer ref)\n: None val\n</code></pre>"},{"location":"mqtt-terminal-UiNotify/#parameters_2","title":"Parameters","text":"<ul> <li>timer: Timer ref</li> </ul>"},{"location":"mqtt-terminal-UiNotify/#returns_2","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities--index/","title":"Package","text":"<p>A colelction of functions and classes that are used in more than one of the other pacakges. </p>"},{"location":"mqtt-utilities--index/#public-types","title":"Public Types","text":"<ul> <li>class BasePacket</li> <li>primitive BytesToU16</li> <li>primitive BytesToValue</li> <li>primitive DateString</li> <li>primitive Dump</li> <li>primitive DumpBin</li> <li>class FixedHeader</li> <li>primitive FixedHeaderLength</li> <li>primitive FmtBin</li> <li>primitive FmtDec</li> <li>primitive FmtHex</li> <li>primitive GoodPkt1</li> <li>primitive GoodPkt2</li> <li>primitive GoodPkt3</li> <li>primitive GoodPkt4</li> <li>primitive GoodPkt5</li> <li>primitive GoodPkt6</li> <li>primitive IsFixedHeader</li> <li>primitive MqString</li> <li>class MqTime</li> <li>primitive RlByteCount</li> <li>primitive Split</li> <li>primitive ToQos</li> <li>primitive ToQosBits</li> <li>primitive TotalLength</li> <li>primitive U16ToBytes</li> <li>primitive U8ToQos</li> <li>primitive ValueToRLBytes</li> </ul>"},{"location":"mqtt-utilities-BasePacket/","title":"BasePacket","text":"<p>[Source]</p> <p>BasePacket is the simplest concrete representation of the Packet trait. It is used by  Assembler to send a basic validated packet to router.  If the BasePacket.IsValid() method returns true then BasePacket guarantees 1. The first byte of the data can be read 2. The remaining length bytes can be read 3. The length of the array matches the remaining length value 4. The control packet is valid ( 0 &gt; b7..b4 &lt; 15)</p> <pre><code>class ref BasePacket is\nPacket ref\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#implements","title":"Implements","text":"<ul> <li>Packet ref</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BasePacket/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create(\ndata': Array[U8 val] val,\nsource: String val = \"\")\n: BasePacket ref^\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters","title":"Parameters","text":"<ul> <li>data': Array[U8 val] val</li> <li>source: String val = \"\"</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns","title":"Returns","text":"<ul> <li>BasePacket ref^</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BasePacket/#isvalid","title":"isValid","text":"<p>[Source]</p> <p>Returns true if the packet has been validated</p> <pre><code>fun box isValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isnotvalid","title":"isNotValid","text":"<p>[Source]</p> <p>Sugar to remove some nots from the main code, sorry</p> <pre><code>fun box isNotValid()\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#controltype","title":"controlType","text":"<p>[Source]</p> <p>Returns the packetType which should only be None if isValid() returns false</p> <pre><code>fun box controlType()\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_3","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#controlbyte","title":"controlByte","text":"<p>[Source]</p> <p>Returns the control byte which has been checked for a valid type code</p> <pre><code>fun box controlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_4","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isa","title":"isA","text":"<p>[Source]</p> <p>Returns true if the top four bits in the byte passed as value match the ControlArrayVal passed as controlType or false otherwise.</p> <pre><code>fun box isA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_1","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_5","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#isnota","title":"isNotA","text":"<p>[Source]</p> <p>Embarrasingly unecccessary sugar to keep the main code clean </p> <pre><code>fun box isNotA(\ncontrol: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_2","title":"Parameters","text":"<ul> <li>control: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_6","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#remaininglength","title":"remainingLength","text":"<p>[Source]</p> <p>Returns the remaining length value of the packet (may be zero)</p> <pre><code>fun box remainingLength()\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_7","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#fixedheaderlength","title":"fixedHeaderLength","text":"<p>[Source]</p> <p>Control byte + remainingLength bytes</p> <pre><code>fun box fixedHeaderLength()\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_8","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#data","title":"data","text":"<p>[Source]</p> <p>Returns the raw data used to create this BasePacket as an Array[U8] val</p> <pre><code>fun box data()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_9","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-BasePacket/#_getcontrolbyte","title":"_getControlByte","text":"<p>[Source]</p> <p>Returns the control byte if we can read the first byte of the data and the top four bits are a valid control byte value. Returns None if we can't read the data or the first byte is not a valid control byte which is defined in the specification as [1..14] Note: We need to return the whole byte, not just the type because some control bytes have flags in the lower four bits</p> <pre><code>fun box _getControlByte()\n: (U8 val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#returns_10","title":"Returns","text":"<ul> <li>(U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#_decode","title":"_decode","text":"<p>[Source]</p> <p>Takes an 8 bit byte and decodes the Control Packet Type from the most significant four bits (matching on value to get a type)</p> <pre><code>fun box _decode(\nvalue: (U8 val | None val))\n: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | None val)\n</code></pre>"},{"location":"mqtt-utilities-BasePacket/#parameters_3","title":"Parameters","text":"<ul> <li>value: (U8 val | None val)</li> </ul>"},{"location":"mqtt-utilities-BasePacket/#returns_11","title":"Returns","text":"<ul> <li>(ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | None val)</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/","title":"BytesToU16","text":"<p>[Source]</p> <p>Converts an Array of two U8 bytes into a U16 packtId. Note that the spec defines a valid Id to be non-zero, so we can use zero as an error case</p> <pre><code>primitive val BytesToU16\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BytesToU16/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BytesToU16 val^\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#returns","title":"Returns","text":"<ul> <li>BytesToU16 val^</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BytesToU16/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nbytes: Array[U8 val] val)\n: U16 val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters","title":"Parameters","text":"<ul> <li>bytes: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_1","title":"Returns","text":"<ul> <li>U16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BytesToU16 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters_1","title":"Parameters","text":"<ul> <li>that: BytesToU16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BytesToU16 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToU16/#parameters_2","title":"Parameters","text":"<ul> <li>that: BytesToU16 val</li> </ul>"},{"location":"mqtt-utilities-BytesToU16/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/","title":"BytesToValue","text":"<p>[Source] <pre><code>primitive val BytesToValue\n</code></pre></p>"},{"location":"mqtt-utilities-BytesToValue/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-BytesToValue/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: BytesToValue val^\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#returns","title":"Returns","text":"<ul> <li>BytesToValue val^</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-BytesToValue/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes the leading bytes of an MQTT packet and returns the remaining length encoded in bytes 1 to n, where 0 &lt; n &lt; 4. If n &gt; 4, zero is returned as the packet cannot  meet the MQTT protocol standard. Note - This function takes the leading bytes including the control byte (Byte 0) that is not used in the BytesToValue calculation (hence index is defined as 1 below).</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: BytesToValue val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters_1","title":"Parameters","text":"<ul> <li>that: BytesToValue val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: BytesToValue val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-BytesToValue/#parameters_2","title":"Parameters","text":"<ul> <li>that: BytesToValue val</li> </ul>"},{"location":"mqtt-utilities-BytesToValue/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DateString/","title":"DateString","text":"<p>[Source] <pre><code>primitive val DateString\n</code></pre></p>"},{"location":"mqtt-utilities-DateString/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-DateString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DateString val^\n</code></pre>"},{"location":"mqtt-utilities-DateString/#returns","title":"Returns","text":"<ul> <li>DateString val^</li> </ul>"},{"location":"mqtt-utilities-DateString/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-DateString/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: String val\n</code></pre>"},{"location":"mqtt-utilities-DateString/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-DateString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DateString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DateString/#parameters","title":"Parameters","text":"<ul> <li>that: DateString val</li> </ul>"},{"location":"mqtt-utilities-DateString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DateString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DateString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DateString/#parameters_1","title":"Parameters","text":"<ul> <li>that: DateString val</li> </ul>"},{"location":"mqtt-utilities-DateString/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Dump/","title":"Dump","text":"<p>[Source] <pre><code>primitive val Dump\n</code></pre></p>"},{"location":"mqtt-utilities-Dump/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Dump/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Dump val^\n</code></pre>"},{"location":"mqtt-utilities-Dump/#returns","title":"Returns","text":"<ul> <li>Dump val^</li> </ul>"},{"location":"mqtt-utilities-Dump/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Dump/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-Dump/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Dump val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters_1","title":"Parameters","text":"<ul> <li>that: Dump val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Dump/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Dump val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Dump/#parameters_2","title":"Parameters","text":"<ul> <li>that: Dump val</li> </ul>"},{"location":"mqtt-utilities-Dump/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/","title":"DumpBin","text":"<p>[Source] <pre><code>primitive val DumpBin\n</code></pre></p>"},{"location":"mqtt-utilities-DumpBin/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-DumpBin/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: DumpBin val^\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#returns","title":"Returns","text":"<ul> <li>DumpBin val^</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-DumpBin/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nname: String val,\ndata: Array[U8 val] val)\n: None val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters","title":"Parameters","text":"<ul> <li>name: String val</li> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_1","title":"Returns","text":"<ul> <li>None val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: DumpBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters_1","title":"Parameters","text":"<ul> <li>that: DumpBin val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: DumpBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-DumpBin/#parameters_2","title":"Parameters","text":"<ul> <li>that: DumpBin val</li> </ul>"},{"location":"mqtt-utilities-DumpBin/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/","title":"FixedHeader","text":"<p>[Source]</p> <p>Makes a fixed header of between two and four bytes - present in all MQTT Control Packets byte 1 MQTT Control Packet type Flags specific to each MQTT Control Packet type byte 2 Remaining Length byte 1 (mandatory) [Optional Bytes]  byte 3 Remaining Length byte 2 (only if remaining length is &gt; 127) byte 4 Remaining Length byte 3 (only if remaining length is &gt; 16383) byte 5 Remaining Length byte 4 (only if remaining length is &gt; 2 097 151)  </p> <pre><code>class ref FixedHeader\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FixedHeader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new iso create()\n: FixedHeader iso^\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#returns","title":"Returns","text":"<ul> <li>FixedHeader iso^</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FixedHeader/#makeheader","title":"makeHeader","text":"<p>[Source]</p> <p>Make a control packet header for anything other than a publish message (which needs special flags)</p> <pre><code>fun ref makeHeader(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubComp val | \nControlSubAck val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val | ControlPubRel val | \nControlSubscribe val | ControlUnsubscribe val),\nlen: USize val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubComp val |      ControlSubAck val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val | ControlPubRel val |      ControlSubscribe val | ControlUnsubscribe val)</li> <li>len: USize val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#makepubheader","title":"makePubHeader","text":"<p>[Source]</p> <p>Make a control packet header for a publish message - setting the flags from the passed arguments</p> <pre><code>fun ref makePubHeader(\nlen: USize val,\nq: (Qos0 val | Qos1 val | Qos2 val) = reference,\ndup: Bool val = false,\nretain: Bool val = false)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_1","title":"Parameters","text":"<ul> <li>len: USize val</li> <li>q: (Qos0 val | Qos1 val | Qos2 val) = reference</li> <li>dup: Bool val = false</li> <li>retain: Bool val = false</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_2","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-FixedHeader/#_make","title":"_make","text":"<p>[Source]</p> <p>Make a fixed header of between two and five bytes. len is the length of the remaining packet. If len is &lt; 128 the length of the returned  fixed header in the array will be two bytes</p> <pre><code>fun ref _make(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val),\nlen: USize val,\nflags: U8 val = 0)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_2","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> <li>len: USize val</li> <li>flags: U8 val = 0</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_3","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_controlpacket","title":"_controlPacket","text":"<p>[Source]</p> <p>Returns the code of the requested packetType with the four flags set by the lower nibble of flags</p> <pre><code>fun ref _controlPacket(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val),\nflags: U8 val = 0)\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_3","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> <li>flags: U8 val = 0</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_4","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_packettype","title":"_packetType","text":"<p>[Source]</p> <p>returns the code of the requested packetType with the lower four bits set to zero</p> <pre><code>fun box _packetType(\npacketType: (ControlConnect val | ControlConnAck val | ControlPublish val | \nControlPubAck val | ControlPubRec val | ControlPubRel val | \nControlPubComp val | ControlSubscribe val | ControlSubAck val | \nControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val | \nControlPingResp val | ControlDisconnect val))\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_4","title":"Parameters","text":"<ul> <li>packetType: (ControlConnect val | ControlConnAck val | ControlPublish val |      ControlPubAck val | ControlPubRec val | ControlPubRel val |      ControlPubComp val | ControlSubscribe val | ControlSubAck val |      ControlUnsubscribe val | ControlUnsubAck val | ControlPingReq val |      ControlPingResp val | ControlDisconnect val)</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_5","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#_publishflags","title":"_publishFlags","text":"<p>[Source]</p> <p>returns a control packet of the requested type with the four flags set by the lower nibble of flags</p> <pre><code>fun ref _publishFlags(\nq: (Qos0 val | Qos1 val | Qos2 val),\ndup: Bool val,\nretain: Bool val)\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeader/#parameters_5","title":"Parameters","text":"<ul> <li>q: (Qos0 val | Qos1 val | Qos2 val)</li> <li>dup: Bool val</li> <li>retain: Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeader/#returns_6","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/","title":"FixedHeaderLength","text":"<p>[Source] <pre><code>primitive val FixedHeaderLength\n</code></pre></p>"},{"location":"mqtt-utilities-FixedHeaderLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FixedHeaderLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FixedHeaderLength val^\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns","title":"Returns","text":"<ul> <li>FixedHeaderLength val^</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FixedHeaderLength/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FixedHeaderLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: FixedHeaderLength val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FixedHeaderLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FixedHeaderLength/#parameters_2","title":"Parameters","text":"<ul> <li>that: FixedHeaderLength val</li> </ul>"},{"location":"mqtt-utilities-FixedHeaderLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/","title":"FmtBin","text":"<p>[Source] <pre><code>primitive val FmtBin\n</code></pre></p>"},{"location":"mqtt-utilities-FmtBin/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtBin/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtBin val^\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#returns","title":"Returns","text":"<ul> <li>FmtBin val^</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtBin/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters","title":"Parameters","text":"<ul> <li>v: U8 val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtBin val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtBin val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtBin/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtBin val</li> </ul>"},{"location":"mqtt-utilities-FmtBin/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/","title":"FmtDec","text":"<p>[Source] <pre><code>primitive val FmtDec\n</code></pre></p>"},{"location":"mqtt-utilities-FmtDec/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtDec/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtDec val^\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#returns","title":"Returns","text":"<ul> <li>FmtDec val^</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtDec/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: I32 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters","title":"Parameters","text":"<ul> <li>v: I32 val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtDec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtDec val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtDec val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtDec/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtDec val</li> </ul>"},{"location":"mqtt-utilities-FmtDec/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/","title":"FmtHex","text":"<p>[Source] <pre><code>primitive val FmtHex\n</code></pre></p>"},{"location":"mqtt-utilities-FmtHex/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-FmtHex/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: FmtHex val^\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#returns","title":"Returns","text":"<ul> <li>FmtHex val^</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-FmtHex/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nv: U8 val)\n: String val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters","title":"Parameters","text":"<ul> <li>v: U8 val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_1","title":"Returns","text":"<ul> <li>String val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: FmtHex val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters_1","title":"Parameters","text":"<ul> <li>that: FmtHex val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: FmtHex val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-FmtHex/#parameters_2","title":"Parameters","text":"<ul> <li>that: FmtHex val</li> </ul>"},{"location":"mqtt-utilities-FmtHex/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/","title":"GoodPkt1","text":"<p>[Source] <pre><code>primitive val GoodPkt1\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt1/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt1/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt1 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#returns","title":"Returns","text":"<ul> <li>GoodPkt1 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt1/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 1: $SYS/broker/subscriptions/count = 0 </p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt1 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt1 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt1/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt1 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt1/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/","title":"GoodPkt2","text":"<p>[Source] <pre><code>primitive val GoodPkt2\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt2/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt2/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt2 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#returns","title":"Returns","text":"<ul> <li>GoodPkt2 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt2/#apply","title":"apply","text":"<p>[Source]</p> <p>Packet 2 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt2 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt2 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt2/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt2 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt2/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/","title":"GoodPkt3","text":"<p>[Source] <pre><code>primitive val GoodPkt3\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt3/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt3/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt3 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#returns","title":"Returns","text":"<ul> <li>GoodPkt3 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt3/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 2: $SYS/broker/load/publish/sent/1min = 12.63</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt3 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt3 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt3 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt3/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt3 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt3/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/","title":"GoodPkt4","text":"<p>[Source] <pre><code>primitive val GoodPkt4\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt4/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt4/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt4 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#returns","title":"Returns","text":"<ul> <li>GoodPkt4 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt4/#apply","title":"apply","text":"<p>[Source]</p> <p>Packet 3 QoS: Requested QoS 1 Approved QoS 1</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt4 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt4 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt4 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt4/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt4 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt4/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/","title":"GoodPkt5","text":"<p>[Source] <pre><code>primitive val GoodPkt5\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt5/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt5/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt5 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#returns","title":"Returns","text":"<ul> <li>GoodPkt5 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt5/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 3: $SYS/broker/load/bytes/received/1min = 502.63  controlbyte = 51 fixed header length = 2 fixed header = 51 ; 46 variable header = 0;36 then 36 chars  remaining length = 46</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt5 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt5 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt5 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt5/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt5 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt5/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/","title":"GoodPkt6","text":"<p>[Source] <pre><code>primitive val GoodPkt6\n</code></pre></p>"},{"location":"mqtt-utilities-GoodPkt6/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-GoodPkt6/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: GoodPkt6 val^\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#returns","title":"Returns","text":"<ul> <li>GoodPkt6 val^</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-GoodPkt6/#apply","title":"apply","text":"<p>[Source]</p> <p>Publish id 4: $SYS/broker/load/publish/dropped/1min = 0.00</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: GoodPkt6 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#parameters","title":"Parameters","text":"<ul> <li>that: GoodPkt6 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: GoodPkt6 val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-GoodPkt6/#parameters_1","title":"Parameters","text":"<ul> <li>that: GoodPkt6 val</li> </ul>"},{"location":"mqtt-utilities-GoodPkt6/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/","title":"IsFixedHeader","text":"<p>[Source] <pre><code>primitive val IsFixedHeader\n</code></pre></p>"},{"location":"mqtt-utilities-IsFixedHeader/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-IsFixedHeader/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: IsFixedHeader val^\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#returns","title":"Returns","text":"<ul> <li>IsFixedHeader val^</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-IsFixedHeader/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\ndata: Array[U8 val] val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_1","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: IsFixedHeader val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters_1","title":"Parameters","text":"<ul> <li>that: IsFixedHeader val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: IsFixedHeader val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-IsFixedHeader/#parameters_2","title":"Parameters","text":"<ul> <li>that: IsFixedHeader val</li> </ul>"},{"location":"mqtt-utilities-IsFixedHeader/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-MqString/","title":"MqString","text":"<p>[Source]</p> <p>Converts a standard string into a sequence of bytes representing the format used for  strings in the MQTT spec. This has a two byte length field followed by the bytes of  the charaacters. The MQTT version of an empty string is two bytes of zeros</p> <pre><code>primitive val MqString\n</code></pre>"},{"location":"mqtt-utilities-MqString/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-MqString/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: MqString val^\n</code></pre>"},{"location":"mqtt-utilities-MqString/#returns","title":"Returns","text":"<ul> <li>MqString val^</li> </ul>"},{"location":"mqtt-utilities-MqString/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-MqString/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nstg: String val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters","title":"Parameters","text":"<ul> <li>stg: String val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-MqString/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: MqString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters_1","title":"Parameters","text":"<ul> <li>that: MqString val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-MqString/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: MqString val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-MqString/#parameters_2","title":"Parameters","text":"<ul> <li>that: MqString val</li> </ul>"},{"location":"mqtt-utilities-MqString/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-MqTime/","title":"MqTime","text":"<p>[Source] <pre><code>class ref MqTime\n</code></pre></p>"},{"location":"mqtt-utilities-MqTime/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-MqTime/#create","title":"create","text":"<p>[Source]</p> <pre><code>new ref create()\n: MqTime ref^\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns","title":"Returns","text":"<ul> <li>MqTime ref^</li> </ul>"},{"location":"mqtt-utilities-MqTime/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-MqTime/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply()\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#elapsed","title":"elapsed","text":"<p>[Source]</p> <pre><code>fun ref elapsed()\n: I64 val\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#returns_2","title":"Returns","text":"<ul> <li>I64 val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#private-functions","title":"Private Functions","text":""},{"location":"mqtt-utilities-MqTime/#_tons","title":"_toNs","text":"<p>[Source]</p> <pre><code>fun ref _toNs(\ns: I64 val,\nns: I64 val)\n: U128 val\n</code></pre>"},{"location":"mqtt-utilities-MqTime/#parameters","title":"Parameters","text":"<ul> <li>s: I64 val</li> <li>ns: I64 val</li> </ul>"},{"location":"mqtt-utilities-MqTime/#returns_3","title":"Returns","text":"<ul> <li>U128 val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/","title":"RlByteCount","text":"<p>[Source] <pre><code>primitive val RlByteCount\n</code></pre></p>"},{"location":"mqtt-utilities-RlByteCount/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-RlByteCount/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: RlByteCount val^\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#returns","title":"Returns","text":"<ul> <li>RlByteCount val^</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-RlByteCount/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the number of bytes in the remaining length field of the fixed header  </p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: RlByteCount val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters_1","title":"Parameters","text":"<ul> <li>that: RlByteCount val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: RlByteCount val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-RlByteCount/#parameters_2","title":"Parameters","text":"<ul> <li>that: RlByteCount val</li> </ul>"},{"location":"mqtt-utilities-RlByteCount/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Split/","title":"Split","text":"<p>[Source]</p> <p>Split the provided U16 into two U8 bytes `</p> <pre><code>primitive val Split\n</code></pre>"},{"location":"mqtt-utilities-Split/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-Split/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: Split val^\n</code></pre>"},{"location":"mqtt-utilities-Split/#returns","title":"Returns","text":"<ul> <li>Split val^</li> </ul>"},{"location":"mqtt-utilities-Split/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-Split/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nvalue: U16 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_1","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"mqtt-utilities-Split/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: Split val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters_1","title":"Parameters","text":"<ul> <li>that: Split val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-Split/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: Split val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-Split/#parameters_2","title":"Parameters","text":"<ul> <li>that: Split val</li> </ul>"},{"location":"mqtt-utilities-Split/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQos/","title":"ToQos","text":"<p>[Source] <pre><code>primitive val ToQos\n</code></pre></p>"},{"location":"mqtt-utilities-ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ToQos val^\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#returns","title":"Returns","text":"<ul> <li>ToQos val^</li> </ul>"},{"location":"mqtt-utilities-ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Takes a string and matches it against the qos patterns. Anything that doesn't match returns QOS0 ( = 0)</p> <pre><code>fun box apply(\nstg: String val)\n: (Qos0 val | Qos1 val | Qos2 val)\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters","title":"Parameters","text":"<ul> <li>stg: String val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-utilities-ToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: ToQos val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: ToQos val</li> </ul>"},{"location":"mqtt-utilities-ToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/","title":"ToQosBits","text":"<p>[Source] <pre><code>primitive val ToQosBits\n</code></pre></p>"},{"location":"mqtt-utilities-ToQosBits/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ToQosBits/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ToQosBits val^\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#returns","title":"Returns","text":"<ul> <li>ToQosBits val^</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ToQosBits/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns the bit pattern for the passed Qos</p> <pre><code>fun box apply(\nq: (Qos0 val | Qos1 val | Qos2 val))\n: U8 val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters","title":"Parameters","text":"<ul> <li>q: (Qos0 val | Qos1 val | Qos2 val)</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_1","title":"Returns","text":"<ul> <li>U8 val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ToQosBits val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters_1","title":"Parameters","text":"<ul> <li>that: ToQosBits val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ToQosBits val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ToQosBits/#parameters_2","title":"Parameters","text":"<ul> <li>that: ToQosBits val</li> </ul>"},{"location":"mqtt-utilities-ToQosBits/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/","title":"TotalLength","text":"<p>[Source] <pre><code>primitive val TotalLength\n</code></pre></p>"},{"location":"mqtt-utilities-TotalLength/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-TotalLength/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: TotalLength val^\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#returns","title":"Returns","text":"<ul> <li>TotalLength val^</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-TotalLength/#apply","title":"apply","text":"<p>[Source]</p> <p>Convenience function that calculates the total length of a packet by summing: 1.  The fixed header length 2.  The value of the remaining length field TODO - Optimise so we don't scan twice</p> <pre><code>fun box apply(\ndata: Array[U8 val] box)\n: USize val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters","title":"Parameters","text":"<ul> <li>data: Array[U8 val] box</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_1","title":"Returns","text":"<ul> <li>USize val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: TotalLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters_1","title":"Parameters","text":"<ul> <li>that: TotalLength val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: TotalLength val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-TotalLength/#parameters_2","title":"Parameters","text":"<ul> <li>that: TotalLength val</li> </ul>"},{"location":"mqtt-utilities-TotalLength/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/","title":"U16ToBytes","text":"<p>[Source]</p> <p>Convert a U16 into two U8 bytes where the first byte is the msb of the original U16.  Just a pass-through for Split at present. TODO - Endian for different platforms?</p> <pre><code>primitive val U16ToBytes\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-U16ToBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: U16ToBytes val^\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#returns","title":"Returns","text":"<ul> <li>U16ToBytes val^</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-U16ToBytes/#apply","title":"apply","text":"<p>[Source]</p> <pre><code>fun box apply(\nvalue: U16 val)\n: (U8 val , U8 val)\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters","title":"Parameters","text":"<ul> <li>value: U16 val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_1","title":"Returns","text":"<ul> <li>(U8 val , U8 val)</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: U16ToBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters_1","title":"Parameters","text":"<ul> <li>that: U16ToBytes val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: U16ToBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U16ToBytes/#parameters_2","title":"Parameters","text":"<ul> <li>that: U16ToBytes val</li> </ul>"},{"location":"mqtt-utilities-U16ToBytes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/","title":"U8ToQos","text":"<p>[Source] <pre><code>primitive val U8ToQos\n</code></pre></p>"},{"location":"mqtt-utilities-U8ToQos/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-U8ToQos/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: U8ToQos val^\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#returns","title":"Returns","text":"<ul> <li>U8ToQos val^</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-U8ToQos/#apply","title":"apply","text":"<p>[Source]</p> <p>Take a U8 and returns a Qos type from QoS0 to QoS2. Returns None for any other value</p> <pre><code>fun box apply(\nvalue: U8 val)\n: (Qos0 val | Qos1 val | Qos2 val | \nNone val)\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters","title":"Parameters","text":"<ul> <li>value: U8 val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_1","title":"Returns","text":"<ul> <li>(Qos0 val | Qos1 val | Qos2 val |      None val)</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: U8ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters_1","title":"Parameters","text":"<ul> <li>that: U8ToQos val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: U8ToQos val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-U8ToQos/#parameters_2","title":"Parameters","text":"<ul> <li>that: U8ToQos val</li> </ul>"},{"location":"mqtt-utilities-U8ToQos/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/","title":"ValueToRLBytes","text":"<p>[Source] <pre><code>primitive val ValueToRLBytes\n</code></pre></p>"},{"location":"mqtt-utilities-ValueToRLBytes/#constructors","title":"Constructors","text":""},{"location":"mqtt-utilities-ValueToRLBytes/#create","title":"create","text":"<p>[Source]</p> <pre><code>new val create()\n: ValueToRLBytes val^\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns","title":"Returns","text":"<ul> <li>ValueToRLBytes val^</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#public-functions","title":"Public Functions","text":""},{"location":"mqtt-utilities-ValueToRLBytes/#apply","title":"apply","text":"<p>[Source]</p> <p>Returns an array of bytes containing the passed length value encoded as required for the remaining length field in the MQTT fixed header</p> <pre><code>fun box apply(\nlength: USize val)\n: Array[U8 val] val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters","title":"Parameters","text":"<ul> <li>length: USize val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_1","title":"Returns","text":"<ul> <li>Array[U8 val] val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#eq","title":"eq","text":"<p>[Source]</p> <pre><code>fun box eq(\nthat: ValueToRLBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters_1","title":"Parameters","text":"<ul> <li>that: ValueToRLBytes val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_2","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#ne","title":"ne","text":"<p>[Source]</p> <pre><code>fun box ne(\nthat: ValueToRLBytes val)\n: Bool val\n</code></pre>"},{"location":"mqtt-utilities-ValueToRLBytes/#parameters_2","title":"Parameters","text":"<ul> <li>that: ValueToRLBytes val</li> </ul>"},{"location":"mqtt-utilities-ValueToRLBytes/#returns_3","title":"Returns","text":"<ul> <li>Bool val</li> </ul>"}]}